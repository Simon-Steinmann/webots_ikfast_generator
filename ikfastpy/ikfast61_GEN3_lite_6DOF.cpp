/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2020-09-11 18:31:22.522681
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47;
x0=IKcos(j[0]);
x1=IKcos(j[1]);
x2=IKcos(j[2]);
x3=IKsin(j[1]);
x4=IKsin(j[2]);
x5=IKcos(j[3]);
x6=IKsin(j[0]);
x7=IKsin(j[3]);
x8=IKcos(j[5]);
x9=IKsin(j[5]);
x10=IKcos(j[4]);
x11=IKsin(j[4]);
x12=((0.057)*x6);
x13=((1.0)*x7);
x14=((0.105)*x1);
x15=((0.105)*x7);
x16=((0.057)*x0);
x17=((0.245)*x6);
x18=((1.0)*x6);
x19=((0.28)*x3);
x20=((1.0)*x1);
x21=((1.0)*x0);
x22=((1.0)*x5);
x23=((0.105)*x6);
x24=((1.0)*x3);
x25=(x1*x2);
x26=(x0*x4);
x27=(x2*x3);
x28=(x0*x5);
x29=(x4*x6);
x30=(x3*x4);
x31=(x1*x4);
x32=(x11*x7);
x33=(x13*x6);
x34=(x18*x5);
x35=(x20*x4);
x36=((((-1.0)*x35))+x27);
x37=((((-1.0)*x2*x24))+x35);
x38=(((x2*x20))+((x24*x4)));
x39=(((x0*x25))+((x26*x3)));
x40=(((x29*x3))+((x25*x6)));
x41=((((-1.0)*x21*x27))+((x20*x26)));
x42=(x18*(((((-1.0)*x27))+x31)));
x43=((((-1.0)*x0*x2*x20))+(((-1.0)*x21*x30)));
x44=(x18*(((((-1.0)*x30))+(((-1.0)*x25)))));
x45=(((x11*x38))+((x10*x37*x7)));
x46=(((x10*(((((-1.0)*x34))+((x43*x7))))))+((x11*x41)));
x47=(((x11*x42))+((x10*((x28+((x44*x7)))))));
eerot[0]=(((x8*(((((-1.0)*x33))+((x39*x5))))))+((x46*x9)));
eerot[1]=(((x9*(((((-1.0)*x22*x39))+x33))))+((x46*x8)));
eerot[2]=(((x10*x41))+((x11*((x34+(((-1.0)*x13*x43)))))));
IkReal x48=(x0*x27);
eetrans[0]=((((-1.0)*x12*x7))+(((-1.0)*x0*x19))+((x11*(((((-1.0)*x15*x43))+((x23*x5))))))+(((-0.245)*x48))+(((0.01)*x6))+((x5*((((x16*x30))+((x16*x25))))))+((x10*((((x14*x26))+(((-0.105)*x48))))))+(((0.245)*x1*x26)));
eerot[3]=(((x8*((((x0*x7))+((x40*x5))))))+((x47*x9)));
eerot[4]=(((x9*(((((-1.0)*x0*x13))+(((-1.0)*x22*x40))))))+((x47*x8)));
eerot[5]=(((x11*(((((-1.0)*x21*x5))+(((-1.0)*x13*x44))))))+((x10*x42)));
IkReal x49=((1.0)*x27);
eetrans[1]=(((x5*((((x12*x30))+((x12*x25))))))+((x11*(((((-1.0)*x15*x44))+(((-0.105)*x28))))))+(((-0.01)*x0))+(((-1.0)*x19*x6))+((x17*x31))+((x16*x7))+(((-1.0)*x17*x49))+((x10*(((((-1.0)*x23*x49))+((x14*x29)))))));
eerot[6]=(((x36*x5*x8))+((x45*x9)));
eerot[7]=(((x37*x5*x9))+((x45*x8)));
eerot[8]=(((x10*x38))+((x32*x36)));
eetrans[2]=((0.24325)+(((0.245)*x25))+(((0.245)*x30))+((x32*(((((0.105)*x27))+(((-1.0)*x14*x4))))))+((x5*(((((0.057)*x27))+(((-0.057)*x31))))))+((x10*(((((0.105)*x30))+((x14*x2))))))+(((0.28)*x1)));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r00;
new_r01=r01;
new_r02=r02;
new_px=(px+(((-0.105)*r02)));
new_r10=r10;
new_r11=r11;
new_r12=r12;
new_py=(py+(((-0.105)*r12)));
new_r20=r20;
new_r21=r21;
new_r22=r22;
new_pz=((-0.24325)+(((-0.105)*r22))+pz);
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x50=((1.0)*px);
IkReal x51=((1.0)*pz);
IkReal x52=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x52))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x51)));
rxp0_2=((((-1.0)*r10*x50))+((py*r00)));
rxp1_0=((((-1.0)*r21*x52))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x51)));
rxp1_2=((((-1.0)*r11*x50))+((py*r01)));
rxp2_0=(((pz*r12))+(((-1.0)*r22*x52)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x51)));
rxp2_2=((((-1.0)*r12*x50))+((py*r02)));
IkReal op[72], zeror[48];
int numroots;;
IkReal x53=((49.0)*npz);
IkReal x54=((100.0)*pp);
IkReal x55=((11.4)*npx);
IkReal x56=((0.01)*r02);
IkReal x57=((0.057)*r21);
IkReal x58=((1.0)*rxp2_2);
IkReal x59=((0.114)*r20);
IkReal x60=((98.0)*npy);
IkReal x61=((196.0)*npx);
IkReal x62=((2.0)*rxp1_2);
IkReal x63=((0.02)*r01);
IkReal x64=((0.114)*r22);
IkReal x65=((0.04)*r00);
IkReal x66=((4.0)*rxp0_2);
IkReal x67=((0.02)*r11);
IkReal x68=((0.01)*r12);
IkReal x69=((-22.8)*npy);
IkReal x70=((-0.01)*r12);
IkReal x71=((-98.0)*npy);
IkReal x72=((-0.02)*r11);
IkReal x73=((-0.04)*r10);
IkReal x74=((-0.114)*r20);
IkReal x75=(rxp2_2+x57);
IkReal x76=(x57+x56);
IkReal x77=(x55+x53);
IkReal x78=(x58+x56);
IkReal x79=(x62+x63);
IkReal x80=((1.5226)+x77+(((-1.0)*x54)));
IkReal x81=((1.5226)+x53+(((-1.0)*x54))+(((-1.0)*x55)));
IkReal x82=((1.5226)+x55+(((-1.0)*x54))+(((-1.0)*x53)));
IkReal x83=((1.5226)+(((-1.0)*x77))+(((-1.0)*x54)));
op[0]=x80;
op[1]=x80;
op[2]=x69;
op[3]=x69;
op[4]=x81;
op[5]=x81;
op[6]=((((-1.0)*x78))+x57);
op[7]=x70;
op[8]=x59;
op[9]=0;
op[10]=((((-1.0)*x76))+(((-1.0)*x58)));
op[11]=x70;
op[12]=x70;
op[13]=(x76+(((-1.0)*x58)));
op[14]=0;
op[15]=x59;
op[16]=x70;
op[17]=(x56+(((-1.0)*x58))+(((-1.0)*x57)));
op[18]=0;
op[19]=x80;
op[20]=0;
op[21]=x69;
op[22]=0;
op[23]=x81;
op[24]=x60;
op[25]=x60;
op[26]=x61;
op[27]=x61;
op[28]=x71;
op[29]=x71;
op[30]=((((-1.0)*x79))+(((-1.0)*x64)));
op[31]=x72;
op[32]=((((-1.0)*x66))+(((-1.0)*x65)));
op[33]=x73;
op[34]=(x79+(((-1.0)*x64)));
op[35]=x67;
op[36]=x72;
op[37]=(x63+(((-1.0)*x62))+(((-1.0)*x64)));
op[38]=x73;
op[39]=(x65+(((-1.0)*x66)));
op[40]=x67;
op[41]=(x62+(((-1.0)*x63))+(((-1.0)*x64)));
op[42]=0;
op[43]=x60;
op[44]=0;
op[45]=x61;
op[46]=0;
op[47]=x71;
op[48]=x82;
op[49]=x82;
op[50]=x69;
op[51]=x69;
op[52]=x83;
op[53]=x83;
op[54]=(rxp2_2+x56+(((-1.0)*x57)));
op[55]=x68;
op[56]=x74;
op[57]=0;
op[58]=(x75+x56);
op[59]=x68;
op[60]=x68;
op[61]=((((-1.0)*x76))+rxp2_2);
op[62]=0;
op[63]=x74;
op[64]=x68;
op[65]=(x75+(((-1.0)*x56)));
op[66]=0;
op[67]=x82;
op[68]=0;
op[69]=x69;
op[70]=0;
op[71]=x83;
solvedialyticpoly8qep(op,zeror,numroots);
IkReal j4array[16], cj4array[16], sj4array[16], j5array[16], cj5array[16], sj5array[16], j0array[16], cj0array[16], sj0array[16];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ij4 += 3)
{
IkReal htj4 = zeror[ij4+0], htj5 = zeror[ij4+1], htj0 = zeror[ij4+2];
if(isnan(htj4)||isnan(htj5)||isnan(htj0)){
continue;
}
j4array[numsolutions]=((2.0)*(atan(htj4)));
j5array[numsolutions]=((2.0)*(atan(htj5)));
j0array[numsolutions]=((2.0)*(atan(htj0)));
if(isinf(htj4)){
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
}
else{
IkReal x84=htj4*htj4;
CheckValue<IkReal> x85=IKPowWithIntegerCheck(((1.0)+x84),-1);
if(!x85.valid){
continue;
}
cj4array[numsolutions]=((x85.value)*(((1.0)+(((-1.0)*x84)))));
CheckValue<IkReal> x86=IKPowWithIntegerCheck(((1.0)+(htj4*htj4)),-1);
if(!x86.valid){
continue;
}
sj4array[numsolutions]=((2.0)*htj4*(x86.value));
}
if(isinf(htj5)){
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
}
else{
IkReal x87=htj5*htj5;
CheckValue<IkReal> x88=IKPowWithIntegerCheck(((1.0)+x87),-1);
if(!x88.valid){
continue;
}
cj5array[numsolutions]=((x88.value)*(((1.0)+(((-1.0)*x87)))));
CheckValue<IkReal> x89=IKPowWithIntegerCheck(((1.0)+(htj5*htj5)),-1);
if(!x89.valid){
continue;
}
sj5array[numsolutions]=((2.0)*htj5*(x89.value));
}
if(isinf(htj0)){
cj0array[numsolutions] = IKcos(j0array[numsolutions]);
sj0array[numsolutions] = IKsin(j0array[numsolutions]);
}
else{
IkReal x90=htj0*htj0;
CheckValue<IkReal> x91=IKPowWithIntegerCheck(((1.0)+x90),-1);
if(!x91.valid){
continue;
}
cj0array[numsolutions]=((x91.value)*(((1.0)+(((-1.0)*x90)))));
CheckValue<IkReal> x92=IKPowWithIntegerCheck(((1.0)+(htj0*htj0)),-1);
if(!x92.valid){
continue;
}
sj0array[numsolutions]=((2.0)*htj0*(x92.value));
}
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
if( j0array[numsolutions] > IKPI )
{
    j0array[numsolutions]-=IK2PI;
}
else if( j0array[numsolutions] < -IKPI )
{
    j0array[numsolutions]+=IK2PI;
}
numsolutions++;
}
bool j4valid[16]={true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true};
_nj4 = 16;
_nj5 = 1;
_nj0 = 1;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
    {
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
_ij5[0] = 0; _ij5[1] = -1;
_ij0[0] = 0; _ij0[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( !j4valid[iij4] ) { continue; }
if( IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(cj5array[ij4]-cj5array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij4]-sj5array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(cj0array[ij4]-cj0array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij4]-sj0array[iij4]) < IKFAST_SOLUTION_THRESH &&  1 )
{
    j4valid[iij4]=false; _ij4[1] = iij4; _ij5[1] = 0; _ij0[1] = 0;  break; 
}
}
    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

    j5 = j5array[ij4]; cj5 = cj5array[ij4]; sj5 = sj5array[ij4];

    j0 = j0array[ij4]; cj0 = cj0array[ij4]; sj0 = sj0array[ij4];

innerfn(solutions);
    }
}
return solutions.GetNumSolutions()>0;
}
inline void innerfn(IkSolutionListBase<IkReal>& solutions) {
for(int fniter = 0; fniter < 1; ++fniter) {
{
IkReal j3eval[3];
IkReal x93=((1.0)*sj5);
IkReal x94=(cj0*r21);
IkReal x95=((1.0)*cj5);
IkReal x96=(cj0*r20);
IkReal x97=((((-1.0)*r00*sj4*x93))+(((-1.0)*cj4*r02))+(((-1.0)*r01*sj4*x95)));
j3eval[0]=x97;
j3eval[1]=IKsign(x97);
j3eval[2]=((IKabs((((cj5*x96))+(((-1.0)*x93*x94)))))+(IKabs(((((-1.0)*cj4*x93*x96))+((cj0*r22*sj4))+(((-1.0)*cj4*x94*x95))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
IkReal x98=(r20*sj0);
IkReal x99=((1.0)*sj5);
IkReal x100=(r21*sj0);
IkReal x101=((1.0)*cj5);
IkReal x102=((((-1.0)*r11*sj4*x101))+(((-1.0)*r10*sj4*x99))+(((-1.0)*cj4*r12)));
j3eval[0]=x102;
j3eval[1]=((IKabs((((r22*sj0*sj4))+(((-1.0)*cj4*x100*x101))+(((-1.0)*cj4*x98*x99)))))+(IKabs((((cj5*x98))+(((-1.0)*x100*x99))))));
j3eval[2]=IKsign(x102);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[2];
IkReal x103=(((cj4*r22))+((cj5*r21*sj4))+((r20*sj4*sj5)));
j3eval[0]=x103;
j3eval[1]=IKsign(x103);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x104=((1.0)*sj5);
IkReal x105=(((cj4*r22))+((cj5*r21*sj4))+((r20*sj4*sj5)));
j3eval[0]=x105;
j3eval[1]=IKsign(x105);
j3eval[2]=((IKabs(((((-1.0)*cj4*r00*x104))+(((-1.0)*cj4*cj5*r01))+((r02*sj4)))))+(IKabs(((((-1.0)*r01*x104))+((cj5*r00))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x106=((1.0)*sj5);
IkReal x107=((1.0)*cj5);
IkReal x108=((((-1.0)*cj4*r02))+(((-1.0)*r01*sj4*x107))+(((-1.0)*r00*sj4*x106)));
j3eval[0]=x108;
j3eval[1]=IKsign(x108);
j3eval[2]=((IKabs((((cj5*r20))+(((-1.0)*r21*x106)))))+(IKabs(((((-1.0)*cj4*r21*x107))+((r22*sj4))+(((-1.0)*cj4*r20*x106))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x109=cj4*cj4;
IkReal x110=cj5*cj5;
IkReal x111=r10*r10;
IkReal x112=r11*r11;
IkReal x113=r12*r12;
IkReal x114=(cj5*r10);
IkReal x115=((2.0)*sj5);
IkReal x116=(cj5*r11);
IkReal x117=((1.0)*cj4);
IkReal x118=((1.0)*x109);
IkReal x119=(cj4*r12*sj4);
IkReal x120=(x110*x112);
IkReal x121=(x110*x111);
IkReal x122=((((-1.0)*x118*x120))+(((-1.0)*x111*x118))+(((2.0)*x116*x119))+((r11*x114*x115))+((x109*x113))+x120+((x109*x121))+(((-1.0)*r11*x109*x114*x115))+((r10*x115*x119))+(((-1.0)*x121))+(((-1.0)*x113))+(((-1.0)*x112)));
j3eval[0]=x122;
j3eval[1]=IKsign(x122);
j3eval[2]=((IKabs((((r11*sj5))+(((-1.0)*x114)))))+(IKabs(((((-1.0)*x116*x117))+((r12*sj4))+(((-1.0)*r10*sj5*x117))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j1, j2, j3]

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x123=cj4*cj4;
IkReal x124=cj5*cj5;
IkReal x125=r10*r10;
IkReal x126=r11*r11;
IkReal x127=r12*r12;
IkReal x128=(cj5*r10);
IkReal x129=(cj5*r11);
IkReal x130=(r10*sj5);
IkReal x131=((1.0)*cj4);
IkReal x132=((1.0)*x123);
IkReal x133=((2.0)*r11*sj5);
IkReal x134=(x124*x126);
IkReal x135=((2.0)*cj4*r12*sj4);
IkReal x136=(x124*x125);
CheckValue<IkReal> x137 = IKatan2WithCheck(IkReal((((r11*sj5))+(((-1.0)*x128)))),IkReal((((r12*sj4))+(((-1.0)*x129*x131))+(((-1.0)*x130*x131)))),IKFAST_ATAN2_MAGTHRESH);
if(!x137.valid){
continue;
}
CheckValue<IkReal> x138=IKPowWithIntegerCheck(IKsign((((x129*x135))+x134+((x123*x136))+(((-1.0)*x123*x128*x133))+(((-1.0)*x125*x132))+((x123*x127))+(((-1.0)*x132*x134))+((x130*x135))+(((-1.0)*x136))+((x128*x133))+(((-1.0)*x127))+(((-1.0)*x126)))),-1);
if(!x138.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x137.value)+(((1.5707963267949)*(x138.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x139=IKsin(j3);
IkReal x140=IKcos(j3);
IkReal x141=((1.0)*r00);
IkReal x142=((1.0)*cj4);
IkReal x143=((1.0)*r10);
IkReal x144=(cj5*x139);
IkReal x145=(sj4*x140);
IkReal x146=(sj5*x140);
IkReal x147=(sj5*x139);
IkReal x148=(cj5*x140*x142);
evalcond[0]=(((cj4*r10*x147))+(((-1.0)*r12*sj4*x139))+((cj4*r11*x144))+(((-1.0)*cj5*x140*x143))+((r11*x146)));
evalcond[1]=((((-1.0)*r20*x144))+(((-1.0)*r20*x142*x146))+((r21*x147))+(((-1.0)*r21*x148))+((r22*x145)));
evalcond[2]=(((r01*x147))+(((-1.0)*cj4*x141*x146))+(((-1.0)*r01*x148))+(((-1.0)*x141*x144))+((r02*x145)));
evalcond[3]=((1.0)+(((-1.0)*x143*x144))+(((-1.0)*r10*x142*x146))+(((-1.0)*r11*x148))+((r11*x147))+((r12*x145)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x149=((0.875)*cj4);
IkReal x150=((0.203571428571429)*cj5);
IkReal x151=((0.203571428571429)*sj5);
IkReal x152=((0.875)*sj4*sj5);
IkReal x153=((0.875)*cj5*sj4);
if( IKabs(((((-3.57142857142857)*px))+((r00*x150))+((r00*x152))+((r01*x153))+(((-1.0)*r01*x151))+((r02*x149)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r21*x151))+(((-1.0)*r20*x150))+(((-1.0)*r20*x152))+(((3.57142857142857)*pz))+(((-1.0)*r21*x153))+(((-1.0)*r22*x149)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-3.57142857142857)*px))+((r00*x150))+((r00*x152))+((r01*x153))+(((-1.0)*r01*x151))+((r02*x149))))+IKsqr((((r21*x151))+(((-1.0)*r20*x150))+(((-1.0)*r20*x152))+(((3.57142857142857)*pz))+(((-1.0)*r21*x153))+(((-1.0)*r22*x149))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-3.57142857142857)*px))+((r00*x150))+((r00*x152))+((r01*x153))+(((-1.0)*r01*x151))+((r02*x149))), (((r21*x151))+(((-1.0)*r20*x150))+(((-1.0)*r20*x152))+(((3.57142857142857)*pz))+(((-1.0)*r21*x153))+(((-1.0)*r22*x149))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x154=((1.0)*px);
IkReal x155=((0.245)*r20);
IkReal x156=(cj3*cj5);
IkReal x157=((0.245)*r00);
IkReal x158=(r01*sj5);
IkReal x159=((0.057)*cj5);
IkReal x160=((0.245)*cj4);
IkReal x161=((0.245)*cj3);
IkReal x162=(sj4*sj5);
IkReal x163=(cj5*r01);
IkReal x164=((0.245)*sj4);
IkReal x165=(r21*sj5);
IkReal x166=(cj5*r21);
IkReal x167=(r00*x159);
IkReal x168=((0.28)*(IKsin(j1)));
IkReal x169=((0.057)*x158);
IkReal x170=(r20*x159);
IkReal x171=((0.28)*(IKcos(j1)));
IkReal x172=((0.057)*x165);
IkReal x173=(cj4*sj3*sj5);
IkReal x174=(sj3*x164);
IkReal x175=(x171+x170);
IkReal x176=(x168+x169+x154);
evalcond[0]=((((-1.0)*r22*x160))+(((-1.0)*x175))+x172+pz+(((-1.0)*x155*x162))+(((-1.0)*x164*x166)));
evalcond[1]=(((x157*x162))+(((-1.0)*x176))+x167+((r02*x160))+((x163*x164)));
evalcond[2]=(((x161*x165))+(((-1.0)*r22*x174))+(((-1.0)*x176))+x167+((sj3*x160*x166))+((x155*x173))+(((-1.0)*x155*x156)));
evalcond[3]=((((-1.0)*sj3*x160*x163))+(((-1.0)*x158*x161))+(((-1.0)*x172))+x175+(((-1.0)*pz))+((x156*x157))+(((-1.0)*x157*x173))+((r02*x174)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x177=(cj4*r22);
IkReal x178=((1.0)*sj1);
IkReal x179=(cj5*sj4);
IkReal x180=(cj4*r02);
IkReal x181=(sj4*sj5);
if( IKabs((((cj1*r01*x179))+((sj1*x177))+((r20*sj1*x181))+((cj1*r00*x181))+((r21*sj1*x179))+((cj1*x180)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x178*x180))+((cj1*r20*x181))+((cj1*r21*x179))+(((-1.0)*r01*x178*x179))+((cj1*x177))+(((-1.0)*r00*x178*x181)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*r01*x179))+((sj1*x177))+((r20*sj1*x181))+((cj1*r00*x181))+((r21*sj1*x179))+((cj1*x180))))+IKsqr(((((-1.0)*x178*x180))+((cj1*r20*x181))+((cj1*r21*x179))+(((-1.0)*r01*x178*x179))+((cj1*x177))+(((-1.0)*r00*x178*x181))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*r01*x179))+((sj1*x177))+((r20*sj1*x181))+((cj1*r00*x181))+((r21*sj1*x179))+((cj1*x180))), ((((-1.0)*x178*x180))+((cj1*r20*x181))+((cj1*r21*x179))+(((-1.0)*r01*x178*x179))+((cj1*x177))+(((-1.0)*r00*x178*x181))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x182=IKsin(j2);
IkReal x183=IKcos(j2);
IkReal x184=((0.057)*cj5);
IkReal x185=(r21*sj5);
IkReal x186=((0.245)*sj1);
IkReal x187=(r01*sj5);
IkReal x188=((1.0)*r20);
IkReal x189=(sj4*sj5);
IkReal x190=((1.0)*cj4);
IkReal x191=(cj3*cj5);
IkReal x192=((1.0)*r00);
IkReal x193=(cj1*x183);
IkReal x194=(sj1*x182);
IkReal x195=(cj1*x182);
IkReal x196=(cj4*sj3*sj5);
IkReal x197=((1.0)*sj3*sj4);
IkReal x198=(sj1*x183);
IkReal x199=((1.0)*cj5*sj4);
IkReal x200=(cj4*cj5*sj3);
IkReal x201=(x193+x194);
evalcond[0]=((((-1.0)*x188*x189))+(((-1.0)*r22*x190))+x201+(((-1.0)*r21*x199)));
evalcond[1]=((((-1.0)*r01*x199))+(((-1.0)*x189*x192))+(((-1.0)*x198))+x195+(((-1.0)*r02*x190)));
evalcond[2]=((((0.28)*cj1))+((r20*x184))+(((-1.0)*pz))+(((-0.057)*x185))+((x182*x186))+(((0.245)*x193)));
evalcond[3]=((((-0.28)*sj1))+((r00*x184))+(((-1.0)*px))+(((-0.057)*x187))+(((-1.0)*x183*x186))+(((0.245)*x195)));
evalcond[4]=((((-1.0)*x191*x192))+((r00*x196))+(((-1.0)*r02*x197))+((r01*x200))+x201+((cj3*x187)));
evalcond[5]=((((-1.0)*x188*x191))+(((-1.0)*x195))+(((-1.0)*r22*x197))+x198+((r20*x196))+((cj3*x185))+((r21*x200)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x202=((1.0)*sj5);
IkReal x203=((1.0)*cj5);
CheckValue<IkReal> x204 = IKatan2WithCheck(IkReal(((((-1.0)*cj4*r20*x202))+((r22*sj4))+(((-1.0)*cj4*r21*x203)))),IkReal((((cj5*r20))+(((-1.0)*r21*x202)))),IKFAST_ATAN2_MAGTHRESH);
if(!x204.valid){
continue;
}
CheckValue<IkReal> x205=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj4*r02))+(((-1.0)*r01*sj4*x203))+(((-1.0)*r00*sj4*x202)))),-1);
if(!x205.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x204.value)+(((1.5707963267949)*(x205.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x206=IKsin(j3);
IkReal x207=IKcos(j3);
IkReal x208=((1.0)*r00);
IkReal x209=((1.0)*cj4);
IkReal x210=((1.0)*r10);
IkReal x211=(cj5*x206);
IkReal x212=(sj4*x207);
IkReal x213=(sj5*x207);
IkReal x214=(sj5*x206);
IkReal x215=(cj5*x207*x209);
evalcond[0]=((((-1.0)*cj5*x207*x210))+(((-1.0)*r12*sj4*x206))+((cj4*r10*x214))+((r11*x213))+((cj4*r11*x211)));
evalcond[1]=(((r21*x214))+(((-1.0)*r20*x211))+(((-1.0)*r20*x209*x213))+((r22*x212))+(((-1.0)*r21*x215)));
evalcond[2]=((((-1.0)*r01*x215))+((r02*x212))+((r01*x214))+(((-1.0)*x208*x211))+(((-1.0)*cj4*x208*x213)));
evalcond[3]=((1.0)+(((-1.0)*r11*x215))+((r12*x212))+(((-1.0)*r10*x209*x213))+(((-1.0)*x210*x211))+((r11*x214)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x216=((0.875)*cj4);
IkReal x217=((0.203571428571429)*cj5);
IkReal x218=((0.203571428571429)*sj5);
IkReal x219=((0.875)*sj4*sj5);
IkReal x220=((0.875)*cj5*sj4);
if( IKabs(((((-3.57142857142857)*px))+((r01*x220))+(((-1.0)*r01*x218))+((r02*x216))+((r00*x219))+((r00*x217)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r20*x219))+(((-1.0)*r20*x217))+((r21*x218))+(((-1.0)*r21*x220))+(((-1.0)*r22*x216))+(((3.57142857142857)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-3.57142857142857)*px))+((r01*x220))+(((-1.0)*r01*x218))+((r02*x216))+((r00*x219))+((r00*x217))))+IKsqr(((((-1.0)*r20*x219))+(((-1.0)*r20*x217))+((r21*x218))+(((-1.0)*r21*x220))+(((-1.0)*r22*x216))+(((3.57142857142857)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-3.57142857142857)*px))+((r01*x220))+(((-1.0)*r01*x218))+((r02*x216))+((r00*x219))+((r00*x217))), ((((-1.0)*r20*x219))+(((-1.0)*r20*x217))+((r21*x218))+(((-1.0)*r21*x220))+(((-1.0)*r22*x216))+(((3.57142857142857)*pz))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x221=((1.0)*px);
IkReal x222=((0.245)*r20);
IkReal x223=(cj3*cj5);
IkReal x224=((0.245)*r00);
IkReal x225=(r01*sj5);
IkReal x226=((0.057)*cj5);
IkReal x227=((0.245)*cj4);
IkReal x228=((0.245)*cj3);
IkReal x229=(sj4*sj5);
IkReal x230=(cj5*r01);
IkReal x231=((0.245)*sj4);
IkReal x232=(r21*sj5);
IkReal x233=(cj5*r21);
IkReal x234=(r00*x226);
IkReal x235=((0.28)*(IKsin(j1)));
IkReal x236=((0.057)*x225);
IkReal x237=(r20*x226);
IkReal x238=((0.28)*(IKcos(j1)));
IkReal x239=((0.057)*x232);
IkReal x240=(cj4*sj3*sj5);
IkReal x241=(sj3*x231);
IkReal x242=(x238+x237);
IkReal x243=(x221+x236+x235);
evalcond[0]=((((-1.0)*x222*x229))+x239+pz+(((-1.0)*x231*x233))+(((-1.0)*x242))+(((-1.0)*r22*x227)));
evalcond[1]=(((x224*x229))+((x230*x231))+x234+((r02*x227))+(((-1.0)*x243)));
evalcond[2]=(((sj3*x227*x233))+((x228*x232))+(((-1.0)*x222*x223))+x234+(((-1.0)*r22*x241))+(((-1.0)*x243))+((x222*x240)));
evalcond[3]=(((r02*x241))+(((-1.0)*x225*x228))+(((-1.0)*sj3*x227*x230))+((x223*x224))+(((-1.0)*pz))+(((-1.0)*x239))+x242+(((-1.0)*x224*x240)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x244=(cj4*r22);
IkReal x245=((1.0)*sj1);
IkReal x246=(cj5*sj4);
IkReal x247=(cj4*r02);
IkReal x248=(sj4*sj5);
if( IKabs((((cj1*x247))+((r20*sj1*x248))+((cj1*r01*x246))+((r21*sj1*x246))+((cj1*r00*x248))+((sj1*x244)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*r21*x246))+((cj1*x244))+((cj1*r20*x248))+(((-1.0)*r01*x245*x246))+(((-1.0)*r00*x245*x248))+(((-1.0)*x245*x247)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*x247))+((r20*sj1*x248))+((cj1*r01*x246))+((r21*sj1*x246))+((cj1*r00*x248))+((sj1*x244))))+IKsqr((((cj1*r21*x246))+((cj1*x244))+((cj1*r20*x248))+(((-1.0)*r01*x245*x246))+(((-1.0)*r00*x245*x248))+(((-1.0)*x245*x247))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*x247))+((r20*sj1*x248))+((cj1*r01*x246))+((r21*sj1*x246))+((cj1*r00*x248))+((sj1*x244))), (((cj1*r21*x246))+((cj1*x244))+((cj1*r20*x248))+(((-1.0)*r01*x245*x246))+(((-1.0)*r00*x245*x248))+(((-1.0)*x245*x247))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x249=IKsin(j2);
IkReal x250=IKcos(j2);
IkReal x251=((0.057)*cj5);
IkReal x252=(r21*sj5);
IkReal x253=((0.245)*sj1);
IkReal x254=(r01*sj5);
IkReal x255=((1.0)*r20);
IkReal x256=(sj4*sj5);
IkReal x257=((1.0)*cj4);
IkReal x258=(cj3*cj5);
IkReal x259=((1.0)*r00);
IkReal x260=(cj1*x250);
IkReal x261=(sj1*x249);
IkReal x262=(cj1*x249);
IkReal x263=(cj4*sj3*sj5);
IkReal x264=((1.0)*sj3*sj4);
IkReal x265=(sj1*x250);
IkReal x266=((1.0)*cj5*sj4);
IkReal x267=(cj4*cj5*sj3);
IkReal x268=(x261+x260);
evalcond[0]=((((-1.0)*r22*x257))+(((-1.0)*x255*x256))+x268+(((-1.0)*r21*x266)));
evalcond[1]=((((-1.0)*x265))+(((-1.0)*r02*x257))+(((-1.0)*x256*x259))+x262+(((-1.0)*r01*x266)));
evalcond[2]=((((0.28)*cj1))+((x249*x253))+((r20*x251))+(((-0.057)*x252))+(((-1.0)*pz))+(((0.245)*x260)));
evalcond[3]=((((-0.28)*sj1))+(((-1.0)*x250*x253))+((r00*x251))+(((-0.057)*x254))+(((-1.0)*px))+(((0.245)*x262)));
evalcond[4]=(((cj3*x254))+x268+(((-1.0)*r02*x264))+((r00*x263))+((r01*x267))+(((-1.0)*x258*x259)));
evalcond[5]=(((cj3*x252))+(((-1.0)*x262))+(((-1.0)*x255*x258))+x265+((r21*x267))+(((-1.0)*r22*x264))+((r20*x263)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x269=((1.0)*sj5);
CheckValue<IkReal> x270 = IKatan2WithCheck(IkReal(((((-1.0)*cj4*r00*x269))+(((-1.0)*cj4*cj5*r01))+((r02*sj4)))),IkReal(((((-1.0)*r01*x269))+((cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x270.valid){
continue;
}
CheckValue<IkReal> x271=IKPowWithIntegerCheck(IKsign((((cj4*r22))+((cj5*r21*sj4))+((r20*sj4*sj5)))),-1);
if(!x271.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x270.value)+(((1.5707963267949)*(x271.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x272=IKsin(j3);
IkReal x273=IKcos(j3);
IkReal x274=((1.0)*r00);
IkReal x275=((1.0)*cj4);
IkReal x276=((1.0)*r10);
IkReal x277=(cj5*x272);
IkReal x278=(sj4*x273);
IkReal x279=(sj5*x273);
IkReal x280=(sj5*x272);
IkReal x281=(cj5*x273*x275);
evalcond[0]=(((cj4*r11*x277))+((cj4*r10*x280))+((r11*x279))+(((-1.0)*r12*sj4*x272))+(((-1.0)*cj5*x273*x276)));
evalcond[1]=((((-1.0)*r20*x275*x279))+(((-1.0)*r20*x277))+(((-1.0)*r21*x281))+((r22*x278))+((r21*x280)));
evalcond[2]=((((-1.0)*x274*x277))+((r01*x280))+((r02*x278))+(((-1.0)*cj4*x274*x279))+(((-1.0)*r01*x281)));
evalcond[3]=((1.0)+((r11*x280))+(((-1.0)*r11*x281))+((r12*x278))+(((-1.0)*r10*x275*x279))+(((-1.0)*x276*x277)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x282=((0.875)*cj4);
IkReal x283=((0.203571428571429)*cj5);
IkReal x284=((0.203571428571429)*sj5);
IkReal x285=((0.875)*sj4*sj5);
IkReal x286=((0.875)*cj5*sj4);
if( IKabs((((r01*x286))+((r00*x283))+((r00*x285))+(((-3.57142857142857)*px))+((r02*x282))+(((-1.0)*r01*x284)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r21*x286))+((r21*x284))+(((-1.0)*r20*x283))+(((-1.0)*r20*x285))+(((-1.0)*r22*x282))+(((3.57142857142857)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x286))+((r00*x283))+((r00*x285))+(((-3.57142857142857)*px))+((r02*x282))+(((-1.0)*r01*x284))))+IKsqr(((((-1.0)*r21*x286))+((r21*x284))+(((-1.0)*r20*x283))+(((-1.0)*r20*x285))+(((-1.0)*r22*x282))+(((3.57142857142857)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((r01*x286))+((r00*x283))+((r00*x285))+(((-3.57142857142857)*px))+((r02*x282))+(((-1.0)*r01*x284))), ((((-1.0)*r21*x286))+((r21*x284))+(((-1.0)*r20*x283))+(((-1.0)*r20*x285))+(((-1.0)*r22*x282))+(((3.57142857142857)*pz))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x287=((1.0)*px);
IkReal x288=((0.245)*r20);
IkReal x289=(cj3*cj5);
IkReal x290=((0.245)*r00);
IkReal x291=(r01*sj5);
IkReal x292=((0.057)*cj5);
IkReal x293=((0.245)*cj4);
IkReal x294=((0.245)*cj3);
IkReal x295=(sj4*sj5);
IkReal x296=(cj5*r01);
IkReal x297=((0.245)*sj4);
IkReal x298=(r21*sj5);
IkReal x299=(cj5*r21);
IkReal x300=(r00*x292);
IkReal x301=((0.28)*(IKsin(j1)));
IkReal x302=((0.057)*x291);
IkReal x303=(r20*x292);
IkReal x304=((0.28)*(IKcos(j1)));
IkReal x305=((0.057)*x298);
IkReal x306=(cj4*sj3*sj5);
IkReal x307=(sj3*x297);
IkReal x308=(x304+x303);
IkReal x309=(x302+x301+x287);
evalcond[0]=((((-1.0)*x297*x299))+x305+pz+(((-1.0)*x288*x295))+(((-1.0)*r22*x293))+(((-1.0)*x308)));
evalcond[1]=(((x290*x295))+x300+((x296*x297))+((r02*x293))+(((-1.0)*x309)));
evalcond[2]=((((-1.0)*r22*x307))+(((-1.0)*x288*x289))+x300+((x288*x306))+((sj3*x293*x299))+((x294*x298))+(((-1.0)*x309)));
evalcond[3]=(((x289*x290))+(((-1.0)*x291*x294))+((r02*x307))+x308+(((-1.0)*pz))+(((-1.0)*sj3*x293*x296))+(((-1.0)*x305))+(((-1.0)*x290*x306)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x310=(cj4*r22);
IkReal x311=((1.0)*sj1);
IkReal x312=(cj5*sj4);
IkReal x313=(cj4*r02);
IkReal x314=(sj4*sj5);
if( IKabs((((r21*sj1*x312))+((cj1*x313))+((r20*sj1*x314))+((sj1*x310))+((cj1*r01*x312))+((cj1*r00*x314)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x311*x312))+((cj1*x310))+((cj1*r21*x312))+(((-1.0)*r00*x311*x314))+((cj1*r20*x314))+(((-1.0)*x311*x313)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r21*sj1*x312))+((cj1*x313))+((r20*sj1*x314))+((sj1*x310))+((cj1*r01*x312))+((cj1*r00*x314))))+IKsqr(((((-1.0)*r01*x311*x312))+((cj1*x310))+((cj1*r21*x312))+(((-1.0)*r00*x311*x314))+((cj1*r20*x314))+(((-1.0)*x311*x313))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r21*sj1*x312))+((cj1*x313))+((r20*sj1*x314))+((sj1*x310))+((cj1*r01*x312))+((cj1*r00*x314))), ((((-1.0)*r01*x311*x312))+((cj1*x310))+((cj1*r21*x312))+(((-1.0)*r00*x311*x314))+((cj1*r20*x314))+(((-1.0)*x311*x313))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x315=IKsin(j2);
IkReal x316=IKcos(j2);
IkReal x317=((0.057)*cj5);
IkReal x318=(r21*sj5);
IkReal x319=((0.245)*sj1);
IkReal x320=(r01*sj5);
IkReal x321=((1.0)*r20);
IkReal x322=(sj4*sj5);
IkReal x323=((1.0)*cj4);
IkReal x324=(cj3*cj5);
IkReal x325=((1.0)*r00);
IkReal x326=(cj1*x316);
IkReal x327=(sj1*x315);
IkReal x328=(cj1*x315);
IkReal x329=(cj4*sj3*sj5);
IkReal x330=((1.0)*sj3*sj4);
IkReal x331=(sj1*x316);
IkReal x332=((1.0)*cj5*sj4);
IkReal x333=(cj4*cj5*sj3);
IkReal x334=(x326+x327);
evalcond[0]=((((-1.0)*x321*x322))+(((-1.0)*r22*x323))+(((-1.0)*r21*x332))+x334);
evalcond[1]=((((-1.0)*r01*x332))+(((-1.0)*x322*x325))+x328+(((-1.0)*x331))+(((-1.0)*r02*x323)));
evalcond[2]=((((0.28)*cj1))+((r20*x317))+((x315*x319))+(((-1.0)*pz))+(((-0.057)*x318))+(((0.245)*x326)));
evalcond[3]=((((-0.28)*sj1))+(((-1.0)*px))+((r00*x317))+(((0.245)*x328))+(((-0.057)*x320))+(((-1.0)*x316*x319)));
evalcond[4]=(((r01*x333))+((r00*x329))+x334+(((-1.0)*r02*x330))+(((-1.0)*x324*x325))+((cj3*x320)));
evalcond[5]=(((r20*x329))+(((-1.0)*x321*x324))+((r21*x333))+(((-1.0)*x328))+x331+((cj3*x318))+(((-1.0)*r22*x330)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x335=((1.0)*cj4);
IkReal x336=(((r00*sj4*sj5))+((cj5*r01*sj4))+((cj4*r02)));
j3eval[0]=x336;
j3eval[1]=IKsign(x336);
j3eval[2]=((IKabs(((((-1.0)*cj5*r21*x335))+(((-1.0)*r20*sj5*x335))+((r22*sj4)))))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x337=((1.0)*sj4);
IkReal x338=((1.0)*sj5);
IkReal x339=((1.0)*cj4);
IkReal x340=((((-1.0)*cj5*r21*x337))+(((-1.0)*r20*sj5*x337))+(((-1.0)*r22*x339)));
j3eval[0]=x340;
j3eval[1]=IKsign(x340);
j3eval[2]=((IKabs((((r02*sj4))+(((-1.0)*cj5*r01*x339))+(((-1.0)*cj4*r00*x338)))))+(IKabs(((((-1.0)*r01*x338))+((cj5*r00))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x341=cj4*cj4;
IkReal x342=r11*r11;
IkReal x343=cj5*cj5;
IkReal x344=r10*r10;
IkReal x345=r12*r12;
IkReal x346=(cj5*r11);
IkReal x347=((1.0)*cj4);
IkReal x348=((1.0)*x341);
IkReal x349=((2.0)*r10*sj5);
IkReal x350=(cj4*r12*sj4);
IkReal x351=(x343*x344);
IkReal x352=(x342*x343);
IkReal x353=(((x341*x346*x349))+(((-1.0)*x348*x351))+((x341*x352))+(((-1.0)*x349*x350))+(((-1.0)*x352))+x351+x342+x345+(((-1.0)*x345*x348))+((x341*x344))+(((-1.0)*x346*x349))+(((-2.0)*x346*x350)));
j3eval[0]=x353;
j3eval[1]=IKsign(x353);
j3eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(((((-1.0)*r10*sj5*x347))+((r12*sj4))+(((-1.0)*x346*x347))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j1, j2, j3]

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x354=cj4*cj4;
IkReal x355=r11*r11;
IkReal x356=cj5*cj5;
IkReal x357=r10*r10;
IkReal x358=r12*r12;
IkReal x359=(cj5*r11);
IkReal x360=((1.0)*r10);
IkReal x361=((2.0)*r10*sj5);
IkReal x362=(cj4*r12*sj4);
IkReal x363=((1.0)*x354);
IkReal x364=(x356*x357);
IkReal x365=(x355*x356);
CheckValue<IkReal> x366 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*x360))+((r11*sj5)))),IkReal(((((-1.0)*cj4*sj5*x360))+((r12*sj4))+(((-1.0)*cj4*x359)))),IKFAST_ATAN2_MAGTHRESH);
if(!x366.valid){
continue;
}
CheckValue<IkReal> x367=IKPowWithIntegerCheck(IKsign(((((-1.0)*x365))+(((-1.0)*x363*x364))+(((-1.0)*x361*x362))+(((-1.0)*x358*x363))+(((-2.0)*x359*x362))+((x354*x359*x361))+x355+x358+x364+((x354*x357))+((x354*x365))+(((-1.0)*x359*x361)))),-1);
if(!x367.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x366.value)+(((1.5707963267949)*(x367.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x368=IKsin(j3);
IkReal x369=IKcos(j3);
IkReal x370=((1.0)*r00);
IkReal x371=((1.0)*cj4);
IkReal x372=((1.0)*r10);
IkReal x373=(cj5*x368);
IkReal x374=(sj4*x369);
IkReal x375=(sj5*x369);
IkReal x376=(sj5*x368);
IkReal x377=(cj5*x369*x371);
evalcond[0]=((((-1.0)*cj5*x369*x372))+((cj4*r11*x373))+(((-1.0)*r12*sj4*x368))+((cj4*r10*x376))+((r11*x375)));
evalcond[1]=((((-1.0)*r21*x377))+(((-1.0)*r20*x373))+((r22*x374))+((r21*x376))+(((-1.0)*r20*x371*x375)));
evalcond[2]=(((r02*x374))+(((-1.0)*cj4*x370*x375))+(((-1.0)*x370*x373))+((r01*x376))+(((-1.0)*r01*x377)));
evalcond[3]=((-1.0)+(((-1.0)*r10*x371*x375))+(((-1.0)*x372*x373))+(((-1.0)*r11*x377))+((r12*x374))+((r11*x376)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x378=((0.875)*cj4);
IkReal x379=((0.203571428571429)*cj5);
IkReal x380=((0.203571428571429)*sj5);
IkReal x381=((0.875)*sj4*sj5);
IkReal x382=((0.875)*cj5*sj4);
if( IKabs(((((-1.0)*r00*x379))+(((-1.0)*r02*x378))+(((-1.0)*r00*x381))+(((3.57142857142857)*px))+(((-1.0)*r01*x382))+((r01*x380)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r20*x379))+((r21*x380))+(((-1.0)*r20*x381))+(((-1.0)*r21*x382))+(((3.57142857142857)*pz))+(((-1.0)*r22*x378)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x379))+(((-1.0)*r02*x378))+(((-1.0)*r00*x381))+(((3.57142857142857)*px))+(((-1.0)*r01*x382))+((r01*x380))))+IKsqr(((((-1.0)*r20*x379))+((r21*x380))+(((-1.0)*r20*x381))+(((-1.0)*r21*x382))+(((3.57142857142857)*pz))+(((-1.0)*r22*x378))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*r00*x379))+(((-1.0)*r02*x378))+(((-1.0)*r00*x381))+(((3.57142857142857)*px))+(((-1.0)*r01*x382))+((r01*x380))), ((((-1.0)*r20*x379))+((r21*x380))+(((-1.0)*r20*x381))+(((-1.0)*r21*x382))+(((3.57142857142857)*pz))+(((-1.0)*r22*x378))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x383=((0.245)*r20);
IkReal x384=(cj3*cj5);
IkReal x385=((0.245)*r00);
IkReal x386=(r01*sj5);
IkReal x387=(sj4*sj5);
IkReal x388=((0.245)*cj4);
IkReal x389=((0.245)*cj3);
IkReal x390=(cj5*r01);
IkReal x391=((0.245)*sj4);
IkReal x392=((0.057)*cj5);
IkReal x393=(r21*sj5);
IkReal x394=(cj5*r21);
IkReal x395=((0.057)*x393);
IkReal x396=(r20*x392);
IkReal x397=((0.28)*(IKcos(j1)));
IkReal x398=((0.28)*(IKsin(j1)));
IkReal x399=(r00*x392);
IkReal x400=((0.057)*x386);
IkReal x401=(cj4*sj3*sj5);
IkReal x402=(sj3*x391);
IkReal x403=(x395+pz);
IkReal x404=(x399+x398);
IkReal x405=(x397+x396);
evalcond[0]=(x400+px+(((-1.0)*x390*x391))+(((-1.0)*r02*x388))+(((-1.0)*x385*x387))+(((-1.0)*x404)));
evalcond[1]=((((-1.0)*r22*x388))+(((-1.0)*x391*x394))+x403+(((-1.0)*x405))+(((-1.0)*x383*x387)));
evalcond[2]=(((x384*x385))+x403+(((-1.0)*sj3*x388*x390))+(((-1.0)*x386*x389))+(((-1.0)*x385*x401))+(((-1.0)*x405))+((r02*x402)));
evalcond[3]=((((-1.0)*x383*x401))+((r22*x402))+(((-1.0)*x389*x393))+((x383*x384))+(((-1.0)*px))+x404+(((-1.0)*sj3*x388*x394))+(((-1.0)*x400)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x406=(cj4*sj1);
IkReal x407=(cj1*cj4);
IkReal x408=(cj5*sj4);
IkReal x409=((1.0)*cj1);
IkReal x410=(sj4*sj5);
IkReal x411=(sj1*x410);
if( IKabs((((r22*x406))+((r21*sj1*x408))+(((-1.0)*r01*x408*x409))+((r20*x411))+(((-1.0)*r02*x407))+(((-1.0)*r00*x409*x410)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r01*sj1*x408))+((r22*x407))+((cj1*r20*x410))+((cj1*r21*x408))+((r00*x411))+((r02*x406)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r22*x406))+((r21*sj1*x408))+(((-1.0)*r01*x408*x409))+((r20*x411))+(((-1.0)*r02*x407))+(((-1.0)*r00*x409*x410))))+IKsqr((((r01*sj1*x408))+((r22*x407))+((cj1*r20*x410))+((cj1*r21*x408))+((r00*x411))+((r02*x406))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r22*x406))+((r21*sj1*x408))+(((-1.0)*r01*x408*x409))+((r20*x411))+(((-1.0)*r02*x407))+(((-1.0)*r00*x409*x410))), (((r01*sj1*x408))+((r22*x407))+((cj1*r20*x410))+((cj1*r21*x408))+((r00*x411))+((r02*x406))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x412=IKcos(j2);
IkReal x413=IKsin(j2);
IkReal x414=((0.057)*cj5);
IkReal x415=(r00*sj5);
IkReal x416=(cj4*sj3);
IkReal x417=((0.057)*sj5);
IkReal x418=((1.0)*sj4);
IkReal x419=(r20*sj5);
IkReal x420=((1.0)*cj4);
IkReal x421=(cj5*r01);
IkReal x422=(cj5*r21);
IkReal x423=(cj3*sj5);
IkReal x424=(sj1*x412);
IkReal x425=(cj1*x412);
IkReal x426=((0.245)*x413);
IkReal x427=(sj3*x418);
IkReal x428=(sj1*x413);
IkReal x429=((1.0)*cj3*cj5);
IkReal x430=((1.0)*cj1*x413);
evalcond[0]=((((-1.0)*x418*x419))+x428+x425+(((-1.0)*x418*x422))+(((-1.0)*r22*x420)));
evalcond[1]=((((-1.0)*x430))+(((-1.0)*r02*x420))+x424+(((-1.0)*x418*x421))+(((-1.0)*x415*x418)));
evalcond[2]=((((0.28)*cj1))+(((-1.0)*r21*x417))+(((-1.0)*pz))+((r20*x414))+((sj1*x426))+(((0.245)*x425)));
evalcond[3]=((((-1.0)*cj1*x426))+(((-1.0)*px))+((r00*x414))+(((0.28)*sj1))+(((-1.0)*r01*x417))+(((0.245)*x424)));
evalcond[4]=((((-1.0)*x430))+((x416*x419))+((r21*x423))+((x416*x422))+(((-1.0)*r20*x429))+x424+(((-1.0)*r22*x427)));
evalcond[5]=((((-1.0)*x425))+(((-1.0)*x428))+((x415*x416))+((x416*x421))+(((-1.0)*r00*x429))+(((-1.0)*r02*x427))+((r01*x423)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x431=((1.0)*sj4);
IkReal x432=((1.0)*sj5);
IkReal x433=((1.0)*cj4);
CheckValue<IkReal> x434 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r01*x433))+(((-1.0)*cj4*r00*x432))+((r02*sj4)))),IkReal(((((-1.0)*r01*x432))+((cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x434.valid){
continue;
}
CheckValue<IkReal> x435=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21*x431))+(((-1.0)*r20*sj5*x431))+(((-1.0)*r22*x433)))),-1);
if(!x435.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x434.value)+(((1.5707963267949)*(x435.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x436=IKsin(j3);
IkReal x437=IKcos(j3);
IkReal x438=((1.0)*r00);
IkReal x439=((1.0)*cj4);
IkReal x440=((1.0)*r10);
IkReal x441=(cj5*x436);
IkReal x442=(sj4*x437);
IkReal x443=(sj5*x437);
IkReal x444=(sj5*x436);
IkReal x445=(cj5*x437*x439);
evalcond[0]=(((cj4*r10*x444))+(((-1.0)*cj5*x437*x440))+(((-1.0)*r12*sj4*x436))+((cj4*r11*x441))+((r11*x443)));
evalcond[1]=((((-1.0)*r20*x439*x443))+(((-1.0)*r20*x441))+((r21*x444))+((r22*x442))+(((-1.0)*r21*x445)));
evalcond[2]=((((-1.0)*x438*x441))+(((-1.0)*cj4*x438*x443))+((r02*x442))+(((-1.0)*r01*x445))+((r01*x444)));
evalcond[3]=((-1.0)+(((-1.0)*r11*x445))+(((-1.0)*x440*x441))+((r11*x444))+((r12*x442))+(((-1.0)*r10*x439*x443)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x446=((0.875)*cj4);
IkReal x447=((0.203571428571429)*cj5);
IkReal x448=((0.203571428571429)*sj5);
IkReal x449=((0.875)*sj4*sj5);
IkReal x450=((0.875)*cj5*sj4);
if( IKabs(((((-1.0)*r01*x450))+(((-1.0)*r02*x446))+((r01*x448))+(((-1.0)*r00*x447))+(((-1.0)*r00*x449))+(((3.57142857142857)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r21*x448))+(((-1.0)*r20*x447))+(((-1.0)*r20*x449))+(((-1.0)*r22*x446))+(((-1.0)*r21*x450))+(((3.57142857142857)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*x450))+(((-1.0)*r02*x446))+((r01*x448))+(((-1.0)*r00*x447))+(((-1.0)*r00*x449))+(((3.57142857142857)*px))))+IKsqr((((r21*x448))+(((-1.0)*r20*x447))+(((-1.0)*r20*x449))+(((-1.0)*r22*x446))+(((-1.0)*r21*x450))+(((3.57142857142857)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*r01*x450))+(((-1.0)*r02*x446))+((r01*x448))+(((-1.0)*r00*x447))+(((-1.0)*r00*x449))+(((3.57142857142857)*px))), (((r21*x448))+(((-1.0)*r20*x447))+(((-1.0)*r20*x449))+(((-1.0)*r22*x446))+(((-1.0)*r21*x450))+(((3.57142857142857)*pz))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x451=((0.245)*r20);
IkReal x452=(cj3*cj5);
IkReal x453=((0.245)*r00);
IkReal x454=(r01*sj5);
IkReal x455=(sj4*sj5);
IkReal x456=((0.245)*cj4);
IkReal x457=((0.245)*cj3);
IkReal x458=(cj5*r01);
IkReal x459=((0.245)*sj4);
IkReal x460=((0.057)*cj5);
IkReal x461=(r21*sj5);
IkReal x462=(cj5*r21);
IkReal x463=((0.057)*x461);
IkReal x464=(r20*x460);
IkReal x465=((0.28)*(IKcos(j1)));
IkReal x466=((0.28)*(IKsin(j1)));
IkReal x467=(r00*x460);
IkReal x468=((0.057)*x454);
IkReal x469=(cj4*sj3*sj5);
IkReal x470=(sj3*x459);
IkReal x471=(x463+pz);
IkReal x472=(x467+x466);
IkReal x473=(x465+x464);
evalcond[0]=((((-1.0)*x472))+x468+px+(((-1.0)*x453*x455))+(((-1.0)*r02*x456))+(((-1.0)*x458*x459)));
evalcond[1]=((((-1.0)*x473))+(((-1.0)*x459*x462))+x471+(((-1.0)*x451*x455))+(((-1.0)*r22*x456)));
evalcond[2]=(((x452*x453))+(((-1.0)*x473))+(((-1.0)*x454*x457))+((r02*x470))+x471+(((-1.0)*x453*x469))+(((-1.0)*sj3*x456*x458)));
evalcond[3]=((((-1.0)*x468))+(((-1.0)*px))+x472+(((-1.0)*x451*x469))+((r22*x470))+((x451*x452))+(((-1.0)*sj3*x456*x462))+(((-1.0)*x457*x461)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x474=(cj4*sj1);
IkReal x475=(cj1*cj4);
IkReal x476=(cj5*sj4);
IkReal x477=((1.0)*cj1);
IkReal x478=(sj4*sj5);
IkReal x479=(sj1*x478);
if( IKabs((((r20*x479))+(((-1.0)*r01*x476*x477))+(((-1.0)*r02*x475))+((r22*x474))+(((-1.0)*r00*x477*x478))+((r21*sj1*x476)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*r20*x478))+((cj1*r21*x476))+((r02*x474))+((r22*x475))+((r01*sj1*x476))+((r00*x479)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r20*x479))+(((-1.0)*r01*x476*x477))+(((-1.0)*r02*x475))+((r22*x474))+(((-1.0)*r00*x477*x478))+((r21*sj1*x476))))+IKsqr((((cj1*r20*x478))+((cj1*r21*x476))+((r02*x474))+((r22*x475))+((r01*sj1*x476))+((r00*x479))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r20*x479))+(((-1.0)*r01*x476*x477))+(((-1.0)*r02*x475))+((r22*x474))+(((-1.0)*r00*x477*x478))+((r21*sj1*x476))), (((cj1*r20*x478))+((cj1*r21*x476))+((r02*x474))+((r22*x475))+((r01*sj1*x476))+((r00*x479))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x480=IKcos(j2);
IkReal x481=IKsin(j2);
IkReal x482=((0.057)*cj5);
IkReal x483=(r00*sj5);
IkReal x484=(cj4*sj3);
IkReal x485=((0.057)*sj5);
IkReal x486=((1.0)*sj4);
IkReal x487=(r20*sj5);
IkReal x488=((1.0)*cj4);
IkReal x489=(cj5*r01);
IkReal x490=(cj5*r21);
IkReal x491=(cj3*sj5);
IkReal x492=(sj1*x480);
IkReal x493=(cj1*x480);
IkReal x494=((0.245)*x481);
IkReal x495=(sj3*x486);
IkReal x496=(sj1*x481);
IkReal x497=((1.0)*cj3*cj5);
IkReal x498=((1.0)*cj1*x481);
evalcond[0]=((((-1.0)*x486*x487))+(((-1.0)*x486*x490))+x493+x496+(((-1.0)*r22*x488)));
evalcond[1]=((((-1.0)*x486*x489))+(((-1.0)*x498))+(((-1.0)*x483*x486))+x492+(((-1.0)*r02*x488)));
evalcond[2]=((((0.28)*cj1))+((r20*x482))+(((0.245)*x493))+((sj1*x494))+(((-1.0)*pz))+(((-1.0)*r21*x485)));
evalcond[3]=((((-1.0)*cj1*x494))+(((0.245)*x492))+(((-1.0)*px))+(((0.28)*sj1))+((r00*x482))+(((-1.0)*r01*x485)));
evalcond[4]=(((x484*x487))+(((-1.0)*x498))+x492+(((-1.0)*r22*x495))+((x484*x490))+((r21*x491))+(((-1.0)*r20*x497)));
evalcond[5]=(((x484*x489))+(((-1.0)*r00*x497))+(((-1.0)*r02*x495))+((x483*x484))+(((-1.0)*x493))+(((-1.0)*x496))+((r01*x491)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x499=((1.0)*cj4);
CheckValue<IkReal> x500 = IKatan2WithCheck(IkReal((((r22*sj4))+(((-1.0)*cj5*r21*x499))+(((-1.0)*r20*sj5*x499)))),IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x500.valid){
continue;
}
CheckValue<IkReal> x501=IKPowWithIntegerCheck(IKsign((((r00*sj4*sj5))+((cj5*r01*sj4))+((cj4*r02)))),-1);
if(!x501.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x500.value)+(((1.5707963267949)*(x501.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x502=IKsin(j3);
IkReal x503=IKcos(j3);
IkReal x504=((1.0)*r00);
IkReal x505=((1.0)*cj4);
IkReal x506=((1.0)*r10);
IkReal x507=(cj5*x502);
IkReal x508=(sj4*x503);
IkReal x509=(sj5*x503);
IkReal x510=(sj5*x502);
IkReal x511=(cj5*x503*x505);
evalcond[0]=((((-1.0)*cj5*x503*x506))+(((-1.0)*r12*sj4*x502))+((r11*x509))+((cj4*r11*x507))+((cj4*r10*x510)));
evalcond[1]=((((-1.0)*r20*x505*x509))+((r22*x508))+(((-1.0)*r20*x507))+(((-1.0)*r21*x511))+((r21*x510)));
evalcond[2]=(((r01*x510))+(((-1.0)*r01*x511))+(((-1.0)*x504*x507))+(((-1.0)*cj4*x504*x509))+((r02*x508)));
evalcond[3]=((-1.0)+(((-1.0)*x506*x507))+((r11*x510))+(((-1.0)*r11*x511))+((r12*x508))+(((-1.0)*r10*x505*x509)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x512=((0.875)*cj4);
IkReal x513=((0.203571428571429)*cj5);
IkReal x514=((0.203571428571429)*sj5);
IkReal x515=((0.875)*sj4*sj5);
IkReal x516=((0.875)*cj5*sj4);
if( IKabs((((r01*x514))+(((-1.0)*r00*x515))+(((-1.0)*r00*x513))+(((-1.0)*r01*x516))+(((-1.0)*r02*x512))+(((3.57142857142857)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r22*x512))+(((-1.0)*r20*x513))+(((-1.0)*r20*x515))+(((-1.0)*r21*x516))+((r21*x514))+(((3.57142857142857)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x514))+(((-1.0)*r00*x515))+(((-1.0)*r00*x513))+(((-1.0)*r01*x516))+(((-1.0)*r02*x512))+(((3.57142857142857)*px))))+IKsqr(((((-1.0)*r22*x512))+(((-1.0)*r20*x513))+(((-1.0)*r20*x515))+(((-1.0)*r21*x516))+((r21*x514))+(((3.57142857142857)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((r01*x514))+(((-1.0)*r00*x515))+(((-1.0)*r00*x513))+(((-1.0)*r01*x516))+(((-1.0)*r02*x512))+(((3.57142857142857)*px))), ((((-1.0)*r22*x512))+(((-1.0)*r20*x513))+(((-1.0)*r20*x515))+(((-1.0)*r21*x516))+((r21*x514))+(((3.57142857142857)*pz))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x517=((0.245)*r20);
IkReal x518=(cj3*cj5);
IkReal x519=((0.245)*r00);
IkReal x520=(r01*sj5);
IkReal x521=(sj4*sj5);
IkReal x522=((0.245)*cj4);
IkReal x523=((0.245)*cj3);
IkReal x524=(cj5*r01);
IkReal x525=((0.245)*sj4);
IkReal x526=((0.057)*cj5);
IkReal x527=(r21*sj5);
IkReal x528=(cj5*r21);
IkReal x529=((0.057)*x527);
IkReal x530=(r20*x526);
IkReal x531=((0.28)*(IKcos(j1)));
IkReal x532=((0.28)*(IKsin(j1)));
IkReal x533=(r00*x526);
IkReal x534=((0.057)*x520);
IkReal x535=(cj4*sj3*sj5);
IkReal x536=(sj3*x525);
IkReal x537=(pz+x529);
IkReal x538=(x533+x532);
IkReal x539=(x531+x530);
evalcond[0]=((((-1.0)*x524*x525))+(((-1.0)*x538))+(((-1.0)*r02*x522))+px+x534+(((-1.0)*x519*x521)));
evalcond[1]=((((-1.0)*x525*x528))+(((-1.0)*x539))+(((-1.0)*x517*x521))+x537+(((-1.0)*r22*x522)));
evalcond[2]=(((r02*x536))+(((-1.0)*x520*x523))+(((-1.0)*x539))+((x518*x519))+x537+(((-1.0)*sj3*x522*x524))+(((-1.0)*x519*x535)));
evalcond[3]=((((-1.0)*x523*x527))+(((-1.0)*x534))+(((-1.0)*px))+((r22*x536))+((x517*x518))+(((-1.0)*x517*x535))+x538+(((-1.0)*sj3*x522*x528)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x540=(cj4*sj1);
IkReal x541=(cj1*cj4);
IkReal x542=(cj5*sj4);
IkReal x543=((1.0)*cj1);
IkReal x544=(sj4*sj5);
IkReal x545=(sj1*x544);
if( IKabs(((((-1.0)*r00*x543*x544))+(((-1.0)*r01*x542*x543))+((r20*x545))+((r22*x540))+((r21*sj1*x542))+(((-1.0)*r02*x541)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*r20*x544))+((r02*x540))+((cj1*r21*x542))+((r22*x541))+((r01*sj1*x542))+((r00*x545)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x543*x544))+(((-1.0)*r01*x542*x543))+((r20*x545))+((r22*x540))+((r21*sj1*x542))+(((-1.0)*r02*x541))))+IKsqr((((cj1*r20*x544))+((r02*x540))+((cj1*r21*x542))+((r22*x541))+((r01*sj1*x542))+((r00*x545))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r00*x543*x544))+(((-1.0)*r01*x542*x543))+((r20*x545))+((r22*x540))+((r21*sj1*x542))+(((-1.0)*r02*x541))), (((cj1*r20*x544))+((r02*x540))+((cj1*r21*x542))+((r22*x541))+((r01*sj1*x542))+((r00*x545))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x546=IKcos(j2);
IkReal x547=IKsin(j2);
IkReal x548=((0.057)*cj5);
IkReal x549=(r00*sj5);
IkReal x550=(cj4*sj3);
IkReal x551=((0.057)*sj5);
IkReal x552=((1.0)*sj4);
IkReal x553=(r20*sj5);
IkReal x554=((1.0)*cj4);
IkReal x555=(cj5*r01);
IkReal x556=(cj5*r21);
IkReal x557=(cj3*sj5);
IkReal x558=(sj1*x546);
IkReal x559=(cj1*x546);
IkReal x560=((0.245)*x547);
IkReal x561=(sj3*x552);
IkReal x562=(sj1*x547);
IkReal x563=((1.0)*cj3*cj5);
IkReal x564=((1.0)*cj1*x547);
evalcond[0]=((((-1.0)*r22*x554))+(((-1.0)*x552*x556))+(((-1.0)*x552*x553))+x559+x562);
evalcond[1]=((((-1.0)*r02*x554))+(((-1.0)*x552*x555))+x558+(((-1.0)*x549*x552))+(((-1.0)*x564)));
evalcond[2]=((((0.28)*cj1))+((r20*x548))+(((-1.0)*r21*x551))+(((0.245)*x559))+(((-1.0)*pz))+((sj1*x560)));
evalcond[3]=((((-1.0)*r01*x551))+(((0.245)*x558))+(((-1.0)*px))+(((0.28)*sj1))+(((-1.0)*cj1*x560))+((r00*x548)));
evalcond[4]=(x558+((x550*x556))+((x550*x553))+(((-1.0)*r22*x561))+((r21*x557))+(((-1.0)*r20*x563))+(((-1.0)*x564)));
evalcond[5]=((((-1.0)*x559))+((x550*x555))+(((-1.0)*x562))+((x549*x550))+((r01*x557))+(((-1.0)*r02*x561))+(((-1.0)*r00*x563)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x565=((1.0)*r11);
IkReal x566=(((cj4*r22))+((cj5*r21*sj4))+((r20*sj4*sj5)));
j3eval[0]=x566;
j3eval[1]=((IKabs(((((-1.0)*cj4*cj5*x565))+(((-1.0)*cj4*r10*sj5))+((r12*sj4)))))+(IKabs((((cj5*r10))+(((-1.0)*sj5*x565))))));
j3eval[2]=IKsign(x566);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x567=((1.0)*sj5);
IkReal x568=((1.0)*cj5);
IkReal x569=((((-1.0)*r10*sj4*x567))+(((-1.0)*r11*sj4*x568))+(((-1.0)*cj4*r12)));
j3eval[0]=x569;
j3eval[1]=((IKabs((((cj5*r20))+(((-1.0)*r21*x567)))))+(IKabs((((r22*sj4))+(((-1.0)*cj4*r21*x568))+(((-1.0)*cj4*r20*x567))))));
j3eval[2]=IKsign(x569);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x570=cj4*cj4;
IkReal x571=r00*r00;
IkReal x572=cj5*cj5;
IkReal x573=r01*r01;
IkReal x574=r02*r02;
IkReal x575=(r00*sj5);
IkReal x576=((1.0)*cj4);
IkReal x577=((2.0)*cj5*r01);
IkReal x578=(cj4*r02*sj4);
IkReal x579=((1.0)*x572);
IkReal x580=(x570*x571);
IkReal x581=(((x571*x572))+((x570*x572*x573))+(((-1.0)*x573*x579))+(((-1.0)*x577*x578))+(((-1.0)*x579*x580))+((x570*x575*x577))+(((-1.0)*x575*x577))+x574+x573+x580+(((-2.0)*x575*x578))+(((-1.0)*x570*x574)));
j3eval[0]=x581;
j3eval[1]=((IKabs(((((-1.0)*cj5*r01*x576))+((r02*sj4))+(((-1.0)*x575*x576)))))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
j3eval[2]=IKsign(x581);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j1, j2, j3]

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x582=cj4*cj4;
IkReal x583=r00*r00;
IkReal x584=cj5*cj5;
IkReal x585=r01*r01;
IkReal x586=r02*r02;
IkReal x587=(cj5*r01);
IkReal x588=(r00*sj5);
IkReal x589=((1.0)*cj4);
IkReal x590=((1.0)*x584);
IkReal x591=((2.0)*cj4*r02*sj4);
IkReal x592=(x582*x583);
CheckValue<IkReal> x593 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IkReal(((((-1.0)*x588*x589))+(((-1.0)*x587*x589))+((r02*sj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x593.valid){
continue;
}
CheckValue<IkReal> x594=IKPowWithIntegerCheck(IKsign((((x583*x584))+(((-1.0)*x588*x591))+((x582*x584*x585))+(((-1.0)*x587*x591))+(((-1.0)*x585*x590))+(((2.0)*x582*x587*x588))+(((-1.0)*x590*x592))+(((-2.0)*x587*x588))+x585+x586+x592+(((-1.0)*x582*x586)))),-1);
if(!x594.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x593.value)+(((1.5707963267949)*(x594.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x595=IKsin(j3);
IkReal x596=IKcos(j3);
IkReal x597=(cj4*sj5);
IkReal x598=(cj4*r01);
IkReal x599=(cj4*cj5);
IkReal x600=((1.0)*x596);
IkReal x601=(cj5*x595);
IkReal x602=(sj4*x596);
IkReal x603=(sj5*x595);
evalcond[0]=(((r01*sj5*x596))+(((-1.0)*cj5*r00*x600))+(((-1.0)*r02*sj4*x595))+((r00*x595*x597))+((x598*x601)));
evalcond[1]=((((-1.0)*r20*x597*x600))+((r21*x603))+(((-1.0)*r20*x601))+(((-1.0)*r21*x599*x600))+((r22*x602)));
evalcond[2]=((((-1.0)*r10*x601))+((r12*x602))+((r11*x603))+(((-1.0)*r11*x599*x600))+(((-1.0)*r10*x597*x600)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x597*x600))+(((-1.0)*cj5*x598*x600))+((r02*x602))+(((-1.0)*r00*x601))+((r01*x603)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x604=((0.203571428571429)*cj5);
IkReal x605=((0.875)*cj4);
IkReal x606=((0.875)*sj4);
IkReal x607=((0.203571428571429)*sj5);
if( IKabs(((((-3.57142857142857)*py))+((r12*x605))+(((-1.0)*r11*x607))+((cj5*r11*x606))+((r10*x604))+((r10*sj5*x606)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r20*x604))+(((-1.0)*r22*x605))+((r21*x607))+(((-1.0)*r20*sj5*x606))+(((-1.0)*cj5*r21*x606))+(((3.57142857142857)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-3.57142857142857)*py))+((r12*x605))+(((-1.0)*r11*x607))+((cj5*r11*x606))+((r10*x604))+((r10*sj5*x606))))+IKsqr(((((-1.0)*r20*x604))+(((-1.0)*r22*x605))+((r21*x607))+(((-1.0)*r20*sj5*x606))+(((-1.0)*cj5*r21*x606))+(((3.57142857142857)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-3.57142857142857)*py))+((r12*x605))+(((-1.0)*r11*x607))+((cj5*r11*x606))+((r10*x604))+((r10*sj5*x606))), ((((-1.0)*r20*x604))+(((-1.0)*r22*x605))+((r21*x607))+(((-1.0)*r20*sj5*x606))+(((-1.0)*cj5*r21*x606))+(((3.57142857142857)*pz))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x608=((1.0)*py);
IkReal x609=((0.245)*sj3);
IkReal x610=(cj4*sj5);
IkReal x611=((0.245)*cj4);
IkReal x612=((0.245)*sj4);
IkReal x613=(cj5*r11);
IkReal x614=(r11*sj5);
IkReal x615=((0.057)*cj5);
IkReal x616=((0.245)*cj3);
IkReal x617=(r21*sj5);
IkReal x618=(cj5*r21);
IkReal x619=(r10*x615);
IkReal x620=((0.28)*(IKsin(j1)));
IkReal x621=((0.057)*x614);
IkReal x622=(r20*x615);
IkReal x623=((0.28)*(IKcos(j1)));
IkReal x624=((0.057)*x617);
IkReal x625=(x623+x622);
IkReal x626=(x608+x621+x620);
evalcond[0]=((((-1.0)*x612*x618))+(((-1.0)*r22*x611))+(((-1.0)*x625))+pz+x624+(((-1.0)*r20*sj5*x612)));
evalcond[1]=((((-1.0)*x626))+((x612*x613))+((r12*x611))+x619+((r10*sj5*x612)));
evalcond[2]=(((r20*x609*x610))+(((-1.0)*x626))+((x616*x617))+x619+(((-1.0)*r22*sj4*x609))+((cj4*x609*x618))+(((-1.0)*cj5*r20*x616)));
evalcond[3]=(((cj5*r10*x616))+(((-1.0)*x614*x616))+(((-1.0)*r10*x609*x610))+((r12*sj4*x609))+(((-1.0)*x624))+(((-1.0)*cj4*x609*x613))+(((-1.0)*pz))+x625);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x627=(cj4*r12);
IkReal x628=((1.0)*sj1);
IkReal x629=(cj4*r22);
IkReal x630=(sj4*sj5);
IkReal x631=(cj5*sj4);
IkReal x632=(cj1*x631);
if( IKabs((((r21*sj1*x631))+((cj1*r10*x630))+((sj1*x629))+((r20*sj1*x630))+((cj1*x627))+((r11*x632)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r21*x632))+(((-1.0)*x627*x628))+(((-1.0)*r10*x628*x630))+(((-1.0)*r11*x628*x631))+((cj1*r20*x630))+((cj1*x629)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r21*sj1*x631))+((cj1*r10*x630))+((sj1*x629))+((r20*sj1*x630))+((cj1*x627))+((r11*x632))))+IKsqr((((r21*x632))+(((-1.0)*x627*x628))+(((-1.0)*r10*x628*x630))+(((-1.0)*r11*x628*x631))+((cj1*r20*x630))+((cj1*x629))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r21*sj1*x631))+((cj1*r10*x630))+((sj1*x629))+((r20*sj1*x630))+((cj1*x627))+((r11*x632))), (((r21*x632))+(((-1.0)*x627*x628))+(((-1.0)*r10*x628*x630))+(((-1.0)*r11*x628*x631))+((cj1*r20*x630))+((cj1*x629))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x633=IKsin(j2);
IkReal x634=IKcos(j2);
IkReal x635=((1.0)*r10);
IkReal x636=(cj3*cj5);
IkReal x637=((0.057)*sj5);
IkReal x638=((1.0)*sj4);
IkReal x639=((0.245)*sj1);
IkReal x640=((0.057)*cj5);
IkReal x641=(r20*sj5);
IkReal x642=((1.0)*cj4);
IkReal x643=(cj3*sj5);
IkReal x644=(cj4*sj3);
IkReal x645=(cj1*x634);
IkReal x646=(sj1*x633);
IkReal x647=(cj1*x633);
IkReal x648=(sj1*x634);
IkReal x649=(cj5*x644);
IkReal x650=(x646+x645);
evalcond[0]=((((-1.0)*cj5*r21*x638))+(((-1.0)*r22*x642))+x650+(((-1.0)*x638*x641)));
evalcond[1]=((((-1.0)*x648))+(((-1.0)*r12*x642))+(((-1.0)*cj5*r11*x638))+x647+(((-1.0)*sj4*sj5*x635)));
evalcond[2]=((((0.28)*cj1))+((r20*x640))+(((-1.0)*pz))+(((-1.0)*r21*x637))+(((0.245)*x645))+((x633*x639)));
evalcond[3]=((((-0.28)*sj1))+(((-1.0)*r11*x637))+(((-1.0)*x634*x639))+(((-1.0)*py))+((r10*x640))+(((0.245)*x647)));
evalcond[4]=(((r10*sj5*x644))+(((-1.0)*r12*sj3*x638))+(((-1.0)*x635*x636))+x650+((r11*x649))+((r11*x643)));
evalcond[5]=((((-1.0)*x647))+((x641*x644))+((r21*x643))+((r21*x649))+x648+(((-1.0)*r20*x636))+(((-1.0)*r22*sj3*x638)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x651=((1.0)*sj5);
IkReal x652=((1.0)*cj5);
CheckValue<IkReal> x653=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*sj4*x652))+(((-1.0)*r10*sj4*x651))+(((-1.0)*cj4*r12)))),-1);
if(!x653.valid){
continue;
}
CheckValue<IkReal> x654 = IKatan2WithCheck(IkReal((((r22*sj4))+(((-1.0)*cj4*r20*x651))+(((-1.0)*cj4*r21*x652)))),IkReal((((cj5*r20))+(((-1.0)*r21*x651)))),IKFAST_ATAN2_MAGTHRESH);
if(!x654.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x653.value)))+(x654.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x655=IKsin(j3);
IkReal x656=IKcos(j3);
IkReal x657=(cj4*sj5);
IkReal x658=(cj4*r01);
IkReal x659=(cj4*cj5);
IkReal x660=((1.0)*x656);
IkReal x661=(cj5*x655);
IkReal x662=(sj4*x656);
IkReal x663=(sj5*x655);
evalcond[0]=((((-1.0)*cj5*r00*x660))+((r00*x655*x657))+((r01*sj5*x656))+((x658*x661))+(((-1.0)*r02*sj4*x655)));
evalcond[1]=((((-1.0)*r20*x661))+(((-1.0)*r21*x659*x660))+((r21*x663))+((r22*x662))+(((-1.0)*r20*x657*x660)));
evalcond[2]=((((-1.0)*r11*x659*x660))+(((-1.0)*r10*x661))+((r11*x663))+((r12*x662))+(((-1.0)*r10*x657*x660)));
evalcond[3]=((-1.0)+((r01*x663))+(((-1.0)*cj5*x658*x660))+((r02*x662))+(((-1.0)*r00*x657*x660))+(((-1.0)*r00*x661)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x664=((0.203571428571429)*cj5);
IkReal x665=((0.875)*cj4);
IkReal x666=((0.875)*sj4);
IkReal x667=((0.203571428571429)*sj5);
if( IKabs(((((-3.57142857142857)*py))+(((-1.0)*r11*x667))+((r12*x665))+((r10*sj5*x666))+((r10*x664))+((cj5*r11*x666)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r20*x664))+(((-1.0)*r22*x665))+((r21*x667))+(((-1.0)*r20*sj5*x666))+(((3.57142857142857)*pz))+(((-1.0)*cj5*r21*x666)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-3.57142857142857)*py))+(((-1.0)*r11*x667))+((r12*x665))+((r10*sj5*x666))+((r10*x664))+((cj5*r11*x666))))+IKsqr(((((-1.0)*r20*x664))+(((-1.0)*r22*x665))+((r21*x667))+(((-1.0)*r20*sj5*x666))+(((3.57142857142857)*pz))+(((-1.0)*cj5*r21*x666))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-3.57142857142857)*py))+(((-1.0)*r11*x667))+((r12*x665))+((r10*sj5*x666))+((r10*x664))+((cj5*r11*x666))), ((((-1.0)*r20*x664))+(((-1.0)*r22*x665))+((r21*x667))+(((-1.0)*r20*sj5*x666))+(((3.57142857142857)*pz))+(((-1.0)*cj5*r21*x666))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x668=((1.0)*py);
IkReal x669=((0.245)*sj3);
IkReal x670=(cj4*sj5);
IkReal x671=((0.245)*cj4);
IkReal x672=((0.245)*sj4);
IkReal x673=(cj5*r11);
IkReal x674=(r11*sj5);
IkReal x675=((0.057)*cj5);
IkReal x676=((0.245)*cj3);
IkReal x677=(r21*sj5);
IkReal x678=(cj5*r21);
IkReal x679=(r10*x675);
IkReal x680=((0.28)*(IKsin(j1)));
IkReal x681=((0.057)*x674);
IkReal x682=(r20*x675);
IkReal x683=((0.28)*(IKcos(j1)));
IkReal x684=((0.057)*x677);
IkReal x685=(x683+x682);
IkReal x686=(x668+x681+x680);
evalcond[0]=((((-1.0)*r20*sj5*x672))+(((-1.0)*r22*x671))+(((-1.0)*x685))+pz+x684+(((-1.0)*x672*x678)));
evalcond[1]=(((r12*x671))+((x672*x673))+(((-1.0)*x686))+((r10*sj5*x672))+x679);
evalcond[2]=((((-1.0)*cj5*r20*x676))+(((-1.0)*x686))+((r20*x669*x670))+((x676*x677))+x679+(((-1.0)*r22*sj4*x669))+((cj4*x669*x678)));
evalcond[3]=(((cj5*r10*x676))+(((-1.0)*r10*x669*x670))+(((-1.0)*x684))+(((-1.0)*cj4*x669*x673))+((r12*sj4*x669))+(((-1.0)*pz))+x685+(((-1.0)*x674*x676)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x687=(cj4*r12);
IkReal x688=((1.0)*sj1);
IkReal x689=(cj4*r22);
IkReal x690=(sj4*sj5);
IkReal x691=(cj5*sj4);
IkReal x692=(cj1*x691);
if( IKabs((((r20*sj1*x690))+((cj1*x687))+((r21*sj1*x691))+((r11*x692))+((sj1*x689))+((cj1*r10*x690)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x687*x688))+((cj1*x689))+(((-1.0)*r11*x688*x691))+((cj1*r20*x690))+(((-1.0)*r10*x688*x690))+((r21*x692)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r20*sj1*x690))+((cj1*x687))+((r21*sj1*x691))+((r11*x692))+((sj1*x689))+((cj1*r10*x690))))+IKsqr(((((-1.0)*x687*x688))+((cj1*x689))+(((-1.0)*r11*x688*x691))+((cj1*r20*x690))+(((-1.0)*r10*x688*x690))+((r21*x692))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r20*sj1*x690))+((cj1*x687))+((r21*sj1*x691))+((r11*x692))+((sj1*x689))+((cj1*r10*x690))), ((((-1.0)*x687*x688))+((cj1*x689))+(((-1.0)*r11*x688*x691))+((cj1*r20*x690))+(((-1.0)*r10*x688*x690))+((r21*x692))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x693=IKsin(j2);
IkReal x694=IKcos(j2);
IkReal x695=((1.0)*r10);
IkReal x696=(cj3*cj5);
IkReal x697=((0.057)*sj5);
IkReal x698=((1.0)*sj4);
IkReal x699=((0.245)*sj1);
IkReal x700=((0.057)*cj5);
IkReal x701=(r20*sj5);
IkReal x702=((1.0)*cj4);
IkReal x703=(cj3*sj5);
IkReal x704=(cj4*sj3);
IkReal x705=(cj1*x694);
IkReal x706=(sj1*x693);
IkReal x707=(cj1*x693);
IkReal x708=(sj1*x694);
IkReal x709=(cj5*x704);
IkReal x710=(x706+x705);
evalcond[0]=((((-1.0)*cj5*r21*x698))+x710+(((-1.0)*x698*x701))+(((-1.0)*r22*x702)));
evalcond[1]=((((-1.0)*r12*x702))+(((-1.0)*cj5*r11*x698))+(((-1.0)*x708))+(((-1.0)*sj4*sj5*x695))+x707);
evalcond[2]=((((0.28)*cj1))+(((0.245)*x705))+((r20*x700))+(((-1.0)*pz))+((x693*x699))+(((-1.0)*r21*x697)));
evalcond[3]=((((-0.28)*sj1))+(((0.245)*x707))+(((-1.0)*py))+(((-1.0)*r11*x697))+(((-1.0)*x694*x699))+((r10*x700)));
evalcond[4]=(((r10*sj5*x704))+(((-1.0)*r12*sj3*x698))+(((-1.0)*x695*x696))+x710+((r11*x703))+((r11*x709)));
evalcond[5]=((((-1.0)*r22*sj3*x698))+((x701*x704))+(((-1.0)*r20*x696))+(((-1.0)*x707))+((r21*x703))+((r21*x709))+x708);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x711=((1.0)*sj5);
CheckValue<IkReal> x712=IKPowWithIntegerCheck(IKsign((((cj4*r22))+((cj5*r21*sj4))+((r20*sj4*sj5)))),-1);
if(!x712.valid){
continue;
}
CheckValue<IkReal> x713 = IKatan2WithCheck(IkReal(((((-1.0)*cj4*cj5*r11))+((r12*sj4))+(((-1.0)*cj4*r10*x711)))),IkReal((((cj5*r10))+(((-1.0)*r11*x711)))),IKFAST_ATAN2_MAGTHRESH);
if(!x713.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x712.value)))+(x713.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x714=IKsin(j3);
IkReal x715=IKcos(j3);
IkReal x716=(cj4*sj5);
IkReal x717=(cj4*r01);
IkReal x718=(cj4*cj5);
IkReal x719=((1.0)*x715);
IkReal x720=(cj5*x714);
IkReal x721=(sj4*x715);
IkReal x722=(sj5*x714);
evalcond[0]=(((r01*sj5*x715))+((r00*x714*x716))+((x717*x720))+(((-1.0)*cj5*r00*x719))+(((-1.0)*r02*sj4*x714)));
evalcond[1]=((((-1.0)*r20*x720))+(((-1.0)*r21*x718*x719))+(((-1.0)*r20*x716*x719))+((r21*x722))+((r22*x721)));
evalcond[2]=((((-1.0)*r10*x716*x719))+(((-1.0)*r11*x718*x719))+(((-1.0)*r10*x720))+((r11*x722))+((r12*x721)));
evalcond[3]=((-1.0)+((r01*x722))+(((-1.0)*r00*x720))+(((-1.0)*cj5*x717*x719))+((r02*x721))+(((-1.0)*r00*x716*x719)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x723=((0.203571428571429)*cj5);
IkReal x724=((0.875)*cj4);
IkReal x725=((0.875)*sj4);
IkReal x726=((0.203571428571429)*sj5);
if( IKabs((((r10*sj5*x725))+((r10*x723))+(((-3.57142857142857)*py))+((cj5*r11*x725))+(((-1.0)*r11*x726))+((r12*x724)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r20*sj5*x725))+(((-1.0)*cj5*r21*x725))+(((-1.0)*r20*x723))+(((-1.0)*r22*x724))+((r21*x726))+(((3.57142857142857)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r10*sj5*x725))+((r10*x723))+(((-3.57142857142857)*py))+((cj5*r11*x725))+(((-1.0)*r11*x726))+((r12*x724))))+IKsqr(((((-1.0)*r20*sj5*x725))+(((-1.0)*cj5*r21*x725))+(((-1.0)*r20*x723))+(((-1.0)*r22*x724))+((r21*x726))+(((3.57142857142857)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((r10*sj5*x725))+((r10*x723))+(((-3.57142857142857)*py))+((cj5*r11*x725))+(((-1.0)*r11*x726))+((r12*x724))), ((((-1.0)*r20*sj5*x725))+(((-1.0)*cj5*r21*x725))+(((-1.0)*r20*x723))+(((-1.0)*r22*x724))+((r21*x726))+(((3.57142857142857)*pz))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x727=((1.0)*py);
IkReal x728=((0.245)*sj3);
IkReal x729=(cj4*sj5);
IkReal x730=((0.245)*cj4);
IkReal x731=((0.245)*sj4);
IkReal x732=(cj5*r11);
IkReal x733=(r11*sj5);
IkReal x734=((0.057)*cj5);
IkReal x735=((0.245)*cj3);
IkReal x736=(r21*sj5);
IkReal x737=(cj5*r21);
IkReal x738=(r10*x734);
IkReal x739=((0.28)*(IKsin(j1)));
IkReal x740=((0.057)*x733);
IkReal x741=(r20*x734);
IkReal x742=((0.28)*(IKcos(j1)));
IkReal x743=((0.057)*x736);
IkReal x744=(x742+x741);
IkReal x745=(x739+x727+x740);
evalcond[0]=((((-1.0)*r20*sj5*x731))+(((-1.0)*x731*x737))+pz+x743+(((-1.0)*x744))+(((-1.0)*r22*x730)));
evalcond[1]=(((r12*x730))+((x731*x732))+((r10*sj5*x731))+x738+(((-1.0)*x745)));
evalcond[2]=(((x735*x736))+((cj4*x728*x737))+(((-1.0)*cj5*r20*x735))+x738+(((-1.0)*x745))+(((-1.0)*r22*sj4*x728))+((r20*x728*x729)));
evalcond[3]=((((-1.0)*x733*x735))+(((-1.0)*pz))+((r12*sj4*x728))+((cj5*r10*x735))+x744+(((-1.0)*r10*x728*x729))+(((-1.0)*cj4*x728*x732))+(((-1.0)*x743)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x746=(cj4*r12);
IkReal x747=((1.0)*sj1);
IkReal x748=(cj4*r22);
IkReal x749=(sj4*sj5);
IkReal x750=(cj5*sj4);
IkReal x751=(cj1*x750);
if( IKabs((((cj1*r10*x749))+((r21*sj1*x750))+((cj1*x746))+((sj1*x748))+((r11*x751))+((r20*sj1*x749)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x747*x750))+((cj1*x748))+(((-1.0)*x746*x747))+(((-1.0)*r10*x747*x749))+((r21*x751))+((cj1*r20*x749)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*r10*x749))+((r21*sj1*x750))+((cj1*x746))+((sj1*x748))+((r11*x751))+((r20*sj1*x749))))+IKsqr(((((-1.0)*r11*x747*x750))+((cj1*x748))+(((-1.0)*x746*x747))+(((-1.0)*r10*x747*x749))+((r21*x751))+((cj1*r20*x749))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*r10*x749))+((r21*sj1*x750))+((cj1*x746))+((sj1*x748))+((r11*x751))+((r20*sj1*x749))), ((((-1.0)*r11*x747*x750))+((cj1*x748))+(((-1.0)*x746*x747))+(((-1.0)*r10*x747*x749))+((r21*x751))+((cj1*r20*x749))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x752=IKsin(j2);
IkReal x753=IKcos(j2);
IkReal x754=((1.0)*r10);
IkReal x755=(cj3*cj5);
IkReal x756=((0.057)*sj5);
IkReal x757=((1.0)*sj4);
IkReal x758=((0.245)*sj1);
IkReal x759=((0.057)*cj5);
IkReal x760=(r20*sj5);
IkReal x761=((1.0)*cj4);
IkReal x762=(cj3*sj5);
IkReal x763=(cj4*sj3);
IkReal x764=(cj1*x753);
IkReal x765=(sj1*x752);
IkReal x766=(cj1*x752);
IkReal x767=(sj1*x753);
IkReal x768=(cj5*x763);
IkReal x769=(x764+x765);
evalcond[0]=((((-1.0)*x757*x760))+(((-1.0)*cj5*r21*x757))+x769+(((-1.0)*r22*x761)));
evalcond[1]=((((-1.0)*cj5*r11*x757))+(((-1.0)*x767))+(((-1.0)*r12*x761))+(((-1.0)*sj4*sj5*x754))+x766);
evalcond[2]=((((0.28)*cj1))+((x752*x758))+(((-1.0)*pz))+((r20*x759))+(((0.245)*x764))+(((-1.0)*r21*x756)));
evalcond[3]=((((-0.28)*sj1))+((r10*x759))+(((-1.0)*r11*x756))+(((-1.0)*x753*x758))+(((-1.0)*py))+(((0.245)*x766)));
evalcond[4]=(((r10*sj5*x763))+(((-1.0)*x754*x755))+x769+((r11*x768))+((r11*x762))+(((-1.0)*r12*sj3*x757)));
evalcond[5]=((((-1.0)*r20*x755))+(((-1.0)*r22*sj3*x757))+((x760*x763))+((r21*x762))+((r21*x768))+(((-1.0)*x766))+x767);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x770=((1.0)*cj4);
IkReal x771=(((cj5*r11*sj4))+((r10*sj4*sj5))+((cj4*r12)));
j3eval[0]=x771;
j3eval[1]=IKsign(x771);
j3eval[2]=((IKabs((((cj5*r20))+(((-1.0)*r21*sj5)))))+(IKabs((((r22*sj4))+(((-1.0)*r20*sj5*x770))+(((-1.0)*cj5*r21*x770))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x772=((1.0)*sj4);
IkReal x773=((1.0)*sj5);
IkReal x774=((1.0)*cj4);
IkReal x775=((((-1.0)*r22*x774))+(((-1.0)*r20*sj5*x772))+(((-1.0)*cj5*r21*x772)));
j3eval[0]=x775;
j3eval[1]=((IKabs(((((-1.0)*cj4*r10*x773))+((r12*sj4))+(((-1.0)*cj5*r11*x774)))))+(IKabs((((cj5*r10))+(((-1.0)*r11*x773))))));
j3eval[2]=IKsign(x775);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x776=cj5*cj5;
IkReal x777=cj4*cj4;
IkReal x778=r00*r00;
IkReal x779=r01*r01;
IkReal x780=r02*r02;
IkReal x781=(r00*sj5);
IkReal x782=((1.0)*cj4);
IkReal x783=((2.0)*cj5*r01);
IkReal x784=(cj4*r02*sj4);
IkReal x785=((1.0)*x779);
IkReal x786=(x776*x778);
IkReal x787=(((x781*x783))+((x776*x779))+(((-1.0)*x777*x781*x783))+(((2.0)*x781*x784))+(((-1.0)*x785))+((x783*x784))+(((-1.0)*x777*x778))+(((-1.0)*x786))+(((-1.0)*x780))+((x777*x786))+((x777*x780))+(((-1.0)*x776*x777*x785)));
j3eval[0]=x787;
j3eval[1]=((IKabs(((((-1.0)*x781*x782))+((r02*sj4))+(((-1.0)*cj5*r01*x782)))))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
j3eval[2]=IKsign(x787);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j1, j2, j3]

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x788=cj5*cj5;
IkReal x789=cj4*cj4;
IkReal x790=r00*r00;
IkReal x791=r01*r01;
IkReal x792=r02*r02;
IkReal x793=(cj5*r01);
IkReal x794=(r00*sj5);
IkReal x795=((1.0)*cj4);
IkReal x796=((1.0)*x788);
IkReal x797=((2.0)*cj4*r02*sj4);
IkReal x798=(x789*x790);
CheckValue<IkReal> x799=IKPowWithIntegerCheck(IKsign((((x793*x797))+((x788*x791))+((x788*x798))+(((2.0)*x793*x794))+(((-1.0)*x789*x791*x796))+(((-1.0)*x790*x796))+(((-1.0)*x798))+(((-1.0)*x792))+(((-1.0)*x791))+((x794*x797))+(((-2.0)*x789*x793*x794))+((x789*x792)))),-1);
if(!x799.valid){
continue;
}
CheckValue<IkReal> x800 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IkReal(((((-1.0)*x794*x795))+(((-1.0)*x793*x795))+((r02*sj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x800.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x799.value)))+(x800.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x801=IKsin(j3);
IkReal x802=IKcos(j3);
IkReal x803=(cj4*sj5);
IkReal x804=(cj4*r01);
IkReal x805=(cj4*cj5);
IkReal x806=((1.0)*x802);
IkReal x807=(cj5*x801);
IkReal x808=(sj4*x802);
IkReal x809=(sj5*x801);
evalcond[0]=(((x804*x807))+(((-1.0)*r02*sj4*x801))+((r01*sj5*x802))+((r00*x801*x803))+(((-1.0)*cj5*r00*x806)));
evalcond[1]=((((-1.0)*r20*x803*x806))+((r21*x809))+((r22*x808))+(((-1.0)*r21*x805*x806))+(((-1.0)*r20*x807)));
evalcond[2]=((((-1.0)*r11*x805*x806))+(((-1.0)*r10*x807))+((r12*x808))+(((-1.0)*r10*x803*x806))+((r11*x809)));
evalcond[3]=((1.0)+(((-1.0)*cj5*x804*x806))+((r02*x808))+(((-1.0)*r00*x803*x806))+(((-1.0)*r00*x807))+((r01*x809)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x810=((0.203571428571429)*cj5);
IkReal x811=((0.875)*cj4);
IkReal x812=((0.875)*sj4);
IkReal x813=((0.203571428571429)*sj5);
if( IKabs((((r11*x813))+(((-1.0)*r10*sj5*x812))+(((-1.0)*r12*x811))+(((-1.0)*r10*x810))+(((3.57142857142857)*py))+(((-1.0)*cj5*r11*x812)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r20*sj5*x812))+(((-1.0)*cj5*r21*x812))+(((-1.0)*r22*x811))+((r21*x813))+(((3.57142857142857)*pz))+(((-1.0)*r20*x810)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r11*x813))+(((-1.0)*r10*sj5*x812))+(((-1.0)*r12*x811))+(((-1.0)*r10*x810))+(((3.57142857142857)*py))+(((-1.0)*cj5*r11*x812))))+IKsqr(((((-1.0)*r20*sj5*x812))+(((-1.0)*cj5*r21*x812))+(((-1.0)*r22*x811))+((r21*x813))+(((3.57142857142857)*pz))+(((-1.0)*r20*x810))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((r11*x813))+(((-1.0)*r10*sj5*x812))+(((-1.0)*r12*x811))+(((-1.0)*r10*x810))+(((3.57142857142857)*py))+(((-1.0)*cj5*r11*x812))), ((((-1.0)*r20*sj5*x812))+(((-1.0)*cj5*r21*x812))+(((-1.0)*r22*x811))+((r21*x813))+(((3.57142857142857)*pz))+(((-1.0)*r20*x810))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x814=((0.245)*r12);
IkReal x815=(sj3*sj4);
IkReal x816=((0.245)*cj5);
IkReal x817=((0.245)*r22);
IkReal x818=(r11*sj5);
IkReal x819=((0.057)*cj5);
IkReal x820=(cj4*sj3);
IkReal x821=((0.245)*cj3);
IkReal x822=(r21*sj5);
IkReal x823=((0.057)*x822);
IkReal x824=(r20*x819);
IkReal x825=((0.28)*(IKcos(j1)));
IkReal x826=(r10*x819);
IkReal x827=((0.28)*(IKsin(j1)));
IkReal x828=((0.057)*x818);
IkReal x829=((0.245)*sj4*sj5);
IkReal x830=(pz+x823);
IkReal x831=((0.245)*sj5*x820);
IkReal x832=(x825+x824);
IkReal x833=(x827+x826);
evalcond[0]=(py+(((-1.0)*x833))+(((-1.0)*cj4*x814))+(((-1.0)*r11*sj4*x816))+(((-1.0)*r10*x829))+x828);
evalcond[1]=((((-1.0)*r20*x829))+(((-1.0)*x832))+(((-1.0)*cj4*x817))+x830+(((-1.0)*r21*sj4*x816)));
evalcond[2]=((((-1.0)*x818*x821))+(((-1.0)*r11*x816*x820))+(((-1.0)*r10*x831))+((x814*x815))+(((-1.0)*x832))+((cj3*r10*x816))+x830);
evalcond[3]=(((x815*x817))+(((-1.0)*r20*x831))+(((-1.0)*x828))+(((-1.0)*py))+(((-1.0)*x821*x822))+(((-1.0)*r21*x816*x820))+x833+((cj3*r20*x816)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x834=(cj5*sj4);
IkReal x835=(cj1*cj4);
IkReal x836=(cj4*sj1);
IkReal x837=((1.0)*cj1);
IkReal x838=(sj4*sj5);
if( IKabs((((r22*x836))+(((-1.0)*r10*x837*x838))+((r20*sj1*x838))+((r21*sj1*x834))+(((-1.0)*r12*x835))+(((-1.0)*r11*x834*x837)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r22*x835))+((cj1*r21*x834))+((cj1*r20*x838))+((r11*sj1*x834))+((r12*x836))+((r10*sj1*x838)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r22*x836))+(((-1.0)*r10*x837*x838))+((r20*sj1*x838))+((r21*sj1*x834))+(((-1.0)*r12*x835))+(((-1.0)*r11*x834*x837))))+IKsqr((((r22*x835))+((cj1*r21*x834))+((cj1*r20*x838))+((r11*sj1*x834))+((r12*x836))+((r10*sj1*x838))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r22*x836))+(((-1.0)*r10*x837*x838))+((r20*sj1*x838))+((r21*sj1*x834))+(((-1.0)*r12*x835))+(((-1.0)*r11*x834*x837))), (((r22*x835))+((cj1*r21*x834))+((cj1*r20*x838))+((r11*sj1*x834))+((r12*x836))+((r10*sj1*x838))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x839=IKcos(j2);
IkReal x840=IKsin(j2);
IkReal x841=((1.0)*r10);
IkReal x842=(cj3*cj5);
IkReal x843=((0.057)*sj5);
IkReal x844=((1.0)*sj4);
IkReal x845=((0.057)*cj5);
IkReal x846=(cj3*sj5);
IkReal x847=(r20*sj5);
IkReal x848=((1.0)*cj4);
IkReal x849=(cj4*sj3);
IkReal x850=(cj5*r21);
IkReal x851=(cj5*r11);
IkReal x852=(sj1*x839);
IkReal x853=(cj1*x839);
IkReal x854=((0.245)*x840);
IkReal x855=(sj1*x840);
IkReal x856=((1.0)*cj1*x840);
evalcond[0]=((((-1.0)*x844*x850))+(((-1.0)*x844*x847))+(((-1.0)*r22*x848))+x853+x855);
evalcond[1]=((((-1.0)*x856))+(((-1.0)*sj4*sj5*x841))+(((-1.0)*x844*x851))+(((-1.0)*r12*x848))+x852);
evalcond[2]=((((0.28)*cj1))+(((-1.0)*r21*x843))+((r20*x845))+((sj1*x854))+(((-1.0)*pz))+(((0.245)*x853)));
evalcond[3]=((((-1.0)*py))+((r10*x845))+(((-1.0)*cj1*x854))+(((0.28)*sj1))+(((-1.0)*r11*x843))+(((0.245)*x852)));
evalcond[4]=((((-1.0)*x856))+(((-1.0)*r20*x842))+((r21*x846))+((x847*x849))+x852+((x849*x850))+(((-1.0)*r22*sj3*x844)));
evalcond[5]=((((-1.0)*x841*x842))+(((-1.0)*x855))+(((-1.0)*x853))+(((-1.0)*r12*sj3*x844))+((x849*x851))+((r11*x846))+((r10*sj5*x849)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x857=((1.0)*sj4);
IkReal x858=((1.0)*sj5);
IkReal x859=((1.0)*cj4);
CheckValue<IkReal> x860=IKPowWithIntegerCheck(IKsign(((((-1.0)*r22*x859))+(((-1.0)*cj5*r21*x857))+(((-1.0)*r20*sj5*x857)))),-1);
if(!x860.valid){
continue;
}
CheckValue<IkReal> x861 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r11*x859))+(((-1.0)*cj4*r10*x858))+((r12*sj4)))),IkReal((((cj5*r10))+(((-1.0)*r11*x858)))),IKFAST_ATAN2_MAGTHRESH);
if(!x861.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x860.value)))+(x861.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x862=IKsin(j3);
IkReal x863=IKcos(j3);
IkReal x864=(cj4*sj5);
IkReal x865=(cj4*r01);
IkReal x866=(cj4*cj5);
IkReal x867=((1.0)*x863);
IkReal x868=(cj5*x862);
IkReal x869=(sj4*x863);
IkReal x870=(sj5*x862);
evalcond[0]=(((r01*sj5*x863))+(((-1.0)*cj5*r00*x867))+((r00*x862*x864))+((x865*x868))+(((-1.0)*r02*sj4*x862)));
evalcond[1]=(((r21*x870))+((r22*x869))+(((-1.0)*r20*x868))+(((-1.0)*r20*x864*x867))+(((-1.0)*r21*x866*x867)));
evalcond[2]=(((r11*x870))+(((-1.0)*r10*x864*x867))+((r12*x869))+(((-1.0)*r11*x866*x867))+(((-1.0)*r10*x868)));
evalcond[3]=((1.0)+(((-1.0)*r00*x864*x867))+((r01*x870))+(((-1.0)*r00*x868))+((r02*x869))+(((-1.0)*cj5*x865*x867)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x871=((0.203571428571429)*cj5);
IkReal x872=((0.875)*cj4);
IkReal x873=((0.875)*sj4);
IkReal x874=((0.203571428571429)*sj5);
if( IKabs(((((-1.0)*r12*x872))+(((-1.0)*cj5*r11*x873))+((r11*x874))+(((-1.0)*r10*sj5*x873))+(((3.57142857142857)*py))+(((-1.0)*r10*x871)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r20*sj5*x873))+((r21*x874))+(((-1.0)*cj5*r21*x873))+(((-1.0)*r20*x871))+(((3.57142857142857)*pz))+(((-1.0)*r22*x872)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r12*x872))+(((-1.0)*cj5*r11*x873))+((r11*x874))+(((-1.0)*r10*sj5*x873))+(((3.57142857142857)*py))+(((-1.0)*r10*x871))))+IKsqr(((((-1.0)*r20*sj5*x873))+((r21*x874))+(((-1.0)*cj5*r21*x873))+(((-1.0)*r20*x871))+(((3.57142857142857)*pz))+(((-1.0)*r22*x872))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*r12*x872))+(((-1.0)*cj5*r11*x873))+((r11*x874))+(((-1.0)*r10*sj5*x873))+(((3.57142857142857)*py))+(((-1.0)*r10*x871))), ((((-1.0)*r20*sj5*x873))+((r21*x874))+(((-1.0)*cj5*r21*x873))+(((-1.0)*r20*x871))+(((3.57142857142857)*pz))+(((-1.0)*r22*x872))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x875=((0.245)*r12);
IkReal x876=(sj3*sj4);
IkReal x877=((0.245)*cj5);
IkReal x878=((0.245)*r22);
IkReal x879=(r11*sj5);
IkReal x880=((0.057)*cj5);
IkReal x881=(cj4*sj3);
IkReal x882=((0.245)*cj3);
IkReal x883=(r21*sj5);
IkReal x884=((0.057)*x883);
IkReal x885=(r20*x880);
IkReal x886=((0.28)*(IKcos(j1)));
IkReal x887=(r10*x880);
IkReal x888=((0.28)*(IKsin(j1)));
IkReal x889=((0.057)*x879);
IkReal x890=((0.245)*sj4*sj5);
IkReal x891=(pz+x884);
IkReal x892=((0.245)*sj5*x881);
IkReal x893=(x885+x886);
IkReal x894=(x887+x888);
evalcond[0]=((((-1.0)*r11*sj4*x877))+(((-1.0)*x894))+(((-1.0)*r10*x890))+py+(((-1.0)*cj4*x875))+x889);
evalcond[1]=((((-1.0)*x893))+(((-1.0)*r21*sj4*x877))+(((-1.0)*cj4*x878))+x891+(((-1.0)*r20*x890)));
evalcond[2]=((((-1.0)*x879*x882))+(((-1.0)*x893))+(((-1.0)*r10*x892))+((cj3*r10*x877))+((x875*x876))+(((-1.0)*r11*x877*x881))+x891);
evalcond[3]=(((x876*x878))+(((-1.0)*x882*x883))+(((-1.0)*x889))+(((-1.0)*r21*x877*x881))+(((-1.0)*py))+((cj3*r20*x877))+x894+(((-1.0)*r20*x892)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x895=(cj5*sj4);
IkReal x896=(cj1*cj4);
IkReal x897=(cj4*sj1);
IkReal x898=((1.0)*cj1);
IkReal x899=(sj4*sj5);
if( IKabs(((((-1.0)*r10*x898*x899))+((r20*sj1*x899))+(((-1.0)*r11*x895*x898))+((r21*sj1*x895))+((r22*x897))+(((-1.0)*r12*x896)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*sj1*x899))+((cj1*r21*x895))+((cj1*r20*x899))+((r11*sj1*x895))+((r22*x896))+((r12*x897)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*x898*x899))+((r20*sj1*x899))+(((-1.0)*r11*x895*x898))+((r21*sj1*x895))+((r22*x897))+(((-1.0)*r12*x896))))+IKsqr((((r10*sj1*x899))+((cj1*r21*x895))+((cj1*r20*x899))+((r11*sj1*x895))+((r22*x896))+((r12*x897))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r10*x898*x899))+((r20*sj1*x899))+(((-1.0)*r11*x895*x898))+((r21*sj1*x895))+((r22*x897))+(((-1.0)*r12*x896))), (((r10*sj1*x899))+((cj1*r21*x895))+((cj1*r20*x899))+((r11*sj1*x895))+((r22*x896))+((r12*x897))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x900=IKcos(j2);
IkReal x901=IKsin(j2);
IkReal x902=((1.0)*r10);
IkReal x903=(cj3*cj5);
IkReal x904=((0.057)*sj5);
IkReal x905=((1.0)*sj4);
IkReal x906=((0.057)*cj5);
IkReal x907=(cj3*sj5);
IkReal x908=(r20*sj5);
IkReal x909=((1.0)*cj4);
IkReal x910=(cj4*sj3);
IkReal x911=(cj5*r21);
IkReal x912=(cj5*r11);
IkReal x913=(sj1*x900);
IkReal x914=(cj1*x900);
IkReal x915=((0.245)*x901);
IkReal x916=(sj1*x901);
IkReal x917=((1.0)*cj1*x901);
evalcond[0]=((((-1.0)*r22*x909))+(((-1.0)*x905*x911))+x916+x914+(((-1.0)*x905*x908)));
evalcond[1]=((((-1.0)*x917))+(((-1.0)*sj4*sj5*x902))+(((-1.0)*r12*x909))+(((-1.0)*x905*x912))+x913);
evalcond[2]=((((0.28)*cj1))+((r20*x906))+(((-1.0)*r21*x904))+(((-1.0)*pz))+(((0.245)*x914))+((sj1*x915)));
evalcond[3]=((((-1.0)*r11*x904))+(((-1.0)*py))+((r10*x906))+(((0.245)*x913))+(((0.28)*sj1))+(((-1.0)*cj1*x915)));
evalcond[4]=(((r21*x907))+(((-1.0)*r20*x903))+(((-1.0)*r22*sj3*x905))+((x910*x911))+(((-1.0)*x917))+((x908*x910))+x913);
evalcond[5]=(((x910*x912))+((r10*sj5*x910))+(((-1.0)*x902*x903))+((r11*x907))+(((-1.0)*x914))+(((-1.0)*x916))+(((-1.0)*r12*sj3*x905)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x918=((1.0)*cj4);
CheckValue<IkReal> x919=IKPowWithIntegerCheck(IKsign((((cj5*r11*sj4))+((r10*sj4*sj5))+((cj4*r12)))),-1);
if(!x919.valid){
continue;
}
CheckValue<IkReal> x920 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj5*x918))+((r22*sj4))+(((-1.0)*cj5*r21*x918)))),IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x920.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x919.value)))+(x920.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x921=IKsin(j3);
IkReal x922=IKcos(j3);
IkReal x923=(cj4*sj5);
IkReal x924=(cj4*r01);
IkReal x925=(cj4*cj5);
IkReal x926=((1.0)*x922);
IkReal x927=(cj5*x921);
IkReal x928=(sj4*x922);
IkReal x929=(sj5*x921);
evalcond[0]=(((x924*x927))+((r00*x921*x923))+(((-1.0)*r02*sj4*x921))+((r01*sj5*x922))+(((-1.0)*cj5*r00*x926)));
evalcond[1]=((((-1.0)*r21*x925*x926))+((r22*x928))+((r21*x929))+(((-1.0)*r20*x927))+(((-1.0)*r20*x923*x926)));
evalcond[2]=((((-1.0)*r10*x927))+(((-1.0)*r11*x925*x926))+(((-1.0)*r10*x923*x926))+((r11*x929))+((r12*x928)));
evalcond[3]=((1.0)+(((-1.0)*r00*x923*x926))+((r01*x929))+(((-1.0)*r00*x927))+((r02*x928))+(((-1.0)*cj5*x924*x926)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x930=((0.203571428571429)*cj5);
IkReal x931=((0.875)*cj4);
IkReal x932=((0.875)*sj4);
IkReal x933=((0.203571428571429)*sj5);
if( IKabs(((((-1.0)*r10*x930))+(((-1.0)*r12*x931))+(((-1.0)*r10*sj5*x932))+(((-1.0)*cj5*r11*x932))+((r11*x933))+(((3.57142857142857)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r20*x930))+(((-1.0)*r22*x931))+((r21*x933))+(((-1.0)*cj5*r21*x932))+(((-1.0)*r20*sj5*x932))+(((3.57142857142857)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*x930))+(((-1.0)*r12*x931))+(((-1.0)*r10*sj5*x932))+(((-1.0)*cj5*r11*x932))+((r11*x933))+(((3.57142857142857)*py))))+IKsqr(((((-1.0)*r20*x930))+(((-1.0)*r22*x931))+((r21*x933))+(((-1.0)*cj5*r21*x932))+(((-1.0)*r20*sj5*x932))+(((3.57142857142857)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*r10*x930))+(((-1.0)*r12*x931))+(((-1.0)*r10*sj5*x932))+(((-1.0)*cj5*r11*x932))+((r11*x933))+(((3.57142857142857)*py))), ((((-1.0)*r20*x930))+(((-1.0)*r22*x931))+((r21*x933))+(((-1.0)*cj5*r21*x932))+(((-1.0)*r20*sj5*x932))+(((3.57142857142857)*pz))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x934=((0.245)*r12);
IkReal x935=(sj3*sj4);
IkReal x936=((0.245)*cj5);
IkReal x937=((0.245)*r22);
IkReal x938=(r11*sj5);
IkReal x939=((0.057)*cj5);
IkReal x940=(cj4*sj3);
IkReal x941=((0.245)*cj3);
IkReal x942=(r21*sj5);
IkReal x943=((0.057)*x942);
IkReal x944=(r20*x939);
IkReal x945=((0.28)*(IKcos(j1)));
IkReal x946=(r10*x939);
IkReal x947=((0.28)*(IKsin(j1)));
IkReal x948=((0.057)*x938);
IkReal x949=((0.245)*sj4*sj5);
IkReal x950=(pz+x943);
IkReal x951=((0.245)*sj5*x940);
IkReal x952=(x944+x945);
IkReal x953=(x946+x947);
evalcond[0]=(py+(((-1.0)*r10*x949))+(((-1.0)*r11*sj4*x936))+(((-1.0)*cj4*x934))+(((-1.0)*x953))+x948);
evalcond[1]=((((-1.0)*r21*sj4*x936))+(((-1.0)*r20*x949))+(((-1.0)*cj4*x937))+(((-1.0)*x952))+x950);
evalcond[2]=((((-1.0)*r10*x951))+(((-1.0)*x938*x941))+((cj3*r10*x936))+(((-1.0)*r11*x936*x940))+(((-1.0)*x952))+((x934*x935))+x950);
evalcond[3]=((((-1.0)*x948))+(((-1.0)*r20*x951))+((x935*x937))+(((-1.0)*x941*x942))+(((-1.0)*py))+((cj3*r20*x936))+(((-1.0)*r21*x936*x940))+x953);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x954=(cj5*sj4);
IkReal x955=(cj1*cj4);
IkReal x956=(cj4*sj1);
IkReal x957=((1.0)*cj1);
IkReal x958=(sj4*sj5);
if( IKabs((((r22*x956))+(((-1.0)*r10*x957*x958))+(((-1.0)*r11*x954*x957))+(((-1.0)*r12*x955))+((r20*sj1*x958))+((r21*sj1*x954)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r22*x955))+((cj1*r21*x954))+((r11*sj1*x954))+((r10*sj1*x958))+((r12*x956))+((cj1*r20*x958)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r22*x956))+(((-1.0)*r10*x957*x958))+(((-1.0)*r11*x954*x957))+(((-1.0)*r12*x955))+((r20*sj1*x958))+((r21*sj1*x954))))+IKsqr((((r22*x955))+((cj1*r21*x954))+((r11*sj1*x954))+((r10*sj1*x958))+((r12*x956))+((cj1*r20*x958))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r22*x956))+(((-1.0)*r10*x957*x958))+(((-1.0)*r11*x954*x957))+(((-1.0)*r12*x955))+((r20*sj1*x958))+((r21*sj1*x954))), (((r22*x955))+((cj1*r21*x954))+((r11*sj1*x954))+((r10*sj1*x958))+((r12*x956))+((cj1*r20*x958))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x959=IKcos(j2);
IkReal x960=IKsin(j2);
IkReal x961=((1.0)*r10);
IkReal x962=(cj3*cj5);
IkReal x963=((0.057)*sj5);
IkReal x964=((1.0)*sj4);
IkReal x965=((0.057)*cj5);
IkReal x966=(cj3*sj5);
IkReal x967=(r20*sj5);
IkReal x968=((1.0)*cj4);
IkReal x969=(cj4*sj3);
IkReal x970=(cj5*r21);
IkReal x971=(cj5*r11);
IkReal x972=(sj1*x959);
IkReal x973=(cj1*x959);
IkReal x974=((0.245)*x960);
IkReal x975=(sj1*x960);
IkReal x976=((1.0)*cj1*x960);
evalcond[0]=((((-1.0)*x964*x967))+(((-1.0)*x964*x970))+(((-1.0)*r22*x968))+x973+x975);
evalcond[1]=((((-1.0)*sj4*sj5*x961))+(((-1.0)*x964*x971))+(((-1.0)*r12*x968))+x972+(((-1.0)*x976)));
evalcond[2]=((((0.28)*cj1))+(((-1.0)*r21*x963))+((sj1*x974))+(((-1.0)*pz))+((r20*x965))+(((0.245)*x973)));
evalcond[3]=((((-1.0)*cj1*x974))+(((-1.0)*py))+(((0.28)*sj1))+(((-1.0)*r11*x963))+((r10*x965))+(((0.245)*x972)));
evalcond[4]=(((x969*x970))+(((-1.0)*r22*sj3*x964))+(((-1.0)*r20*x962))+((x967*x969))+((r21*x966))+x972+(((-1.0)*x976)));
evalcond[5]=(((x969*x971))+(((-1.0)*x961*x962))+(((-1.0)*x975))+(((-1.0)*x973))+((r10*sj5*x969))+((r11*x966))+(((-1.0)*r12*sj3*x964)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1, j2, j3]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x977=(cj5*sj0);
IkReal x978=((1.0)*cj0*cj4);
IkReal x979=((1.0)*sj0*sj5);
CheckValue<IkReal> x980 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r01*x978))+(((-1.0)*cj4*r11*x977))+((r12*sj0*sj4))+(((-1.0)*cj4*r10*x979))+(((-1.0)*r00*sj5*x978))+((cj0*r02*sj4)))),IkReal((((cj0*cj5*r00))+(((-1.0)*cj0*r01*sj5))+(((-1.0)*r11*x979))+((r10*x977)))),IKFAST_ATAN2_MAGTHRESH);
if(!x980.valid){
continue;
}
CheckValue<IkReal> x981=IKPowWithIntegerCheck(IKsign((((cj4*r22))+((cj5*r21*sj4))+((r20*sj4*sj5)))),-1);
if(!x981.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x980.value)+(((1.5707963267949)*(x981.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[3];
IkReal x982=IKcos(j3);
IkReal x983=IKsin(j3);
IkReal x984=((1.0)*cj5);
IkReal x985=(sj4*x982);
IkReal x986=(sj5*x983);
IkReal x987=(cj4*x982);
IkReal x988=((1.0)*sj5*x987);
evalcond[0]=((((-1.0)*r20*x988))+(((-1.0)*r21*x984*x987))+((r22*x985))+((r21*x986))+(((-1.0)*r20*x983*x984)));
evalcond[1]=((((-1.0)*r10*x988))+cj0+(((-1.0)*r10*x983*x984))+(((-1.0)*r11*x984*x987))+((r12*x985))+((r11*x986)));
evalcond[2]=((((-1.0)*r00*x988))+(((-1.0)*sj0))+((r01*x986))+(((-1.0)*r00*x983*x984))+(((-1.0)*r01*x984*x987))+((r02*x985)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
j1eval[0]=sj0;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
j1eval[0]=cj0;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x989=((0.203571428571429)*cj5);
IkReal x990=((0.875)*cj4);
IkReal x991=((0.875)*sj4);
IkReal x992=((0.203571428571429)*sj5);
if( IKabs((((r12*x990))+(((-3.57142857142857)*py))+((cj5*r11*x991))+(((-1.0)*r11*x992))+((r10*sj5*x991))+((r10*x989)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r20*x989))+(((-1.0)*r22*x990))+(((-1.0)*cj5*r21*x991))+(((-1.0)*r20*sj5*x991))+((r21*x992))+(((3.57142857142857)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r12*x990))+(((-3.57142857142857)*py))+((cj5*r11*x991))+(((-1.0)*r11*x992))+((r10*sj5*x991))+((r10*x989))))+IKsqr(((((-1.0)*r20*x989))+(((-1.0)*r22*x990))+(((-1.0)*cj5*r21*x991))+(((-1.0)*r20*sj5*x991))+((r21*x992))+(((3.57142857142857)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((r12*x990))+(((-3.57142857142857)*py))+((cj5*r11*x991))+(((-1.0)*r11*x992))+((r10*sj5*x991))+((r10*x989))), ((((-1.0)*r20*x989))+(((-1.0)*r22*x990))+(((-1.0)*cj5*r21*x991))+(((-1.0)*r20*sj5*x991))+((r21*x992))+(((3.57142857142857)*pz))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x993=((1.0)*py);
IkReal x994=((0.245)*sj3);
IkReal x995=(cj4*sj5);
IkReal x996=((0.245)*cj4);
IkReal x997=((0.245)*sj4);
IkReal x998=(cj5*r11);
IkReal x999=(r11*sj5);
IkReal x1000=((0.057)*cj5);
IkReal x1001=((0.245)*cj3);
IkReal x1002=(r21*sj5);
IkReal x1003=(cj5*r21);
IkReal x1004=(r10*x1000);
IkReal x1005=((0.28)*(IKsin(j1)));
IkReal x1006=((0.057)*x999);
IkReal x1007=(r20*x1000);
IkReal x1008=((0.28)*(IKcos(j1)));
IkReal x1009=((0.057)*x1002);
IkReal x1010=(x1008+x1007);
IkReal x1011=(x1006+x1005+x993);
evalcond[0]=((((-1.0)*r22*x996))+x1009+(((-1.0)*x1010))+(((-1.0)*x1003*x997))+(((-1.0)*r20*sj5*x997))+pz);
evalcond[1]=(((r12*x996))+x1004+(((-1.0)*x1011))+((x997*x998))+((r10*sj5*x997)));
evalcond[2]=(x1004+((r20*x994*x995))+(((-1.0)*x1011))+((cj4*x1003*x994))+(((-1.0)*cj5*r20*x1001))+(((-1.0)*r22*sj4*x994))+((x1001*x1002)));
evalcond[3]=(x1010+((cj5*r10*x1001))+(((-1.0)*x1009))+(((-1.0)*pz))+(((-1.0)*x1001*x999))+((r12*sj4*x994))+(((-1.0)*r10*x994*x995))+(((-1.0)*cj4*x994*x998)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1012=(cj4*r12);
IkReal x1013=((1.0)*sj1);
IkReal x1014=(cj4*r22);
IkReal x1015=(sj4*sj5);
IkReal x1016=(cj5*sj4);
IkReal x1017=(cj1*x1016);
if( IKabs((((r21*sj1*x1016))+((sj1*x1014))+((cj1*x1012))+((cj1*r10*x1015))+((r20*sj1*x1015))+((r11*x1017)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x1012*x1013))+((cj1*r20*x1015))+(((-1.0)*r10*x1013*x1015))+((r21*x1017))+(((-1.0)*r11*x1013*x1016))+((cj1*x1014)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r21*sj1*x1016))+((sj1*x1014))+((cj1*x1012))+((cj1*r10*x1015))+((r20*sj1*x1015))+((r11*x1017))))+IKsqr(((((-1.0)*x1012*x1013))+((cj1*r20*x1015))+(((-1.0)*r10*x1013*x1015))+((r21*x1017))+(((-1.0)*r11*x1013*x1016))+((cj1*x1014))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r21*sj1*x1016))+((sj1*x1014))+((cj1*x1012))+((cj1*r10*x1015))+((r20*sj1*x1015))+((r11*x1017))), ((((-1.0)*x1012*x1013))+((cj1*r20*x1015))+(((-1.0)*r10*x1013*x1015))+((r21*x1017))+(((-1.0)*r11*x1013*x1016))+((cj1*x1014))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1018=IKsin(j2);
IkReal x1019=IKcos(j2);
IkReal x1020=((1.0)*r10);
IkReal x1021=(cj3*cj5);
IkReal x1022=((0.057)*sj5);
IkReal x1023=((1.0)*sj4);
IkReal x1024=((0.245)*sj1);
IkReal x1025=((0.057)*cj5);
IkReal x1026=(r20*sj5);
IkReal x1027=((1.0)*cj4);
IkReal x1028=(cj3*sj5);
IkReal x1029=(cj4*sj3);
IkReal x1030=(cj1*x1019);
IkReal x1031=(sj1*x1018);
IkReal x1032=(cj1*x1018);
IkReal x1033=(sj1*x1019);
IkReal x1034=(cj5*x1029);
IkReal x1035=(x1030+x1031);
evalcond[0]=((((-1.0)*r22*x1027))+x1035+(((-1.0)*x1023*x1026))+(((-1.0)*cj5*r21*x1023)));
evalcond[1]=((((-1.0)*sj4*sj5*x1020))+(((-1.0)*r12*x1027))+x1032+(((-1.0)*x1033))+(((-1.0)*cj5*r11*x1023)));
evalcond[2]=((((0.28)*cj1))+((r20*x1025))+(((0.245)*x1030))+(((-1.0)*pz))+((x1018*x1024))+(((-1.0)*r21*x1022)));
evalcond[3]=((((-0.28)*sj1))+(((-1.0)*r11*x1022))+(((-1.0)*x1019*x1024))+(((0.245)*x1032))+(((-1.0)*py))+((r10*x1025)));
evalcond[4]=(x1035+(((-1.0)*r12*sj3*x1023))+((r10*sj5*x1029))+(((-1.0)*x1020*x1021))+((r11*x1028))+((r11*x1034)));
evalcond[5]=(((r21*x1028))+x1033+(((-1.0)*x1032))+(((-1.0)*r22*sj3*x1023))+(((-1.0)*r20*x1021))+((r21*x1034))+((x1026*x1029)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1036=((0.203571428571429)*cj5);
IkReal x1037=((0.875)*cj4);
IkReal x1038=((0.875)*sj4);
IkReal x1039=((0.203571428571429)*sj5);
if( IKabs(((((-1.0)*r10*x1036))+(((-1.0)*cj5*r11*x1038))+(((-1.0)*r10*sj5*x1038))+(((-1.0)*r12*x1037))+((r11*x1039))+(((3.57142857142857)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r20*sj5*x1038))+(((-1.0)*r20*x1036))+((r21*x1039))+(((-1.0)*cj5*r21*x1038))+(((3.57142857142857)*pz))+(((-1.0)*r22*x1037)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*x1036))+(((-1.0)*cj5*r11*x1038))+(((-1.0)*r10*sj5*x1038))+(((-1.0)*r12*x1037))+((r11*x1039))+(((3.57142857142857)*py))))+IKsqr(((((-1.0)*r20*sj5*x1038))+(((-1.0)*r20*x1036))+((r21*x1039))+(((-1.0)*cj5*r21*x1038))+(((3.57142857142857)*pz))+(((-1.0)*r22*x1037))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*r10*x1036))+(((-1.0)*cj5*r11*x1038))+(((-1.0)*r10*sj5*x1038))+(((-1.0)*r12*x1037))+((r11*x1039))+(((3.57142857142857)*py))), ((((-1.0)*r20*sj5*x1038))+(((-1.0)*r20*x1036))+((r21*x1039))+(((-1.0)*cj5*r21*x1038))+(((3.57142857142857)*pz))+(((-1.0)*r22*x1037))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1040=((0.245)*r12);
IkReal x1041=(sj3*sj4);
IkReal x1042=((0.245)*cj5);
IkReal x1043=((0.245)*r22);
IkReal x1044=(r11*sj5);
IkReal x1045=((0.057)*cj5);
IkReal x1046=(cj4*sj3);
IkReal x1047=((0.245)*cj3);
IkReal x1048=(r21*sj5);
IkReal x1049=((0.057)*x1048);
IkReal x1050=(r20*x1045);
IkReal x1051=((0.28)*(IKcos(j1)));
IkReal x1052=(r10*x1045);
IkReal x1053=((0.28)*(IKsin(j1)));
IkReal x1054=((0.057)*x1044);
IkReal x1055=((0.245)*sj4*sj5);
IkReal x1056=(x1049+pz);
IkReal x1057=((0.245)*sj5*x1046);
IkReal x1058=(x1050+x1051);
IkReal x1059=(x1052+x1053);
evalcond[0]=((((-1.0)*x1059))+x1054+(((-1.0)*r11*sj4*x1042))+(((-1.0)*r10*x1055))+py+(((-1.0)*cj4*x1040)));
evalcond[1]=((((-1.0)*x1058))+(((-1.0)*r21*sj4*x1042))+x1056+(((-1.0)*cj4*x1043))+(((-1.0)*r20*x1055)));
evalcond[2]=((((-1.0)*x1058))+(((-1.0)*r11*x1042*x1046))+x1056+(((-1.0)*x1044*x1047))+(((-1.0)*r10*x1057))+((x1040*x1041))+((cj3*r10*x1042)));
evalcond[3]=((((-1.0)*x1054))+x1059+((x1041*x1043))+((cj3*r20*x1042))+(((-1.0)*py))+(((-1.0)*r21*x1042*x1046))+(((-1.0)*x1047*x1048))+(((-1.0)*r20*x1057)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1060=(cj5*sj4);
IkReal x1061=(cj1*cj4);
IkReal x1062=(cj4*sj1);
IkReal x1063=((1.0)*cj1);
IkReal x1064=(sj4*sj5);
if( IKabs(((((-1.0)*r10*x1063*x1064))+(((-1.0)*r12*x1061))+((r21*sj1*x1060))+(((-1.0)*r11*x1060*x1063))+((r20*sj1*x1064))+((r22*x1062)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r12*x1062))+((cj1*r20*x1064))+((cj1*r21*x1060))+((r22*x1061))+((r11*sj1*x1060))+((r10*sj1*x1064)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*x1063*x1064))+(((-1.0)*r12*x1061))+((r21*sj1*x1060))+(((-1.0)*r11*x1060*x1063))+((r20*sj1*x1064))+((r22*x1062))))+IKsqr((((r12*x1062))+((cj1*r20*x1064))+((cj1*r21*x1060))+((r22*x1061))+((r11*sj1*x1060))+((r10*sj1*x1064))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r10*x1063*x1064))+(((-1.0)*r12*x1061))+((r21*sj1*x1060))+(((-1.0)*r11*x1060*x1063))+((r20*sj1*x1064))+((r22*x1062))), (((r12*x1062))+((cj1*r20*x1064))+((cj1*r21*x1060))+((r22*x1061))+((r11*sj1*x1060))+((r10*sj1*x1064))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1065=IKcos(j2);
IkReal x1066=IKsin(j2);
IkReal x1067=((1.0)*r10);
IkReal x1068=(cj3*cj5);
IkReal x1069=((0.057)*sj5);
IkReal x1070=((1.0)*sj4);
IkReal x1071=((0.057)*cj5);
IkReal x1072=(cj3*sj5);
IkReal x1073=(r20*sj5);
IkReal x1074=((1.0)*cj4);
IkReal x1075=(cj4*sj3);
IkReal x1076=(cj5*r21);
IkReal x1077=(cj5*r11);
IkReal x1078=(sj1*x1065);
IkReal x1079=(cj1*x1065);
IkReal x1080=((0.245)*x1066);
IkReal x1081=(sj1*x1066);
IkReal x1082=((1.0)*cj1*x1066);
evalcond[0]=(x1079+x1081+(((-1.0)*x1070*x1076))+(((-1.0)*x1070*x1073))+(((-1.0)*r22*x1074)));
evalcond[1]=(x1078+(((-1.0)*sj4*sj5*x1067))+(((-1.0)*x1070*x1077))+(((-1.0)*r12*x1074))+(((-1.0)*x1082)));
evalcond[2]=((((0.28)*cj1))+(((-1.0)*r21*x1069))+((r20*x1071))+(((-1.0)*pz))+(((0.245)*x1079))+((sj1*x1080)));
evalcond[3]=((((-1.0)*r11*x1069))+(((-1.0)*py))+(((0.28)*sj1))+(((0.245)*x1078))+((r10*x1071))+(((-1.0)*cj1*x1080)));
evalcond[4]=(x1078+((x1075*x1076))+((x1073*x1075))+((r21*x1072))+(((-1.0)*x1082))+(((-1.0)*r20*x1068))+(((-1.0)*r22*sj3*x1070)));
evalcond[5]=(((x1075*x1077))+(((-1.0)*x1081))+((r10*sj5*x1075))+(((-1.0)*x1079))+(((-1.0)*x1067*x1068))+((r11*x1072))+(((-1.0)*r12*sj3*x1070)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1083=((0.875)*cj4);
IkReal x1084=((0.203571428571429)*cj5);
IkReal x1085=((0.203571428571429)*sj5);
IkReal x1086=((0.875)*sj4*sj5);
IkReal x1087=((0.875)*cj5*sj4);
if( IKabs(((((-3.57142857142857)*px))+((r00*x1084))+((r00*x1086))+((r01*x1087))+(((-1.0)*r01*x1085))+((r02*x1083)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r21*x1087))+(((3.57142857142857)*pz))+(((-1.0)*r22*x1083))+(((-1.0)*r20*x1084))+(((-1.0)*r20*x1086))+((r21*x1085)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-3.57142857142857)*px))+((r00*x1084))+((r00*x1086))+((r01*x1087))+(((-1.0)*r01*x1085))+((r02*x1083))))+IKsqr(((((-1.0)*r21*x1087))+(((3.57142857142857)*pz))+(((-1.0)*r22*x1083))+(((-1.0)*r20*x1084))+(((-1.0)*r20*x1086))+((r21*x1085))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-3.57142857142857)*px))+((r00*x1084))+((r00*x1086))+((r01*x1087))+(((-1.0)*r01*x1085))+((r02*x1083))), ((((-1.0)*r21*x1087))+(((3.57142857142857)*pz))+(((-1.0)*r22*x1083))+(((-1.0)*r20*x1084))+(((-1.0)*r20*x1086))+((r21*x1085))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1088=((1.0)*px);
IkReal x1089=((0.245)*r20);
IkReal x1090=(cj3*cj5);
IkReal x1091=((0.245)*r00);
IkReal x1092=(r01*sj5);
IkReal x1093=((0.057)*cj5);
IkReal x1094=((0.245)*cj4);
IkReal x1095=((0.245)*cj3);
IkReal x1096=(sj4*sj5);
IkReal x1097=(cj5*r01);
IkReal x1098=((0.245)*sj4);
IkReal x1099=(r21*sj5);
IkReal x1100=(cj5*r21);
IkReal x1101=(r00*x1093);
IkReal x1102=((0.28)*(IKsin(j1)));
IkReal x1103=((0.057)*x1092);
IkReal x1104=(r20*x1093);
IkReal x1105=((0.28)*(IKcos(j1)));
IkReal x1106=((0.057)*x1099);
IkReal x1107=(cj4*sj3*sj5);
IkReal x1108=(sj3*x1098);
IkReal x1109=(x1104+x1105);
IkReal x1110=(x1102+x1103+x1088);
evalcond[0]=(x1106+(((-1.0)*x1098*x1100))+(((-1.0)*x1089*x1096))+pz+(((-1.0)*x1109))+(((-1.0)*r22*x1094)));
evalcond[1]=(x1101+((r02*x1094))+((x1091*x1096))+(((-1.0)*x1110))+((x1097*x1098)));
evalcond[2]=(x1101+(((-1.0)*r22*x1108))+((x1095*x1099))+(((-1.0)*x1089*x1090))+((x1089*x1107))+(((-1.0)*x1110))+((sj3*x1094*x1100)));
evalcond[3]=(((r02*x1108))+(((-1.0)*x1091*x1107))+x1109+(((-1.0)*sj3*x1094*x1097))+(((-1.0)*pz))+(((-1.0)*x1092*x1095))+(((-1.0)*x1106))+((x1090*x1091)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1111=(cj4*r22);
IkReal x1112=((1.0)*sj1);
IkReal x1113=(cj5*sj4);
IkReal x1114=(cj4*r02);
IkReal x1115=(sj4*sj5);
if( IKabs((((r20*sj1*x1115))+((cj1*r01*x1113))+((cj1*x1114))+((cj1*r00*x1115))+((sj1*x1111))+((r21*sj1*x1113)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x1112*x1113))+(((-1.0)*r00*x1112*x1115))+(((-1.0)*x1112*x1114))+((cj1*x1111))+((cj1*r21*x1113))+((cj1*r20*x1115)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r20*sj1*x1115))+((cj1*r01*x1113))+((cj1*x1114))+((cj1*r00*x1115))+((sj1*x1111))+((r21*sj1*x1113))))+IKsqr(((((-1.0)*r01*x1112*x1113))+(((-1.0)*r00*x1112*x1115))+(((-1.0)*x1112*x1114))+((cj1*x1111))+((cj1*r21*x1113))+((cj1*r20*x1115))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r20*sj1*x1115))+((cj1*r01*x1113))+((cj1*x1114))+((cj1*r00*x1115))+((sj1*x1111))+((r21*sj1*x1113))), ((((-1.0)*r01*x1112*x1113))+(((-1.0)*r00*x1112*x1115))+(((-1.0)*x1112*x1114))+((cj1*x1111))+((cj1*r21*x1113))+((cj1*r20*x1115))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1116=IKsin(j2);
IkReal x1117=IKcos(j2);
IkReal x1118=((0.057)*cj5);
IkReal x1119=(r21*sj5);
IkReal x1120=((0.245)*sj1);
IkReal x1121=(r01*sj5);
IkReal x1122=((1.0)*r20);
IkReal x1123=(sj4*sj5);
IkReal x1124=((1.0)*cj4);
IkReal x1125=(cj3*cj5);
IkReal x1126=((1.0)*r00);
IkReal x1127=(cj1*x1117);
IkReal x1128=(sj1*x1116);
IkReal x1129=(cj1*x1116);
IkReal x1130=(cj4*sj3*sj5);
IkReal x1131=((1.0)*sj3*sj4);
IkReal x1132=(sj1*x1117);
IkReal x1133=((1.0)*cj5*sj4);
IkReal x1134=(cj4*cj5*sj3);
IkReal x1135=(x1128+x1127);
evalcond[0]=(x1135+(((-1.0)*x1122*x1123))+(((-1.0)*r22*x1124))+(((-1.0)*r21*x1133)));
evalcond[1]=(x1129+(((-1.0)*x1123*x1126))+(((-1.0)*x1132))+(((-1.0)*r02*x1124))+(((-1.0)*r01*x1133)));
evalcond[2]=((((0.28)*cj1))+((r20*x1118))+(((-1.0)*pz))+(((0.245)*x1127))+((x1116*x1120))+(((-0.057)*x1119)));
evalcond[3]=((((-0.28)*sj1))+(((-1.0)*x1117*x1120))+((r00*x1118))+(((-1.0)*px))+(((0.245)*x1129))+(((-0.057)*x1121)));
evalcond[4]=(x1135+((r01*x1134))+((r00*x1130))+(((-1.0)*r02*x1131))+(((-1.0)*x1125*x1126))+((cj3*x1121)));
evalcond[5]=(x1132+(((-1.0)*x1122*x1125))+((r21*x1134))+(((-1.0)*r22*x1131))+(((-1.0)*x1129))+((cj3*x1119))+((r20*x1130)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1136=((0.875)*cj4);
IkReal x1137=((0.203571428571429)*cj5);
IkReal x1138=((0.203571428571429)*sj5);
IkReal x1139=((0.875)*sj4*sj5);
IkReal x1140=((0.875)*cj5*sj4);
if( IKabs(((((-1.0)*r01*x1140))+((r01*x1138))+(((-1.0)*r02*x1136))+(((3.57142857142857)*px))+(((-1.0)*r00*x1139))+(((-1.0)*r00*x1137)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r21*x1138))+(((-1.0)*r21*x1140))+(((-1.0)*r22*x1136))+(((-1.0)*r20*x1137))+(((-1.0)*r20*x1139))+(((3.57142857142857)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*x1140))+((r01*x1138))+(((-1.0)*r02*x1136))+(((3.57142857142857)*px))+(((-1.0)*r00*x1139))+(((-1.0)*r00*x1137))))+IKsqr((((r21*x1138))+(((-1.0)*r21*x1140))+(((-1.0)*r22*x1136))+(((-1.0)*r20*x1137))+(((-1.0)*r20*x1139))+(((3.57142857142857)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*r01*x1140))+((r01*x1138))+(((-1.0)*r02*x1136))+(((3.57142857142857)*px))+(((-1.0)*r00*x1139))+(((-1.0)*r00*x1137))), (((r21*x1138))+(((-1.0)*r21*x1140))+(((-1.0)*r22*x1136))+(((-1.0)*r20*x1137))+(((-1.0)*r20*x1139))+(((3.57142857142857)*pz))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1141=((0.245)*r20);
IkReal x1142=(cj3*cj5);
IkReal x1143=((0.245)*r00);
IkReal x1144=(r01*sj5);
IkReal x1145=(sj4*sj5);
IkReal x1146=((0.245)*cj4);
IkReal x1147=((0.245)*cj3);
IkReal x1148=(cj5*r01);
IkReal x1149=((0.245)*sj4);
IkReal x1150=((0.057)*cj5);
IkReal x1151=(r21*sj5);
IkReal x1152=(cj5*r21);
IkReal x1153=((0.057)*x1151);
IkReal x1154=(r20*x1150);
IkReal x1155=((0.28)*(IKcos(j1)));
IkReal x1156=((0.28)*(IKsin(j1)));
IkReal x1157=(r00*x1150);
IkReal x1158=((0.057)*x1144);
IkReal x1159=(cj4*sj3*sj5);
IkReal x1160=(sj3*x1149);
IkReal x1161=(x1153+pz);
IkReal x1162=(x1157+x1156);
IkReal x1163=(x1155+x1154);
evalcond[0]=(x1158+(((-1.0)*x1143*x1145))+(((-1.0)*r02*x1146))+px+(((-1.0)*x1148*x1149))+(((-1.0)*x1162)));
evalcond[1]=(x1161+(((-1.0)*x1149*x1152))+(((-1.0)*x1141*x1145))+(((-1.0)*x1163))+(((-1.0)*r22*x1146)));
evalcond[2]=(x1161+((r02*x1160))+(((-1.0)*sj3*x1146*x1148))+((x1142*x1143))+(((-1.0)*x1143*x1159))+(((-1.0)*x1144*x1147))+(((-1.0)*x1163)));
evalcond[3]=((((-1.0)*x1141*x1159))+x1162+(((-1.0)*x1158))+((x1141*x1142))+(((-1.0)*sj3*x1146*x1152))+(((-1.0)*x1147*x1151))+(((-1.0)*px))+((r22*x1160)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1164=(cj4*sj1);
IkReal x1165=(cj1*cj4);
IkReal x1166=(cj5*sj4);
IkReal x1167=((1.0)*cj1);
IkReal x1168=(sj4*sj5);
IkReal x1169=(sj1*x1168);
if( IKabs((((r21*sj1*x1166))+(((-1.0)*r00*x1167*x1168))+((r20*x1169))+(((-1.0)*r02*x1165))+((r22*x1164))+(((-1.0)*r01*x1166*x1167)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r02*x1164))+((r00*x1169))+((r01*sj1*x1166))+((cj1*r21*x1166))+((cj1*r20*x1168))+((r22*x1165)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r21*sj1*x1166))+(((-1.0)*r00*x1167*x1168))+((r20*x1169))+(((-1.0)*r02*x1165))+((r22*x1164))+(((-1.0)*r01*x1166*x1167))))+IKsqr((((r02*x1164))+((r00*x1169))+((r01*sj1*x1166))+((cj1*r21*x1166))+((cj1*r20*x1168))+((r22*x1165))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r21*sj1*x1166))+(((-1.0)*r00*x1167*x1168))+((r20*x1169))+(((-1.0)*r02*x1165))+((r22*x1164))+(((-1.0)*r01*x1166*x1167))), (((r02*x1164))+((r00*x1169))+((r01*sj1*x1166))+((cj1*r21*x1166))+((cj1*r20*x1168))+((r22*x1165))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1170=IKcos(j2);
IkReal x1171=IKsin(j2);
IkReal x1172=((0.057)*cj5);
IkReal x1173=(r00*sj5);
IkReal x1174=(cj4*sj3);
IkReal x1175=((0.057)*sj5);
IkReal x1176=((1.0)*sj4);
IkReal x1177=(r20*sj5);
IkReal x1178=((1.0)*cj4);
IkReal x1179=(cj5*r01);
IkReal x1180=(cj5*r21);
IkReal x1181=(cj3*sj5);
IkReal x1182=(sj1*x1170);
IkReal x1183=(cj1*x1170);
IkReal x1184=((0.245)*x1171);
IkReal x1185=(sj3*x1176);
IkReal x1186=(sj1*x1171);
IkReal x1187=((1.0)*cj3*cj5);
IkReal x1188=((1.0)*cj1*x1171);
evalcond[0]=((((-1.0)*x1176*x1180))+x1186+x1183+(((-1.0)*r22*x1178))+(((-1.0)*x1176*x1177)));
evalcond[1]=((((-1.0)*r02*x1178))+x1182+(((-1.0)*x1173*x1176))+(((-1.0)*x1188))+(((-1.0)*x1176*x1179)));
evalcond[2]=((((0.28)*cj1))+(((-1.0)*r21*x1175))+((r20*x1172))+((sj1*x1184))+(((-1.0)*pz))+(((0.245)*x1183)));
evalcond[3]=(((r00*x1172))+(((-1.0)*px))+(((-1.0)*cj1*x1184))+(((0.28)*sj1))+(((-1.0)*r01*x1175))+(((0.245)*x1182)));
evalcond[4]=(x1182+((x1174*x1177))+((x1174*x1180))+(((-1.0)*x1188))+(((-1.0)*r22*x1185))+((r21*x1181))+(((-1.0)*r20*x1187)));
evalcond[5]=(((x1173*x1174))+((x1174*x1179))+((r01*x1181))+(((-1.0)*x1183))+(((-1.0)*x1186))+(((-1.0)*r00*x1187))+(((-1.0)*r02*x1185)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1, j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1189=((0.245)*cj0);
IkReal x1190=((0.057)*cj0);
IkReal x1191=(sj4*sj5);
IkReal x1192=(cj5*sj4);
CheckValue<IkReal> x1193=IKPowWithIntegerCheck(cj0,-2);
if(!x1193.valid){
continue;
}
if( IKabs(((3.57142857142857)*(x1193.value)*((((cj4*r02*x1189))+((r01*x1189*x1192))+(((0.01)*cj0*sj0))+((r00*x1189*x1191))+((cj5*r00*x1190))+(((-1.0)*r01*sj5*x1190))+(((-1.0)*cj0*px)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.875)*r21*x1192))+(((-0.875)*cj4*r22))+(((-0.875)*r20*x1191))+(((-0.203571428571429)*cj5*r20))+(((3.57142857142857)*pz))+(((0.203571428571429)*r21*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((3.57142857142857)*(x1193.value)*((((cj4*r02*x1189))+((r01*x1189*x1192))+(((0.01)*cj0*sj0))+((r00*x1189*x1191))+((cj5*r00*x1190))+(((-1.0)*r01*sj5*x1190))+(((-1.0)*cj0*px))))))+IKsqr(((((-0.875)*r21*x1192))+(((-0.875)*cj4*r22))+(((-0.875)*r20*x1191))+(((-0.203571428571429)*cj5*r20))+(((3.57142857142857)*pz))+(((0.203571428571429)*r21*sj5))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((3.57142857142857)*(x1193.value)*((((cj4*r02*x1189))+((r01*x1189*x1192))+(((0.01)*cj0*sj0))+((r00*x1189*x1191))+((cj5*r00*x1190))+(((-1.0)*r01*sj5*x1190))+(((-1.0)*cj0*px))))), ((((-0.875)*r21*x1192))+(((-0.875)*cj4*r22))+(((-0.875)*r20*x1191))+(((-0.203571428571429)*cj5*r20))+(((3.57142857142857)*pz))+(((0.203571428571429)*r21*sj5))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[9];
IkReal x1194=IKsin(j1);
IkReal x1195=IKcos(j1);
IkReal x1196=sj0*sj0;
IkReal x1197=cj0*cj0;
IkReal x1198=(cj5*r20);
IkReal x1199=((0.057)*cj0);
IkReal x1200=(cj5*r10);
IkReal x1201=((1.0)*py);
IkReal x1202=(cj0*sj0);
IkReal x1203=((1.0)*cj0);
IkReal x1204=(r21*sj5);
IkReal x1205=((0.245)*cj0);
IkReal x1206=((0.245)*r00);
IkReal x1207=(sj0*sj5);
IkReal x1208=((0.057)*sj5);
IkReal x1209=(cj5*r01);
IkReal x1210=((1.0)*px);
IkReal x1211=((0.245)*cj4);
IkReal x1212=(sj3*sj5);
IkReal x1213=(r11*sj5);
IkReal x1214=(r01*sj5);
IkReal x1215=((0.245)*cj3);
IkReal x1216=(sj4*sj5);
IkReal x1217=(cj5*r11);
IkReal x1218=(cj5*r00);
IkReal x1219=((0.057)*sj0);
IkReal x1220=((0.245)*sj4);
IkReal x1221=((0.01)*x1202);
IkReal x1222=(sj0*x1215);
IkReal x1223=((0.28)*x1194);
IkReal x1224=(sj3*x1220);
IkReal x1225=((0.28)*x1195);
IkReal x1226=(cj5*r21*sj3);
IkReal x1227=(x1202*x1223);
evalcond[0]=((((-0.245)*r20*x1216))+(((-1.0)*x1225))+(((-1.0)*r22*x1211))+(((-1.0)*cj5*r21*x1220))+pz+(((-0.057)*x1198))+(((0.057)*x1204)));
evalcond[1]=(((r12*sj0*x1211))+(((-1.0)*sj0*x1201))+(((-1.0)*x1221))+((sj0*x1217*x1220))+((x1200*x1219))+(((-1.0)*x1196*x1223))+(((-0.057)*r11*x1207))+((r10*x1207*x1220)));
evalcond[2]=(x1221+((x1199*x1218))+((r00*x1205*x1216))+(((-1.0)*x1197*x1223))+((sj4*x1205*x1209))+(((-1.0)*px*x1203))+(((-1.0)*x1199*x1214))+((cj4*r02*x1205)));
evalcond[3]=(((sj0*x1225))+(((-1.0)*x1204*x1219))+(((-1.0)*r10*x1211*x1212))+(((-1.0)*sj3*x1211*x1217))+(((-1.0)*x1213*x1215))+((x1198*x1219))+(((-1.0)*pz*sj0))+((x1200*x1215))+((r12*x1224)));
evalcond[4]=((((-1.0)*pz*x1203))+(((-1.0)*sj3*x1209*x1211))+(((-1.0)*x1199*x1204))+(((-1.0)*x1214*x1215))+((x1198*x1199))+((cj0*x1225))+((r02*x1224))+(((-1.0)*cj4*x1206*x1212))+((cj3*cj5*x1206)));
evalcond[5]=((((-0.01)*cj0))+(((-1.0)*x1198*x1222))+(((-1.0)*r22*sj0*x1224))+((r20*sj3*x1207*x1211))+(((-1.0)*sj0*x1223))+((x1204*x1222))+(((-1.0)*r11*x1208))+(((-1.0)*x1201))+(((0.057)*x1200))+((sj0*x1211*x1226)));
evalcond[6]=(((cj4*x1205*x1226))+(((-1.0)*cj0*x1223))+(((-1.0)*r01*x1208))+(((-1.0)*r22*sj3*sj4*x1205))+((cj3*x1204*x1205))+(((0.057)*x1218))+((cj4*r20*x1205*x1212))+(((-1.0)*x1210))+(((0.01)*sj0))+(((-1.0)*cj3*x1198*x1205)));
evalcond[7]=((((-0.057)*r01*x1207))+((x1218*x1219))+(((-1.0)*x1227))+((sj4*x1205*x1217))+(((-1.0)*sj0*x1210))+(((0.01)*x1196))+((r10*x1205*x1216))+((cj4*r12*x1205)));
evalcond[8]=(((sj4*x1206*x1207))+((r02*sj0*x1211))+(((-0.01)*x1197))+(((-1.0)*x1227))+((x1199*x1200))+(((-1.0)*x1199*x1213))+(((-1.0)*cj0*x1201))+((sj0*x1209*x1220)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
j2eval[0]=cj0;
j2eval[1]=IKsign(cj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=sj0;
j2eval[1]=IKsign(sj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1228=(cj4*r22);
IkReal x1229=((1.0)*sj1);
IkReal x1230=(cj5*sj4);
IkReal x1231=(cj4*r02);
IkReal x1232=(sj4*sj5);
if( IKabs((((r21*sj1*x1230))+((sj1*x1228))+((r20*sj1*x1232))+((cj1*r00*x1232))+((cj1*r01*x1230))+((cj1*x1231)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*r20*x1232))+(((-1.0)*r01*x1229*x1230))+((cj1*r21*x1230))+(((-1.0)*x1229*x1231))+(((-1.0)*r00*x1229*x1232))+((cj1*x1228)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r21*sj1*x1230))+((sj1*x1228))+((r20*sj1*x1232))+((cj1*r00*x1232))+((cj1*r01*x1230))+((cj1*x1231))))+IKsqr((((cj1*r20*x1232))+(((-1.0)*r01*x1229*x1230))+((cj1*r21*x1230))+(((-1.0)*x1229*x1231))+(((-1.0)*r00*x1229*x1232))+((cj1*x1228))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r21*sj1*x1230))+((sj1*x1228))+((r20*sj1*x1232))+((cj1*r00*x1232))+((cj1*r01*x1230))+((cj1*x1231))), (((cj1*r20*x1232))+(((-1.0)*r01*x1229*x1230))+((cj1*r21*x1230))+(((-1.0)*x1229*x1231))+(((-1.0)*r00*x1229*x1232))+((cj1*x1228))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1233=IKsin(j2);
IkReal x1234=IKcos(j2);
IkReal x1235=((0.057)*cj5);
IkReal x1236=(r21*sj5);
IkReal x1237=((0.245)*sj1);
IkReal x1238=(r01*sj5);
IkReal x1239=((1.0)*r20);
IkReal x1240=(sj4*sj5);
IkReal x1241=((1.0)*cj4);
IkReal x1242=(cj3*cj5);
IkReal x1243=((1.0)*r00);
IkReal x1244=(cj1*x1234);
IkReal x1245=(sj1*x1233);
IkReal x1246=(cj1*x1233);
IkReal x1247=(cj4*sj3*sj5);
IkReal x1248=((1.0)*sj3*sj4);
IkReal x1249=(sj1*x1234);
IkReal x1250=((1.0)*cj5*sj4);
IkReal x1251=(cj4*cj5*sj3);
IkReal x1252=(x1245+x1244);
evalcond[0]=((((-1.0)*x1239*x1240))+x1252+(((-1.0)*r21*x1250))+(((-1.0)*r22*x1241)));
evalcond[1]=((((-1.0)*r02*x1241))+x1246+(((-1.0)*x1249))+(((-1.0)*r01*x1250))+(((-1.0)*x1240*x1243)));
evalcond[2]=((((0.28)*cj1))+(((0.245)*x1244))+((r20*x1235))+(((-0.057)*x1236))+(((-1.0)*pz))+((x1233*x1237)));
evalcond[3]=((((-0.28)*sj1))+(((0.245)*x1246))+((r00*x1235))+(((-0.057)*x1238))+(((-1.0)*px))+(((-1.0)*x1234*x1237)));
evalcond[4]=((((-1.0)*r02*x1248))+((cj3*x1238))+x1252+((r00*x1247))+(((-1.0)*x1242*x1243))+((r01*x1251)));
evalcond[5]=(((cj3*x1236))+(((-1.0)*x1239*x1242))+x1249+((r21*x1251))+(((-1.0)*x1246))+((r20*x1247))+(((-1.0)*r22*x1248)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1253=(cj4*sj1);
IkReal x1254=(cj1*cj4);
IkReal x1255=(cj5*sj4);
IkReal x1256=((1.0)*cj1);
IkReal x1257=(sj4*sj5);
IkReal x1258=(sj1*x1257);
if( IKabs((((r22*x1253))+((r21*sj1*x1255))+(((-1.0)*r00*x1256*x1257))+(((-1.0)*r01*x1255*x1256))+(((-1.0)*r02*x1254))+((r20*x1258)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r22*x1254))+((r02*x1253))+((r01*sj1*x1255))+((cj1*r20*x1257))+((cj1*r21*x1255))+((r00*x1258)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r22*x1253))+((r21*sj1*x1255))+(((-1.0)*r00*x1256*x1257))+(((-1.0)*r01*x1255*x1256))+(((-1.0)*r02*x1254))+((r20*x1258))))+IKsqr((((r22*x1254))+((r02*x1253))+((r01*sj1*x1255))+((cj1*r20*x1257))+((cj1*r21*x1255))+((r00*x1258))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r22*x1253))+((r21*sj1*x1255))+(((-1.0)*r00*x1256*x1257))+(((-1.0)*r01*x1255*x1256))+(((-1.0)*r02*x1254))+((r20*x1258))), (((r22*x1254))+((r02*x1253))+((r01*sj1*x1255))+((cj1*r20*x1257))+((cj1*r21*x1255))+((r00*x1258))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1259=IKcos(j2);
IkReal x1260=IKsin(j2);
IkReal x1261=((0.057)*cj5);
IkReal x1262=(r00*sj5);
IkReal x1263=(cj4*sj3);
IkReal x1264=((0.057)*sj5);
IkReal x1265=((1.0)*sj4);
IkReal x1266=(r20*sj5);
IkReal x1267=((1.0)*cj4);
IkReal x1268=(cj5*r01);
IkReal x1269=(cj5*r21);
IkReal x1270=(cj3*sj5);
IkReal x1271=(sj1*x1259);
IkReal x1272=(cj1*x1259);
IkReal x1273=((0.245)*x1260);
IkReal x1274=(sj3*x1265);
IkReal x1275=(sj1*x1260);
IkReal x1276=((1.0)*cj3*cj5);
IkReal x1277=((1.0)*cj1*x1260);
evalcond[0]=(x1272+x1275+(((-1.0)*r22*x1267))+(((-1.0)*x1265*x1269))+(((-1.0)*x1265*x1266)));
evalcond[1]=(x1271+(((-1.0)*x1277))+(((-1.0)*x1262*x1265))+(((-1.0)*x1265*x1268))+(((-1.0)*r02*x1267)));
evalcond[2]=((((0.28)*cj1))+(((-1.0)*r21*x1264))+((sj1*x1273))+(((0.245)*x1272))+(((-1.0)*pz))+((r20*x1261)));
evalcond[3]=((((-1.0)*cj1*x1273))+(((-1.0)*r01*x1264))+(((0.245)*x1271))+(((-1.0)*px))+(((0.28)*sj1))+((r00*x1261)));
evalcond[4]=(x1271+((r21*x1270))+(((-1.0)*x1277))+(((-1.0)*r22*x1274))+((x1263*x1266))+((x1263*x1269))+(((-1.0)*r20*x1276)));
evalcond[5]=((((-1.0)*r00*x1276))+((x1262*x1263))+(((-1.0)*r02*x1274))+(((-1.0)*x1275))+(((-1.0)*x1272))+((x1263*x1268))+((r01*x1270)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1278=(cj4*r12);
IkReal x1279=((1.0)*sj1);
IkReal x1280=(cj4*r22);
IkReal x1281=(sj4*sj5);
IkReal x1282=(cj5*sj4);
IkReal x1283=(cj1*x1282);
if( IKabs((((r11*x1283))+((r20*sj1*x1281))+((cj1*r10*x1281))+((cj1*x1278))+((sj1*x1280))+((r21*sj1*x1282)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x1279*x1282))+(((-1.0)*r10*x1279*x1281))+((cj1*r20*x1281))+((r21*x1283))+(((-1.0)*x1278*x1279))+((cj1*x1280)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r11*x1283))+((r20*sj1*x1281))+((cj1*r10*x1281))+((cj1*x1278))+((sj1*x1280))+((r21*sj1*x1282))))+IKsqr(((((-1.0)*r11*x1279*x1282))+(((-1.0)*r10*x1279*x1281))+((cj1*r20*x1281))+((r21*x1283))+(((-1.0)*x1278*x1279))+((cj1*x1280))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r11*x1283))+((r20*sj1*x1281))+((cj1*r10*x1281))+((cj1*x1278))+((sj1*x1280))+((r21*sj1*x1282))), ((((-1.0)*r11*x1279*x1282))+(((-1.0)*r10*x1279*x1281))+((cj1*r20*x1281))+((r21*x1283))+(((-1.0)*x1278*x1279))+((cj1*x1280))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1284=IKsin(j2);
IkReal x1285=IKcos(j2);
IkReal x1286=((1.0)*r10);
IkReal x1287=(cj3*cj5);
IkReal x1288=((0.057)*sj5);
IkReal x1289=((1.0)*sj4);
IkReal x1290=((0.245)*sj1);
IkReal x1291=((0.057)*cj5);
IkReal x1292=(r20*sj5);
IkReal x1293=((1.0)*cj4);
IkReal x1294=(cj3*sj5);
IkReal x1295=(cj4*sj3);
IkReal x1296=(cj1*x1285);
IkReal x1297=(sj1*x1284);
IkReal x1298=(cj1*x1284);
IkReal x1299=(sj1*x1285);
IkReal x1300=(cj5*x1295);
IkReal x1301=(x1296+x1297);
evalcond[0]=(x1301+(((-1.0)*x1289*x1292))+(((-1.0)*cj5*r21*x1289))+(((-1.0)*r22*x1293)));
evalcond[1]=(x1298+(((-1.0)*sj4*sj5*x1286))+(((-1.0)*r12*x1293))+(((-1.0)*x1299))+(((-1.0)*cj5*r11*x1289)));
evalcond[2]=((((0.28)*cj1))+((r20*x1291))+(((-1.0)*pz))+(((-1.0)*r21*x1288))+((x1284*x1290))+(((0.245)*x1296)));
evalcond[3]=((((-0.28)*sj1))+(((-1.0)*py))+(((-1.0)*x1285*x1290))+((r10*x1291))+(((-1.0)*r11*x1288))+(((0.245)*x1298)));
evalcond[4]=(x1301+((r11*x1300))+((r10*sj5*x1295))+((r11*x1294))+(((-1.0)*x1286*x1287))+(((-1.0)*r12*sj3*x1289)));
evalcond[5]=(x1299+(((-1.0)*r20*x1287))+((r21*x1294))+((r21*x1300))+(((-1.0)*x1298))+((x1292*x1295))+(((-1.0)*r22*sj3*x1289)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1302=(cj5*sj4);
IkReal x1303=(cj1*cj4);
IkReal x1304=(cj4*sj1);
IkReal x1305=((1.0)*cj1);
IkReal x1306=(sj4*sj5);
if( IKabs(((((-1.0)*r12*x1303))+((r20*sj1*x1306))+((r21*sj1*x1302))+(((-1.0)*r11*x1302*x1305))+((r22*x1304))+(((-1.0)*r10*x1305*x1306)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*sj1*x1302))+((r12*x1304))+((r22*x1303))+((cj1*r21*x1302))+((r10*sj1*x1306))+((cj1*r20*x1306)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r12*x1303))+((r20*sj1*x1306))+((r21*sj1*x1302))+(((-1.0)*r11*x1302*x1305))+((r22*x1304))+(((-1.0)*r10*x1305*x1306))))+IKsqr((((r11*sj1*x1302))+((r12*x1304))+((r22*x1303))+((cj1*r21*x1302))+((r10*sj1*x1306))+((cj1*r20*x1306))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r12*x1303))+((r20*sj1*x1306))+((r21*sj1*x1302))+(((-1.0)*r11*x1302*x1305))+((r22*x1304))+(((-1.0)*r10*x1305*x1306))), (((r11*sj1*x1302))+((r12*x1304))+((r22*x1303))+((cj1*r21*x1302))+((r10*sj1*x1306))+((cj1*r20*x1306))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1307=IKcos(j2);
IkReal x1308=IKsin(j2);
IkReal x1309=((1.0)*r10);
IkReal x1310=(cj3*cj5);
IkReal x1311=((0.057)*sj5);
IkReal x1312=((1.0)*sj4);
IkReal x1313=((0.057)*cj5);
IkReal x1314=(cj3*sj5);
IkReal x1315=(r20*sj5);
IkReal x1316=((1.0)*cj4);
IkReal x1317=(cj4*sj3);
IkReal x1318=(cj5*r21);
IkReal x1319=(cj5*r11);
IkReal x1320=(sj1*x1307);
IkReal x1321=(cj1*x1307);
IkReal x1322=((0.245)*x1308);
IkReal x1323=(sj1*x1308);
IkReal x1324=((1.0)*cj1*x1308);
evalcond[0]=(x1323+x1321+(((-1.0)*r22*x1316))+(((-1.0)*x1312*x1315))+(((-1.0)*x1312*x1318)));
evalcond[1]=(x1320+(((-1.0)*x1324))+(((-1.0)*sj4*sj5*x1309))+(((-1.0)*r12*x1316))+(((-1.0)*x1312*x1319)));
evalcond[2]=((((0.28)*cj1))+(((-1.0)*pz))+(((-1.0)*r21*x1311))+((r20*x1313))+(((0.245)*x1321))+((sj1*x1322)));
evalcond[3]=(((r10*x1313))+(((-1.0)*r11*x1311))+(((-1.0)*py))+(((0.28)*sj1))+(((0.245)*x1320))+(((-1.0)*cj1*x1322)));
evalcond[4]=(x1320+((x1317*x1318))+(((-1.0)*r22*sj3*x1312))+(((-1.0)*x1324))+((r21*x1314))+((x1315*x1317))+(((-1.0)*r20*x1310)));
evalcond[5]=(((x1317*x1319))+((r11*x1314))+(((-1.0)*x1321))+(((-1.0)*x1323))+(((-1.0)*r12*sj3*x1312))+((r10*sj5*x1317))+(((-1.0)*x1309*x1310)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1325=(cj4*r12);
IkReal x1326=((1.0)*sj1);
IkReal x1327=(r10*sj4*sj5);
IkReal x1328=(cj5*r11*sj4);
IkReal x1329=(cj4*r22*sj0);
IkReal x1330=(r20*sj0*sj4*sj5);
IkReal x1331=(cj5*r21*sj0*sj4);
CheckValue<IkReal> x1332=IKPowWithIntegerCheck(IKsign(sj0),-1);
if(!x1332.valid){
continue;
}
CheckValue<IkReal> x1333 = IKatan2WithCheck(IkReal((((sj1*x1330))+((sj1*x1331))+((cj1*x1327))+((cj1*x1325))+((cj1*x1328))+((sj1*x1329)))),IkReal(((((-1.0)*x1326*x1327))+(((-1.0)*x1326*x1328))+((cj1*x1331))+((cj1*x1330))+(((-1.0)*x1325*x1326))+((cj1*x1329)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1333.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1332.value)))+(x1333.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x1334=IKsin(j2);
IkReal x1335=IKcos(j2);
IkReal x1336=((1.0)*cj5);
IkReal x1337=((0.057)*cj5);
IkReal x1338=(r00*sj5);
IkReal x1339=(cj4*sj3);
IkReal x1340=((0.057)*sj5);
IkReal x1341=(cj0*sj1);
IkReal x1342=(sj0*sj1);
IkReal x1343=((1.0)*sj4);
IkReal x1344=(r10*sj5);
IkReal x1345=(r20*sj5);
IkReal x1346=((1.0)*cj4);
IkReal x1347=(cj3*sj5);
IkReal x1348=(cj1*x1335);
IkReal x1349=(sj1*x1334);
IkReal x1350=(sj3*x1343);
IkReal x1351=((1.0)*x1335);
IkReal x1352=((0.245)*x1335);
IkReal x1353=(cj1*x1334);
evalcond[0]=(x1348+x1349+(((-1.0)*r21*sj4*x1336))+(((-1.0)*r22*x1346))+(((-1.0)*x1343*x1345)));
evalcond[1]=((((0.245)*x1349))+(((0.245)*x1348))+(((0.28)*cj1))+(((-1.0)*r21*x1340))+((r20*x1337))+(((-1.0)*pz)));
evalcond[2]=((((-1.0)*x1341*x1351))+(((-1.0)*x1338*x1343))+(((-1.0)*r02*x1346))+(((-1.0)*r01*sj4*x1336))+((cj0*x1353)));
evalcond[3]=(((sj0*x1353))+(((-1.0)*r12*x1346))+(((-1.0)*r11*sj4*x1336))+(((-1.0)*x1343*x1344))+(((-1.0)*x1342*x1351)));
evalcond[4]=((((-1.0)*x1341*x1352))+(((0.245)*cj0*x1353))+((r00*x1337))+(((-1.0)*r01*x1340))+(((-1.0)*px))+(((0.01)*sj0))+(((-0.28)*x1341)));
evalcond[5]=((((-0.01)*cj0))+(((-1.0)*r11*x1340))+(((-1.0)*py))+((r10*x1337))+(((0.245)*sj0*x1353))+(((-1.0)*x1342*x1352))+(((-0.28)*x1342)));
evalcond[6]=((((-1.0)*x1353))+((x1339*x1345))+(((-1.0)*r22*x1350))+((sj1*x1335))+(((-1.0)*cj3*r20*x1336))+((r21*x1347))+((cj5*r21*x1339)));
evalcond[7]=(((x1338*x1339))+((cj5*r01*x1339))+(((-1.0)*r02*x1350))+((x1334*x1341))+((cj0*x1348))+((r01*x1347))+(((-1.0)*cj3*r00*x1336)));
evalcond[8]=((((-1.0)*r12*x1350))+((sj0*x1348))+((x1339*x1344))+((cj5*r11*x1339))+((x1334*x1342))+((r11*x1347))+(((-1.0)*cj3*r10*x1336)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1354=(cj0*sj4);
IkReal x1355=(cj1*sj5);
IkReal x1356=(cj5*sj1);
IkReal x1357=(r01*sj4);
IkReal x1358=(cj4*r02);
IkReal x1359=((1.0)*sj1);
IkReal x1360=(cj1*cj5);
IkReal x1361=(r00*sj4);
IkReal x1362=(cj0*cj4*r22);
CheckValue<IkReal> x1363 = IKatan2WithCheck(IkReal((((x1357*x1360))+((x1355*x1361))+((sj1*x1362))+((r20*sj1*sj5*x1354))+((cj1*x1358))+((r21*x1354*x1356)))),IkReal(((((-1.0)*x1356*x1357))+((cj1*x1362))+((r21*x1354*x1360))+((r20*x1354*x1355))+(((-1.0)*x1358*x1359))+(((-1.0)*sj5*x1359*x1361)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1363.valid){
continue;
}
CheckValue<IkReal> x1364=IKPowWithIntegerCheck(IKsign(cj0),-1);
if(!x1364.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x1363.value)+(((1.5707963267949)*(x1364.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x1365=IKsin(j2);
IkReal x1366=IKcos(j2);
IkReal x1367=((1.0)*cj5);
IkReal x1368=((0.057)*cj5);
IkReal x1369=(r00*sj5);
IkReal x1370=(cj4*sj3);
IkReal x1371=((0.057)*sj5);
IkReal x1372=(cj0*sj1);
IkReal x1373=(sj0*sj1);
IkReal x1374=((1.0)*sj4);
IkReal x1375=(r10*sj5);
IkReal x1376=(r20*sj5);
IkReal x1377=((1.0)*cj4);
IkReal x1378=(cj3*sj5);
IkReal x1379=(cj1*x1366);
IkReal x1380=(sj1*x1365);
IkReal x1381=(sj3*x1374);
IkReal x1382=((1.0)*x1366);
IkReal x1383=((0.245)*x1366);
IkReal x1384=(cj1*x1365);
evalcond[0]=(x1379+x1380+(((-1.0)*r21*sj4*x1367))+(((-1.0)*r22*x1377))+(((-1.0)*x1374*x1376)));
evalcond[1]=((((0.28)*cj1))+(((0.245)*x1380))+((r20*x1368))+(((-1.0)*pz))+(((-1.0)*r21*x1371))+(((0.245)*x1379)));
evalcond[2]=((((-1.0)*x1372*x1382))+(((-1.0)*r02*x1377))+((cj0*x1384))+(((-1.0)*r01*sj4*x1367))+(((-1.0)*x1369*x1374)));
evalcond[3]=((((-1.0)*x1373*x1382))+(((-1.0)*r11*sj4*x1367))+(((-1.0)*x1374*x1375))+((sj0*x1384))+(((-1.0)*r12*x1377)));
evalcond[4]=((((-1.0)*x1372*x1383))+(((-1.0)*r01*x1371))+(((-0.28)*x1372))+(((-1.0)*px))+(((0.245)*cj0*x1384))+((r00*x1368))+(((0.01)*sj0)));
evalcond[5]=((((-1.0)*x1373*x1383))+((r10*x1368))+(((-0.01)*cj0))+(((-0.28)*x1373))+(((-1.0)*py))+(((-1.0)*r11*x1371))+(((0.245)*sj0*x1384)));
evalcond[6]=(((sj1*x1366))+((cj5*r21*x1370))+((r21*x1378))+((x1370*x1376))+(((-1.0)*x1384))+(((-1.0)*r22*x1381))+(((-1.0)*cj3*r20*x1367)));
evalcond[7]=(((x1365*x1372))+(((-1.0)*r02*x1381))+(((-1.0)*cj3*r00*x1367))+((x1369*x1370))+((cj5*r01*x1370))+((cj0*x1379))+((r01*x1378)));
evalcond[8]=(((x1365*x1373))+(((-1.0)*r12*x1381))+((cj5*r11*x1370))+(((-1.0)*cj3*r10*x1367))+((r11*x1378))+((x1370*x1375))+((sj0*x1379)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1385=(r10*sj0);
IkReal x1386=(sj4*sj5);
IkReal x1387=(r11*sj0);
IkReal x1388=(cj5*sj4);
CheckValue<IkReal> x1389=IKPowWithIntegerCheck(sj0,-2);
if(!x1389.valid){
continue;
}
if( IKabs(((3.57142857142857)*(x1389.value)*(((((-0.01)*cj0*sj0))+(((0.245)*x1385*x1386))+(((-0.057)*sj5*x1387))+(((0.245)*x1387*x1388))+(((0.245)*cj4*r12*sj0))+(((-1.0)*py*sj0))+(((0.057)*cj5*x1385)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.875)*cj4*r22))+(((-0.875)*r21*x1388))+(((-0.875)*r20*x1386))+(((-0.203571428571429)*cj5*r20))+(((3.57142857142857)*pz))+(((0.203571428571429)*r21*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((3.57142857142857)*(x1389.value)*(((((-0.01)*cj0*sj0))+(((0.245)*x1385*x1386))+(((-0.057)*sj5*x1387))+(((0.245)*x1387*x1388))+(((0.245)*cj4*r12*sj0))+(((-1.0)*py*sj0))+(((0.057)*cj5*x1385))))))+IKsqr(((((-0.875)*cj4*r22))+(((-0.875)*r21*x1388))+(((-0.875)*r20*x1386))+(((-0.203571428571429)*cj5*r20))+(((3.57142857142857)*pz))+(((0.203571428571429)*r21*sj5))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((3.57142857142857)*(x1389.value)*(((((-0.01)*cj0*sj0))+(((0.245)*x1385*x1386))+(((-0.057)*sj5*x1387))+(((0.245)*x1387*x1388))+(((0.245)*cj4*r12*sj0))+(((-1.0)*py*sj0))+(((0.057)*cj5*x1385))))), ((((-0.875)*cj4*r22))+(((-0.875)*r21*x1388))+(((-0.875)*r20*x1386))+(((-0.203571428571429)*cj5*r20))+(((3.57142857142857)*pz))+(((0.203571428571429)*r21*sj5))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[9];
IkReal x1390=IKsin(j1);
IkReal x1391=IKcos(j1);
IkReal x1392=sj0*sj0;
IkReal x1393=cj0*cj0;
IkReal x1394=(cj5*r20);
IkReal x1395=((0.057)*cj0);
IkReal x1396=(cj5*r10);
IkReal x1397=((1.0)*py);
IkReal x1398=(cj0*sj0);
IkReal x1399=((1.0)*cj0);
IkReal x1400=(r21*sj5);
IkReal x1401=((0.245)*cj0);
IkReal x1402=((0.245)*r00);
IkReal x1403=(sj0*sj5);
IkReal x1404=((0.057)*sj5);
IkReal x1405=(cj5*r01);
IkReal x1406=((1.0)*px);
IkReal x1407=((0.245)*cj4);
IkReal x1408=(sj3*sj5);
IkReal x1409=(r11*sj5);
IkReal x1410=(r01*sj5);
IkReal x1411=((0.245)*cj3);
IkReal x1412=(sj4*sj5);
IkReal x1413=(cj5*r11);
IkReal x1414=(cj5*r00);
IkReal x1415=((0.057)*sj0);
IkReal x1416=((0.245)*sj4);
IkReal x1417=((0.01)*x1398);
IkReal x1418=(sj0*x1411);
IkReal x1419=((0.28)*x1390);
IkReal x1420=(sj3*x1416);
IkReal x1421=((0.28)*x1391);
IkReal x1422=(cj5*r21*sj3);
IkReal x1423=(x1398*x1419);
evalcond[0]=((((-0.057)*x1394))+(((-1.0)*cj5*r21*x1416))+(((-1.0)*r22*x1407))+pz+(((0.057)*x1400))+(((-0.245)*r20*x1412))+(((-1.0)*x1421)));
evalcond[1]=(((r12*sj0*x1407))+((sj0*x1413*x1416))+(((-1.0)*x1417))+((r10*x1403*x1416))+(((-0.057)*r11*x1403))+((x1396*x1415))+(((-1.0)*x1392*x1419))+(((-1.0)*sj0*x1397)));
evalcond[2]=(((r00*x1401*x1412))+((sj4*x1401*x1405))+((cj4*r02*x1401))+(((-1.0)*px*x1399))+x1417+((x1395*x1414))+(((-1.0)*x1393*x1419))+(((-1.0)*x1395*x1410)));
evalcond[3]=((((-1.0)*r10*x1407*x1408))+(((-1.0)*x1400*x1415))+((x1394*x1415))+((x1396*x1411))+(((-1.0)*pz*sj0))+(((-1.0)*x1409*x1411))+((r12*x1420))+(((-1.0)*sj3*x1407*x1413))+((sj0*x1421)));
evalcond[4]=((((-1.0)*sj3*x1405*x1407))+((x1394*x1395))+(((-1.0)*cj4*x1402*x1408))+((cj3*cj5*x1402))+((r02*x1420))+(((-1.0)*x1410*x1411))+(((-1.0)*x1395*x1400))+(((-1.0)*pz*x1399))+((cj0*x1421)));
evalcond[5]=((((-1.0)*r11*x1404))+(((-1.0)*r22*sj0*x1420))+(((-0.01)*cj0))+((r20*sj3*x1403*x1407))+((x1400*x1418))+(((-1.0)*sj0*x1419))+(((-1.0)*x1394*x1418))+(((0.057)*x1396))+(((-1.0)*x1397))+((sj0*x1407*x1422)));
evalcond[6]=((((-1.0)*cj3*x1394*x1401))+((cj4*x1401*x1422))+((cj4*r20*x1401*x1408))+((cj3*x1400*x1401))+(((0.057)*x1414))+(((-1.0)*x1406))+(((-1.0)*r01*x1404))+(((-1.0)*r22*sj3*sj4*x1401))+(((-1.0)*cj0*x1419))+(((0.01)*sj0)));
evalcond[7]=((((-1.0)*sj0*x1406))+((r10*x1401*x1412))+(((-0.057)*r01*x1403))+((sj4*x1401*x1413))+(((0.01)*x1392))+((x1414*x1415))+(((-1.0)*x1423))+((cj4*r12*x1401)));
evalcond[8]=((((-1.0)*cj0*x1397))+((sj0*x1405*x1416))+((x1395*x1396))+((sj4*x1402*x1403))+(((-0.01)*x1393))+(((-1.0)*x1395*x1409))+(((-1.0)*x1423))+((r02*sj0*x1407)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
j2eval[0]=cj0;
j2eval[1]=IKsign(cj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=sj0;
j2eval[1]=IKsign(sj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1424=(cj4*r22);
IkReal x1425=((1.0)*sj1);
IkReal x1426=(cj5*sj4);
IkReal x1427=(cj4*r02);
IkReal x1428=(sj4*sj5);
if( IKabs((((sj1*x1424))+((cj1*r00*x1428))+((cj1*x1427))+((r20*sj1*x1428))+((r21*sj1*x1426))+((cj1*r01*x1426)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x1425*x1428))+(((-1.0)*r01*x1425*x1426))+(((-1.0)*x1425*x1427))+((cj1*x1424))+((cj1*r21*x1426))+((cj1*r20*x1428)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj1*x1424))+((cj1*r00*x1428))+((cj1*x1427))+((r20*sj1*x1428))+((r21*sj1*x1426))+((cj1*r01*x1426))))+IKsqr(((((-1.0)*r00*x1425*x1428))+(((-1.0)*r01*x1425*x1426))+(((-1.0)*x1425*x1427))+((cj1*x1424))+((cj1*r21*x1426))+((cj1*r20*x1428))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((sj1*x1424))+((cj1*r00*x1428))+((cj1*x1427))+((r20*sj1*x1428))+((r21*sj1*x1426))+((cj1*r01*x1426))), ((((-1.0)*r00*x1425*x1428))+(((-1.0)*r01*x1425*x1426))+(((-1.0)*x1425*x1427))+((cj1*x1424))+((cj1*r21*x1426))+((cj1*r20*x1428))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1429=IKsin(j2);
IkReal x1430=IKcos(j2);
IkReal x1431=((0.057)*cj5);
IkReal x1432=(r21*sj5);
IkReal x1433=((0.245)*sj1);
IkReal x1434=(r01*sj5);
IkReal x1435=((1.0)*r20);
IkReal x1436=(sj4*sj5);
IkReal x1437=((1.0)*cj4);
IkReal x1438=(cj3*cj5);
IkReal x1439=((1.0)*r00);
IkReal x1440=(cj1*x1430);
IkReal x1441=(sj1*x1429);
IkReal x1442=(cj1*x1429);
IkReal x1443=(cj4*sj3*sj5);
IkReal x1444=((1.0)*sj3*sj4);
IkReal x1445=(sj1*x1430);
IkReal x1446=((1.0)*cj5*sj4);
IkReal x1447=(cj4*cj5*sj3);
IkReal x1448=(x1441+x1440);
evalcond[0]=((((-1.0)*r21*x1446))+(((-1.0)*x1435*x1436))+(((-1.0)*r22*x1437))+x1448);
evalcond[1]=((((-1.0)*x1436*x1439))+(((-1.0)*r01*x1446))+(((-1.0)*x1445))+(((-1.0)*r02*x1437))+x1442);
evalcond[2]=(((x1429*x1433))+(((0.28)*cj1))+((r20*x1431))+(((-1.0)*pz))+(((0.245)*x1440))+(((-0.057)*x1432)));
evalcond[3]=((((-0.28)*sj1))+(((-1.0)*px))+((r00*x1431))+(((0.245)*x1442))+(((-1.0)*x1430*x1433))+(((-0.057)*x1434)));
evalcond[4]=((((-1.0)*x1438*x1439))+x1448+((r00*x1443))+(((-1.0)*r02*x1444))+((cj3*x1434))+((r01*x1447)));
evalcond[5]=((((-1.0)*r22*x1444))+(((-1.0)*x1435*x1438))+((r21*x1447))+(((-1.0)*x1442))+x1445+((r20*x1443))+((cj3*x1432)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1449=(cj4*sj1);
IkReal x1450=(cj1*cj4);
IkReal x1451=(cj5*sj4);
IkReal x1452=((1.0)*cj1);
IkReal x1453=(sj4*sj5);
IkReal x1454=(sj1*x1453);
if( IKabs((((r22*x1449))+(((-1.0)*r00*x1452*x1453))+((r21*sj1*x1451))+((r20*x1454))+(((-1.0)*r01*x1451*x1452))+(((-1.0)*r02*x1450)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*r20*x1453))+((cj1*r21*x1451))+((r02*x1449))+((r00*x1454))+((r01*sj1*x1451))+((r22*x1450)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r22*x1449))+(((-1.0)*r00*x1452*x1453))+((r21*sj1*x1451))+((r20*x1454))+(((-1.0)*r01*x1451*x1452))+(((-1.0)*r02*x1450))))+IKsqr((((cj1*r20*x1453))+((cj1*r21*x1451))+((r02*x1449))+((r00*x1454))+((r01*sj1*x1451))+((r22*x1450))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r22*x1449))+(((-1.0)*r00*x1452*x1453))+((r21*sj1*x1451))+((r20*x1454))+(((-1.0)*r01*x1451*x1452))+(((-1.0)*r02*x1450))), (((cj1*r20*x1453))+((cj1*r21*x1451))+((r02*x1449))+((r00*x1454))+((r01*sj1*x1451))+((r22*x1450))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1455=IKcos(j2);
IkReal x1456=IKsin(j2);
IkReal x1457=((0.057)*cj5);
IkReal x1458=(r00*sj5);
IkReal x1459=(cj4*sj3);
IkReal x1460=((0.057)*sj5);
IkReal x1461=((1.0)*sj4);
IkReal x1462=(r20*sj5);
IkReal x1463=((1.0)*cj4);
IkReal x1464=(cj5*r01);
IkReal x1465=(cj5*r21);
IkReal x1466=(cj3*sj5);
IkReal x1467=(sj1*x1455);
IkReal x1468=(cj1*x1455);
IkReal x1469=((0.245)*x1456);
IkReal x1470=(sj3*x1461);
IkReal x1471=(sj1*x1456);
IkReal x1472=((1.0)*cj3*cj5);
IkReal x1473=((1.0)*cj1*x1456);
evalcond[0]=((((-1.0)*r22*x1463))+x1468+x1471+(((-1.0)*x1461*x1465))+(((-1.0)*x1461*x1462)));
evalcond[1]=((((-1.0)*x1458*x1461))+(((-1.0)*r02*x1463))+x1467+(((-1.0)*x1473))+(((-1.0)*x1461*x1464)));
evalcond[2]=((((0.28)*cj1))+(((0.245)*x1468))+((r20*x1457))+(((-1.0)*pz))+(((-1.0)*r21*x1460))+((sj1*x1469)));
evalcond[3]=((((-1.0)*cj1*x1469))+(((0.245)*x1467))+(((-1.0)*px))+(((-1.0)*r01*x1460))+(((0.28)*sj1))+((r00*x1457)));
evalcond[4]=((((-1.0)*r22*x1470))+(((-1.0)*r20*x1472))+((x1459*x1465))+((x1459*x1462))+x1467+(((-1.0)*x1473))+((r21*x1466)));
evalcond[5]=((((-1.0)*r00*x1472))+((r01*x1466))+((x1459*x1464))+((x1458*x1459))+(((-1.0)*x1471))+(((-1.0)*r02*x1470))+(((-1.0)*x1468)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1474=(cj4*r12);
IkReal x1475=((1.0)*sj1);
IkReal x1476=(cj4*r22);
IkReal x1477=(sj4*sj5);
IkReal x1478=(cj5*sj4);
IkReal x1479=(cj1*x1478);
if( IKabs((((r21*sj1*x1478))+((cj1*r10*x1477))+((cj1*x1474))+((r11*x1479))+((sj1*x1476))+((r20*sj1*x1477)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*r20*x1477))+((cj1*x1476))+((r21*x1479))+(((-1.0)*x1474*x1475))+(((-1.0)*r11*x1475*x1478))+(((-1.0)*r10*x1475*x1477)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r21*sj1*x1478))+((cj1*r10*x1477))+((cj1*x1474))+((r11*x1479))+((sj1*x1476))+((r20*sj1*x1477))))+IKsqr((((cj1*r20*x1477))+((cj1*x1476))+((r21*x1479))+(((-1.0)*x1474*x1475))+(((-1.0)*r11*x1475*x1478))+(((-1.0)*r10*x1475*x1477))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r21*sj1*x1478))+((cj1*r10*x1477))+((cj1*x1474))+((r11*x1479))+((sj1*x1476))+((r20*sj1*x1477))), (((cj1*r20*x1477))+((cj1*x1476))+((r21*x1479))+(((-1.0)*x1474*x1475))+(((-1.0)*r11*x1475*x1478))+(((-1.0)*r10*x1475*x1477))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1480=IKsin(j2);
IkReal x1481=IKcos(j2);
IkReal x1482=((1.0)*r10);
IkReal x1483=(cj3*cj5);
IkReal x1484=((0.057)*sj5);
IkReal x1485=((1.0)*sj4);
IkReal x1486=((0.245)*sj1);
IkReal x1487=((0.057)*cj5);
IkReal x1488=(r20*sj5);
IkReal x1489=((1.0)*cj4);
IkReal x1490=(cj3*sj5);
IkReal x1491=(cj4*sj3);
IkReal x1492=(cj1*x1481);
IkReal x1493=(sj1*x1480);
IkReal x1494=(cj1*x1480);
IkReal x1495=(sj1*x1481);
IkReal x1496=(cj5*x1491);
IkReal x1497=(x1492+x1493);
evalcond[0]=((((-1.0)*x1485*x1488))+(((-1.0)*cj5*r21*x1485))+(((-1.0)*r22*x1489))+x1497);
evalcond[1]=((((-1.0)*r12*x1489))+(((-1.0)*x1495))+(((-1.0)*cj5*r11*x1485))+(((-1.0)*sj4*sj5*x1482))+x1494);
evalcond[2]=((((0.28)*cj1))+(((-1.0)*r21*x1484))+((r20*x1487))+((x1480*x1486))+(((-1.0)*pz))+(((0.245)*x1492)));
evalcond[3]=((((-0.28)*sj1))+(((-1.0)*r11*x1484))+((r10*x1487))+(((-1.0)*x1481*x1486))+(((-1.0)*py))+(((0.245)*x1494)));
evalcond[4]=((((-1.0)*x1482*x1483))+(((-1.0)*r12*sj3*x1485))+((r11*x1490))+((r11*x1496))+x1497+((r10*sj5*x1491)));
evalcond[5]=(((r21*x1496))+((r21*x1490))+(((-1.0)*x1494))+(((-1.0)*r22*sj3*x1485))+x1495+(((-1.0)*r20*x1483))+((x1488*x1491)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1498=(cj5*sj4);
IkReal x1499=(cj1*cj4);
IkReal x1500=(cj4*sj1);
IkReal x1501=((1.0)*cj1);
IkReal x1502=(sj4*sj5);
if( IKabs((((r20*sj1*x1502))+((r22*x1500))+(((-1.0)*r10*x1501*x1502))+((r21*sj1*x1498))+(((-1.0)*r11*x1498*x1501))+(((-1.0)*r12*x1499)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*r21*x1498))+((r10*sj1*x1502))+((r12*x1500))+((cj1*r20*x1502))+((r22*x1499))+((r11*sj1*x1498)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r20*sj1*x1502))+((r22*x1500))+(((-1.0)*r10*x1501*x1502))+((r21*sj1*x1498))+(((-1.0)*r11*x1498*x1501))+(((-1.0)*r12*x1499))))+IKsqr((((cj1*r21*x1498))+((r10*sj1*x1502))+((r12*x1500))+((cj1*r20*x1502))+((r22*x1499))+((r11*sj1*x1498))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r20*sj1*x1502))+((r22*x1500))+(((-1.0)*r10*x1501*x1502))+((r21*sj1*x1498))+(((-1.0)*r11*x1498*x1501))+(((-1.0)*r12*x1499))), (((cj1*r21*x1498))+((r10*sj1*x1502))+((r12*x1500))+((cj1*r20*x1502))+((r22*x1499))+((r11*sj1*x1498))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1503=IKcos(j2);
IkReal x1504=IKsin(j2);
IkReal x1505=((1.0)*r10);
IkReal x1506=(cj3*cj5);
IkReal x1507=((0.057)*sj5);
IkReal x1508=((1.0)*sj4);
IkReal x1509=((0.057)*cj5);
IkReal x1510=(cj3*sj5);
IkReal x1511=(r20*sj5);
IkReal x1512=((1.0)*cj4);
IkReal x1513=(cj4*sj3);
IkReal x1514=(cj5*r21);
IkReal x1515=(cj5*r11);
IkReal x1516=(sj1*x1503);
IkReal x1517=(cj1*x1503);
IkReal x1518=((0.245)*x1504);
IkReal x1519=(sj1*x1504);
IkReal x1520=((1.0)*cj1*x1504);
evalcond[0]=((((-1.0)*r22*x1512))+x1519+x1517+(((-1.0)*x1508*x1511))+(((-1.0)*x1508*x1514)));
evalcond[1]=((((-1.0)*x1520))+(((-1.0)*sj4*sj5*x1505))+x1516+(((-1.0)*x1508*x1515))+(((-1.0)*r12*x1512)));
evalcond[2]=((((0.28)*cj1))+((r20*x1509))+(((-1.0)*pz))+((sj1*x1518))+(((0.245)*x1517))+(((-1.0)*r21*x1507)));
evalcond[3]=((((-1.0)*cj1*x1518))+((r10*x1509))+(((-1.0)*py))+(((0.28)*sj1))+(((0.245)*x1516))+(((-1.0)*r11*x1507)));
evalcond[4]=(((x1513*x1514))+(((-1.0)*x1520))+(((-1.0)*r22*sj3*x1508))+(((-1.0)*r20*x1506))+x1516+((r21*x1510))+((x1511*x1513)));
evalcond[5]=(((x1513*x1515))+((r11*x1510))+(((-1.0)*x1517))+(((-1.0)*x1519))+(((-1.0)*r12*sj3*x1508))+(((-1.0)*x1505*x1506))+((r10*sj5*x1513)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1521=(cj4*r12);
IkReal x1522=((1.0)*sj1);
IkReal x1523=(r10*sj4*sj5);
IkReal x1524=(cj5*r11*sj4);
IkReal x1525=(cj4*r22*sj0);
IkReal x1526=(r20*sj0*sj4*sj5);
IkReal x1527=(cj5*r21*sj0*sj4);
CheckValue<IkReal> x1528=IKPowWithIntegerCheck(IKsign(sj0),-1);
if(!x1528.valid){
continue;
}
CheckValue<IkReal> x1529 = IKatan2WithCheck(IkReal((((sj1*x1527))+((sj1*x1526))+((sj1*x1525))+((cj1*x1524))+((cj1*x1523))+((cj1*x1521)))),IkReal((((cj1*x1525))+((cj1*x1526))+((cj1*x1527))+(((-1.0)*x1522*x1524))+(((-1.0)*x1522*x1523))+(((-1.0)*x1521*x1522)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1529.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1528.value)))+(x1529.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x1530=IKsin(j2);
IkReal x1531=IKcos(j2);
IkReal x1532=((1.0)*cj5);
IkReal x1533=((0.057)*cj5);
IkReal x1534=(r00*sj5);
IkReal x1535=(cj4*sj3);
IkReal x1536=((0.057)*sj5);
IkReal x1537=(cj0*sj1);
IkReal x1538=(sj0*sj1);
IkReal x1539=((1.0)*sj4);
IkReal x1540=(r10*sj5);
IkReal x1541=(r20*sj5);
IkReal x1542=((1.0)*cj4);
IkReal x1543=(cj3*sj5);
IkReal x1544=(cj1*x1531);
IkReal x1545=(sj1*x1530);
IkReal x1546=(sj3*x1539);
IkReal x1547=((1.0)*x1531);
IkReal x1548=((0.245)*x1531);
IkReal x1549=(cj1*x1530);
evalcond[0]=((((-1.0)*r21*sj4*x1532))+(((-1.0)*r22*x1542))+x1544+x1545+(((-1.0)*x1539*x1541)));
evalcond[1]=((((0.28)*cj1))+(((0.245)*x1545))+(((0.245)*x1544))+((r20*x1533))+(((-1.0)*pz))+(((-1.0)*r21*x1536)));
evalcond[2]=((((-1.0)*r02*x1542))+(((-1.0)*r01*sj4*x1532))+((cj0*x1549))+(((-1.0)*x1537*x1547))+(((-1.0)*x1534*x1539)));
evalcond[3]=((((-1.0)*r11*sj4*x1532))+((sj0*x1549))+(((-1.0)*x1539*x1540))+(((-1.0)*r12*x1542))+(((-1.0)*x1538*x1547)));
evalcond[4]=((((-1.0)*r01*x1536))+(((0.245)*cj0*x1549))+((r00*x1533))+(((-1.0)*px))+(((-1.0)*x1537*x1548))+(((-0.28)*x1537))+(((0.01)*sj0)));
evalcond[5]=((((-1.0)*r11*x1536))+((r10*x1533))+(((-0.01)*cj0))+(((-1.0)*py))+(((-0.28)*x1538))+(((0.245)*sj0*x1549))+(((-1.0)*x1538*x1548)));
evalcond[6]=((((-1.0)*x1549))+((cj5*r21*x1535))+(((-1.0)*cj3*r20*x1532))+(((-1.0)*r22*x1546))+((sj1*x1531))+((r21*x1543))+((x1535*x1541)));
evalcond[7]=((((-1.0)*r02*x1546))+((cj5*r01*x1535))+((x1530*x1537))+((cj0*x1544))+(((-1.0)*cj3*r00*x1532))+((x1534*x1535))+((r01*x1543)));
evalcond[8]=(((x1530*x1538))+((sj0*x1544))+((r11*x1543))+((cj5*r11*x1535))+(((-1.0)*cj3*r10*x1532))+((x1535*x1540))+(((-1.0)*r12*x1546)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1550=(cj0*sj4);
IkReal x1551=(cj1*sj5);
IkReal x1552=(cj5*sj1);
IkReal x1553=(r01*sj4);
IkReal x1554=(cj4*r02);
IkReal x1555=((1.0)*sj1);
IkReal x1556=(cj1*cj5);
IkReal x1557=(r00*sj4);
IkReal x1558=(cj0*cj4*r22);
CheckValue<IkReal> x1559=IKPowWithIntegerCheck(IKsign(cj0),-1);
if(!x1559.valid){
continue;
}
CheckValue<IkReal> x1560 = IKatan2WithCheck(IkReal((((x1551*x1557))+((x1553*x1556))+((cj1*x1554))+((sj1*x1558))+((r21*x1550*x1552))+((r20*sj1*sj5*x1550)))),IkReal((((cj1*x1558))+(((-1.0)*x1552*x1553))+((r20*x1550*x1551))+(((-1.0)*sj5*x1555*x1557))+((r21*x1550*x1556))+(((-1.0)*x1554*x1555)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1560.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1559.value)))+(x1560.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x1561=IKsin(j2);
IkReal x1562=IKcos(j2);
IkReal x1563=((1.0)*cj5);
IkReal x1564=((0.057)*cj5);
IkReal x1565=(r00*sj5);
IkReal x1566=(cj4*sj3);
IkReal x1567=((0.057)*sj5);
IkReal x1568=(cj0*sj1);
IkReal x1569=(sj0*sj1);
IkReal x1570=((1.0)*sj4);
IkReal x1571=(r10*sj5);
IkReal x1572=(r20*sj5);
IkReal x1573=((1.0)*cj4);
IkReal x1574=(cj3*sj5);
IkReal x1575=(cj1*x1562);
IkReal x1576=(sj1*x1561);
IkReal x1577=(sj3*x1570);
IkReal x1578=((1.0)*x1562);
IkReal x1579=((0.245)*x1562);
IkReal x1580=(cj1*x1561);
evalcond[0]=((((-1.0)*x1570*x1572))+(((-1.0)*r22*x1573))+x1576+x1575+(((-1.0)*r21*sj4*x1563)));
evalcond[1]=((((0.28)*cj1))+(((0.245)*x1575))+(((0.245)*x1576))+((r20*x1564))+(((-1.0)*pz))+(((-1.0)*r21*x1567)));
evalcond[2]=((((-1.0)*x1565*x1570))+(((-1.0)*r02*x1573))+(((-1.0)*r01*sj4*x1563))+(((-1.0)*x1568*x1578))+((cj0*x1580)));
evalcond[3]=((((-1.0)*x1570*x1571))+(((-1.0)*r11*sj4*x1563))+(((-1.0)*x1569*x1578))+((sj0*x1580))+(((-1.0)*r12*x1573)));
evalcond[4]=((((0.245)*cj0*x1580))+(((-0.28)*x1568))+(((-1.0)*px))+(((-1.0)*x1568*x1579))+(((-1.0)*r01*x1567))+(((0.01)*sj0))+((r00*x1564)));
evalcond[5]=((((-0.01)*cj0))+(((-0.28)*x1569))+(((-1.0)*py))+(((-1.0)*x1569*x1579))+(((0.245)*sj0*x1580))+((r10*x1564))+(((-1.0)*r11*x1567)));
evalcond[6]=((((-1.0)*cj3*r20*x1563))+((x1566*x1572))+(((-1.0)*r22*x1577))+((sj1*x1562))+((r21*x1574))+((cj5*r21*x1566))+(((-1.0)*x1580)));
evalcond[7]=((((-1.0)*r02*x1577))+(((-1.0)*cj3*r00*x1563))+((x1561*x1568))+((cj0*x1575))+((r01*x1574))+((cj5*r01*x1566))+((x1565*x1566)));
evalcond[8]=(((x1566*x1571))+((cj5*r11*x1566))+((sj0*x1575))+((x1561*x1569))+((r11*x1574))+(((-1.0)*r12*x1577))+(((-1.0)*cj3*r10*x1563)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1581=(r20*sj0);
IkReal x1582=((1.0)*sj5);
IkReal x1583=(r21*sj0);
IkReal x1584=((1.0)*cj5);
CheckValue<IkReal> x1585=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*sj4*x1584))+(((-1.0)*cj4*r12))+(((-1.0)*r10*sj4*x1582)))),-1);
if(!x1585.valid){
continue;
}
CheckValue<IkReal> x1586 = IKatan2WithCheck(IkReal(((((-1.0)*cj4*x1583*x1584))+((r22*sj0*sj4))+(((-1.0)*cj4*x1581*x1582)))),IkReal((((cj5*x1581))+(((-1.0)*x1582*x1583)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1586.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1585.value)))+(x1586.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[3];
IkReal x1587=IKcos(j3);
IkReal x1588=IKsin(j3);
IkReal x1589=((1.0)*cj5);
IkReal x1590=(sj4*x1587);
IkReal x1591=(sj5*x1588);
IkReal x1592=(cj4*x1587);
IkReal x1593=((1.0)*sj5*x1592);
evalcond[0]=((((-1.0)*r21*x1589*x1592))+((r22*x1590))+(((-1.0)*r20*x1588*x1589))+(((-1.0)*r20*x1593))+((r21*x1591)));
evalcond[1]=(cj0+((r12*x1590))+((r11*x1591))+(((-1.0)*r11*x1589*x1592))+(((-1.0)*r10*x1588*x1589))+(((-1.0)*r10*x1593)));
evalcond[2]=(((r01*x1591))+(((-1.0)*r01*x1589*x1592))+(((-1.0)*sj0))+(((-1.0)*r00*x1588*x1589))+(((-1.0)*r00*x1593))+((r02*x1590)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
j1eval[0]=sj0;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
j1eval[0]=cj0;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1594=((0.203571428571429)*cj5);
IkReal x1595=((0.875)*cj4);
IkReal x1596=((0.875)*sj4);
IkReal x1597=((0.203571428571429)*sj5);
if( IKabs(((((-3.57142857142857)*py))+((cj5*r11*x1596))+((r12*x1595))+((r10*sj5*x1596))+((r10*x1594))+(((-1.0)*r11*x1597)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj5*r21*x1596))+(((-1.0)*r22*x1595))+(((-1.0)*r20*x1594))+((r21*x1597))+(((-1.0)*r20*sj5*x1596))+(((3.57142857142857)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-3.57142857142857)*py))+((cj5*r11*x1596))+((r12*x1595))+((r10*sj5*x1596))+((r10*x1594))+(((-1.0)*r11*x1597))))+IKsqr(((((-1.0)*cj5*r21*x1596))+(((-1.0)*r22*x1595))+(((-1.0)*r20*x1594))+((r21*x1597))+(((-1.0)*r20*sj5*x1596))+(((3.57142857142857)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-3.57142857142857)*py))+((cj5*r11*x1596))+((r12*x1595))+((r10*sj5*x1596))+((r10*x1594))+(((-1.0)*r11*x1597))), ((((-1.0)*cj5*r21*x1596))+(((-1.0)*r22*x1595))+(((-1.0)*r20*x1594))+((r21*x1597))+(((-1.0)*r20*sj5*x1596))+(((3.57142857142857)*pz))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1598=((1.0)*py);
IkReal x1599=((0.245)*sj3);
IkReal x1600=(cj4*sj5);
IkReal x1601=((0.245)*cj4);
IkReal x1602=((0.245)*sj4);
IkReal x1603=(cj5*r11);
IkReal x1604=(r11*sj5);
IkReal x1605=((0.057)*cj5);
IkReal x1606=((0.245)*cj3);
IkReal x1607=(r21*sj5);
IkReal x1608=(cj5*r21);
IkReal x1609=(r10*x1605);
IkReal x1610=((0.28)*(IKsin(j1)));
IkReal x1611=((0.057)*x1604);
IkReal x1612=(r20*x1605);
IkReal x1613=((0.28)*(IKcos(j1)));
IkReal x1614=((0.057)*x1607);
IkReal x1615=(x1612+x1613);
IkReal x1616=(x1610+x1611+x1598);
evalcond[0]=(x1614+(((-1.0)*x1615))+(((-1.0)*r22*x1601))+pz+(((-1.0)*x1602*x1608))+(((-1.0)*r20*sj5*x1602)));
evalcond[1]=(x1609+(((-1.0)*x1616))+((r10*sj5*x1602))+((r12*x1601))+((x1602*x1603)));
evalcond[2]=(((r20*x1599*x1600))+x1609+(((-1.0)*x1616))+((cj4*x1599*x1608))+(((-1.0)*r22*sj4*x1599))+((x1606*x1607))+(((-1.0)*cj5*r20*x1606)));
evalcond[3]=(x1615+(((-1.0)*x1614))+((cj5*r10*x1606))+((r12*sj4*x1599))+(((-1.0)*pz))+(((-1.0)*cj4*x1599*x1603))+(((-1.0)*r10*x1599*x1600))+(((-1.0)*x1604*x1606)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1617=(cj4*r12);
IkReal x1618=((1.0)*sj1);
IkReal x1619=(cj4*r22);
IkReal x1620=(sj4*sj5);
IkReal x1621=(cj5*sj4);
IkReal x1622=(cj1*x1621);
if( IKabs((((sj1*x1619))+((cj1*r10*x1620))+((r11*x1622))+((r20*sj1*x1620))+((r21*sj1*x1621))+((cj1*x1617)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r21*x1622))+(((-1.0)*r11*x1618*x1621))+(((-1.0)*x1617*x1618))+((cj1*r20*x1620))+(((-1.0)*r10*x1618*x1620))+((cj1*x1619)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj1*x1619))+((cj1*r10*x1620))+((r11*x1622))+((r20*sj1*x1620))+((r21*sj1*x1621))+((cj1*x1617))))+IKsqr((((r21*x1622))+(((-1.0)*r11*x1618*x1621))+(((-1.0)*x1617*x1618))+((cj1*r20*x1620))+(((-1.0)*r10*x1618*x1620))+((cj1*x1619))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((sj1*x1619))+((cj1*r10*x1620))+((r11*x1622))+((r20*sj1*x1620))+((r21*sj1*x1621))+((cj1*x1617))), (((r21*x1622))+(((-1.0)*r11*x1618*x1621))+(((-1.0)*x1617*x1618))+((cj1*r20*x1620))+(((-1.0)*r10*x1618*x1620))+((cj1*x1619))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1623=IKsin(j2);
IkReal x1624=IKcos(j2);
IkReal x1625=((1.0)*r10);
IkReal x1626=(cj3*cj5);
IkReal x1627=((0.057)*sj5);
IkReal x1628=((1.0)*sj4);
IkReal x1629=((0.245)*sj1);
IkReal x1630=((0.057)*cj5);
IkReal x1631=(r20*sj5);
IkReal x1632=((1.0)*cj4);
IkReal x1633=(cj3*sj5);
IkReal x1634=(cj4*sj3);
IkReal x1635=(cj1*x1624);
IkReal x1636=(sj1*x1623);
IkReal x1637=(cj1*x1623);
IkReal x1638=(sj1*x1624);
IkReal x1639=(cj5*x1634);
IkReal x1640=(x1635+x1636);
evalcond[0]=((((-1.0)*r22*x1632))+x1640+(((-1.0)*x1628*x1631))+(((-1.0)*cj5*r21*x1628)));
evalcond[1]=((((-1.0)*r12*x1632))+x1637+(((-1.0)*sj4*sj5*x1625))+(((-1.0)*x1638))+(((-1.0)*cj5*r11*x1628)));
evalcond[2]=((((0.28)*cj1))+(((0.245)*x1635))+(((-1.0)*r21*x1627))+((r20*x1630))+((x1623*x1629))+(((-1.0)*pz)));
evalcond[3]=((((-0.28)*sj1))+(((0.245)*x1637))+(((-1.0)*r11*x1627))+((r10*x1630))+(((-1.0)*py))+(((-1.0)*x1624*x1629)));
evalcond[4]=((((-1.0)*r12*sj3*x1628))+((r11*x1639))+((r11*x1633))+x1640+(((-1.0)*x1625*x1626))+((r10*sj5*x1634)));
evalcond[5]=(((r21*x1639))+((r21*x1633))+(((-1.0)*r22*sj3*x1628))+x1638+(((-1.0)*x1637))+((x1631*x1634))+(((-1.0)*r20*x1626)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1641=((0.203571428571429)*cj5);
IkReal x1642=((0.875)*cj4);
IkReal x1643=((0.875)*sj4);
IkReal x1644=((0.203571428571429)*sj5);
if( IKabs((((r11*x1644))+(((-1.0)*r12*x1642))+(((-1.0)*cj5*r11*x1643))+(((-1.0)*r10*x1641))+(((3.57142857142857)*py))+(((-1.0)*r10*sj5*x1643)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r21*x1644))+(((-1.0)*r22*x1642))+(((-1.0)*cj5*r21*x1643))+(((-1.0)*r20*x1641))+(((-1.0)*r20*sj5*x1643))+(((3.57142857142857)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r11*x1644))+(((-1.0)*r12*x1642))+(((-1.0)*cj5*r11*x1643))+(((-1.0)*r10*x1641))+(((3.57142857142857)*py))+(((-1.0)*r10*sj5*x1643))))+IKsqr((((r21*x1644))+(((-1.0)*r22*x1642))+(((-1.0)*cj5*r21*x1643))+(((-1.0)*r20*x1641))+(((-1.0)*r20*sj5*x1643))+(((3.57142857142857)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((r11*x1644))+(((-1.0)*r12*x1642))+(((-1.0)*cj5*r11*x1643))+(((-1.0)*r10*x1641))+(((3.57142857142857)*py))+(((-1.0)*r10*sj5*x1643))), (((r21*x1644))+(((-1.0)*r22*x1642))+(((-1.0)*cj5*r21*x1643))+(((-1.0)*r20*x1641))+(((-1.0)*r20*sj5*x1643))+(((3.57142857142857)*pz))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1645=((0.245)*r12);
IkReal x1646=(sj3*sj4);
IkReal x1647=((0.245)*cj5);
IkReal x1648=((0.245)*r22);
IkReal x1649=(r11*sj5);
IkReal x1650=((0.057)*cj5);
IkReal x1651=(cj4*sj3);
IkReal x1652=((0.245)*cj3);
IkReal x1653=(r21*sj5);
IkReal x1654=((0.057)*x1653);
IkReal x1655=(r20*x1650);
IkReal x1656=((0.28)*(IKcos(j1)));
IkReal x1657=(r10*x1650);
IkReal x1658=((0.28)*(IKsin(j1)));
IkReal x1659=((0.057)*x1649);
IkReal x1660=((0.245)*sj4*sj5);
IkReal x1661=(x1654+pz);
IkReal x1662=((0.245)*sj5*x1651);
IkReal x1663=(x1656+x1655);
IkReal x1664=(x1658+x1657);
evalcond[0]=(x1659+(((-1.0)*r10*x1660))+(((-1.0)*r11*sj4*x1647))+py+(((-1.0)*x1664))+(((-1.0)*cj4*x1645)));
evalcond[1]=(x1661+(((-1.0)*r20*x1660))+(((-1.0)*r21*sj4*x1647))+(((-1.0)*x1663))+(((-1.0)*cj4*x1648)));
evalcond[2]=(x1661+((x1645*x1646))+((cj3*r10*x1647))+(((-1.0)*r10*x1662))+(((-1.0)*r11*x1647*x1651))+(((-1.0)*x1663))+(((-1.0)*x1649*x1652)));
evalcond[3]=((((-1.0)*r21*x1647*x1651))+(((-1.0)*x1652*x1653))+x1664+(((-1.0)*r20*x1662))+(((-1.0)*py))+(((-1.0)*x1659))+((x1646*x1648))+((cj3*r20*x1647)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1665=(cj5*sj4);
IkReal x1666=(cj1*cj4);
IkReal x1667=(cj4*sj1);
IkReal x1668=((1.0)*cj1);
IkReal x1669=(sj4*sj5);
if( IKabs((((r20*sj1*x1669))+((r21*sj1*x1665))+(((-1.0)*r11*x1665*x1668))+(((-1.0)*r12*x1666))+(((-1.0)*r10*x1668*x1669))+((r22*x1667)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*sj1*x1669))+((cj1*r21*x1665))+((r12*x1667))+((cj1*r20*x1669))+((r11*sj1*x1665))+((r22*x1666)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r20*sj1*x1669))+((r21*sj1*x1665))+(((-1.0)*r11*x1665*x1668))+(((-1.0)*r12*x1666))+(((-1.0)*r10*x1668*x1669))+((r22*x1667))))+IKsqr((((r10*sj1*x1669))+((cj1*r21*x1665))+((r12*x1667))+((cj1*r20*x1669))+((r11*sj1*x1665))+((r22*x1666))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r20*sj1*x1669))+((r21*sj1*x1665))+(((-1.0)*r11*x1665*x1668))+(((-1.0)*r12*x1666))+(((-1.0)*r10*x1668*x1669))+((r22*x1667))), (((r10*sj1*x1669))+((cj1*r21*x1665))+((r12*x1667))+((cj1*r20*x1669))+((r11*sj1*x1665))+((r22*x1666))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1670=IKcos(j2);
IkReal x1671=IKsin(j2);
IkReal x1672=((1.0)*r10);
IkReal x1673=(cj3*cj5);
IkReal x1674=((0.057)*sj5);
IkReal x1675=((1.0)*sj4);
IkReal x1676=((0.057)*cj5);
IkReal x1677=(cj3*sj5);
IkReal x1678=(r20*sj5);
IkReal x1679=((1.0)*cj4);
IkReal x1680=(cj4*sj3);
IkReal x1681=(cj5*r21);
IkReal x1682=(cj5*r11);
IkReal x1683=(sj1*x1670);
IkReal x1684=(cj1*x1670);
IkReal x1685=((0.245)*x1671);
IkReal x1686=(sj1*x1671);
IkReal x1687=((1.0)*cj1*x1671);
evalcond[0]=((((-1.0)*x1675*x1681))+x1684+x1686+(((-1.0)*r22*x1679))+(((-1.0)*x1675*x1678)));
evalcond[1]=((((-1.0)*x1687))+(((-1.0)*x1675*x1682))+x1683+(((-1.0)*r12*x1679))+(((-1.0)*sj4*sj5*x1672)));
evalcond[2]=((((0.28)*cj1))+((sj1*x1685))+(((-1.0)*pz))+((r20*x1676))+(((-1.0)*r21*x1674))+(((0.245)*x1684)));
evalcond[3]=((((-1.0)*cj1*x1685))+(((-1.0)*r11*x1674))+(((-1.0)*py))+(((0.28)*sj1))+((r10*x1676))+(((0.245)*x1683)));
evalcond[4]=(((r21*x1677))+(((-1.0)*x1687))+((x1680*x1681))+(((-1.0)*r20*x1673))+x1683+(((-1.0)*r22*sj3*x1675))+((x1678*x1680)));
evalcond[5]=((((-1.0)*x1672*x1673))+((r10*sj5*x1680))+((x1680*x1682))+(((-1.0)*r12*sj3*x1675))+(((-1.0)*x1686))+(((-1.0)*x1684))+((r11*x1677)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1688=((0.875)*cj4);
IkReal x1689=((0.203571428571429)*cj5);
IkReal x1690=((0.203571428571429)*sj5);
IkReal x1691=((0.875)*sj4*sj5);
IkReal x1692=((0.875)*cj5*sj4);
if( IKabs((((r01*x1692))+((r00*x1691))+((r00*x1689))+(((-3.57142857142857)*px))+((r02*x1688))+(((-1.0)*r01*x1690)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r21*x1692))+((r21*x1690))+(((-1.0)*r20*x1691))+(((-1.0)*r20*x1689))+(((-1.0)*r22*x1688))+(((3.57142857142857)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1692))+((r00*x1691))+((r00*x1689))+(((-3.57142857142857)*px))+((r02*x1688))+(((-1.0)*r01*x1690))))+IKsqr(((((-1.0)*r21*x1692))+((r21*x1690))+(((-1.0)*r20*x1691))+(((-1.0)*r20*x1689))+(((-1.0)*r22*x1688))+(((3.57142857142857)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((r01*x1692))+((r00*x1691))+((r00*x1689))+(((-3.57142857142857)*px))+((r02*x1688))+(((-1.0)*r01*x1690))), ((((-1.0)*r21*x1692))+((r21*x1690))+(((-1.0)*r20*x1691))+(((-1.0)*r20*x1689))+(((-1.0)*r22*x1688))+(((3.57142857142857)*pz))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1693=((1.0)*px);
IkReal x1694=((0.245)*r20);
IkReal x1695=(cj3*cj5);
IkReal x1696=((0.245)*r00);
IkReal x1697=(r01*sj5);
IkReal x1698=((0.057)*cj5);
IkReal x1699=((0.245)*cj4);
IkReal x1700=((0.245)*cj3);
IkReal x1701=(sj4*sj5);
IkReal x1702=(cj5*r01);
IkReal x1703=((0.245)*sj4);
IkReal x1704=(r21*sj5);
IkReal x1705=(cj5*r21);
IkReal x1706=(r00*x1698);
IkReal x1707=((0.28)*(IKsin(j1)));
IkReal x1708=((0.057)*x1697);
IkReal x1709=(r20*x1698);
IkReal x1710=((0.28)*(IKcos(j1)));
IkReal x1711=((0.057)*x1704);
IkReal x1712=(cj4*sj3*sj5);
IkReal x1713=(sj3*x1703);
IkReal x1714=(x1709+x1710);
IkReal x1715=(x1707+x1708+x1693);
evalcond[0]=(x1711+(((-1.0)*x1714))+(((-1.0)*r22*x1699))+(((-1.0)*x1703*x1705))+pz+(((-1.0)*x1694*x1701)));
evalcond[1]=(((x1696*x1701))+x1706+(((-1.0)*x1715))+((r02*x1699))+((x1702*x1703)));
evalcond[2]=(((x1694*x1712))+((sj3*x1699*x1705))+x1706+(((-1.0)*x1715))+(((-1.0)*x1694*x1695))+((x1700*x1704))+(((-1.0)*r22*x1713)));
evalcond[3]=(((r02*x1713))+x1714+(((-1.0)*x1711))+((x1695*x1696))+(((-1.0)*pz))+(((-1.0)*x1696*x1712))+(((-1.0)*x1697*x1700))+(((-1.0)*sj3*x1699*x1702)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1716=(cj4*r22);
IkReal x1717=((1.0)*sj1);
IkReal x1718=(cj5*sj4);
IkReal x1719=(cj4*r02);
IkReal x1720=(sj4*sj5);
if( IKabs((((cj1*r00*x1720))+((cj1*x1719))+((r21*sj1*x1718))+((r20*sj1*x1720))+((cj1*r01*x1718))+((sj1*x1716)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*x1716))+((cj1*r21*x1718))+(((-1.0)*r01*x1717*x1718))+((cj1*r20*x1720))+(((-1.0)*r00*x1717*x1720))+(((-1.0)*x1717*x1719)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*r00*x1720))+((cj1*x1719))+((r21*sj1*x1718))+((r20*sj1*x1720))+((cj1*r01*x1718))+((sj1*x1716))))+IKsqr((((cj1*x1716))+((cj1*r21*x1718))+(((-1.0)*r01*x1717*x1718))+((cj1*r20*x1720))+(((-1.0)*r00*x1717*x1720))+(((-1.0)*x1717*x1719))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*r00*x1720))+((cj1*x1719))+((r21*sj1*x1718))+((r20*sj1*x1720))+((cj1*r01*x1718))+((sj1*x1716))), (((cj1*x1716))+((cj1*r21*x1718))+(((-1.0)*r01*x1717*x1718))+((cj1*r20*x1720))+(((-1.0)*r00*x1717*x1720))+(((-1.0)*x1717*x1719))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1721=IKsin(j2);
IkReal x1722=IKcos(j2);
IkReal x1723=((0.057)*cj5);
IkReal x1724=(r21*sj5);
IkReal x1725=((0.245)*sj1);
IkReal x1726=(r01*sj5);
IkReal x1727=((1.0)*r20);
IkReal x1728=(sj4*sj5);
IkReal x1729=((1.0)*cj4);
IkReal x1730=(cj3*cj5);
IkReal x1731=((1.0)*r00);
IkReal x1732=(cj1*x1722);
IkReal x1733=(sj1*x1721);
IkReal x1734=(cj1*x1721);
IkReal x1735=(cj4*sj3*sj5);
IkReal x1736=((1.0)*sj3*sj4);
IkReal x1737=(sj1*x1722);
IkReal x1738=((1.0)*cj5*sj4);
IkReal x1739=(cj4*cj5*sj3);
IkReal x1740=(x1733+x1732);
evalcond[0]=((((-1.0)*r22*x1729))+x1740+(((-1.0)*r21*x1738))+(((-1.0)*x1727*x1728)));
evalcond[1]=((((-1.0)*x1728*x1731))+x1734+(((-1.0)*r01*x1738))+(((-1.0)*x1737))+(((-1.0)*r02*x1729)));
evalcond[2]=((((0.28)*cj1))+(((-0.057)*x1724))+((x1721*x1725))+(((-1.0)*pz))+((r20*x1723))+(((0.245)*x1732)));
evalcond[3]=((((-0.28)*sj1))+((r00*x1723))+(((-0.057)*x1726))+(((-1.0)*x1722*x1725))+(((-1.0)*px))+(((0.245)*x1734)));
evalcond[4]=(((r01*x1739))+((r00*x1735))+x1740+((cj3*x1726))+(((-1.0)*x1730*x1731))+(((-1.0)*r02*x1736)));
evalcond[5]=(x1737+((cj3*x1724))+((r21*x1739))+((r20*x1735))+(((-1.0)*x1734))+(((-1.0)*x1727*x1730))+(((-1.0)*r22*x1736)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1741=((0.875)*cj4);
IkReal x1742=((0.203571428571429)*cj5);
IkReal x1743=((0.203571428571429)*sj5);
IkReal x1744=((0.875)*sj4*sj5);
IkReal x1745=((0.875)*cj5*sj4);
if( IKabs(((((-1.0)*r00*x1742))+(((-1.0)*r00*x1744))+(((-1.0)*r01*x1745))+((r01*x1743))+(((3.57142857142857)*px))+(((-1.0)*r02*x1741)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r22*x1741))+((r21*x1743))+(((-1.0)*r20*x1742))+(((-1.0)*r20*x1744))+(((-1.0)*r21*x1745))+(((3.57142857142857)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x1742))+(((-1.0)*r00*x1744))+(((-1.0)*r01*x1745))+((r01*x1743))+(((3.57142857142857)*px))+(((-1.0)*r02*x1741))))+IKsqr(((((-1.0)*r22*x1741))+((r21*x1743))+(((-1.0)*r20*x1742))+(((-1.0)*r20*x1744))+(((-1.0)*r21*x1745))+(((3.57142857142857)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*r00*x1742))+(((-1.0)*r00*x1744))+(((-1.0)*r01*x1745))+((r01*x1743))+(((3.57142857142857)*px))+(((-1.0)*r02*x1741))), ((((-1.0)*r22*x1741))+((r21*x1743))+(((-1.0)*r20*x1742))+(((-1.0)*r20*x1744))+(((-1.0)*r21*x1745))+(((3.57142857142857)*pz))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1746=((0.245)*r20);
IkReal x1747=(cj3*cj5);
IkReal x1748=((0.245)*r00);
IkReal x1749=(r01*sj5);
IkReal x1750=(sj4*sj5);
IkReal x1751=((0.245)*cj4);
IkReal x1752=((0.245)*cj3);
IkReal x1753=(cj5*r01);
IkReal x1754=((0.245)*sj4);
IkReal x1755=((0.057)*cj5);
IkReal x1756=(r21*sj5);
IkReal x1757=(cj5*r21);
IkReal x1758=((0.057)*x1756);
IkReal x1759=(r20*x1755);
IkReal x1760=((0.28)*(IKcos(j1)));
IkReal x1761=((0.28)*(IKsin(j1)));
IkReal x1762=(r00*x1755);
IkReal x1763=((0.057)*x1749);
IkReal x1764=(cj4*sj3*sj5);
IkReal x1765=(sj3*x1754);
IkReal x1766=(x1758+pz);
IkReal x1767=(x1762+x1761);
IkReal x1768=(x1760+x1759);
evalcond[0]=((((-1.0)*x1748*x1750))+(((-1.0)*x1767))+x1763+px+(((-1.0)*x1753*x1754))+(((-1.0)*r02*x1751)));
evalcond[1]=((((-1.0)*x1768))+x1766+(((-1.0)*r22*x1751))+(((-1.0)*x1746*x1750))+(((-1.0)*x1754*x1757)));
evalcond[2]=((((-1.0)*x1768))+x1766+(((-1.0)*sj3*x1751*x1753))+(((-1.0)*x1749*x1752))+((x1747*x1748))+(((-1.0)*x1748*x1764))+((r02*x1765)));
evalcond[3]=((((-1.0)*x1746*x1764))+(((-1.0)*x1763))+x1767+(((-1.0)*sj3*x1751*x1757))+((x1746*x1747))+(((-1.0)*px))+(((-1.0)*x1752*x1756))+((r22*x1765)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1769=(cj4*sj1);
IkReal x1770=(cj1*cj4);
IkReal x1771=(cj5*sj4);
IkReal x1772=((1.0)*cj1);
IkReal x1773=(sj4*sj5);
IkReal x1774=(sj1*x1773);
if( IKabs((((r21*sj1*x1771))+((r20*x1774))+(((-1.0)*r01*x1771*x1772))+((r22*x1769))+(((-1.0)*r00*x1772*x1773))+(((-1.0)*r02*x1770)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r22*x1770))+((r01*sj1*x1771))+((cj1*r21*x1771))+((r00*x1774))+((cj1*r20*x1773))+((r02*x1769)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r21*sj1*x1771))+((r20*x1774))+(((-1.0)*r01*x1771*x1772))+((r22*x1769))+(((-1.0)*r00*x1772*x1773))+(((-1.0)*r02*x1770))))+IKsqr((((r22*x1770))+((r01*sj1*x1771))+((cj1*r21*x1771))+((r00*x1774))+((cj1*r20*x1773))+((r02*x1769))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r21*sj1*x1771))+((r20*x1774))+(((-1.0)*r01*x1771*x1772))+((r22*x1769))+(((-1.0)*r00*x1772*x1773))+(((-1.0)*r02*x1770))), (((r22*x1770))+((r01*sj1*x1771))+((cj1*r21*x1771))+((r00*x1774))+((cj1*r20*x1773))+((r02*x1769))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1775=IKcos(j2);
IkReal x1776=IKsin(j2);
IkReal x1777=((0.057)*cj5);
IkReal x1778=(r00*sj5);
IkReal x1779=(cj4*sj3);
IkReal x1780=((0.057)*sj5);
IkReal x1781=((1.0)*sj4);
IkReal x1782=(r20*sj5);
IkReal x1783=((1.0)*cj4);
IkReal x1784=(cj5*r01);
IkReal x1785=(cj5*r21);
IkReal x1786=(cj3*sj5);
IkReal x1787=(sj1*x1775);
IkReal x1788=(cj1*x1775);
IkReal x1789=((0.245)*x1776);
IkReal x1790=(sj3*x1781);
IkReal x1791=(sj1*x1776);
IkReal x1792=((1.0)*cj3*cj5);
IkReal x1793=((1.0)*cj1*x1776);
evalcond[0]=(x1788+x1791+(((-1.0)*r22*x1783))+(((-1.0)*x1781*x1785))+(((-1.0)*x1781*x1782)));
evalcond[1]=((((-1.0)*x1793))+x1787+(((-1.0)*x1778*x1781))+(((-1.0)*x1781*x1784))+(((-1.0)*r02*x1783)));
evalcond[2]=((((0.28)*cj1))+((sj1*x1789))+((r20*x1777))+(((-1.0)*pz))+(((0.245)*x1788))+(((-1.0)*r21*x1780)));
evalcond[3]=((((-1.0)*r01*x1780))+((r00*x1777))+(((-1.0)*px))+(((0.28)*sj1))+(((-1.0)*cj1*x1789))+(((0.245)*x1787)));
evalcond[4]=((((-1.0)*x1793))+(((-1.0)*r22*x1790))+x1787+((r21*x1786))+((x1779*x1782))+((x1779*x1785))+(((-1.0)*r20*x1792)));
evalcond[5]=((((-1.0)*r00*x1792))+((x1779*x1784))+(((-1.0)*x1788))+(((-1.0)*x1791))+(((-1.0)*r02*x1790))+((x1778*x1779))+((r01*x1786)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1, j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1794=((0.245)*cj0);
IkReal x1795=((0.057)*cj0);
IkReal x1796=(sj4*sj5);
IkReal x1797=(cj5*sj4);
CheckValue<IkReal> x1798=IKPowWithIntegerCheck(cj0,-2);
if(!x1798.valid){
continue;
}
if( IKabs(((3.57142857142857)*(x1798.value)*((((r01*x1794*x1797))+((cj5*r00*x1795))+((r00*x1794*x1796))+(((0.01)*cj0*sj0))+((cj4*r02*x1794))+(((-1.0)*r01*sj5*x1795))+(((-1.0)*cj0*px)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.875)*r20*x1796))+(((-0.875)*r21*x1797))+(((-0.875)*cj4*r22))+(((-0.203571428571429)*cj5*r20))+(((3.57142857142857)*pz))+(((0.203571428571429)*r21*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((3.57142857142857)*(x1798.value)*((((r01*x1794*x1797))+((cj5*r00*x1795))+((r00*x1794*x1796))+(((0.01)*cj0*sj0))+((cj4*r02*x1794))+(((-1.0)*r01*sj5*x1795))+(((-1.0)*cj0*px))))))+IKsqr(((((-0.875)*r20*x1796))+(((-0.875)*r21*x1797))+(((-0.875)*cj4*r22))+(((-0.203571428571429)*cj5*r20))+(((3.57142857142857)*pz))+(((0.203571428571429)*r21*sj5))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((3.57142857142857)*(x1798.value)*((((r01*x1794*x1797))+((cj5*r00*x1795))+((r00*x1794*x1796))+(((0.01)*cj0*sj0))+((cj4*r02*x1794))+(((-1.0)*r01*sj5*x1795))+(((-1.0)*cj0*px))))), ((((-0.875)*r20*x1796))+(((-0.875)*r21*x1797))+(((-0.875)*cj4*r22))+(((-0.203571428571429)*cj5*r20))+(((3.57142857142857)*pz))+(((0.203571428571429)*r21*sj5))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[9];
IkReal x1799=IKsin(j1);
IkReal x1800=IKcos(j1);
IkReal x1801=sj0*sj0;
IkReal x1802=cj0*cj0;
IkReal x1803=(cj5*r20);
IkReal x1804=((0.057)*cj0);
IkReal x1805=(cj5*r10);
IkReal x1806=((1.0)*py);
IkReal x1807=(cj0*sj0);
IkReal x1808=((1.0)*cj0);
IkReal x1809=(r21*sj5);
IkReal x1810=((0.245)*cj0);
IkReal x1811=((0.245)*r00);
IkReal x1812=(sj0*sj5);
IkReal x1813=((0.057)*sj5);
IkReal x1814=(cj5*r01);
IkReal x1815=((1.0)*px);
IkReal x1816=((0.245)*cj4);
IkReal x1817=(sj3*sj5);
IkReal x1818=(r11*sj5);
IkReal x1819=(r01*sj5);
IkReal x1820=((0.245)*cj3);
IkReal x1821=(sj4*sj5);
IkReal x1822=(cj5*r11);
IkReal x1823=(cj5*r00);
IkReal x1824=((0.057)*sj0);
IkReal x1825=((0.245)*sj4);
IkReal x1826=((0.01)*x1807);
IkReal x1827=(sj0*x1820);
IkReal x1828=((0.28)*x1799);
IkReal x1829=(sj3*x1825);
IkReal x1830=((0.28)*x1800);
IkReal x1831=(cj5*r21*sj3);
IkReal x1832=(x1807*x1828);
evalcond[0]=((((-1.0)*x1830))+(((-0.057)*x1803))+pz+(((0.057)*x1809))+(((-0.245)*r20*x1821))+(((-1.0)*cj5*r21*x1825))+(((-1.0)*r22*x1816)));
evalcond[1]=((((-1.0)*x1826))+((r10*x1812*x1825))+((x1805*x1824))+(((-1.0)*x1801*x1828))+(((-1.0)*sj0*x1806))+(((-0.057)*r11*x1812))+((sj0*x1822*x1825))+((r12*sj0*x1816)));
evalcond[2]=((((-1.0)*x1802*x1828))+((x1804*x1823))+((sj4*x1810*x1814))+(((-1.0)*x1804*x1819))+((r00*x1810*x1821))+x1826+((cj4*r02*x1810))+(((-1.0)*px*x1808)));
evalcond[3]=((((-1.0)*r10*x1816*x1817))+((x1805*x1820))+((sj0*x1830))+(((-1.0)*x1818*x1820))+(((-1.0)*x1809*x1824))+((x1803*x1824))+(((-1.0)*sj3*x1816*x1822))+(((-1.0)*pz*sj0))+((r12*x1829)));
evalcond[4]=((((-1.0)*x1804*x1809))+(((-1.0)*pz*x1808))+(((-1.0)*x1819*x1820))+((x1803*x1804))+(((-1.0)*sj3*x1814*x1816))+((cj0*x1830))+((cj3*cj5*x1811))+((r02*x1829))+(((-1.0)*cj4*x1811*x1817)));
evalcond[5]=((((-0.01)*cj0))+((sj0*x1816*x1831))+(((-1.0)*x1803*x1827))+((r20*sj3*x1812*x1816))+(((-1.0)*r22*sj0*x1829))+(((-1.0)*r11*x1813))+(((-1.0)*x1806))+((x1809*x1827))+(((0.057)*x1805))+(((-1.0)*sj0*x1828)));
evalcond[6]=((((-1.0)*x1815))+(((0.057)*x1823))+(((-1.0)*r01*x1813))+((cj4*r20*x1810*x1817))+((cj4*x1810*x1831))+(((-1.0)*cj0*x1828))+(((-1.0)*cj3*x1803*x1810))+(((-1.0)*r22*sj3*sj4*x1810))+(((0.01)*sj0))+((cj3*x1809*x1810)));
evalcond[7]=(((sj4*x1810*x1822))+(((-1.0)*x1832))+((x1823*x1824))+(((0.01)*x1801))+(((-1.0)*sj0*x1815))+(((-0.057)*r01*x1812))+((r10*x1810*x1821))+((cj4*r12*x1810)));
evalcond[8]=((((-1.0)*x1804*x1818))+((sj0*x1814*x1825))+(((-1.0)*cj0*x1806))+(((-1.0)*x1832))+(((-0.01)*x1802))+((sj4*x1811*x1812))+((r02*sj0*x1816))+((x1804*x1805)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
j2eval[0]=cj0;
j2eval[1]=IKsign(cj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=sj0;
j2eval[1]=IKsign(sj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1833=(cj4*r22);
IkReal x1834=((1.0)*sj1);
IkReal x1835=(cj5*sj4);
IkReal x1836=(cj4*r02);
IkReal x1837=(sj4*sj5);
if( IKabs((((sj1*x1833))+((cj1*r00*x1837))+((r20*sj1*x1837))+((cj1*r01*x1835))+((r21*sj1*x1835))+((cj1*x1836)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x1834*x1836))+(((-1.0)*r01*x1834*x1835))+((cj1*r20*x1837))+((cj1*r21*x1835))+(((-1.0)*r00*x1834*x1837))+((cj1*x1833)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj1*x1833))+((cj1*r00*x1837))+((r20*sj1*x1837))+((cj1*r01*x1835))+((r21*sj1*x1835))+((cj1*x1836))))+IKsqr(((((-1.0)*x1834*x1836))+(((-1.0)*r01*x1834*x1835))+((cj1*r20*x1837))+((cj1*r21*x1835))+(((-1.0)*r00*x1834*x1837))+((cj1*x1833))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((sj1*x1833))+((cj1*r00*x1837))+((r20*sj1*x1837))+((cj1*r01*x1835))+((r21*sj1*x1835))+((cj1*x1836))), ((((-1.0)*x1834*x1836))+(((-1.0)*r01*x1834*x1835))+((cj1*r20*x1837))+((cj1*r21*x1835))+(((-1.0)*r00*x1834*x1837))+((cj1*x1833))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1838=IKsin(j2);
IkReal x1839=IKcos(j2);
IkReal x1840=((0.057)*cj5);
IkReal x1841=(r21*sj5);
IkReal x1842=((0.245)*sj1);
IkReal x1843=(r01*sj5);
IkReal x1844=((1.0)*r20);
IkReal x1845=(sj4*sj5);
IkReal x1846=((1.0)*cj4);
IkReal x1847=(cj3*cj5);
IkReal x1848=((1.0)*r00);
IkReal x1849=(cj1*x1839);
IkReal x1850=(sj1*x1838);
IkReal x1851=(cj1*x1838);
IkReal x1852=(cj4*sj3*sj5);
IkReal x1853=((1.0)*sj3*sj4);
IkReal x1854=(sj1*x1839);
IkReal x1855=((1.0)*cj5*sj4);
IkReal x1856=(cj4*cj5*sj3);
IkReal x1857=(x1850+x1849);
evalcond[0]=((((-1.0)*r22*x1846))+x1857+(((-1.0)*x1844*x1845))+(((-1.0)*r21*x1855)));
evalcond[1]=((((-1.0)*r02*x1846))+(((-1.0)*x1854))+(((-1.0)*r01*x1855))+x1851+(((-1.0)*x1845*x1848)));
evalcond[2]=((((0.28)*cj1))+((x1838*x1842))+(((0.245)*x1849))+(((-1.0)*pz))+((r20*x1840))+(((-0.057)*x1841)));
evalcond[3]=((((-0.28)*sj1))+(((-1.0)*x1839*x1842))+(((0.245)*x1851))+(((-1.0)*px))+((r00*x1840))+(((-0.057)*x1843)));
evalcond[4]=(((r01*x1856))+((r00*x1852))+((cj3*x1843))+(((-1.0)*r02*x1853))+x1857+(((-1.0)*x1847*x1848)));
evalcond[5]=((((-1.0)*x1851))+(((-1.0)*r22*x1853))+((cj3*x1841))+x1854+((r21*x1856))+(((-1.0)*x1844*x1847))+((r20*x1852)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1858=(cj4*sj1);
IkReal x1859=(cj1*cj4);
IkReal x1860=(cj5*sj4);
IkReal x1861=((1.0)*cj1);
IkReal x1862=(sj4*sj5);
IkReal x1863=(sj1*x1862);
if( IKabs((((r22*x1858))+(((-1.0)*r01*x1860*x1861))+((r20*x1863))+(((-1.0)*r00*x1861*x1862))+((r21*sj1*x1860))+(((-1.0)*r02*x1859)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*r20*x1862))+((r22*x1859))+((r02*x1858))+((cj1*r21*x1860))+((r01*sj1*x1860))+((r00*x1863)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r22*x1858))+(((-1.0)*r01*x1860*x1861))+((r20*x1863))+(((-1.0)*r00*x1861*x1862))+((r21*sj1*x1860))+(((-1.0)*r02*x1859))))+IKsqr((((cj1*r20*x1862))+((r22*x1859))+((r02*x1858))+((cj1*r21*x1860))+((r01*sj1*x1860))+((r00*x1863))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r22*x1858))+(((-1.0)*r01*x1860*x1861))+((r20*x1863))+(((-1.0)*r00*x1861*x1862))+((r21*sj1*x1860))+(((-1.0)*r02*x1859))), (((cj1*r20*x1862))+((r22*x1859))+((r02*x1858))+((cj1*r21*x1860))+((r01*sj1*x1860))+((r00*x1863))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1864=IKcos(j2);
IkReal x1865=IKsin(j2);
IkReal x1866=((0.057)*cj5);
IkReal x1867=(r00*sj5);
IkReal x1868=(cj4*sj3);
IkReal x1869=((0.057)*sj5);
IkReal x1870=((1.0)*sj4);
IkReal x1871=(r20*sj5);
IkReal x1872=((1.0)*cj4);
IkReal x1873=(cj5*r01);
IkReal x1874=(cj5*r21);
IkReal x1875=(cj3*sj5);
IkReal x1876=(sj1*x1864);
IkReal x1877=(cj1*x1864);
IkReal x1878=((0.245)*x1865);
IkReal x1879=(sj3*x1870);
IkReal x1880=(sj1*x1865);
IkReal x1881=((1.0)*cj3*cj5);
IkReal x1882=((1.0)*cj1*x1865);
evalcond[0]=((((-1.0)*r22*x1872))+(((-1.0)*x1870*x1874))+(((-1.0)*x1870*x1871))+x1877+x1880);
evalcond[1]=((((-1.0)*r02*x1872))+(((-1.0)*x1870*x1873))+(((-1.0)*x1867*x1870))+x1876+(((-1.0)*x1882)));
evalcond[2]=((((0.28)*cj1))+(((0.245)*x1877))+(((-1.0)*r21*x1869))+((sj1*x1878))+(((-1.0)*pz))+((r20*x1866)));
evalcond[3]=((((0.245)*x1876))+(((-1.0)*px))+(((-1.0)*cj1*x1878))+(((0.28)*sj1))+(((-1.0)*r01*x1869))+((r00*x1866)));
evalcond[4]=((((-1.0)*r22*x1879))+x1876+((r21*x1875))+((x1868*x1871))+((x1868*x1874))+(((-1.0)*r20*x1881))+(((-1.0)*x1882)));
evalcond[5]=(((x1867*x1868))+(((-1.0)*r02*x1879))+((r01*x1875))+(((-1.0)*x1880))+(((-1.0)*r00*x1881))+((x1868*x1873))+(((-1.0)*x1877)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1883=(cj4*r12);
IkReal x1884=((1.0)*sj1);
IkReal x1885=(cj4*r22);
IkReal x1886=(sj4*sj5);
IkReal x1887=(cj5*sj4);
IkReal x1888=(cj1*x1887);
if( IKabs((((r20*sj1*x1886))+((r21*sj1*x1887))+((cj1*r10*x1886))+((cj1*x1883))+((sj1*x1885))+((r11*x1888)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r21*x1888))+(((-1.0)*x1883*x1884))+((cj1*x1885))+(((-1.0)*r11*x1884*x1887))+(((-1.0)*r10*x1884*x1886))+((cj1*r20*x1886)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r20*sj1*x1886))+((r21*sj1*x1887))+((cj1*r10*x1886))+((cj1*x1883))+((sj1*x1885))+((r11*x1888))))+IKsqr((((r21*x1888))+(((-1.0)*x1883*x1884))+((cj1*x1885))+(((-1.0)*r11*x1884*x1887))+(((-1.0)*r10*x1884*x1886))+((cj1*r20*x1886))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r20*sj1*x1886))+((r21*sj1*x1887))+((cj1*r10*x1886))+((cj1*x1883))+((sj1*x1885))+((r11*x1888))), (((r21*x1888))+(((-1.0)*x1883*x1884))+((cj1*x1885))+(((-1.0)*r11*x1884*x1887))+(((-1.0)*r10*x1884*x1886))+((cj1*r20*x1886))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1889=IKsin(j2);
IkReal x1890=IKcos(j2);
IkReal x1891=((1.0)*r10);
IkReal x1892=(cj3*cj5);
IkReal x1893=((0.057)*sj5);
IkReal x1894=((1.0)*sj4);
IkReal x1895=((0.245)*sj1);
IkReal x1896=((0.057)*cj5);
IkReal x1897=(r20*sj5);
IkReal x1898=((1.0)*cj4);
IkReal x1899=(cj3*sj5);
IkReal x1900=(cj4*sj3);
IkReal x1901=(cj1*x1890);
IkReal x1902=(sj1*x1889);
IkReal x1903=(cj1*x1889);
IkReal x1904=(sj1*x1890);
IkReal x1905=(cj5*x1900);
IkReal x1906=(x1902+x1901);
evalcond[0]=((((-1.0)*r22*x1898))+x1906+(((-1.0)*x1894*x1897))+(((-1.0)*cj5*r21*x1894)));
evalcond[1]=((((-1.0)*cj5*r11*x1894))+(((-1.0)*sj4*sj5*x1891))+(((-1.0)*x1904))+(((-1.0)*r12*x1898))+x1903);
evalcond[2]=((((0.28)*cj1))+(((0.245)*x1901))+((r20*x1896))+(((-1.0)*pz))+(((-1.0)*r21*x1893))+((x1889*x1895)));
evalcond[3]=((((-0.28)*sj1))+(((0.245)*x1903))+((r10*x1896))+(((-1.0)*x1890*x1895))+(((-1.0)*py))+(((-1.0)*r11*x1893)));
evalcond[4]=(((r11*x1899))+(((-1.0)*r12*sj3*x1894))+(((-1.0)*x1891*x1892))+x1906+((r11*x1905))+((r10*sj5*x1900)));
evalcond[5]=((((-1.0)*r22*sj3*x1894))+(((-1.0)*r20*x1892))+(((-1.0)*x1903))+((r21*x1905))+x1904+((r21*x1899))+((x1897*x1900)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1907=(cj5*sj4);
IkReal x1908=(cj1*cj4);
IkReal x1909=(cj4*sj1);
IkReal x1910=((1.0)*cj1);
IkReal x1911=(sj4*sj5);
if( IKabs(((((-1.0)*r12*x1908))+((r22*x1909))+(((-1.0)*r10*x1910*x1911))+((r21*sj1*x1907))+((r20*sj1*x1911))+(((-1.0)*r11*x1907*x1910)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*r21*x1907))+((cj1*r20*x1911))+((r12*x1909))+((r22*x1908))+((r10*sj1*x1911))+((r11*sj1*x1907)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r12*x1908))+((r22*x1909))+(((-1.0)*r10*x1910*x1911))+((r21*sj1*x1907))+((r20*sj1*x1911))+(((-1.0)*r11*x1907*x1910))))+IKsqr((((cj1*r21*x1907))+((cj1*r20*x1911))+((r12*x1909))+((r22*x1908))+((r10*sj1*x1911))+((r11*sj1*x1907))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r12*x1908))+((r22*x1909))+(((-1.0)*r10*x1910*x1911))+((r21*sj1*x1907))+((r20*sj1*x1911))+(((-1.0)*r11*x1907*x1910))), (((cj1*r21*x1907))+((cj1*r20*x1911))+((r12*x1909))+((r22*x1908))+((r10*sj1*x1911))+((r11*sj1*x1907))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1912=IKcos(j2);
IkReal x1913=IKsin(j2);
IkReal x1914=((1.0)*r10);
IkReal x1915=(cj3*cj5);
IkReal x1916=((0.057)*sj5);
IkReal x1917=((1.0)*sj4);
IkReal x1918=((0.057)*cj5);
IkReal x1919=(cj3*sj5);
IkReal x1920=(r20*sj5);
IkReal x1921=((1.0)*cj4);
IkReal x1922=(cj4*sj3);
IkReal x1923=(cj5*r21);
IkReal x1924=(cj5*r11);
IkReal x1925=(sj1*x1912);
IkReal x1926=(cj1*x1912);
IkReal x1927=((0.245)*x1913);
IkReal x1928=(sj1*x1913);
IkReal x1929=((1.0)*cj1*x1913);
evalcond[0]=((((-1.0)*x1917*x1920))+(((-1.0)*x1917*x1923))+(((-1.0)*r22*x1921))+x1926+x1928);
evalcond[1]=((((-1.0)*sj4*sj5*x1914))+(((-1.0)*r12*x1921))+(((-1.0)*x1917*x1924))+(((-1.0)*x1929))+x1925);
evalcond[2]=((((0.28)*cj1))+(((-1.0)*pz))+(((0.245)*x1926))+(((-1.0)*r21*x1916))+((r20*x1918))+((sj1*x1927)));
evalcond[3]=(((r10*x1918))+(((-1.0)*cj1*x1927))+(((-1.0)*r11*x1916))+(((-1.0)*py))+(((0.28)*sj1))+(((0.245)*x1925)));
evalcond[4]=((((-1.0)*x1929))+x1925+(((-1.0)*r20*x1915))+(((-1.0)*r22*sj3*x1917))+((r21*x1919))+((x1920*x1922))+((x1922*x1923)));
evalcond[5]=((((-1.0)*x1914*x1915))+((r10*sj5*x1922))+(((-1.0)*r12*sj3*x1917))+(((-1.0)*x1928))+(((-1.0)*x1926))+((r11*x1919))+((x1922*x1924)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1930=(cj4*r12);
IkReal x1931=((1.0)*sj1);
IkReal x1932=(r10*sj4*sj5);
IkReal x1933=(cj5*r11*sj4);
IkReal x1934=(cj4*r22*sj0);
IkReal x1935=(r20*sj0*sj4*sj5);
IkReal x1936=(cj5*r21*sj0*sj4);
CheckValue<IkReal> x1937 = IKatan2WithCheck(IkReal((((cj1*x1932))+((cj1*x1930))+((cj1*x1933))+((sj1*x1934))+((sj1*x1935))+((sj1*x1936)))),IkReal(((((-1.0)*x1930*x1931))+((cj1*x1936))+((cj1*x1935))+((cj1*x1934))+(((-1.0)*x1931*x1932))+(((-1.0)*x1931*x1933)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1937.valid){
continue;
}
CheckValue<IkReal> x1938=IKPowWithIntegerCheck(IKsign(sj0),-1);
if(!x1938.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x1937.value)+(((1.5707963267949)*(x1938.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x1939=IKsin(j2);
IkReal x1940=IKcos(j2);
IkReal x1941=((1.0)*cj5);
IkReal x1942=((0.057)*cj5);
IkReal x1943=(r00*sj5);
IkReal x1944=(cj4*sj3);
IkReal x1945=((0.057)*sj5);
IkReal x1946=(cj0*sj1);
IkReal x1947=(sj0*sj1);
IkReal x1948=((1.0)*sj4);
IkReal x1949=(r10*sj5);
IkReal x1950=(r20*sj5);
IkReal x1951=((1.0)*cj4);
IkReal x1952=(cj3*sj5);
IkReal x1953=(cj1*x1940);
IkReal x1954=(sj1*x1939);
IkReal x1955=(sj3*x1948);
IkReal x1956=((1.0)*x1940);
IkReal x1957=((0.245)*x1940);
IkReal x1958=(cj1*x1939);
evalcond[0]=((((-1.0)*x1948*x1950))+(((-1.0)*r22*x1951))+(((-1.0)*r21*sj4*x1941))+x1954+x1953);
evalcond[1]=((((-1.0)*r21*x1945))+(((0.28)*cj1))+((r20*x1942))+(((-1.0)*pz))+(((0.245)*x1954))+(((0.245)*x1953)));
evalcond[2]=(((cj0*x1958))+(((-1.0)*x1943*x1948))+(((-1.0)*r01*sj4*x1941))+(((-1.0)*r02*x1951))+(((-1.0)*x1946*x1956)));
evalcond[3]=((((-1.0)*r11*sj4*x1941))+(((-1.0)*x1947*x1956))+((sj0*x1958))+(((-1.0)*r12*x1951))+(((-1.0)*x1948*x1949)));
evalcond[4]=((((-0.28)*x1946))+(((-1.0)*px))+(((-1.0)*x1946*x1957))+((r00*x1942))+(((-1.0)*r01*x1945))+(((0.245)*cj0*x1958))+(((0.01)*sj0)));
evalcond[5]=((((-0.01)*cj0))+(((-0.28)*x1947))+((r10*x1942))+(((-1.0)*x1947*x1957))+(((-1.0)*py))+(((-1.0)*r11*x1945))+(((0.245)*sj0*x1958)));
evalcond[6]=((((-1.0)*r22*x1955))+((cj5*r21*x1944))+((x1944*x1950))+(((-1.0)*cj3*r20*x1941))+((sj1*x1940))+((r21*x1952))+(((-1.0)*x1958)));
evalcond[7]=(((cj0*x1953))+((x1943*x1944))+(((-1.0)*r02*x1955))+((x1939*x1946))+(((-1.0)*cj3*r00*x1941))+((r01*x1952))+((cj5*r01*x1944)));
evalcond[8]=((((-1.0)*cj3*r10*x1941))+((x1944*x1949))+((r11*x1952))+((x1939*x1947))+((sj0*x1953))+((cj5*r11*x1944))+(((-1.0)*r12*x1955)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1959=(cj0*sj4);
IkReal x1960=(cj1*sj5);
IkReal x1961=(cj5*sj1);
IkReal x1962=(r01*sj4);
IkReal x1963=(cj4*r02);
IkReal x1964=((1.0)*sj1);
IkReal x1965=(cj1*cj5);
IkReal x1966=(r00*sj4);
IkReal x1967=(cj0*cj4*r22);
CheckValue<IkReal> x1968=IKPowWithIntegerCheck(IKsign(cj0),-1);
if(!x1968.valid){
continue;
}
CheckValue<IkReal> x1969 = IKatan2WithCheck(IkReal((((r20*sj1*sj5*x1959))+((cj1*x1963))+((sj1*x1967))+((x1960*x1966))+((x1962*x1965))+((r21*x1959*x1961)))),IkReal(((((-1.0)*sj5*x1964*x1966))+(((-1.0)*x1961*x1962))+((cj1*x1967))+((r20*x1959*x1960))+(((-1.0)*x1963*x1964))+((r21*x1959*x1965)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1969.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1968.value)))+(x1969.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x1970=IKsin(j2);
IkReal x1971=IKcos(j2);
IkReal x1972=((1.0)*cj5);
IkReal x1973=((0.057)*cj5);
IkReal x1974=(r00*sj5);
IkReal x1975=(cj4*sj3);
IkReal x1976=((0.057)*sj5);
IkReal x1977=(cj0*sj1);
IkReal x1978=(sj0*sj1);
IkReal x1979=((1.0)*sj4);
IkReal x1980=(r10*sj5);
IkReal x1981=(r20*sj5);
IkReal x1982=((1.0)*cj4);
IkReal x1983=(cj3*sj5);
IkReal x1984=(cj1*x1971);
IkReal x1985=(sj1*x1970);
IkReal x1986=(sj3*x1979);
IkReal x1987=((1.0)*x1971);
IkReal x1988=((0.245)*x1971);
IkReal x1989=(cj1*x1970);
evalcond[0]=((((-1.0)*r21*sj4*x1972))+(((-1.0)*x1979*x1981))+x1984+x1985+(((-1.0)*r22*x1982)));
evalcond[1]=((((0.28)*cj1))+(((0.245)*x1985))+(((0.245)*x1984))+((r20*x1973))+(((-1.0)*pz))+(((-1.0)*r21*x1976)));
evalcond[2]=((((-1.0)*r01*sj4*x1972))+(((-1.0)*r02*x1982))+(((-1.0)*x1974*x1979))+(((-1.0)*x1977*x1987))+((cj0*x1989)));
evalcond[3]=((((-1.0)*r11*sj4*x1972))+(((-1.0)*x1979*x1980))+((sj0*x1989))+(((-1.0)*r12*x1982))+(((-1.0)*x1978*x1987)));
evalcond[4]=((((-0.28)*x1977))+(((-1.0)*r01*x1976))+(((-1.0)*px))+((r00*x1973))+(((0.245)*cj0*x1989))+(((-1.0)*x1977*x1988))+(((0.01)*sj0)));
evalcond[5]=((((-0.01)*cj0))+((r10*x1973))+(((-0.28)*x1978))+(((-1.0)*py))+(((-1.0)*x1978*x1988))+(((-1.0)*r11*x1976))+(((0.245)*sj0*x1989)));
evalcond[6]=(((x1975*x1981))+((cj5*r21*x1975))+((sj1*x1971))+((r21*x1983))+(((-1.0)*cj3*r20*x1972))+(((-1.0)*x1989))+(((-1.0)*r22*x1986)));
evalcond[7]=((((-1.0)*r02*x1986))+(((-1.0)*cj3*r00*x1972))+((x1970*x1977))+((r01*x1983))+((x1974*x1975))+((cj5*r01*x1975))+((cj0*x1984)));
evalcond[8]=(((x1975*x1980))+(((-1.0)*cj3*r10*x1972))+((r11*x1983))+((cj5*r11*x1975))+((sj0*x1984))+((x1970*x1978))+(((-1.0)*r12*x1986)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1990=(r10*sj0);
IkReal x1991=(sj4*sj5);
IkReal x1992=(r11*sj0);
IkReal x1993=(cj5*sj4);
CheckValue<IkReal> x1994=IKPowWithIntegerCheck(sj0,-2);
if(!x1994.valid){
continue;
}
if( IKabs(((3.57142857142857)*(x1994.value)*(((((-0.01)*cj0*sj0))+(((0.057)*cj5*x1990))+(((0.245)*x1990*x1991))+(((0.245)*cj4*r12*sj0))+(((-0.057)*sj5*x1992))+(((-1.0)*py*sj0))+(((0.245)*x1992*x1993)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.875)*r20*x1991))+(((-0.875)*cj4*r22))+(((-0.875)*r21*x1993))+(((-0.203571428571429)*cj5*r20))+(((3.57142857142857)*pz))+(((0.203571428571429)*r21*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((3.57142857142857)*(x1994.value)*(((((-0.01)*cj0*sj0))+(((0.057)*cj5*x1990))+(((0.245)*x1990*x1991))+(((0.245)*cj4*r12*sj0))+(((-0.057)*sj5*x1992))+(((-1.0)*py*sj0))+(((0.245)*x1992*x1993))))))+IKsqr(((((-0.875)*r20*x1991))+(((-0.875)*cj4*r22))+(((-0.875)*r21*x1993))+(((-0.203571428571429)*cj5*r20))+(((3.57142857142857)*pz))+(((0.203571428571429)*r21*sj5))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((3.57142857142857)*(x1994.value)*(((((-0.01)*cj0*sj0))+(((0.057)*cj5*x1990))+(((0.245)*x1990*x1991))+(((0.245)*cj4*r12*sj0))+(((-0.057)*sj5*x1992))+(((-1.0)*py*sj0))+(((0.245)*x1992*x1993))))), ((((-0.875)*r20*x1991))+(((-0.875)*cj4*r22))+(((-0.875)*r21*x1993))+(((-0.203571428571429)*cj5*r20))+(((3.57142857142857)*pz))+(((0.203571428571429)*r21*sj5))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[9];
IkReal x1995=IKsin(j1);
IkReal x1996=IKcos(j1);
IkReal x1997=sj0*sj0;
IkReal x1998=cj0*cj0;
IkReal x1999=(cj5*r20);
IkReal x2000=((0.057)*cj0);
IkReal x2001=(cj5*r10);
IkReal x2002=((1.0)*py);
IkReal x2003=(cj0*sj0);
IkReal x2004=((1.0)*cj0);
IkReal x2005=(r21*sj5);
IkReal x2006=((0.245)*cj0);
IkReal x2007=((0.245)*r00);
IkReal x2008=(sj0*sj5);
IkReal x2009=((0.057)*sj5);
IkReal x2010=(cj5*r01);
IkReal x2011=((1.0)*px);
IkReal x2012=((0.245)*cj4);
IkReal x2013=(sj3*sj5);
IkReal x2014=(r11*sj5);
IkReal x2015=(r01*sj5);
IkReal x2016=((0.245)*cj3);
IkReal x2017=(sj4*sj5);
IkReal x2018=(cj5*r11);
IkReal x2019=(cj5*r00);
IkReal x2020=((0.057)*sj0);
IkReal x2021=((0.245)*sj4);
IkReal x2022=((0.01)*x2003);
IkReal x2023=(sj0*x2016);
IkReal x2024=((0.28)*x1995);
IkReal x2025=(sj3*x2021);
IkReal x2026=((0.28)*x1996);
IkReal x2027=(cj5*r21*sj3);
IkReal x2028=(x2003*x2024);
evalcond[0]=((((-0.245)*r20*x2017))+(((-1.0)*cj5*r21*x2021))+(((0.057)*x2005))+pz+(((-1.0)*x2026))+(((-0.057)*x1999))+(((-1.0)*r22*x2012)));
evalcond[1]=(((sj0*x2018*x2021))+((r10*x2008*x2021))+(((-1.0)*x1997*x2024))+((x2001*x2020))+(((-1.0)*x2022))+(((-1.0)*sj0*x2002))+(((-0.057)*r11*x2008))+((r12*sj0*x2012)));
evalcond[2]=((((-1.0)*px*x2004))+((x2000*x2019))+(((-1.0)*x1998*x2024))+x2022+((cj4*r02*x2006))+((r00*x2006*x2017))+((sj4*x2006*x2010))+(((-1.0)*x2000*x2015)));
evalcond[3]=(((x1999*x2020))+(((-1.0)*x2005*x2020))+((sj0*x2026))+(((-1.0)*x2014*x2016))+(((-1.0)*pz*sj0))+(((-1.0)*sj3*x2012*x2018))+(((-1.0)*r10*x2012*x2013))+((x2001*x2016))+((r12*x2025)));
evalcond[4]=(((x1999*x2000))+(((-1.0)*pz*x2004))+((cj0*x2026))+(((-1.0)*x2015*x2016))+(((-1.0)*sj3*x2010*x2012))+((r02*x2025))+(((-1.0)*x2000*x2005))+((cj3*cj5*x2007))+(((-1.0)*cj4*x2007*x2013)));
evalcond[5]=(((r20*sj3*x2008*x2012))+((sj0*x2012*x2027))+(((-1.0)*r22*sj0*x2025))+(((-0.01)*cj0))+(((-1.0)*r11*x2009))+(((0.057)*x2001))+(((-1.0)*x2002))+(((-1.0)*sj0*x2024))+((x2005*x2023))+(((-1.0)*x1999*x2023)));
evalcond[6]=((((-1.0)*x2011))+((cj4*r20*x2006*x2013))+(((-1.0)*r01*x2009))+((cj4*x2006*x2027))+(((-1.0)*cj0*x2024))+(((-1.0)*cj3*x1999*x2006))+((cj3*x2005*x2006))+(((0.01)*sj0))+(((0.057)*x2019))+(((-1.0)*r22*sj3*sj4*x2006)));
evalcond[7]=(((r10*x2006*x2017))+((x2019*x2020))+((cj4*r12*x2006))+(((0.01)*x1997))+(((-1.0)*sj0*x2011))+(((-1.0)*x2028))+((sj4*x2006*x2018))+(((-0.057)*r01*x2008)));
evalcond[8]=(((r02*sj0*x2012))+(((-0.01)*x1998))+((sj0*x2010*x2021))+((x2000*x2001))+(((-1.0)*x2028))+(((-1.0)*cj0*x2002))+((sj4*x2007*x2008))+(((-1.0)*x2000*x2014)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
j2eval[0]=cj0;
j2eval[1]=IKsign(cj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=sj0;
j2eval[1]=IKsign(sj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2029=(cj4*r22);
IkReal x2030=((1.0)*sj1);
IkReal x2031=(cj5*sj4);
IkReal x2032=(cj4*r02);
IkReal x2033=(sj4*sj5);
if( IKabs((((r20*sj1*x2033))+((cj1*r00*x2033))+((r21*sj1*x2031))+((sj1*x2029))+((cj1*r01*x2031))+((cj1*x2032)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x2030*x2031))+((cj1*r20*x2033))+(((-1.0)*x2030*x2032))+((cj1*r21*x2031))+(((-1.0)*r00*x2030*x2033))+((cj1*x2029)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r20*sj1*x2033))+((cj1*r00*x2033))+((r21*sj1*x2031))+((sj1*x2029))+((cj1*r01*x2031))+((cj1*x2032))))+IKsqr(((((-1.0)*r01*x2030*x2031))+((cj1*r20*x2033))+(((-1.0)*x2030*x2032))+((cj1*r21*x2031))+(((-1.0)*r00*x2030*x2033))+((cj1*x2029))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r20*sj1*x2033))+((cj1*r00*x2033))+((r21*sj1*x2031))+((sj1*x2029))+((cj1*r01*x2031))+((cj1*x2032))), ((((-1.0)*r01*x2030*x2031))+((cj1*r20*x2033))+(((-1.0)*x2030*x2032))+((cj1*r21*x2031))+(((-1.0)*r00*x2030*x2033))+((cj1*x2029))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2034=IKsin(j2);
IkReal x2035=IKcos(j2);
IkReal x2036=((0.057)*cj5);
IkReal x2037=(r21*sj5);
IkReal x2038=((0.245)*sj1);
IkReal x2039=(r01*sj5);
IkReal x2040=((1.0)*r20);
IkReal x2041=(sj4*sj5);
IkReal x2042=((1.0)*cj4);
IkReal x2043=(cj3*cj5);
IkReal x2044=((1.0)*r00);
IkReal x2045=(cj1*x2035);
IkReal x2046=(sj1*x2034);
IkReal x2047=(cj1*x2034);
IkReal x2048=(cj4*sj3*sj5);
IkReal x2049=((1.0)*sj3*sj4);
IkReal x2050=(sj1*x2035);
IkReal x2051=((1.0)*cj5*sj4);
IkReal x2052=(cj4*cj5*sj3);
IkReal x2053=(x2046+x2045);
evalcond[0]=((((-1.0)*r22*x2042))+x2053+(((-1.0)*x2040*x2041))+(((-1.0)*r21*x2051)));
evalcond[1]=((((-1.0)*r01*x2051))+(((-1.0)*r02*x2042))+x2047+(((-1.0)*x2050))+(((-1.0)*x2041*x2044)));
evalcond[2]=((((0.28)*cj1))+(((-0.057)*x2037))+((x2034*x2038))+(((-1.0)*pz))+((r20*x2036))+(((0.245)*x2045)));
evalcond[3]=((((-0.28)*sj1))+(((-0.057)*x2039))+(((-1.0)*x2035*x2038))+((r00*x2036))+(((-1.0)*px))+(((0.245)*x2047)));
evalcond[4]=(((r01*x2052))+(((-1.0)*r02*x2049))+x2053+((cj3*x2039))+(((-1.0)*x2043*x2044))+((r00*x2048)));
evalcond[5]=((((-1.0)*r22*x2049))+x2050+((r20*x2048))+(((-1.0)*x2047))+((cj3*x2037))+(((-1.0)*x2040*x2043))+((r21*x2052)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2054=(cj4*sj1);
IkReal x2055=(cj1*cj4);
IkReal x2056=(cj5*sj4);
IkReal x2057=((1.0)*cj1);
IkReal x2058=(sj4*sj5);
IkReal x2059=(sj1*x2058);
if( IKabs((((r22*x2054))+(((-1.0)*r02*x2055))+(((-1.0)*r00*x2057*x2058))+((r21*sj1*x2056))+(((-1.0)*r01*x2056*x2057))+((r20*x2059)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r22*x2055))+((r01*sj1*x2056))+((cj1*r21*x2056))+((r02*x2054))+((cj1*r20*x2058))+((r00*x2059)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r22*x2054))+(((-1.0)*r02*x2055))+(((-1.0)*r00*x2057*x2058))+((r21*sj1*x2056))+(((-1.0)*r01*x2056*x2057))+((r20*x2059))))+IKsqr((((r22*x2055))+((r01*sj1*x2056))+((cj1*r21*x2056))+((r02*x2054))+((cj1*r20*x2058))+((r00*x2059))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r22*x2054))+(((-1.0)*r02*x2055))+(((-1.0)*r00*x2057*x2058))+((r21*sj1*x2056))+(((-1.0)*r01*x2056*x2057))+((r20*x2059))), (((r22*x2055))+((r01*sj1*x2056))+((cj1*r21*x2056))+((r02*x2054))+((cj1*r20*x2058))+((r00*x2059))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2060=IKcos(j2);
IkReal x2061=IKsin(j2);
IkReal x2062=((0.057)*cj5);
IkReal x2063=(r00*sj5);
IkReal x2064=(cj4*sj3);
IkReal x2065=((0.057)*sj5);
IkReal x2066=((1.0)*sj4);
IkReal x2067=(r20*sj5);
IkReal x2068=((1.0)*cj4);
IkReal x2069=(cj5*r01);
IkReal x2070=(cj5*r21);
IkReal x2071=(cj3*sj5);
IkReal x2072=(sj1*x2060);
IkReal x2073=(cj1*x2060);
IkReal x2074=((0.245)*x2061);
IkReal x2075=(sj3*x2066);
IkReal x2076=(sj1*x2061);
IkReal x2077=((1.0)*cj3*cj5);
IkReal x2078=((1.0)*cj1*x2061);
evalcond[0]=(x2073+x2076+(((-1.0)*r22*x2068))+(((-1.0)*x2066*x2067))+(((-1.0)*x2066*x2070)));
evalcond[1]=((((-1.0)*x2063*x2066))+(((-1.0)*r02*x2068))+x2072+(((-1.0)*x2078))+(((-1.0)*x2066*x2069)));
evalcond[2]=((((0.28)*cj1))+((r20*x2062))+(((-1.0)*pz))+(((-1.0)*r21*x2065))+(((0.245)*x2073))+((sj1*x2074)));
evalcond[3]=((((-1.0)*px))+(((0.28)*sj1))+(((0.245)*x2072))+((r00*x2062))+(((-1.0)*r01*x2065))+(((-1.0)*cj1*x2074)));
evalcond[4]=(x2072+(((-1.0)*r22*x2075))+(((-1.0)*x2078))+(((-1.0)*r20*x2077))+((x2064*x2067))+((x2064*x2070))+((r21*x2071)));
evalcond[5]=((((-1.0)*r02*x2075))+(((-1.0)*x2073))+(((-1.0)*x2076))+((r01*x2071))+(((-1.0)*r00*x2077))+((x2063*x2064))+((x2064*x2069)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2079=(cj4*r12);
IkReal x2080=((1.0)*sj1);
IkReal x2081=(cj4*r22);
IkReal x2082=(sj4*sj5);
IkReal x2083=(cj5*sj4);
IkReal x2084=(cj1*x2083);
if( IKabs((((sj1*x2081))+((r21*sj1*x2083))+((cj1*x2079))+((cj1*r10*x2082))+((r20*sj1*x2082))+((r11*x2084)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*x2081))+(((-1.0)*r11*x2080*x2083))+((r21*x2084))+(((-1.0)*x2079*x2080))+(((-1.0)*r10*x2080*x2082))+((cj1*r20*x2082)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj1*x2081))+((r21*sj1*x2083))+((cj1*x2079))+((cj1*r10*x2082))+((r20*sj1*x2082))+((r11*x2084))))+IKsqr((((cj1*x2081))+(((-1.0)*r11*x2080*x2083))+((r21*x2084))+(((-1.0)*x2079*x2080))+(((-1.0)*r10*x2080*x2082))+((cj1*r20*x2082))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((sj1*x2081))+((r21*sj1*x2083))+((cj1*x2079))+((cj1*r10*x2082))+((r20*sj1*x2082))+((r11*x2084))), (((cj1*x2081))+(((-1.0)*r11*x2080*x2083))+((r21*x2084))+(((-1.0)*x2079*x2080))+(((-1.0)*r10*x2080*x2082))+((cj1*r20*x2082))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2085=IKsin(j2);
IkReal x2086=IKcos(j2);
IkReal x2087=((1.0)*r10);
IkReal x2088=(cj3*cj5);
IkReal x2089=((0.057)*sj5);
IkReal x2090=((1.0)*sj4);
IkReal x2091=((0.245)*sj1);
IkReal x2092=((0.057)*cj5);
IkReal x2093=(r20*sj5);
IkReal x2094=((1.0)*cj4);
IkReal x2095=(cj3*sj5);
IkReal x2096=(cj4*sj3);
IkReal x2097=(cj1*x2086);
IkReal x2098=(sj1*x2085);
IkReal x2099=(cj1*x2085);
IkReal x2100=(sj1*x2086);
IkReal x2101=(cj5*x2096);
IkReal x2102=(x2097+x2098);
evalcond[0]=((((-1.0)*x2090*x2093))+x2102+(((-1.0)*cj5*r21*x2090))+(((-1.0)*r22*x2094)));
evalcond[1]=(x2099+(((-1.0)*cj5*r11*x2090))+(((-1.0)*x2100))+(((-1.0)*r12*x2094))+(((-1.0)*sj4*sj5*x2087)));
evalcond[2]=((((0.28)*cj1))+((r20*x2092))+(((-1.0)*r21*x2089))+(((-1.0)*pz))+(((0.245)*x2097))+((x2085*x2091)));
evalcond[3]=((((-0.28)*sj1))+((r10*x2092))+(((-1.0)*x2086*x2091))+(((-1.0)*py))+(((-1.0)*r11*x2089))+(((0.245)*x2099)));
evalcond[4]=(((r11*x2101))+(((-1.0)*r12*sj3*x2090))+x2102+(((-1.0)*x2087*x2088))+((r11*x2095))+((r10*sj5*x2096)));
evalcond[5]=((((-1.0)*r22*sj3*x2090))+((r21*x2101))+x2100+(((-1.0)*r20*x2088))+((r21*x2095))+(((-1.0)*x2099))+((x2093*x2096)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2103=(cj5*sj4);
IkReal x2104=(cj1*cj4);
IkReal x2105=(cj4*sj1);
IkReal x2106=((1.0)*cj1);
IkReal x2107=(sj4*sj5);
if( IKabs(((((-1.0)*r12*x2104))+((r20*sj1*x2107))+((r22*x2105))+(((-1.0)*r11*x2103*x2106))+((r21*sj1*x2103))+(((-1.0)*r10*x2106*x2107)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*sj1*x2103))+((r12*x2105))+((r22*x2104))+((cj1*r21*x2103))+((cj1*r20*x2107))+((r10*sj1*x2107)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r12*x2104))+((r20*sj1*x2107))+((r22*x2105))+(((-1.0)*r11*x2103*x2106))+((r21*sj1*x2103))+(((-1.0)*r10*x2106*x2107))))+IKsqr((((r11*sj1*x2103))+((r12*x2105))+((r22*x2104))+((cj1*r21*x2103))+((cj1*r20*x2107))+((r10*sj1*x2107))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r12*x2104))+((r20*sj1*x2107))+((r22*x2105))+(((-1.0)*r11*x2103*x2106))+((r21*sj1*x2103))+(((-1.0)*r10*x2106*x2107))), (((r11*sj1*x2103))+((r12*x2105))+((r22*x2104))+((cj1*r21*x2103))+((cj1*r20*x2107))+((r10*sj1*x2107))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2108=IKcos(j2);
IkReal x2109=IKsin(j2);
IkReal x2110=((1.0)*r10);
IkReal x2111=(cj3*cj5);
IkReal x2112=((0.057)*sj5);
IkReal x2113=((1.0)*sj4);
IkReal x2114=((0.057)*cj5);
IkReal x2115=(cj3*sj5);
IkReal x2116=(r20*sj5);
IkReal x2117=((1.0)*cj4);
IkReal x2118=(cj4*sj3);
IkReal x2119=(cj5*r21);
IkReal x2120=(cj5*r11);
IkReal x2121=(sj1*x2108);
IkReal x2122=(cj1*x2108);
IkReal x2123=((0.245)*x2109);
IkReal x2124=(sj1*x2109);
IkReal x2125=((1.0)*cj1*x2109);
evalcond[0]=(x2122+x2124+(((-1.0)*r22*x2117))+(((-1.0)*x2113*x2119))+(((-1.0)*x2113*x2116)));
evalcond[1]=(x2121+(((-1.0)*sj4*sj5*x2110))+(((-1.0)*x2113*x2120))+(((-1.0)*x2125))+(((-1.0)*r12*x2117)));
evalcond[2]=((((0.245)*x2122))+(((0.28)*cj1))+(((-1.0)*r21*x2112))+((sj1*x2123))+((r20*x2114))+(((-1.0)*pz)));
evalcond[3]=((((0.245)*x2121))+(((-1.0)*cj1*x2123))+(((-1.0)*py))+(((0.28)*sj1))+((r10*x2114))+(((-1.0)*r11*x2112)));
evalcond[4]=(((x2116*x2118))+((r21*x2115))+x2121+((x2118*x2119))+(((-1.0)*x2125))+(((-1.0)*r20*x2111))+(((-1.0)*r22*sj3*x2113)));
evalcond[5]=(((r10*sj5*x2118))+(((-1.0)*x2124))+(((-1.0)*x2122))+(((-1.0)*r12*sj3*x2113))+(((-1.0)*x2110*x2111))+((x2118*x2120))+((r11*x2115)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2126=(cj4*r12);
IkReal x2127=((1.0)*sj1);
IkReal x2128=(r10*sj4*sj5);
IkReal x2129=(cj5*r11*sj4);
IkReal x2130=(cj4*r22*sj0);
IkReal x2131=(r20*sj0*sj4*sj5);
IkReal x2132=(cj5*r21*sj0*sj4);
CheckValue<IkReal> x2133=IKPowWithIntegerCheck(IKsign(sj0),-1);
if(!x2133.valid){
continue;
}
CheckValue<IkReal> x2134 = IKatan2WithCheck(IkReal((((cj1*x2126))+((cj1*x2129))+((cj1*x2128))+((sj1*x2131))+((sj1*x2130))+((sj1*x2132)))),IkReal(((((-1.0)*x2127*x2129))+(((-1.0)*x2127*x2128))+((cj1*x2130))+((cj1*x2131))+((cj1*x2132))+(((-1.0)*x2126*x2127)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2134.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2133.value)))+(x2134.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x2135=IKsin(j2);
IkReal x2136=IKcos(j2);
IkReal x2137=((1.0)*cj5);
IkReal x2138=((0.057)*cj5);
IkReal x2139=(r00*sj5);
IkReal x2140=(cj4*sj3);
IkReal x2141=((0.057)*sj5);
IkReal x2142=(cj0*sj1);
IkReal x2143=(sj0*sj1);
IkReal x2144=((1.0)*sj4);
IkReal x2145=(r10*sj5);
IkReal x2146=(r20*sj5);
IkReal x2147=((1.0)*cj4);
IkReal x2148=(cj3*sj5);
IkReal x2149=(cj1*x2136);
IkReal x2150=(sj1*x2135);
IkReal x2151=(sj3*x2144);
IkReal x2152=((1.0)*x2136);
IkReal x2153=((0.245)*x2136);
IkReal x2154=(cj1*x2135);
evalcond[0]=((((-1.0)*x2144*x2146))+(((-1.0)*r21*sj4*x2137))+x2150+x2149+(((-1.0)*r22*x2147)));
evalcond[1]=((((0.28)*cj1))+(((0.245)*x2150))+(((0.245)*x2149))+(((-1.0)*pz))+(((-1.0)*r21*x2141))+((r20*x2138)));
evalcond[2]=((((-1.0)*x2142*x2152))+(((-1.0)*r02*x2147))+((cj0*x2154))+(((-1.0)*r01*sj4*x2137))+(((-1.0)*x2139*x2144)));
evalcond[3]=((((-1.0)*x2144*x2145))+(((-1.0)*x2143*x2152))+(((-1.0)*r12*x2147))+((sj0*x2154))+(((-1.0)*r11*sj4*x2137)));
evalcond[4]=((((-1.0)*r01*x2141))+(((-1.0)*x2142*x2153))+(((-0.28)*x2142))+(((0.245)*cj0*x2154))+((r00*x2138))+(((-1.0)*px))+(((0.01)*sj0)));
evalcond[5]=((((-0.01)*cj0))+(((-0.28)*x2143))+(((-1.0)*x2143*x2153))+(((0.245)*sj0*x2154))+(((-1.0)*r11*x2141))+(((-1.0)*py))+((r10*x2138)));
evalcond[6]=((((-1.0)*cj3*r20*x2137))+((x2140*x2146))+((cj5*r21*x2140))+((r21*x2148))+(((-1.0)*r22*x2151))+((sj1*x2136))+(((-1.0)*x2154)));
evalcond[7]=((((-1.0)*r02*x2151))+(((-1.0)*cj3*r00*x2137))+((cj0*x2149))+((r01*x2148))+((x2135*x2142))+((cj5*r01*x2140))+((x2139*x2140)));
evalcond[8]=(((r11*x2148))+(((-1.0)*r12*x2151))+((sj0*x2149))+((x2140*x2145))+(((-1.0)*cj3*r10*x2137))+((x2135*x2143))+((cj5*r11*x2140)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2155=(cj0*sj4);
IkReal x2156=(cj1*sj5);
IkReal x2157=(cj5*sj1);
IkReal x2158=(r01*sj4);
IkReal x2159=(cj4*r02);
IkReal x2160=((1.0)*sj1);
IkReal x2161=(cj1*cj5);
IkReal x2162=(r00*sj4);
IkReal x2163=(cj0*cj4*r22);
CheckValue<IkReal> x2164=IKPowWithIntegerCheck(IKsign(cj0),-1);
if(!x2164.valid){
continue;
}
CheckValue<IkReal> x2165 = IKatan2WithCheck(IkReal((((r20*sj1*sj5*x2155))+((sj1*x2163))+((r21*x2155*x2157))+((x2156*x2162))+((x2158*x2161))+((cj1*x2159)))),IkReal((((r20*x2155*x2156))+(((-1.0)*sj5*x2160*x2162))+(((-1.0)*x2157*x2158))+(((-1.0)*x2159*x2160))+((r21*x2155*x2161))+((cj1*x2163)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2165.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2164.value)))+(x2165.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x2166=IKsin(j2);
IkReal x2167=IKcos(j2);
IkReal x2168=((1.0)*cj5);
IkReal x2169=((0.057)*cj5);
IkReal x2170=(r00*sj5);
IkReal x2171=(cj4*sj3);
IkReal x2172=((0.057)*sj5);
IkReal x2173=(cj0*sj1);
IkReal x2174=(sj0*sj1);
IkReal x2175=((1.0)*sj4);
IkReal x2176=(r10*sj5);
IkReal x2177=(r20*sj5);
IkReal x2178=((1.0)*cj4);
IkReal x2179=(cj3*sj5);
IkReal x2180=(cj1*x2167);
IkReal x2181=(sj1*x2166);
IkReal x2182=(sj3*x2175);
IkReal x2183=((1.0)*x2167);
IkReal x2184=((0.245)*x2167);
IkReal x2185=(cj1*x2166);
evalcond[0]=(x2181+x2180+(((-1.0)*r21*sj4*x2168))+(((-1.0)*x2175*x2177))+(((-1.0)*r22*x2178)));
evalcond[1]=((((-1.0)*r21*x2172))+(((0.28)*cj1))+(((0.245)*x2180))+(((0.245)*x2181))+((r20*x2169))+(((-1.0)*pz)));
evalcond[2]=((((-1.0)*x2173*x2183))+(((-1.0)*x2170*x2175))+((cj0*x2185))+(((-1.0)*r02*x2178))+(((-1.0)*r01*sj4*x2168)));
evalcond[3]=((((-1.0)*r11*sj4*x2168))+((sj0*x2185))+(((-1.0)*x2175*x2176))+(((-1.0)*x2174*x2183))+(((-1.0)*r12*x2178)));
evalcond[4]=((((-1.0)*x2173*x2184))+((r00*x2169))+(((-0.28)*x2173))+(((-1.0)*px))+(((-1.0)*r01*x2172))+(((0.01)*sj0))+(((0.245)*cj0*x2185)));
evalcond[5]=((((0.245)*sj0*x2185))+(((-0.01)*cj0))+(((-0.28)*x2174))+(((-1.0)*py))+((r10*x2169))+(((-1.0)*x2174*x2184))+(((-1.0)*r11*x2172)));
evalcond[6]=(((r21*x2179))+((sj1*x2167))+((x2171*x2177))+(((-1.0)*x2185))+(((-1.0)*r22*x2182))+((cj5*r21*x2171))+(((-1.0)*cj3*r20*x2168)));
evalcond[7]=(((r01*x2179))+((x2170*x2171))+(((-1.0)*cj3*r00*x2168))+((x2166*x2173))+((cj0*x2180))+(((-1.0)*r02*x2182))+((cj5*r01*x2171)));
evalcond[8]=(((r11*x2179))+((x2171*x2176))+((sj0*x2180))+((x2166*x2174))+((cj5*r11*x2171))+(((-1.0)*cj3*r10*x2168))+(((-1.0)*r12*x2182)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x2186=((1.0)*sj5);
IkReal x2187=(cj0*r21);
IkReal x2188=((1.0)*cj5);
IkReal x2189=(cj0*r20);
CheckValue<IkReal> x2190 = IKatan2WithCheck(IkReal(((((-1.0)*cj4*x2187*x2188))+(((-1.0)*cj4*x2186*x2189))+((cj0*r22*sj4)))),IkReal(((((-1.0)*x2186*x2187))+((cj5*x2189)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2190.valid){
continue;
}
CheckValue<IkReal> x2191=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj4*r02))+(((-1.0)*r01*sj4*x2188))+(((-1.0)*r00*sj4*x2186)))),-1);
if(!x2191.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x2190.value)+(((1.5707963267949)*(x2191.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[3];
IkReal x2192=IKcos(j3);
IkReal x2193=IKsin(j3);
IkReal x2194=((1.0)*cj5);
IkReal x2195=(sj4*x2192);
IkReal x2196=(sj5*x2193);
IkReal x2197=(cj4*x2192);
IkReal x2198=((1.0)*sj5*x2197);
evalcond[0]=(((r22*x2195))+(((-1.0)*r20*x2198))+((r21*x2196))+(((-1.0)*r20*x2193*x2194))+(((-1.0)*r21*x2194*x2197)));
evalcond[1]=(cj0+(((-1.0)*r10*x2193*x2194))+(((-1.0)*r10*x2198))+(((-1.0)*r11*x2194*x2197))+((r12*x2195))+((r11*x2196)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r00*x2193*x2194))+(((-1.0)*r01*x2194*x2197))+((r02*x2195))+((r01*x2196))+(((-1.0)*r00*x2198)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
j1eval[0]=sj0;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
j1eval[0]=cj0;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2199=((0.203571428571429)*cj5);
IkReal x2200=((0.875)*cj4);
IkReal x2201=((0.875)*sj4);
IkReal x2202=((0.203571428571429)*sj5);
if( IKabs((((r10*sj5*x2201))+(((-3.57142857142857)*py))+((r12*x2200))+(((-1.0)*r11*x2202))+((cj5*r11*x2201))+((r10*x2199)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r20*x2199))+(((-1.0)*cj5*r21*x2201))+(((-1.0)*r22*x2200))+(((-1.0)*r20*sj5*x2201))+((r21*x2202))+(((3.57142857142857)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r10*sj5*x2201))+(((-3.57142857142857)*py))+((r12*x2200))+(((-1.0)*r11*x2202))+((cj5*r11*x2201))+((r10*x2199))))+IKsqr(((((-1.0)*r20*x2199))+(((-1.0)*cj5*r21*x2201))+(((-1.0)*r22*x2200))+(((-1.0)*r20*sj5*x2201))+((r21*x2202))+(((3.57142857142857)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((r10*sj5*x2201))+(((-3.57142857142857)*py))+((r12*x2200))+(((-1.0)*r11*x2202))+((cj5*r11*x2201))+((r10*x2199))), ((((-1.0)*r20*x2199))+(((-1.0)*cj5*r21*x2201))+(((-1.0)*r22*x2200))+(((-1.0)*r20*sj5*x2201))+((r21*x2202))+(((3.57142857142857)*pz))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x2203=((1.0)*py);
IkReal x2204=((0.245)*sj3);
IkReal x2205=(cj4*sj5);
IkReal x2206=((0.245)*cj4);
IkReal x2207=((0.245)*sj4);
IkReal x2208=(cj5*r11);
IkReal x2209=(r11*sj5);
IkReal x2210=((0.057)*cj5);
IkReal x2211=((0.245)*cj3);
IkReal x2212=(r21*sj5);
IkReal x2213=(cj5*r21);
IkReal x2214=(r10*x2210);
IkReal x2215=((0.28)*(IKsin(j1)));
IkReal x2216=((0.057)*x2209);
IkReal x2217=(r20*x2210);
IkReal x2218=((0.28)*(IKcos(j1)));
IkReal x2219=((0.057)*x2212);
IkReal x2220=(x2217+x2218);
IkReal x2221=(x2203+x2216+x2215);
evalcond[0]=(x2219+(((-1.0)*x2207*x2213))+(((-1.0)*r22*x2206))+pz+(((-1.0)*x2220))+(((-1.0)*r20*sj5*x2207)));
evalcond[1]=(x2214+((r10*sj5*x2207))+((r12*x2206))+(((-1.0)*x2221))+((x2207*x2208)));
evalcond[2]=(((cj4*x2204*x2213))+x2214+(((-1.0)*cj5*r20*x2211))+((x2211*x2212))+(((-1.0)*x2221))+((r20*x2204*x2205))+(((-1.0)*r22*sj4*x2204)));
evalcond[3]=(x2220+(((-1.0)*x2219))+((cj5*r10*x2211))+(((-1.0)*pz))+((r12*sj4*x2204))+(((-1.0)*r10*x2204*x2205))+(((-1.0)*x2209*x2211))+(((-1.0)*cj4*x2204*x2208)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2222=(cj4*r12);
IkReal x2223=((1.0)*sj1);
IkReal x2224=(cj4*r22);
IkReal x2225=(sj4*sj5);
IkReal x2226=(cj5*sj4);
IkReal x2227=(cj1*x2226);
if( IKabs((((sj1*x2224))+((cj1*r10*x2225))+((r21*sj1*x2226))+((r20*sj1*x2225))+((r11*x2227))+((cj1*x2222)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x2222*x2223))+(((-1.0)*r10*x2223*x2225))+(((-1.0)*r11*x2223*x2226))+((r21*x2227))+((cj1*x2224))+((cj1*r20*x2225)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj1*x2224))+((cj1*r10*x2225))+((r21*sj1*x2226))+((r20*sj1*x2225))+((r11*x2227))+((cj1*x2222))))+IKsqr(((((-1.0)*x2222*x2223))+(((-1.0)*r10*x2223*x2225))+(((-1.0)*r11*x2223*x2226))+((r21*x2227))+((cj1*x2224))+((cj1*r20*x2225))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((sj1*x2224))+((cj1*r10*x2225))+((r21*sj1*x2226))+((r20*sj1*x2225))+((r11*x2227))+((cj1*x2222))), ((((-1.0)*x2222*x2223))+(((-1.0)*r10*x2223*x2225))+(((-1.0)*r11*x2223*x2226))+((r21*x2227))+((cj1*x2224))+((cj1*r20*x2225))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2228=IKsin(j2);
IkReal x2229=IKcos(j2);
IkReal x2230=((1.0)*r10);
IkReal x2231=(cj3*cj5);
IkReal x2232=((0.057)*sj5);
IkReal x2233=((1.0)*sj4);
IkReal x2234=((0.245)*sj1);
IkReal x2235=((0.057)*cj5);
IkReal x2236=(r20*sj5);
IkReal x2237=((1.0)*cj4);
IkReal x2238=(cj3*sj5);
IkReal x2239=(cj4*sj3);
IkReal x2240=(cj1*x2229);
IkReal x2241=(sj1*x2228);
IkReal x2242=(cj1*x2228);
IkReal x2243=(sj1*x2229);
IkReal x2244=(cj5*x2239);
IkReal x2245=(x2240+x2241);
evalcond[0]=((((-1.0)*cj5*r21*x2233))+x2245+(((-1.0)*r22*x2237))+(((-1.0)*x2233*x2236)));
evalcond[1]=(x2242+(((-1.0)*x2243))+(((-1.0)*cj5*r11*x2233))+(((-1.0)*sj4*sj5*x2230))+(((-1.0)*r12*x2237)));
evalcond[2]=((((0.28)*cj1))+(((-1.0)*r21*x2232))+((x2228*x2234))+(((-1.0)*pz))+((r20*x2235))+(((0.245)*x2240)));
evalcond[3]=((((-0.28)*sj1))+((r10*x2235))+(((-1.0)*x2229*x2234))+(((-1.0)*py))+(((-1.0)*r11*x2232))+(((0.245)*x2242)));
evalcond[4]=(x2245+((r11*x2244))+((r10*sj5*x2239))+(((-1.0)*r12*sj3*x2233))+(((-1.0)*x2230*x2231))+((r11*x2238)));
evalcond[5]=(x2243+(((-1.0)*x2242))+(((-1.0)*r20*x2231))+(((-1.0)*r22*sj3*x2233))+((x2236*x2239))+((r21*x2238))+((r21*x2244)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2246=((0.203571428571429)*cj5);
IkReal x2247=((0.875)*cj4);
IkReal x2248=((0.875)*sj4);
IkReal x2249=((0.203571428571429)*sj5);
if( IKabs((((r11*x2249))+(((-1.0)*r10*x2246))+(((-1.0)*r10*sj5*x2248))+(((-1.0)*r12*x2247))+(((-1.0)*cj5*r11*x2248))+(((3.57142857142857)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r20*sj5*x2248))+(((-1.0)*r22*x2247))+(((-1.0)*cj5*r21*x2248))+((r21*x2249))+(((3.57142857142857)*pz))+(((-1.0)*r20*x2246)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r11*x2249))+(((-1.0)*r10*x2246))+(((-1.0)*r10*sj5*x2248))+(((-1.0)*r12*x2247))+(((-1.0)*cj5*r11*x2248))+(((3.57142857142857)*py))))+IKsqr(((((-1.0)*r20*sj5*x2248))+(((-1.0)*r22*x2247))+(((-1.0)*cj5*r21*x2248))+((r21*x2249))+(((3.57142857142857)*pz))+(((-1.0)*r20*x2246))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((r11*x2249))+(((-1.0)*r10*x2246))+(((-1.0)*r10*sj5*x2248))+(((-1.0)*r12*x2247))+(((-1.0)*cj5*r11*x2248))+(((3.57142857142857)*py))), ((((-1.0)*r20*sj5*x2248))+(((-1.0)*r22*x2247))+(((-1.0)*cj5*r21*x2248))+((r21*x2249))+(((3.57142857142857)*pz))+(((-1.0)*r20*x2246))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x2250=((0.245)*r12);
IkReal x2251=(sj3*sj4);
IkReal x2252=((0.245)*cj5);
IkReal x2253=((0.245)*r22);
IkReal x2254=(r11*sj5);
IkReal x2255=((0.057)*cj5);
IkReal x2256=(cj4*sj3);
IkReal x2257=((0.245)*cj3);
IkReal x2258=(r21*sj5);
IkReal x2259=((0.057)*x2258);
IkReal x2260=(r20*x2255);
IkReal x2261=((0.28)*(IKcos(j1)));
IkReal x2262=(r10*x2255);
IkReal x2263=((0.28)*(IKsin(j1)));
IkReal x2264=((0.057)*x2254);
IkReal x2265=((0.245)*sj4*sj5);
IkReal x2266=(x2259+pz);
IkReal x2267=((0.245)*sj5*x2256);
IkReal x2268=(x2260+x2261);
IkReal x2269=(x2262+x2263);
evalcond[0]=((((-1.0)*cj4*x2250))+x2264+py+(((-1.0)*r11*sj4*x2252))+(((-1.0)*r10*x2265))+(((-1.0)*x2269)));
evalcond[1]=((((-1.0)*cj4*x2253))+x2266+(((-1.0)*r20*x2265))+(((-1.0)*x2268))+(((-1.0)*r21*sj4*x2252)));
evalcond[2]=((((-1.0)*r11*x2252*x2256))+x2266+(((-1.0)*r10*x2267))+(((-1.0)*x2268))+((x2250*x2251))+((cj3*r10*x2252))+(((-1.0)*x2254*x2257)));
evalcond[3]=(x2269+(((-1.0)*x2257*x2258))+(((-1.0)*r20*x2267))+(((-1.0)*py))+(((-1.0)*r21*x2252*x2256))+((cj3*r20*x2252))+((x2251*x2253))+(((-1.0)*x2264)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2270=(cj5*sj4);
IkReal x2271=(cj1*cj4);
IkReal x2272=(cj4*sj1);
IkReal x2273=((1.0)*cj1);
IkReal x2274=(sj4*sj5);
if( IKabs(((((-1.0)*r12*x2271))+((r21*sj1*x2270))+((r22*x2272))+(((-1.0)*r10*x2273*x2274))+((r20*sj1*x2274))+(((-1.0)*r11*x2270*x2273)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*sj1*x2270))+((r10*sj1*x2274))+((r22*x2271))+((r12*x2272))+((cj1*r20*x2274))+((cj1*r21*x2270)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r12*x2271))+((r21*sj1*x2270))+((r22*x2272))+(((-1.0)*r10*x2273*x2274))+((r20*sj1*x2274))+(((-1.0)*r11*x2270*x2273))))+IKsqr((((r11*sj1*x2270))+((r10*sj1*x2274))+((r22*x2271))+((r12*x2272))+((cj1*r20*x2274))+((cj1*r21*x2270))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r12*x2271))+((r21*sj1*x2270))+((r22*x2272))+(((-1.0)*r10*x2273*x2274))+((r20*sj1*x2274))+(((-1.0)*r11*x2270*x2273))), (((r11*sj1*x2270))+((r10*sj1*x2274))+((r22*x2271))+((r12*x2272))+((cj1*r20*x2274))+((cj1*r21*x2270))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2275=IKcos(j2);
IkReal x2276=IKsin(j2);
IkReal x2277=((1.0)*r10);
IkReal x2278=(cj3*cj5);
IkReal x2279=((0.057)*sj5);
IkReal x2280=((1.0)*sj4);
IkReal x2281=((0.057)*cj5);
IkReal x2282=(cj3*sj5);
IkReal x2283=(r20*sj5);
IkReal x2284=((1.0)*cj4);
IkReal x2285=(cj4*sj3);
IkReal x2286=(cj5*r21);
IkReal x2287=(cj5*r11);
IkReal x2288=(sj1*x2275);
IkReal x2289=(cj1*x2275);
IkReal x2290=((0.245)*x2276);
IkReal x2291=(sj1*x2276);
IkReal x2292=((1.0)*cj1*x2276);
evalcond[0]=((((-1.0)*x2280*x2286))+(((-1.0)*x2280*x2283))+x2289+x2291+(((-1.0)*r22*x2284)));
evalcond[1]=((((-1.0)*x2280*x2287))+x2288+(((-1.0)*r12*x2284))+(((-1.0)*sj4*sj5*x2277))+(((-1.0)*x2292)));
evalcond[2]=((((0.28)*cj1))+((sj1*x2290))+(((0.245)*x2289))+((r20*x2281))+(((-1.0)*r21*x2279))+(((-1.0)*pz)));
evalcond[3]=(((r10*x2281))+(((0.245)*x2288))+(((-1.0)*py))+(((0.28)*sj1))+(((-1.0)*cj1*x2290))+(((-1.0)*r11*x2279)));
evalcond[4]=((((-1.0)*r22*sj3*x2280))+(((-1.0)*r20*x2278))+x2288+((x2283*x2285))+((r21*x2282))+(((-1.0)*x2292))+((x2285*x2286)));
evalcond[5]=((((-1.0)*r12*sj3*x2280))+((r11*x2282))+(((-1.0)*x2289))+(((-1.0)*x2291))+((r10*sj5*x2285))+(((-1.0)*x2277*x2278))+((x2285*x2287)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2293=((0.875)*cj4);
IkReal x2294=((0.203571428571429)*cj5);
IkReal x2295=((0.203571428571429)*sj5);
IkReal x2296=((0.875)*sj4*sj5);
IkReal x2297=((0.875)*cj5*sj4);
if( IKabs(((((-3.57142857142857)*px))+(((-1.0)*r01*x2295))+((r02*x2293))+((r00*x2294))+((r00*x2296))+((r01*x2297)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r21*x2295))+(((-1.0)*r22*x2293))+(((3.57142857142857)*pz))+(((-1.0)*r20*x2294))+(((-1.0)*r20*x2296))+(((-1.0)*r21*x2297)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-3.57142857142857)*px))+(((-1.0)*r01*x2295))+((r02*x2293))+((r00*x2294))+((r00*x2296))+((r01*x2297))))+IKsqr((((r21*x2295))+(((-1.0)*r22*x2293))+(((3.57142857142857)*pz))+(((-1.0)*r20*x2294))+(((-1.0)*r20*x2296))+(((-1.0)*r21*x2297))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-3.57142857142857)*px))+(((-1.0)*r01*x2295))+((r02*x2293))+((r00*x2294))+((r00*x2296))+((r01*x2297))), (((r21*x2295))+(((-1.0)*r22*x2293))+(((3.57142857142857)*pz))+(((-1.0)*r20*x2294))+(((-1.0)*r20*x2296))+(((-1.0)*r21*x2297))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x2298=((1.0)*px);
IkReal x2299=((0.245)*r20);
IkReal x2300=(cj3*cj5);
IkReal x2301=((0.245)*r00);
IkReal x2302=(r01*sj5);
IkReal x2303=((0.057)*cj5);
IkReal x2304=((0.245)*cj4);
IkReal x2305=((0.245)*cj3);
IkReal x2306=(sj4*sj5);
IkReal x2307=(cj5*r01);
IkReal x2308=((0.245)*sj4);
IkReal x2309=(r21*sj5);
IkReal x2310=(cj5*r21);
IkReal x2311=(r00*x2303);
IkReal x2312=((0.28)*(IKsin(j1)));
IkReal x2313=((0.057)*x2302);
IkReal x2314=(r20*x2303);
IkReal x2315=((0.28)*(IKcos(j1)));
IkReal x2316=((0.057)*x2309);
IkReal x2317=(cj4*sj3*sj5);
IkReal x2318=(sj3*x2308);
IkReal x2319=(x2314+x2315);
IkReal x2320=(x2298+x2312+x2313);
evalcond[0]=((((-1.0)*r22*x2304))+x2316+(((-1.0)*x2308*x2310))+pz+(((-1.0)*x2299*x2306))+(((-1.0)*x2319)));
evalcond[1]=(x2311+((r02*x2304))+((x2301*x2306))+((x2307*x2308))+(((-1.0)*x2320)));
evalcond[2]=(((x2305*x2309))+(((-1.0)*r22*x2318))+x2311+((sj3*x2304*x2310))+((x2299*x2317))+(((-1.0)*x2299*x2300))+(((-1.0)*x2320)));
evalcond[3]=(((x2300*x2301))+x2319+(((-1.0)*sj3*x2304*x2307))+(((-1.0)*pz))+(((-1.0)*x2302*x2305))+((r02*x2318))+(((-1.0)*x2316))+(((-1.0)*x2301*x2317)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2321=(cj4*r22);
IkReal x2322=((1.0)*sj1);
IkReal x2323=(cj5*sj4);
IkReal x2324=(cj4*r02);
IkReal x2325=(sj4*sj5);
if( IKabs((((r21*sj1*x2323))+((cj1*x2324))+((sj1*x2321))+((cj1*r00*x2325))+((cj1*r01*x2323))+((r20*sj1*x2325)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x2322*x2325))+(((-1.0)*x2322*x2324))+(((-1.0)*r01*x2322*x2323))+((cj1*x2321))+((cj1*r20*x2325))+((cj1*r21*x2323)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r21*sj1*x2323))+((cj1*x2324))+((sj1*x2321))+((cj1*r00*x2325))+((cj1*r01*x2323))+((r20*sj1*x2325))))+IKsqr(((((-1.0)*r00*x2322*x2325))+(((-1.0)*x2322*x2324))+(((-1.0)*r01*x2322*x2323))+((cj1*x2321))+((cj1*r20*x2325))+((cj1*r21*x2323))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r21*sj1*x2323))+((cj1*x2324))+((sj1*x2321))+((cj1*r00*x2325))+((cj1*r01*x2323))+((r20*sj1*x2325))), ((((-1.0)*r00*x2322*x2325))+(((-1.0)*x2322*x2324))+(((-1.0)*r01*x2322*x2323))+((cj1*x2321))+((cj1*r20*x2325))+((cj1*r21*x2323))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2326=IKsin(j2);
IkReal x2327=IKcos(j2);
IkReal x2328=((0.057)*cj5);
IkReal x2329=(r21*sj5);
IkReal x2330=((0.245)*sj1);
IkReal x2331=(r01*sj5);
IkReal x2332=((1.0)*r20);
IkReal x2333=(sj4*sj5);
IkReal x2334=((1.0)*cj4);
IkReal x2335=(cj3*cj5);
IkReal x2336=((1.0)*r00);
IkReal x2337=(cj1*x2327);
IkReal x2338=(sj1*x2326);
IkReal x2339=(cj1*x2326);
IkReal x2340=(cj4*sj3*sj5);
IkReal x2341=((1.0)*sj3*sj4);
IkReal x2342=(sj1*x2327);
IkReal x2343=((1.0)*cj5*sj4);
IkReal x2344=(cj4*cj5*sj3);
IkReal x2345=(x2337+x2338);
evalcond[0]=((((-1.0)*x2332*x2333))+(((-1.0)*r21*x2343))+x2345+(((-1.0)*r22*x2334)));
evalcond[1]=(x2339+(((-1.0)*r01*x2343))+(((-1.0)*x2342))+(((-1.0)*x2333*x2336))+(((-1.0)*r02*x2334)));
evalcond[2]=((((0.28)*cj1))+(((-0.057)*x2329))+(((-1.0)*pz))+((x2326*x2330))+((r20*x2328))+(((0.245)*x2337)));
evalcond[3]=((((-0.28)*sj1))+(((-0.057)*x2331))+(((-1.0)*px))+((r00*x2328))+(((-1.0)*x2327*x2330))+(((0.245)*x2339)));
evalcond[4]=(((r01*x2344))+x2345+((r00*x2340))+((cj3*x2331))+(((-1.0)*r02*x2341))+(((-1.0)*x2335*x2336)));
evalcond[5]=(((cj3*x2329))+(((-1.0)*x2332*x2335))+x2342+(((-1.0)*r22*x2341))+((r20*x2340))+((r21*x2344))+(((-1.0)*x2339)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2346=((0.875)*cj4);
IkReal x2347=((0.203571428571429)*cj5);
IkReal x2348=((0.203571428571429)*sj5);
IkReal x2349=((0.875)*sj4*sj5);
IkReal x2350=((0.875)*cj5*sj4);
if( IKabs((((r01*x2348))+(((-1.0)*r00*x2347))+(((-1.0)*r00*x2349))+(((-1.0)*r01*x2350))+(((-1.0)*r02*x2346))+(((3.57142857142857)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r20*x2349))+(((-1.0)*r20*x2347))+(((-1.0)*r21*x2350))+(((-1.0)*r22*x2346))+((r21*x2348))+(((3.57142857142857)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x2348))+(((-1.0)*r00*x2347))+(((-1.0)*r00*x2349))+(((-1.0)*r01*x2350))+(((-1.0)*r02*x2346))+(((3.57142857142857)*px))))+IKsqr(((((-1.0)*r20*x2349))+(((-1.0)*r20*x2347))+(((-1.0)*r21*x2350))+(((-1.0)*r22*x2346))+((r21*x2348))+(((3.57142857142857)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((r01*x2348))+(((-1.0)*r00*x2347))+(((-1.0)*r00*x2349))+(((-1.0)*r01*x2350))+(((-1.0)*r02*x2346))+(((3.57142857142857)*px))), ((((-1.0)*r20*x2349))+(((-1.0)*r20*x2347))+(((-1.0)*r21*x2350))+(((-1.0)*r22*x2346))+((r21*x2348))+(((3.57142857142857)*pz))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x2351=((0.245)*r20);
IkReal x2352=(cj3*cj5);
IkReal x2353=((0.245)*r00);
IkReal x2354=(r01*sj5);
IkReal x2355=(sj4*sj5);
IkReal x2356=((0.245)*cj4);
IkReal x2357=((0.245)*cj3);
IkReal x2358=(cj5*r01);
IkReal x2359=((0.245)*sj4);
IkReal x2360=((0.057)*cj5);
IkReal x2361=(r21*sj5);
IkReal x2362=(cj5*r21);
IkReal x2363=((0.057)*x2361);
IkReal x2364=(r20*x2360);
IkReal x2365=((0.28)*(IKcos(j1)));
IkReal x2366=((0.28)*(IKsin(j1)));
IkReal x2367=(r00*x2360);
IkReal x2368=((0.057)*x2354);
IkReal x2369=(cj4*sj3*sj5);
IkReal x2370=(sj3*x2359);
IkReal x2371=(x2363+pz);
IkReal x2372=(x2367+x2366);
IkReal x2373=(x2365+x2364);
evalcond[0]=((((-1.0)*x2358*x2359))+x2368+(((-1.0)*x2372))+px+(((-1.0)*x2353*x2355))+(((-1.0)*r02*x2356)));
evalcond[1]=(x2371+(((-1.0)*x2373))+(((-1.0)*x2359*x2362))+(((-1.0)*r22*x2356))+(((-1.0)*x2351*x2355)));
evalcond[2]=((((-1.0)*x2354*x2357))+(((-1.0)*sj3*x2356*x2358))+x2371+((r02*x2370))+((x2352*x2353))+(((-1.0)*x2373))+(((-1.0)*x2353*x2369)));
evalcond[3]=((((-1.0)*sj3*x2356*x2362))+x2372+(((-1.0)*x2368))+(((-1.0)*x2357*x2361))+((r22*x2370))+(((-1.0)*px))+((x2351*x2352))+(((-1.0)*x2351*x2369)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2374=(cj4*sj1);
IkReal x2375=(cj1*cj4);
IkReal x2376=(cj5*sj4);
IkReal x2377=((1.0)*cj1);
IkReal x2378=(sj4*sj5);
IkReal x2379=(sj1*x2378);
if( IKabs((((r20*x2379))+(((-1.0)*r01*x2376*x2377))+(((-1.0)*r02*x2375))+((r22*x2374))+((r21*sj1*x2376))+(((-1.0)*r00*x2377*x2378)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r01*sj1*x2376))+((cj1*r20*x2378))+((r02*x2374))+((cj1*r21*x2376))+((r22*x2375))+((r00*x2379)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r20*x2379))+(((-1.0)*r01*x2376*x2377))+(((-1.0)*r02*x2375))+((r22*x2374))+((r21*sj1*x2376))+(((-1.0)*r00*x2377*x2378))))+IKsqr((((r01*sj1*x2376))+((cj1*r20*x2378))+((r02*x2374))+((cj1*r21*x2376))+((r22*x2375))+((r00*x2379))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r20*x2379))+(((-1.0)*r01*x2376*x2377))+(((-1.0)*r02*x2375))+((r22*x2374))+((r21*sj1*x2376))+(((-1.0)*r00*x2377*x2378))), (((r01*sj1*x2376))+((cj1*r20*x2378))+((r02*x2374))+((cj1*r21*x2376))+((r22*x2375))+((r00*x2379))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2380=IKcos(j2);
IkReal x2381=IKsin(j2);
IkReal x2382=((0.057)*cj5);
IkReal x2383=(r00*sj5);
IkReal x2384=(cj4*sj3);
IkReal x2385=((0.057)*sj5);
IkReal x2386=((1.0)*sj4);
IkReal x2387=(r20*sj5);
IkReal x2388=((1.0)*cj4);
IkReal x2389=(cj5*r01);
IkReal x2390=(cj5*r21);
IkReal x2391=(cj3*sj5);
IkReal x2392=(sj1*x2380);
IkReal x2393=(cj1*x2380);
IkReal x2394=((0.245)*x2381);
IkReal x2395=(sj3*x2386);
IkReal x2396=(sj1*x2381);
IkReal x2397=((1.0)*cj3*cj5);
IkReal x2398=((1.0)*cj1*x2381);
evalcond[0]=(x2396+x2393+(((-1.0)*x2386*x2387))+(((-1.0)*x2386*x2390))+(((-1.0)*r22*x2388)));
evalcond[1]=((((-1.0)*r02*x2388))+x2392+(((-1.0)*x2386*x2389))+(((-1.0)*x2383*x2386))+(((-1.0)*x2398)));
evalcond[2]=((((0.28)*cj1))+(((-1.0)*r21*x2385))+((r20*x2382))+(((0.245)*x2393))+(((-1.0)*pz))+((sj1*x2394)));
evalcond[3]=((((-1.0)*r01*x2385))+(((-1.0)*cj1*x2394))+((r00*x2382))+(((0.245)*x2392))+(((-1.0)*px))+(((0.28)*sj1)));
evalcond[4]=(((x2384*x2390))+((x2384*x2387))+x2392+(((-1.0)*r20*x2397))+(((-1.0)*r22*x2395))+(((-1.0)*x2398))+((r21*x2391)));
evalcond[5]=((((-1.0)*r00*x2397))+((x2384*x2389))+(((-1.0)*r02*x2395))+((r01*x2391))+((x2383*x2384))+(((-1.0)*x2393))+(((-1.0)*x2396)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1, j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2399=((0.245)*cj0);
IkReal x2400=((0.057)*cj0);
IkReal x2401=(sj4*sj5);
IkReal x2402=(cj5*sj4);
CheckValue<IkReal> x2403=IKPowWithIntegerCheck(cj0,-2);
if(!x2403.valid){
continue;
}
if( IKabs(((3.57142857142857)*(x2403.value)*((((cj4*r02*x2399))+((cj5*r00*x2400))+((r00*x2399*x2401))+(((0.01)*cj0*sj0))+((r01*x2399*x2402))+(((-1.0)*r01*sj5*x2400))+(((-1.0)*cj0*px)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.875)*cj4*r22))+(((-0.875)*r21*x2402))+(((-0.203571428571429)*cj5*r20))+(((3.57142857142857)*pz))+(((-0.875)*r20*x2401))+(((0.203571428571429)*r21*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((3.57142857142857)*(x2403.value)*((((cj4*r02*x2399))+((cj5*r00*x2400))+((r00*x2399*x2401))+(((0.01)*cj0*sj0))+((r01*x2399*x2402))+(((-1.0)*r01*sj5*x2400))+(((-1.0)*cj0*px))))))+IKsqr(((((-0.875)*cj4*r22))+(((-0.875)*r21*x2402))+(((-0.203571428571429)*cj5*r20))+(((3.57142857142857)*pz))+(((-0.875)*r20*x2401))+(((0.203571428571429)*r21*sj5))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((3.57142857142857)*(x2403.value)*((((cj4*r02*x2399))+((cj5*r00*x2400))+((r00*x2399*x2401))+(((0.01)*cj0*sj0))+((r01*x2399*x2402))+(((-1.0)*r01*sj5*x2400))+(((-1.0)*cj0*px))))), ((((-0.875)*cj4*r22))+(((-0.875)*r21*x2402))+(((-0.203571428571429)*cj5*r20))+(((3.57142857142857)*pz))+(((-0.875)*r20*x2401))+(((0.203571428571429)*r21*sj5))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[9];
IkReal x2404=IKsin(j1);
IkReal x2405=IKcos(j1);
IkReal x2406=sj0*sj0;
IkReal x2407=cj0*cj0;
IkReal x2408=(cj5*r20);
IkReal x2409=((0.057)*cj0);
IkReal x2410=(cj5*r10);
IkReal x2411=((1.0)*py);
IkReal x2412=(cj0*sj0);
IkReal x2413=((1.0)*cj0);
IkReal x2414=(r21*sj5);
IkReal x2415=((0.245)*cj0);
IkReal x2416=((0.245)*r00);
IkReal x2417=(sj0*sj5);
IkReal x2418=((0.057)*sj5);
IkReal x2419=(cj5*r01);
IkReal x2420=((1.0)*px);
IkReal x2421=((0.245)*cj4);
IkReal x2422=(sj3*sj5);
IkReal x2423=(r11*sj5);
IkReal x2424=(r01*sj5);
IkReal x2425=((0.245)*cj3);
IkReal x2426=(sj4*sj5);
IkReal x2427=(cj5*r11);
IkReal x2428=(cj5*r00);
IkReal x2429=((0.057)*sj0);
IkReal x2430=((0.245)*sj4);
IkReal x2431=((0.01)*x2412);
IkReal x2432=(sj0*x2425);
IkReal x2433=((0.28)*x2404);
IkReal x2434=(sj3*x2430);
IkReal x2435=((0.28)*x2405);
IkReal x2436=(cj5*r21*sj3);
IkReal x2437=(x2412*x2433);
evalcond[0]=((((-0.245)*r20*x2426))+(((-1.0)*x2435))+(((-0.057)*x2408))+(((0.057)*x2414))+(((-1.0)*cj5*r21*x2430))+(((-1.0)*r22*x2421))+pz);
evalcond[1]=(((sj0*x2427*x2430))+((r10*x2417*x2430))+(((-1.0)*x2431))+(((-1.0)*sj0*x2411))+(((-1.0)*x2406*x2433))+(((-0.057)*r11*x2417))+((r12*sj0*x2421))+((x2410*x2429)));
evalcond[2]=(((r00*x2415*x2426))+(((-1.0)*x2409*x2424))+x2431+(((-1.0)*x2407*x2433))+((x2409*x2428))+((sj4*x2415*x2419))+((cj4*r02*x2415))+(((-1.0)*px*x2413)));
evalcond[3]=((((-1.0)*sj3*x2421*x2427))+(((-1.0)*r10*x2421*x2422))+(((-1.0)*x2423*x2425))+((r12*x2434))+(((-1.0)*pz*sj0))+((x2408*x2429))+((sj0*x2435))+((x2410*x2425))+(((-1.0)*x2414*x2429)));
evalcond[4]=(((x2408*x2409))+((cj3*cj5*x2416))+(((-1.0)*pz*x2413))+(((-1.0)*x2424*x2425))+((cj0*x2435))+((r02*x2434))+(((-1.0)*sj3*x2419*x2421))+(((-1.0)*cj4*x2416*x2422))+(((-1.0)*x2409*x2414)));
evalcond[5]=((((-0.01)*cj0))+(((-1.0)*r11*x2418))+(((-1.0)*x2408*x2432))+(((0.057)*x2410))+(((-1.0)*x2411))+((sj0*x2421*x2436))+((x2414*x2432))+(((-1.0)*r22*sj0*x2434))+(((-1.0)*sj0*x2433))+((r20*sj3*x2417*x2421)));
evalcond[6]=((((-1.0)*cj0*x2433))+(((-1.0)*r22*sj3*sj4*x2415))+((cj4*r20*x2415*x2422))+(((-1.0)*cj3*x2408*x2415))+(((0.057)*x2428))+((cj4*x2415*x2436))+(((-1.0)*x2420))+((cj3*x2414*x2415))+(((0.01)*sj0))+(((-1.0)*r01*x2418)));
evalcond[7]=((((0.01)*x2406))+(((-1.0)*x2437))+(((-1.0)*sj0*x2420))+((r10*x2415*x2426))+(((-0.057)*r01*x2417))+((sj4*x2415*x2427))+((x2428*x2429))+((cj4*r12*x2415)));
evalcond[8]=(((r02*sj0*x2421))+(((-1.0)*cj0*x2411))+(((-1.0)*x2409*x2423))+(((-0.01)*x2407))+((sj0*x2419*x2430))+(((-1.0)*x2437))+((x2409*x2410))+((sj4*x2416*x2417)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
j2eval[0]=cj0;
j2eval[1]=IKsign(cj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=sj0;
j2eval[1]=IKsign(sj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2438=(cj4*r22);
IkReal x2439=((1.0)*sj1);
IkReal x2440=(cj5*sj4);
IkReal x2441=(cj4*r02);
IkReal x2442=(sj4*sj5);
if( IKabs((((cj1*x2441))+((cj1*r01*x2440))+((cj1*r00*x2442))+((r21*sj1*x2440))+((r20*sj1*x2442))+((sj1*x2438)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*r20*x2442))+(((-1.0)*r01*x2439*x2440))+(((-1.0)*r00*x2439*x2442))+(((-1.0)*x2439*x2441))+((cj1*x2438))+((cj1*r21*x2440)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*x2441))+((cj1*r01*x2440))+((cj1*r00*x2442))+((r21*sj1*x2440))+((r20*sj1*x2442))+((sj1*x2438))))+IKsqr((((cj1*r20*x2442))+(((-1.0)*r01*x2439*x2440))+(((-1.0)*r00*x2439*x2442))+(((-1.0)*x2439*x2441))+((cj1*x2438))+((cj1*r21*x2440))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*x2441))+((cj1*r01*x2440))+((cj1*r00*x2442))+((r21*sj1*x2440))+((r20*sj1*x2442))+((sj1*x2438))), (((cj1*r20*x2442))+(((-1.0)*r01*x2439*x2440))+(((-1.0)*r00*x2439*x2442))+(((-1.0)*x2439*x2441))+((cj1*x2438))+((cj1*r21*x2440))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2443=IKsin(j2);
IkReal x2444=IKcos(j2);
IkReal x2445=((0.057)*cj5);
IkReal x2446=(r21*sj5);
IkReal x2447=((0.245)*sj1);
IkReal x2448=(r01*sj5);
IkReal x2449=((1.0)*r20);
IkReal x2450=(sj4*sj5);
IkReal x2451=((1.0)*cj4);
IkReal x2452=(cj3*cj5);
IkReal x2453=((1.0)*r00);
IkReal x2454=(cj1*x2444);
IkReal x2455=(sj1*x2443);
IkReal x2456=(cj1*x2443);
IkReal x2457=(cj4*sj3*sj5);
IkReal x2458=((1.0)*sj3*sj4);
IkReal x2459=(sj1*x2444);
IkReal x2460=((1.0)*cj5*sj4);
IkReal x2461=(cj4*cj5*sj3);
IkReal x2462=(x2455+x2454);
evalcond[0]=(x2462+(((-1.0)*x2449*x2450))+(((-1.0)*r21*x2460))+(((-1.0)*r22*x2451)));
evalcond[1]=((((-1.0)*x2450*x2453))+x2456+(((-1.0)*r01*x2460))+(((-1.0)*x2459))+(((-1.0)*r02*x2451)));
evalcond[2]=((((0.28)*cj1))+(((-0.057)*x2446))+((x2443*x2447))+(((0.245)*x2454))+(((-1.0)*pz))+((r20*x2445)));
evalcond[3]=((((-0.057)*x2448))+(((-0.28)*sj1))+(((-1.0)*x2444*x2447))+((r00*x2445))+(((0.245)*x2456))+(((-1.0)*px)));
evalcond[4]=(((r01*x2461))+x2462+(((-1.0)*x2452*x2453))+((r00*x2457))+(((-1.0)*r02*x2458))+((cj3*x2448)));
evalcond[5]=(x2459+((r21*x2461))+(((-1.0)*x2456))+(((-1.0)*x2449*x2452))+(((-1.0)*r22*x2458))+((r20*x2457))+((cj3*x2446)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2463=(cj4*sj1);
IkReal x2464=(cj1*cj4);
IkReal x2465=(cj5*sj4);
IkReal x2466=((1.0)*cj1);
IkReal x2467=(sj4*sj5);
IkReal x2468=(sj1*x2467);
if( IKabs((((r20*x2468))+((r21*sj1*x2465))+(((-1.0)*r02*x2464))+((r22*x2463))+(((-1.0)*r00*x2466*x2467))+(((-1.0)*r01*x2465*x2466)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*r21*x2465))+((cj1*r20*x2467))+((r02*x2463))+((r22*x2464))+((r01*sj1*x2465))+((r00*x2468)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r20*x2468))+((r21*sj1*x2465))+(((-1.0)*r02*x2464))+((r22*x2463))+(((-1.0)*r00*x2466*x2467))+(((-1.0)*r01*x2465*x2466))))+IKsqr((((cj1*r21*x2465))+((cj1*r20*x2467))+((r02*x2463))+((r22*x2464))+((r01*sj1*x2465))+((r00*x2468))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r20*x2468))+((r21*sj1*x2465))+(((-1.0)*r02*x2464))+((r22*x2463))+(((-1.0)*r00*x2466*x2467))+(((-1.0)*r01*x2465*x2466))), (((cj1*r21*x2465))+((cj1*r20*x2467))+((r02*x2463))+((r22*x2464))+((r01*sj1*x2465))+((r00*x2468))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2469=IKcos(j2);
IkReal x2470=IKsin(j2);
IkReal x2471=((0.057)*cj5);
IkReal x2472=(r00*sj5);
IkReal x2473=(cj4*sj3);
IkReal x2474=((0.057)*sj5);
IkReal x2475=((1.0)*sj4);
IkReal x2476=(r20*sj5);
IkReal x2477=((1.0)*cj4);
IkReal x2478=(cj5*r01);
IkReal x2479=(cj5*r21);
IkReal x2480=(cj3*sj5);
IkReal x2481=(sj1*x2469);
IkReal x2482=(cj1*x2469);
IkReal x2483=((0.245)*x2470);
IkReal x2484=(sj3*x2475);
IkReal x2485=(sj1*x2470);
IkReal x2486=((1.0)*cj3*cj5);
IkReal x2487=((1.0)*cj1*x2470);
evalcond[0]=(x2485+x2482+(((-1.0)*x2475*x2476))+(((-1.0)*x2475*x2479))+(((-1.0)*r22*x2477)));
evalcond[1]=(x2481+(((-1.0)*x2472*x2475))+(((-1.0)*x2487))+(((-1.0)*x2475*x2478))+(((-1.0)*r02*x2477)));
evalcond[2]=((((0.28)*cj1))+(((-1.0)*r21*x2474))+(((0.245)*x2482))+((r20*x2471))+(((-1.0)*pz))+((sj1*x2483)));
evalcond[3]=((((-1.0)*r01*x2474))+(((0.245)*x2481))+((r00*x2471))+(((-1.0)*px))+(((-1.0)*cj1*x2483))+(((0.28)*sj1)));
evalcond[4]=((((-1.0)*r22*x2484))+x2481+(((-1.0)*x2487))+(((-1.0)*r20*x2486))+((r21*x2480))+((x2473*x2479))+((x2473*x2476)));
evalcond[5]=(((r01*x2480))+(((-1.0)*x2485))+(((-1.0)*x2482))+(((-1.0)*r00*x2486))+(((-1.0)*r02*x2484))+((x2472*x2473))+((x2473*x2478)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2488=(cj4*r12);
IkReal x2489=((1.0)*sj1);
IkReal x2490=(cj4*r22);
IkReal x2491=(sj4*sj5);
IkReal x2492=(cj5*sj4);
IkReal x2493=(cj1*x2492);
if( IKabs((((sj1*x2490))+((cj1*x2488))+((r20*sj1*x2491))+((cj1*r10*x2491))+((r21*sj1*x2492))+((r11*x2493)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*x2490))+((cj1*r20*x2491))+(((-1.0)*r11*x2489*x2492))+(((-1.0)*x2488*x2489))+((r21*x2493))+(((-1.0)*r10*x2489*x2491)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj1*x2490))+((cj1*x2488))+((r20*sj1*x2491))+((cj1*r10*x2491))+((r21*sj1*x2492))+((r11*x2493))))+IKsqr((((cj1*x2490))+((cj1*r20*x2491))+(((-1.0)*r11*x2489*x2492))+(((-1.0)*x2488*x2489))+((r21*x2493))+(((-1.0)*r10*x2489*x2491))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((sj1*x2490))+((cj1*x2488))+((r20*sj1*x2491))+((cj1*r10*x2491))+((r21*sj1*x2492))+((r11*x2493))), (((cj1*x2490))+((cj1*r20*x2491))+(((-1.0)*r11*x2489*x2492))+(((-1.0)*x2488*x2489))+((r21*x2493))+(((-1.0)*r10*x2489*x2491))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2494=IKsin(j2);
IkReal x2495=IKcos(j2);
IkReal x2496=((1.0)*r10);
IkReal x2497=(cj3*cj5);
IkReal x2498=((0.057)*sj5);
IkReal x2499=((1.0)*sj4);
IkReal x2500=((0.245)*sj1);
IkReal x2501=((0.057)*cj5);
IkReal x2502=(r20*sj5);
IkReal x2503=((1.0)*cj4);
IkReal x2504=(cj3*sj5);
IkReal x2505=(cj4*sj3);
IkReal x2506=(cj1*x2495);
IkReal x2507=(sj1*x2494);
IkReal x2508=(cj1*x2494);
IkReal x2509=(sj1*x2495);
IkReal x2510=(cj5*x2505);
IkReal x2511=(x2507+x2506);
evalcond[0]=(x2511+(((-1.0)*r22*x2503))+(((-1.0)*x2499*x2502))+(((-1.0)*cj5*r21*x2499)));
evalcond[1]=(x2508+(((-1.0)*r12*x2503))+(((-1.0)*sj4*sj5*x2496))+(((-1.0)*cj5*r11*x2499))+(((-1.0)*x2509)));
evalcond[2]=((((0.28)*cj1))+(((0.245)*x2506))+((x2494*x2500))+(((-1.0)*r21*x2498))+(((-1.0)*pz))+((r20*x2501)));
evalcond[3]=((((-0.28)*sj1))+(((0.245)*x2508))+((r10*x2501))+(((-1.0)*x2495*x2500))+(((-1.0)*py))+(((-1.0)*r11*x2498)));
evalcond[4]=(x2511+(((-1.0)*x2496*x2497))+(((-1.0)*r12*sj3*x2499))+((r11*x2510))+((r10*sj5*x2505))+((r11*x2504)));
evalcond[5]=(x2509+(((-1.0)*r20*x2497))+(((-1.0)*r22*sj3*x2499))+((r21*x2510))+(((-1.0)*x2508))+((r21*x2504))+((x2502*x2505)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2512=(cj5*sj4);
IkReal x2513=(cj1*cj4);
IkReal x2514=(cj4*sj1);
IkReal x2515=((1.0)*cj1);
IkReal x2516=(sj4*sj5);
if( IKabs(((((-1.0)*r10*x2515*x2516))+((r22*x2514))+((r20*sj1*x2516))+((r21*sj1*x2512))+(((-1.0)*r11*x2512*x2515))+(((-1.0)*r12*x2513)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*sj1*x2512))+((r22*x2513))+((cj1*r21*x2512))+((r10*sj1*x2516))+((cj1*r20*x2516))+((r12*x2514)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*x2515*x2516))+((r22*x2514))+((r20*sj1*x2516))+((r21*sj1*x2512))+(((-1.0)*r11*x2512*x2515))+(((-1.0)*r12*x2513))))+IKsqr((((r11*sj1*x2512))+((r22*x2513))+((cj1*r21*x2512))+((r10*sj1*x2516))+((cj1*r20*x2516))+((r12*x2514))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r10*x2515*x2516))+((r22*x2514))+((r20*sj1*x2516))+((r21*sj1*x2512))+(((-1.0)*r11*x2512*x2515))+(((-1.0)*r12*x2513))), (((r11*sj1*x2512))+((r22*x2513))+((cj1*r21*x2512))+((r10*sj1*x2516))+((cj1*r20*x2516))+((r12*x2514))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2517=IKcos(j2);
IkReal x2518=IKsin(j2);
IkReal x2519=((1.0)*r10);
IkReal x2520=(cj3*cj5);
IkReal x2521=((0.057)*sj5);
IkReal x2522=((1.0)*sj4);
IkReal x2523=((0.057)*cj5);
IkReal x2524=(cj3*sj5);
IkReal x2525=(r20*sj5);
IkReal x2526=((1.0)*cj4);
IkReal x2527=(cj4*sj3);
IkReal x2528=(cj5*r21);
IkReal x2529=(cj5*r11);
IkReal x2530=(sj1*x2517);
IkReal x2531=(cj1*x2517);
IkReal x2532=((0.245)*x2518);
IkReal x2533=(sj1*x2518);
IkReal x2534=((1.0)*cj1*x2518);
evalcond[0]=(x2533+x2531+(((-1.0)*x2522*x2528))+(((-1.0)*x2522*x2525))+(((-1.0)*r22*x2526)));
evalcond[1]=(x2530+(((-1.0)*r12*x2526))+(((-1.0)*x2534))+(((-1.0)*x2522*x2529))+(((-1.0)*sj4*sj5*x2519)));
evalcond[2]=((((0.28)*cj1))+((sj1*x2532))+(((-1.0)*pz))+(((-1.0)*r21*x2521))+(((0.245)*x2531))+((r20*x2523)));
evalcond[3]=((((-1.0)*r11*x2521))+(((-1.0)*py))+(((0.28)*sj1))+(((0.245)*x2530))+((r10*x2523))+(((-1.0)*cj1*x2532)));
evalcond[4]=(((x2527*x2528))+x2530+(((-1.0)*r20*x2520))+(((-1.0)*x2534))+(((-1.0)*r22*sj3*x2522))+((x2525*x2527))+((r21*x2524)));
evalcond[5]=(((x2527*x2529))+((r10*sj5*x2527))+((r11*x2524))+(((-1.0)*r12*sj3*x2522))+(((-1.0)*x2519*x2520))+(((-1.0)*x2533))+(((-1.0)*x2531)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2535=(cj4*r12);
IkReal x2536=((1.0)*sj1);
IkReal x2537=(r10*sj4*sj5);
IkReal x2538=(cj5*r11*sj4);
IkReal x2539=(cj4*r22*sj0);
IkReal x2540=(r20*sj0*sj4*sj5);
IkReal x2541=(cj5*r21*sj0*sj4);
CheckValue<IkReal> x2542=IKPowWithIntegerCheck(IKsign(sj0),-1);
if(!x2542.valid){
continue;
}
CheckValue<IkReal> x2543 = IKatan2WithCheck(IkReal((((sj1*x2539))+((cj1*x2538))+((cj1*x2537))+((cj1*x2535))+((sj1*x2540))+((sj1*x2541)))),IkReal((((cj1*x2541))+((cj1*x2540))+(((-1.0)*x2535*x2536))+((cj1*x2539))+(((-1.0)*x2536*x2537))+(((-1.0)*x2536*x2538)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2543.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2542.value)))+(x2543.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x2544=IKsin(j2);
IkReal x2545=IKcos(j2);
IkReal x2546=((1.0)*cj5);
IkReal x2547=((0.057)*cj5);
IkReal x2548=(r00*sj5);
IkReal x2549=(cj4*sj3);
IkReal x2550=((0.057)*sj5);
IkReal x2551=(cj0*sj1);
IkReal x2552=(sj0*sj1);
IkReal x2553=((1.0)*sj4);
IkReal x2554=(r10*sj5);
IkReal x2555=(r20*sj5);
IkReal x2556=((1.0)*cj4);
IkReal x2557=(cj3*sj5);
IkReal x2558=(cj1*x2545);
IkReal x2559=(sj1*x2544);
IkReal x2560=(sj3*x2553);
IkReal x2561=((1.0)*x2545);
IkReal x2562=((0.245)*x2545);
IkReal x2563=(cj1*x2544);
evalcond[0]=(x2558+x2559+(((-1.0)*x2553*x2555))+(((-1.0)*r22*x2556))+(((-1.0)*r21*sj4*x2546)));
evalcond[1]=((((0.28)*cj1))+(((0.245)*x2558))+(((0.245)*x2559))+(((-1.0)*r21*x2550))+(((-1.0)*pz))+((r20*x2547)));
evalcond[2]=((((-1.0)*x2548*x2553))+((cj0*x2563))+(((-1.0)*r02*x2556))+(((-1.0)*x2551*x2561))+(((-1.0)*r01*sj4*x2546)));
evalcond[3]=((((-1.0)*r12*x2556))+(((-1.0)*r11*sj4*x2546))+(((-1.0)*x2553*x2554))+((sj0*x2563))+(((-1.0)*x2552*x2561)));
evalcond[4]=((((-1.0)*px))+(((-1.0)*r01*x2550))+(((-0.28)*x2551))+((r00*x2547))+(((-1.0)*x2551*x2562))+(((0.245)*cj0*x2563))+(((0.01)*sj0)));
evalcond[5]=((((-1.0)*r11*x2550))+(((-0.01)*cj0))+(((0.245)*sj0*x2563))+(((-1.0)*py))+(((-0.28)*x2552))+(((-1.0)*x2552*x2562))+((r10*x2547)));
evalcond[6]=((((-1.0)*r22*x2560))+(((-1.0)*cj3*r20*x2546))+(((-1.0)*x2563))+((x2549*x2555))+((sj1*x2545))+((cj5*r21*x2549))+((r21*x2557)));
evalcond[7]=((((-1.0)*cj3*r00*x2546))+(((-1.0)*r02*x2560))+((r01*x2557))+((cj0*x2558))+((x2548*x2549))+((x2544*x2551))+((cj5*r01*x2549)));
evalcond[8]=(((cj5*r11*x2549))+((x2549*x2554))+((r11*x2557))+((sj0*x2558))+(((-1.0)*r12*x2560))+((x2544*x2552))+(((-1.0)*cj3*r10*x2546)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2564=(cj0*sj4);
IkReal x2565=(cj1*sj5);
IkReal x2566=(cj5*sj1);
IkReal x2567=(r01*sj4);
IkReal x2568=(cj4*r02);
IkReal x2569=((1.0)*sj1);
IkReal x2570=(cj1*cj5);
IkReal x2571=(r00*sj4);
IkReal x2572=(cj0*cj4*r22);
CheckValue<IkReal> x2573=IKPowWithIntegerCheck(IKsign(cj0),-1);
if(!x2573.valid){
continue;
}
CheckValue<IkReal> x2574 = IKatan2WithCheck(IkReal((((cj1*x2568))+((r21*x2564*x2566))+((r20*sj1*sj5*x2564))+((x2567*x2570))+((x2565*x2571))+((sj1*x2572)))),IkReal(((((-1.0)*x2568*x2569))+((r20*x2564*x2565))+((cj1*x2572))+(((-1.0)*sj5*x2569*x2571))+((r21*x2564*x2570))+(((-1.0)*x2566*x2567)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2574.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2573.value)))+(x2574.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x2575=IKsin(j2);
IkReal x2576=IKcos(j2);
IkReal x2577=((1.0)*cj5);
IkReal x2578=((0.057)*cj5);
IkReal x2579=(r00*sj5);
IkReal x2580=(cj4*sj3);
IkReal x2581=((0.057)*sj5);
IkReal x2582=(cj0*sj1);
IkReal x2583=(sj0*sj1);
IkReal x2584=((1.0)*sj4);
IkReal x2585=(r10*sj5);
IkReal x2586=(r20*sj5);
IkReal x2587=((1.0)*cj4);
IkReal x2588=(cj3*sj5);
IkReal x2589=(cj1*x2576);
IkReal x2590=(sj1*x2575);
IkReal x2591=(sj3*x2584);
IkReal x2592=((1.0)*x2576);
IkReal x2593=((0.245)*x2576);
IkReal x2594=(cj1*x2575);
evalcond[0]=(x2590+x2589+(((-1.0)*x2584*x2586))+(((-1.0)*r21*sj4*x2577))+(((-1.0)*r22*x2587)));
evalcond[1]=((((0.28)*cj1))+(((-1.0)*r21*x2581))+(((-1.0)*pz))+((r20*x2578))+(((0.245)*x2590))+(((0.245)*x2589)));
evalcond[2]=((((-1.0)*r01*sj4*x2577))+(((-1.0)*r02*x2587))+(((-1.0)*x2579*x2584))+((cj0*x2594))+(((-1.0)*x2582*x2592)));
evalcond[3]=((((-1.0)*r11*sj4*x2577))+(((-1.0)*x2584*x2585))+((sj0*x2594))+(((-1.0)*x2583*x2592))+(((-1.0)*r12*x2587)));
evalcond[4]=((((-1.0)*r01*x2581))+(((-0.28)*x2582))+(((-1.0)*px))+((r00*x2578))+(((-1.0)*x2582*x2593))+(((0.245)*cj0*x2594))+(((0.01)*sj0)));
evalcond[5]=(((r10*x2578))+(((0.245)*sj0*x2594))+(((-0.01)*cj0))+(((-0.28)*x2583))+(((-1.0)*py))+(((-1.0)*x2583*x2593))+(((-1.0)*r11*x2581)));
evalcond[6]=((((-1.0)*r22*x2591))+(((-1.0)*cj3*r20*x2577))+(((-1.0)*x2594))+((x2580*x2586))+((cj5*r21*x2580))+((sj1*x2576))+((r21*x2588)));
evalcond[7]=((((-1.0)*cj3*r00*x2577))+((r01*x2588))+((cj0*x2589))+(((-1.0)*r02*x2591))+((cj5*r01*x2580))+((x2575*x2582))+((x2579*x2580)));
evalcond[8]=(((cj5*r11*x2580))+((x2580*x2585))+((x2575*x2583))+((r11*x2588))+((sj0*x2589))+(((-1.0)*r12*x2591))+(((-1.0)*cj3*r10*x2577)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2595=(r10*sj0);
IkReal x2596=(sj4*sj5);
IkReal x2597=(r11*sj0);
IkReal x2598=(cj5*sj4);
CheckValue<IkReal> x2599=IKPowWithIntegerCheck(sj0,-2);
if(!x2599.valid){
continue;
}
if( IKabs(((3.57142857142857)*(x2599.value)*(((((-0.01)*cj0*sj0))+(((0.245)*x2597*x2598))+(((0.057)*cj5*x2595))+(((0.245)*x2595*x2596))+(((0.245)*cj4*r12*sj0))+(((-1.0)*py*sj0))+(((-0.057)*sj5*x2597)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.875)*r20*x2596))+(((-0.875)*cj4*r22))+(((-0.875)*r21*x2598))+(((-0.203571428571429)*cj5*r20))+(((3.57142857142857)*pz))+(((0.203571428571429)*r21*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((3.57142857142857)*(x2599.value)*(((((-0.01)*cj0*sj0))+(((0.245)*x2597*x2598))+(((0.057)*cj5*x2595))+(((0.245)*x2595*x2596))+(((0.245)*cj4*r12*sj0))+(((-1.0)*py*sj0))+(((-0.057)*sj5*x2597))))))+IKsqr(((((-0.875)*r20*x2596))+(((-0.875)*cj4*r22))+(((-0.875)*r21*x2598))+(((-0.203571428571429)*cj5*r20))+(((3.57142857142857)*pz))+(((0.203571428571429)*r21*sj5))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((3.57142857142857)*(x2599.value)*(((((-0.01)*cj0*sj0))+(((0.245)*x2597*x2598))+(((0.057)*cj5*x2595))+(((0.245)*x2595*x2596))+(((0.245)*cj4*r12*sj0))+(((-1.0)*py*sj0))+(((-0.057)*sj5*x2597))))), ((((-0.875)*r20*x2596))+(((-0.875)*cj4*r22))+(((-0.875)*r21*x2598))+(((-0.203571428571429)*cj5*r20))+(((3.57142857142857)*pz))+(((0.203571428571429)*r21*sj5))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[9];
IkReal x2600=IKsin(j1);
IkReal x2601=IKcos(j1);
IkReal x2602=sj0*sj0;
IkReal x2603=cj0*cj0;
IkReal x2604=(cj5*r20);
IkReal x2605=((0.057)*cj0);
IkReal x2606=(cj5*r10);
IkReal x2607=((1.0)*py);
IkReal x2608=(cj0*sj0);
IkReal x2609=((1.0)*cj0);
IkReal x2610=(r21*sj5);
IkReal x2611=((0.245)*cj0);
IkReal x2612=((0.245)*r00);
IkReal x2613=(sj0*sj5);
IkReal x2614=((0.057)*sj5);
IkReal x2615=(cj5*r01);
IkReal x2616=((1.0)*px);
IkReal x2617=((0.245)*cj4);
IkReal x2618=(sj3*sj5);
IkReal x2619=(r11*sj5);
IkReal x2620=(r01*sj5);
IkReal x2621=((0.245)*cj3);
IkReal x2622=(sj4*sj5);
IkReal x2623=(cj5*r11);
IkReal x2624=(cj5*r00);
IkReal x2625=((0.057)*sj0);
IkReal x2626=((0.245)*sj4);
IkReal x2627=((0.01)*x2608);
IkReal x2628=(sj0*x2621);
IkReal x2629=((0.28)*x2600);
IkReal x2630=(sj3*x2626);
IkReal x2631=((0.28)*x2601);
IkReal x2632=(cj5*r21*sj3);
IkReal x2633=(x2608*x2629);
evalcond[0]=((((-0.057)*x2604))+(((-1.0)*x2631))+(((-0.245)*r20*x2622))+(((-1.0)*r22*x2617))+pz+(((-1.0)*cj5*r21*x2626))+(((0.057)*x2610)));
evalcond[1]=(((r12*sj0*x2617))+((r10*x2613*x2626))+(((-1.0)*x2602*x2629))+(((-1.0)*sj0*x2607))+((x2606*x2625))+(((-1.0)*x2627))+((sj0*x2623*x2626))+(((-0.057)*r11*x2613)));
evalcond[2]=(((r00*x2611*x2622))+((sj4*x2611*x2615))+(((-1.0)*x2603*x2629))+((cj4*r02*x2611))+((x2605*x2624))+(((-1.0)*x2605*x2620))+x2627+(((-1.0)*px*x2609)));
evalcond[3]=((((-1.0)*x2610*x2625))+(((-1.0)*x2619*x2621))+(((-1.0)*sj3*x2617*x2623))+((sj0*x2631))+((r12*x2630))+((x2606*x2621))+(((-1.0)*pz*sj0))+(((-1.0)*r10*x2617*x2618))+((x2604*x2625)));
evalcond[4]=((((-1.0)*sj3*x2615*x2617))+((cj0*x2631))+(((-1.0)*pz*x2609))+(((-1.0)*x2605*x2610))+((cj3*cj5*x2612))+((x2604*x2605))+(((-1.0)*cj4*x2612*x2618))+(((-1.0)*x2620*x2621))+((r02*x2630)));
evalcond[5]=(((x2610*x2628))+(((0.057)*x2606))+(((-0.01)*cj0))+(((-1.0)*r11*x2614))+((sj0*x2617*x2632))+((r20*sj3*x2613*x2617))+(((-1.0)*sj0*x2629))+(((-1.0)*x2604*x2628))+(((-1.0)*x2607))+(((-1.0)*r22*sj0*x2630)));
evalcond[6]=((((-1.0)*r01*x2614))+((cj4*x2611*x2632))+(((-1.0)*cj0*x2629))+(((-1.0)*r22*sj3*sj4*x2611))+(((-1.0)*cj3*x2604*x2611))+((cj4*r20*x2611*x2618))+(((-1.0)*x2616))+((cj3*x2610*x2611))+(((0.01)*sj0))+(((0.057)*x2624)));
evalcond[7]=(((x2624*x2625))+(((-0.057)*r01*x2613))+(((-1.0)*x2633))+((r10*x2611*x2622))+((sj4*x2611*x2623))+(((0.01)*x2602))+((cj4*r12*x2611))+(((-1.0)*sj0*x2616)));
evalcond[8]=((((-1.0)*cj0*x2607))+((r02*sj0*x2617))+(((-1.0)*x2633))+((x2605*x2606))+(((-1.0)*x2605*x2619))+((sj4*x2612*x2613))+(((-0.01)*x2603))+((sj0*x2615*x2626)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
j2eval[0]=cj0;
j2eval[1]=IKsign(cj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=sj0;
j2eval[1]=IKsign(sj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2634=(cj4*r22);
IkReal x2635=((1.0)*sj1);
IkReal x2636=(cj5*sj4);
IkReal x2637=(cj4*r02);
IkReal x2638=(sj4*sj5);
if( IKabs((((r20*sj1*x2638))+((cj1*x2637))+((cj1*r00*x2638))+((cj1*r01*x2636))+((sj1*x2634))+((r21*sj1*x2636)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*x2634))+((cj1*r20*x2638))+(((-1.0)*x2635*x2637))+((cj1*r21*x2636))+(((-1.0)*r01*x2635*x2636))+(((-1.0)*r00*x2635*x2638)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r20*sj1*x2638))+((cj1*x2637))+((cj1*r00*x2638))+((cj1*r01*x2636))+((sj1*x2634))+((r21*sj1*x2636))))+IKsqr((((cj1*x2634))+((cj1*r20*x2638))+(((-1.0)*x2635*x2637))+((cj1*r21*x2636))+(((-1.0)*r01*x2635*x2636))+(((-1.0)*r00*x2635*x2638))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r20*sj1*x2638))+((cj1*x2637))+((cj1*r00*x2638))+((cj1*r01*x2636))+((sj1*x2634))+((r21*sj1*x2636))), (((cj1*x2634))+((cj1*r20*x2638))+(((-1.0)*x2635*x2637))+((cj1*r21*x2636))+(((-1.0)*r01*x2635*x2636))+(((-1.0)*r00*x2635*x2638))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2639=IKsin(j2);
IkReal x2640=IKcos(j2);
IkReal x2641=((0.057)*cj5);
IkReal x2642=(r21*sj5);
IkReal x2643=((0.245)*sj1);
IkReal x2644=(r01*sj5);
IkReal x2645=((1.0)*r20);
IkReal x2646=(sj4*sj5);
IkReal x2647=((1.0)*cj4);
IkReal x2648=(cj3*cj5);
IkReal x2649=((1.0)*r00);
IkReal x2650=(cj1*x2640);
IkReal x2651=(sj1*x2639);
IkReal x2652=(cj1*x2639);
IkReal x2653=(cj4*sj3*sj5);
IkReal x2654=((1.0)*sj3*sj4);
IkReal x2655=(sj1*x2640);
IkReal x2656=((1.0)*cj5*sj4);
IkReal x2657=(cj4*cj5*sj3);
IkReal x2658=(x2651+x2650);
evalcond[0]=((((-1.0)*r22*x2647))+(((-1.0)*x2645*x2646))+(((-1.0)*r21*x2656))+x2658);
evalcond[1]=((((-1.0)*x2646*x2649))+(((-1.0)*r01*x2656))+(((-1.0)*r02*x2647))+(((-1.0)*x2655))+x2652);
evalcond[2]=((((0.28)*cj1))+((x2639*x2643))+(((-1.0)*pz))+(((-0.057)*x2642))+(((0.245)*x2650))+((r20*x2641)));
evalcond[3]=((((-0.28)*sj1))+(((-1.0)*x2640*x2643))+(((-1.0)*px))+((r00*x2641))+(((-0.057)*x2644))+(((0.245)*x2652)));
evalcond[4]=((((-1.0)*r02*x2654))+((r00*x2653))+((r01*x2657))+(((-1.0)*x2648*x2649))+((cj3*x2644))+x2658);
evalcond[5]=((((-1.0)*r22*x2654))+((r21*x2657))+(((-1.0)*x2645*x2648))+((cj3*x2642))+(((-1.0)*x2652))+x2655+((r20*x2653)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2659=(cj4*sj1);
IkReal x2660=(cj1*cj4);
IkReal x2661=(cj5*sj4);
IkReal x2662=((1.0)*cj1);
IkReal x2663=(sj4*sj5);
IkReal x2664=(sj1*x2663);
if( IKabs((((r21*sj1*x2661))+(((-1.0)*r00*x2662*x2663))+((r22*x2659))+(((-1.0)*r02*x2660))+((r20*x2664))+(((-1.0)*r01*x2661*x2662)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r01*sj1*x2661))+((r02*x2659))+((r22*x2660))+((cj1*r20*x2663))+((r00*x2664))+((cj1*r21*x2661)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r21*sj1*x2661))+(((-1.0)*r00*x2662*x2663))+((r22*x2659))+(((-1.0)*r02*x2660))+((r20*x2664))+(((-1.0)*r01*x2661*x2662))))+IKsqr((((r01*sj1*x2661))+((r02*x2659))+((r22*x2660))+((cj1*r20*x2663))+((r00*x2664))+((cj1*r21*x2661))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r21*sj1*x2661))+(((-1.0)*r00*x2662*x2663))+((r22*x2659))+(((-1.0)*r02*x2660))+((r20*x2664))+(((-1.0)*r01*x2661*x2662))), (((r01*sj1*x2661))+((r02*x2659))+((r22*x2660))+((cj1*r20*x2663))+((r00*x2664))+((cj1*r21*x2661))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2665=IKcos(j2);
IkReal x2666=IKsin(j2);
IkReal x2667=((0.057)*cj5);
IkReal x2668=(r00*sj5);
IkReal x2669=(cj4*sj3);
IkReal x2670=((0.057)*sj5);
IkReal x2671=((1.0)*sj4);
IkReal x2672=(r20*sj5);
IkReal x2673=((1.0)*cj4);
IkReal x2674=(cj5*r01);
IkReal x2675=(cj5*r21);
IkReal x2676=(cj3*sj5);
IkReal x2677=(sj1*x2665);
IkReal x2678=(cj1*x2665);
IkReal x2679=((0.245)*x2666);
IkReal x2680=(sj3*x2671);
IkReal x2681=(sj1*x2666);
IkReal x2682=((1.0)*cj3*cj5);
IkReal x2683=((1.0)*cj1*x2666);
evalcond[0]=((((-1.0)*x2671*x2675))+(((-1.0)*x2671*x2672))+(((-1.0)*r22*x2673))+x2678+x2681);
evalcond[1]=((((-1.0)*r02*x2673))+(((-1.0)*x2671*x2674))+(((-1.0)*x2683))+(((-1.0)*x2668*x2671))+x2677);
evalcond[2]=((((0.28)*cj1))+((sj1*x2679))+(((-1.0)*pz))+(((-1.0)*r21*x2670))+((r20*x2667))+(((0.245)*x2678)));
evalcond[3]=((((-1.0)*r01*x2670))+(((-1.0)*cj1*x2679))+(((-1.0)*px))+(((0.28)*sj1))+((r00*x2667))+(((0.245)*x2677)));
evalcond[4]=(((r21*x2676))+(((-1.0)*r22*x2680))+(((-1.0)*x2683))+((x2669*x2675))+((x2669*x2672))+(((-1.0)*r20*x2682))+x2677);
evalcond[5]=((((-1.0)*x2678))+(((-1.0)*r02*x2680))+((x2668*x2669))+(((-1.0)*r00*x2682))+((x2669*x2674))+(((-1.0)*x2681))+((r01*x2676)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2684=(cj4*r12);
IkReal x2685=((1.0)*sj1);
IkReal x2686=(cj4*r22);
IkReal x2687=(sj4*sj5);
IkReal x2688=(cj5*sj4);
IkReal x2689=(cj1*x2688);
if( IKabs((((r11*x2689))+((r21*sj1*x2688))+((sj1*x2686))+((cj1*x2684))+((r20*sj1*x2687))+((cj1*r10*x2687)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x2684*x2685))+(((-1.0)*r10*x2685*x2687))+((r21*x2689))+(((-1.0)*r11*x2685*x2688))+((cj1*x2686))+((cj1*r20*x2687)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r11*x2689))+((r21*sj1*x2688))+((sj1*x2686))+((cj1*x2684))+((r20*sj1*x2687))+((cj1*r10*x2687))))+IKsqr(((((-1.0)*x2684*x2685))+(((-1.0)*r10*x2685*x2687))+((r21*x2689))+(((-1.0)*r11*x2685*x2688))+((cj1*x2686))+((cj1*r20*x2687))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r11*x2689))+((r21*sj1*x2688))+((sj1*x2686))+((cj1*x2684))+((r20*sj1*x2687))+((cj1*r10*x2687))), ((((-1.0)*x2684*x2685))+(((-1.0)*r10*x2685*x2687))+((r21*x2689))+(((-1.0)*r11*x2685*x2688))+((cj1*x2686))+((cj1*r20*x2687))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2690=IKsin(j2);
IkReal x2691=IKcos(j2);
IkReal x2692=((1.0)*r10);
IkReal x2693=(cj3*cj5);
IkReal x2694=((0.057)*sj5);
IkReal x2695=((1.0)*sj4);
IkReal x2696=((0.245)*sj1);
IkReal x2697=((0.057)*cj5);
IkReal x2698=(r20*sj5);
IkReal x2699=((1.0)*cj4);
IkReal x2700=(cj3*sj5);
IkReal x2701=(cj4*sj3);
IkReal x2702=(cj1*x2691);
IkReal x2703=(sj1*x2690);
IkReal x2704=(cj1*x2690);
IkReal x2705=(sj1*x2691);
IkReal x2706=(cj5*x2701);
IkReal x2707=(x2703+x2702);
evalcond[0]=(x2707+(((-1.0)*r22*x2699))+(((-1.0)*cj5*r21*x2695))+(((-1.0)*x2695*x2698)));
evalcond[1]=(x2704+(((-1.0)*cj5*r11*x2695))+(((-1.0)*r12*x2699))+(((-1.0)*sj4*sj5*x2692))+(((-1.0)*x2705)));
evalcond[2]=((((0.28)*cj1))+(((-1.0)*pz))+((r20*x2697))+((x2690*x2696))+(((0.245)*x2702))+(((-1.0)*r21*x2694)));
evalcond[3]=((((-0.28)*sj1))+(((-1.0)*x2691*x2696))+((r10*x2697))+(((-1.0)*py))+(((-1.0)*r11*x2694))+(((0.245)*x2704)));
evalcond[4]=(x2707+(((-1.0)*x2692*x2693))+((r10*sj5*x2701))+((r11*x2706))+((r11*x2700))+(((-1.0)*r12*sj3*x2695)));
evalcond[5]=(x2705+((x2698*x2701))+(((-1.0)*r20*x2693))+((r21*x2700))+((r21*x2706))+(((-1.0)*r22*sj3*x2695))+(((-1.0)*x2704)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2708=(cj5*sj4);
IkReal x2709=(cj1*cj4);
IkReal x2710=(cj4*sj1);
IkReal x2711=((1.0)*cj1);
IkReal x2712=(sj4*sj5);
if( IKabs((((r22*x2710))+(((-1.0)*r12*x2709))+(((-1.0)*r11*x2708*x2711))+((r20*sj1*x2712))+(((-1.0)*r10*x2711*x2712))+((r21*sj1*x2708)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r12*x2710))+((r22*x2709))+((cj1*r21*x2708))+((r11*sj1*x2708))+((r10*sj1*x2712))+((cj1*r20*x2712)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r22*x2710))+(((-1.0)*r12*x2709))+(((-1.0)*r11*x2708*x2711))+((r20*sj1*x2712))+(((-1.0)*r10*x2711*x2712))+((r21*sj1*x2708))))+IKsqr((((r12*x2710))+((r22*x2709))+((cj1*r21*x2708))+((r11*sj1*x2708))+((r10*sj1*x2712))+((cj1*r20*x2712))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r22*x2710))+(((-1.0)*r12*x2709))+(((-1.0)*r11*x2708*x2711))+((r20*sj1*x2712))+(((-1.0)*r10*x2711*x2712))+((r21*sj1*x2708))), (((r12*x2710))+((r22*x2709))+((cj1*r21*x2708))+((r11*sj1*x2708))+((r10*sj1*x2712))+((cj1*r20*x2712))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2713=IKcos(j2);
IkReal x2714=IKsin(j2);
IkReal x2715=((1.0)*r10);
IkReal x2716=(cj3*cj5);
IkReal x2717=((0.057)*sj5);
IkReal x2718=((1.0)*sj4);
IkReal x2719=((0.057)*cj5);
IkReal x2720=(cj3*sj5);
IkReal x2721=(r20*sj5);
IkReal x2722=((1.0)*cj4);
IkReal x2723=(cj4*sj3);
IkReal x2724=(cj5*r21);
IkReal x2725=(cj5*r11);
IkReal x2726=(sj1*x2713);
IkReal x2727=(cj1*x2713);
IkReal x2728=((0.245)*x2714);
IkReal x2729=(sj1*x2714);
IkReal x2730=((1.0)*cj1*x2714);
evalcond[0]=(x2727+x2729+(((-1.0)*x2718*x2721))+(((-1.0)*x2718*x2724))+(((-1.0)*r22*x2722)));
evalcond[1]=(x2726+(((-1.0)*x2718*x2725))+(((-1.0)*sj4*sj5*x2715))+(((-1.0)*r12*x2722))+(((-1.0)*x2730)));
evalcond[2]=((((0.28)*cj1))+(((-1.0)*r21*x2717))+(((-1.0)*pz))+((sj1*x2728))+(((0.245)*x2727))+((r20*x2719)));
evalcond[3]=((((-1.0)*py))+((r10*x2719))+(((0.28)*sj1))+(((0.245)*x2726))+(((-1.0)*r11*x2717))+(((-1.0)*cj1*x2728)));
evalcond[4]=(x2726+(((-1.0)*r22*sj3*x2718))+(((-1.0)*r20*x2716))+((x2721*x2723))+((r21*x2720))+((x2723*x2724))+(((-1.0)*x2730)));
evalcond[5]=((((-1.0)*r12*sj3*x2718))+(((-1.0)*x2715*x2716))+(((-1.0)*x2729))+(((-1.0)*x2727))+((r11*x2720))+((r10*sj5*x2723))+((x2723*x2725)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2731=(cj4*r12);
IkReal x2732=((1.0)*sj1);
IkReal x2733=(r10*sj4*sj5);
IkReal x2734=(cj5*r11*sj4);
IkReal x2735=(cj4*r22*sj0);
IkReal x2736=(r20*sj0*sj4*sj5);
IkReal x2737=(cj5*r21*sj0*sj4);
CheckValue<IkReal> x2738 = IKatan2WithCheck(IkReal((((cj1*x2734))+((cj1*x2733))+((cj1*x2731))+((sj1*x2737))+((sj1*x2736))+((sj1*x2735)))),IkReal((((cj1*x2735))+((cj1*x2736))+((cj1*x2737))+(((-1.0)*x2731*x2732))+(((-1.0)*x2732*x2734))+(((-1.0)*x2732*x2733)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2738.valid){
continue;
}
CheckValue<IkReal> x2739=IKPowWithIntegerCheck(IKsign(sj0),-1);
if(!x2739.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x2738.value)+(((1.5707963267949)*(x2739.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x2740=IKsin(j2);
IkReal x2741=IKcos(j2);
IkReal x2742=((1.0)*cj5);
IkReal x2743=((0.057)*cj5);
IkReal x2744=(r00*sj5);
IkReal x2745=(cj4*sj3);
IkReal x2746=((0.057)*sj5);
IkReal x2747=(cj0*sj1);
IkReal x2748=(sj0*sj1);
IkReal x2749=((1.0)*sj4);
IkReal x2750=(r10*sj5);
IkReal x2751=(r20*sj5);
IkReal x2752=((1.0)*cj4);
IkReal x2753=(cj3*sj5);
IkReal x2754=(cj1*x2741);
IkReal x2755=(sj1*x2740);
IkReal x2756=(sj3*x2749);
IkReal x2757=((1.0)*x2741);
IkReal x2758=((0.245)*x2741);
IkReal x2759=(cj1*x2740);
evalcond[0]=(x2754+x2755+(((-1.0)*r22*x2752))+(((-1.0)*x2749*x2751))+(((-1.0)*r21*sj4*x2742)));
evalcond[1]=((((0.28)*cj1))+(((0.245)*x2755))+(((0.245)*x2754))+(((-1.0)*pz))+((r20*x2743))+(((-1.0)*r21*x2746)));
evalcond[2]=((((-1.0)*x2744*x2749))+((cj0*x2759))+(((-1.0)*r01*sj4*x2742))+(((-1.0)*x2747*x2757))+(((-1.0)*r02*x2752)));
evalcond[3]=((((-1.0)*r12*x2752))+(((-1.0)*x2748*x2757))+((sj0*x2759))+(((-1.0)*x2749*x2750))+(((-1.0)*r11*sj4*x2742)));
evalcond[4]=((((-1.0)*r01*x2746))+(((0.245)*cj0*x2759))+(((-1.0)*px))+((r00*x2743))+(((-0.28)*x2747))+(((0.01)*sj0))+(((-1.0)*x2747*x2758)));
evalcond[5]=((((-0.01)*cj0))+((r10*x2743))+(((-1.0)*py))+(((-1.0)*r11*x2746))+(((-1.0)*x2748*x2758))+(((0.245)*sj0*x2759))+(((-0.28)*x2748)));
evalcond[6]=((((-1.0)*r22*x2756))+((r21*x2753))+((cj5*r21*x2745))+((x2745*x2751))+(((-1.0)*cj3*r20*x2742))+((sj1*x2741))+(((-1.0)*x2759)));
evalcond[7]=((((-1.0)*cj3*r00*x2742))+((cj0*x2754))+((x2744*x2745))+((x2740*x2747))+((r01*x2753))+((cj5*r01*x2745))+(((-1.0)*r02*x2756)));
evalcond[8]=(((r11*x2753))+((cj5*r11*x2745))+(((-1.0)*cj3*r10*x2742))+((x2745*x2750))+(((-1.0)*r12*x2756))+((x2740*x2748))+((sj0*x2754)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2760=(cj0*sj4);
IkReal x2761=(cj1*sj5);
IkReal x2762=(cj5*sj1);
IkReal x2763=(r01*sj4);
IkReal x2764=(cj4*r02);
IkReal x2765=((1.0)*sj1);
IkReal x2766=(cj1*cj5);
IkReal x2767=(r00*sj4);
IkReal x2768=(cj0*cj4*r22);
CheckValue<IkReal> x2769 = IKatan2WithCheck(IkReal((((r20*sj1*sj5*x2760))+((cj1*x2764))+((sj1*x2768))+((r21*x2760*x2762))+((x2761*x2767))+((x2763*x2766)))),IkReal(((((-1.0)*x2764*x2765))+((cj1*x2768))+((r21*x2760*x2766))+((r20*x2760*x2761))+(((-1.0)*x2762*x2763))+(((-1.0)*sj5*x2765*x2767)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2769.valid){
continue;
}
CheckValue<IkReal> x2770=IKPowWithIntegerCheck(IKsign(cj0),-1);
if(!x2770.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x2769.value)+(((1.5707963267949)*(x2770.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x2771=IKsin(j2);
IkReal x2772=IKcos(j2);
IkReal x2773=((1.0)*cj5);
IkReal x2774=((0.057)*cj5);
IkReal x2775=(r00*sj5);
IkReal x2776=(cj4*sj3);
IkReal x2777=((0.057)*sj5);
IkReal x2778=(cj0*sj1);
IkReal x2779=(sj0*sj1);
IkReal x2780=((1.0)*sj4);
IkReal x2781=(r10*sj5);
IkReal x2782=(r20*sj5);
IkReal x2783=((1.0)*cj4);
IkReal x2784=(cj3*sj5);
IkReal x2785=(cj1*x2772);
IkReal x2786=(sj1*x2771);
IkReal x2787=(sj3*x2780);
IkReal x2788=((1.0)*x2772);
IkReal x2789=((0.245)*x2772);
IkReal x2790=(cj1*x2771);
evalcond[0]=(x2785+x2786+(((-1.0)*r21*sj4*x2773))+(((-1.0)*x2780*x2782))+(((-1.0)*r22*x2783)));
evalcond[1]=((((0.28)*cj1))+((r20*x2774))+(((-1.0)*pz))+(((-1.0)*r21*x2777))+(((0.245)*x2786))+(((0.245)*x2785)));
evalcond[2]=((((-1.0)*x2778*x2788))+(((-1.0)*r01*sj4*x2773))+((cj0*x2790))+(((-1.0)*r02*x2783))+(((-1.0)*x2775*x2780)));
evalcond[3]=((((-1.0)*r12*x2783))+(((-1.0)*r11*sj4*x2773))+(((-1.0)*x2780*x2781))+(((-1.0)*x2779*x2788))+((sj0*x2790)));
evalcond[4]=((((-1.0)*r01*x2777))+((r00*x2774))+(((-1.0)*x2778*x2789))+(((-1.0)*px))+(((0.245)*cj0*x2790))+(((-0.28)*x2778))+(((0.01)*sj0)));
evalcond[5]=((((-0.01)*cj0))+(((-1.0)*r11*x2777))+(((0.245)*sj0*x2790))+((r10*x2774))+(((-1.0)*py))+(((-1.0)*x2779*x2789))+(((-0.28)*x2779)));
evalcond[6]=(((sj1*x2772))+((r21*x2784))+((x2776*x2782))+((cj5*r21*x2776))+(((-1.0)*x2790))+(((-1.0)*r22*x2787))+(((-1.0)*cj3*r20*x2773)));
evalcond[7]=(((cj5*r01*x2776))+((x2771*x2778))+((x2775*x2776))+((r01*x2784))+((cj0*x2785))+(((-1.0)*cj3*r00*x2773))+(((-1.0)*r02*x2787)));
evalcond[8]=((((-1.0)*r12*x2787))+((x2771*x2779))+((x2776*x2781))+((sj0*x2785))+((r11*x2784))+((cj5*r11*x2776))+(((-1.0)*cj3*r10*x2773)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}

}

}
}
}
// [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1), (3, 0), (3, 1)] (original are [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1)])
static inline bool checkconsistency8(const IkReal* Breal)
{
    IkReal norm = 0.1;
    for(int i = 0; i < 7; ++i) {
        norm += IKabs(Breal[i]);
    }
    // HACK should be 1e-5*norm
    IkReal tol = 1e-2*norm; // have to increase the threshold since many computations are involved
    return IKabs(Breal[0]*Breal[1]-Breal[2]) < tol && IKabs(Breal[1]*Breal[1]-Breal[3]) < tol && IKabs(Breal[0]*Breal[3]-Breal[4]) < tol && IKabs(Breal[1]*Breal[3]-Breal[5]) < tol && IKabs(Breal[0]*Breal[5]-Breal[6]) < tol;
}
/// \brief Solve the det Ax^2+Bx+C = 0 problem using the Manocha and Canny method (1994)
///
/// matcoeffs is of length 54*3, for 3 matrices
static inline void solvedialyticpoly8qep(const IkReal* matcoeffs, IkReal* rawroots, int& numroots)
{
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    IkReal IKFAST_ALIGNED16(M[16*16]) = {0};
    IkReal IKFAST_ALIGNED16(A[8*8]);
    IkReal IKFAST_ALIGNED16(work[16*16*15]);
    int ipiv[8];
    int info, coeffindex;
    const int worksize=16*16*15;
    const int matrixdim = 8;
    const int matrixdim2 = 16;
    numroots = 0;
    // first setup M = [0 I; -C -B] and A
    coeffindex = 0;
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = matcoeffs[coeffindex++];
        }
        for(int k = 0; k < 2; ++k) {
            A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
        }
    }
    const IkReal lfpossibilities[4][4] = {{1,-1,1,1},{1,0,-2,1},{1,1,2,0},{1,-1,4,1}};
    int lfindex = -1;
    bool bsingular = true;
    do {
        dgetrf_(&matrixdim,&matrixdim,A,&matrixdim,&ipiv[0],&info);
        if( info == 0 ) {
            bsingular = false;
            for(int j = 0; j < matrixdim; ++j) {
                if( IKabs(A[j*matrixdim+j]) < 100*tol ) {
                    bsingular = true;
                    break;
                }
            }
            if( !bsingular ) {
                break;
            }
        }
        if( lfindex == 3 ) {
            break;
        }
        // transform by the linear functional
        lfindex++;
        const IkReal* lf = lfpossibilities[lfindex];
        // have to reinitialize A
        coeffindex = 0;
        for(int j = 0; j < 4; ++j) {
            for(int k = 0; k < 6; ++k) {
                IkReal a = matcoeffs[coeffindex+48], b = matcoeffs[coeffindex+24], c = matcoeffs[coeffindex];
                A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = lf[0]*lf[0]*a+lf[0]*lf[2]*b+lf[2]*lf[2]*c;
                M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -(lf[1]*lf[1]*a + lf[1]*lf[3]*b + lf[3]*lf[3]*c);
                M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -(2*lf[0]*lf[1]*a + (lf[0]*lf[3]+lf[1]*lf[2])*b + 2*lf[2]*lf[3]*c);
                coeffindex++;
            }
            for(int k = 0; k < 2; ++k) {
                A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
            }
        }
    } while(lfindex<4);

    if( bsingular ) {
        return;
    }
    dgetrs_("No transpose", &matrixdim, &matrixdim2, A, &matrixdim, &ipiv[0], &M[matrixdim], &matrixdim2, &info);
    if( info != 0 ) {
        return;
    }

    // set identity in upper corner
    for(int j = 0; j < matrixdim; ++j) {
        M[matrixdim*2*matrixdim+j+matrixdim*2*j] = 1;
    }
    IkReal IKFAST_ALIGNED16(wr[16]);
    IkReal IKFAST_ALIGNED16(wi[16]);
    IkReal IKFAST_ALIGNED16(vr[16*16]);
    int one=1;
    dgeev_("N", "V", &matrixdim2, M, &matrixdim2, wr, wi,NULL, &one, vr, &matrixdim2, work, &worksize, &info);
    if( info != 0 ) {
        return;
    }
    IkReal Breal[matrixdim-1];
    for(int i = 0; i < matrixdim2; ++i) {
        // HACK should be tol*100
        if( IKabs(wi[i]) < 5e-5 ) {
            IkReal* ev = vr+matrixdim2*i;
            if( IKabs(wr[i]) > 1 ) {
                ev += matrixdim;
            }
            // consistency has to be checked!!
            if( IKabs(ev[0]) < tol ) {
                continue;
            }
            IkReal iconst = 1/ev[0];
            for(int j = 1; j < matrixdim; ++j) {
                Breal[j-1] = ev[j]*iconst;
            }
            if( checkconsistency8(Breal) ) {
                if( lfindex >= 0 ) {
                    const IkReal* lf = lfpossibilities[lfindex];
                    rawroots[numroots++] = (wr[i]*lf[0]+lf[1])/(wr[i]*lf[2]+lf[3]);
                }
                else {
                    rawroots[numroots++] = wr[i];
                }
                bool bsmall0=IKabs(ev[0]) > IKabs(ev[2]);
                bool bsmall1=IKabs(ev[0]) > IKabs(ev[1]);
                if( bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[2]/ev[0];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[3]/ev[1];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( !bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[6]/ev[4];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
                else if( !bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[7]/ev[5];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
            }
        }
    }
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - gen3_lite_gen3_lite_2f (d28c7a5d924530956905c8f98111e898)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000049"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
