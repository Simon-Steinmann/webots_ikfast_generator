/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2020-09-04 16:49:24.540544
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44;
x0=IKcos(j[0]);
x1=IKcos(j[1]);
x2=IKsin(j[2]);
x3=IKcos(j[2]);
x4=IKsin(j[1]);
x5=IKcos(j[3]);
x6=IKsin(j[3]);
x7=IKsin(j[4]);
x8=IKcos(j[4]);
x9=IKsin(j[0]);
x10=IKsin(j[5]);
x11=IKcos(j[5]);
x12=((1.0)*x9);
x13=((1.0)*x6);
x14=((1.0)*x5);
x15=((0.392)*x0);
x16=((0.1)*x9);
x17=((0.425)*x1);
x18=((1.4e-7)*x4);
x19=((0.1)*x0);
x20=((1.0)*x0);
x21=((0.392)*x9);
x22=(x1*x3);
x23=(x2*x4);
x24=(x3*x4);
x25=(x1*x2);
x26=((0.1)*x24);
x27=((0.1)*x25);
x28=(x20*x22);
x29=(x12*x22);
x30=(x24+x25);
x31=((((-1.0)*x23))+(((1.0)*x22)));
x32=((((-1.0)*x24))+(((-1.0)*x25)));
x33=(x31*x5);
x34=(((x0*x23))+(((-1.0)*x28)));
x35=((((-1.0)*x29))+((x23*x9)));
x36=(x32*x6);
x37=(x28+(((-1.0)*x20*x23)));
x38=((((-1.0)*x12*x23))+x29);
x39=(x20*((x24+x25)));
x40=(x12*((x24+x25)));
x41=(((x31*x6))+((x30*x5)));
x42=(x41*x8);
x43=((((-1.0)*x12*x7))+((x8*((((x34*x5))+((x39*x6)))))));
x44=(((x0*x7))+((x8*((((x35*x5))+((x40*x6)))))));
eerot[0]=(((x10*((((x39*x5))+((x37*x6))))))+((x11*x43)));
eerot[1]=((((-1.0)*x12*x8))+((x7*(((((-1.0)*x14*x34))+(((-1.0)*x13*x39)))))));
eerot[2]=(((x11*(((((-1.0)*x14*x39))+(((-1.0)*x13*x37))))))+((x10*x43)));
IkReal x45=((1.0)*x19);
eetrans[0]=((((-1.0)*x15*x23))+((x0*x18))+((x0*x17))+((x6*((((x19*x23))+(((-1.0)*x22*x45))))))+(((-0.134)*x9))+((x5*(((((-1.0)*x25*x45))+(((-1.0)*x24*x45))))))+((x15*x22)));
eerot[3]=(((x11*x44))+((x10*((((x40*x5))+((x38*x6)))))));
eerot[4]=(((x0*x8))+((x7*(((((-1.0)*x14*x35))+(((-1.0)*x13*x40)))))));
eerot[5]=(((x10*x44))+((x11*(((((-1.0)*x14*x40))+(((-1.0)*x13*x38)))))));
IkReal x46=((1.0)*x16);
eetrans[1]=(((x18*x9))+(((-1.0)*x21*x23))+((x21*x22))+((x6*(((((-1.0)*x22*x46))+((x16*x23))))))+(((0.134)*x0))+((x17*x9))+((x5*(((((-1.0)*x25*x46))+(((-1.0)*x24*x46)))))));
eerot[6]=(((x10*((x33+x36))))+((x11*x42)));
eerot[7]=(x7*(((((-1.0)*x14*x30))+(((-1.0)*x13*x31)))));
eerot[8]=(((x11*(((((-1.0)*x36))+(((-1.0)*x33))))))+((x10*x42)));
eetrans[2]=((0.163)+((x5*(((((-0.1)*x22))+(((0.1)*x23))))))+(((1.4e-7)*x1))+(((-0.392)*x25))+(((-0.392)*x24))+(((-0.425)*x4))+((x6*((x26+x27)))));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r00;
new_r01=((-1.0)*r02);
new_r02=r01;
new_px=px;
new_r10=r10;
new_r11=((-1.0)*r12);
new_r12=r11;
new_py=py;
new_r20=r20;
new_r21=((-1.0)*r22);
new_r22=r21;
new_pz=((-0.163)+pz);
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x47=((1.0)*px);
IkReal x48=((1.0)*pz);
IkReal x49=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x49))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x48)));
rxp0_2=((((-1.0)*r10*x47))+((py*r00)));
rxp1_0=((((-1.0)*r21*x49))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x48)));
rxp1_2=((((-1.0)*r11*x47))+((py*r01)));
rxp2_0=((((-1.0)*r22*x49))+((pz*r12)));
rxp2_1=((((-1.0)*r02*x48))+((px*r22)));
rxp2_2=((((-1.0)*r12*x47))+((py*r02)));
IkReal IKFAST_ALIGNED16(matrixinvcoeffs[256]);
IkReal x50=((0.2)*npx);
IkReal x51=((0.2)*npy);
IkReal x52=((0.1)*r22);
IkReal x53=((0.1)*r21);
IkReal x54=((-0.1)*r20);
IkReal x55=((-1.0)*r20);
IkReal x56=((-1.0)*rxp0_2);
IkReal x57=((-0.1)*r21);
IkReal x58=((-1.0)*r21);
IkReal x59=((-1.0)*rxp1_2);
IkReal x60=((-1.0)*npx);
IkReal x61=((-1.0)*r22);
IkReal x62=((-1.0)*npz);
matrixinvcoeffs[0]=x54;
matrixinvcoeffs[1]=x50;
matrixinvcoeffs[2]=0;
matrixinvcoeffs[3]=0;
matrixinvcoeffs[4]=0;
matrixinvcoeffs[5]=0;
matrixinvcoeffs[6]=0;
matrixinvcoeffs[7]=0;
matrixinvcoeffs[8]=0;
matrixinvcoeffs[9]=npx;
matrixinvcoeffs[10]=x55;
matrixinvcoeffs[11]=0;
matrixinvcoeffs[12]=0;
matrixinvcoeffs[13]=0;
matrixinvcoeffs[14]=0;
matrixinvcoeffs[15]=x56;
matrixinvcoeffs[16]=0;
matrixinvcoeffs[17]=0;
matrixinvcoeffs[18]=x54;
matrixinvcoeffs[19]=x50;
matrixinvcoeffs[20]=0;
matrixinvcoeffs[21]=0;
matrixinvcoeffs[22]=0;
matrixinvcoeffs[23]=0;
matrixinvcoeffs[24]=npx;
matrixinvcoeffs[25]=0;
matrixinvcoeffs[26]=0;
matrixinvcoeffs[27]=x55;
matrixinvcoeffs[28]=0;
matrixinvcoeffs[29]=0;
matrixinvcoeffs[30]=x56;
matrixinvcoeffs[31]=0;
matrixinvcoeffs[32]=x57;
matrixinvcoeffs[33]=x51;
matrixinvcoeffs[34]=0;
matrixinvcoeffs[35]=0;
matrixinvcoeffs[36]=0;
matrixinvcoeffs[37]=0;
matrixinvcoeffs[38]=0;
matrixinvcoeffs[39]=0;
matrixinvcoeffs[40]=0;
matrixinvcoeffs[41]=npy;
matrixinvcoeffs[42]=x58;
matrixinvcoeffs[43]=0;
matrixinvcoeffs[44]=0;
matrixinvcoeffs[45]=0;
matrixinvcoeffs[46]=0;
matrixinvcoeffs[47]=x59;
matrixinvcoeffs[48]=0;
matrixinvcoeffs[49]=0;
matrixinvcoeffs[50]=x57;
matrixinvcoeffs[51]=x51;
matrixinvcoeffs[52]=0;
matrixinvcoeffs[53]=0;
matrixinvcoeffs[54]=0;
matrixinvcoeffs[55]=0;
matrixinvcoeffs[56]=npy;
matrixinvcoeffs[57]=0;
matrixinvcoeffs[58]=0;
matrixinvcoeffs[59]=x58;
matrixinvcoeffs[60]=0;
matrixinvcoeffs[61]=0;
matrixinvcoeffs[62]=x59;
matrixinvcoeffs[63]=0;
matrixinvcoeffs[64]=0;
matrixinvcoeffs[65]=0;
matrixinvcoeffs[66]=0;
matrixinvcoeffs[67]=0;
matrixinvcoeffs[68]=0;
matrixinvcoeffs[69]=0;
matrixinvcoeffs[70]=0;
matrixinvcoeffs[71]=0;
matrixinvcoeffs[72]=npz;
matrixinvcoeffs[73]=0;
matrixinvcoeffs[74]=0;
matrixinvcoeffs[75]=x61;
matrixinvcoeffs[76]=x52;
matrixinvcoeffs[77]=0;
matrixinvcoeffs[78]=((-1.0)*rxp2_2);
matrixinvcoeffs[79]=0;
matrixinvcoeffs[80]=0;
matrixinvcoeffs[81]=0;
matrixinvcoeffs[82]=0;
matrixinvcoeffs[83]=0;
matrixinvcoeffs[84]=0;
matrixinvcoeffs[85]=0;
matrixinvcoeffs[86]=0;
matrixinvcoeffs[87]=0;
matrixinvcoeffs[88]=0;
matrixinvcoeffs[89]=x62;
matrixinvcoeffs[90]=r22;
matrixinvcoeffs[91]=0;
matrixinvcoeffs[92]=0;
matrixinvcoeffs[93]=x52;
matrixinvcoeffs[94]=0;
matrixinvcoeffs[95]=rxp2_2;
matrixinvcoeffs[96]=0;
matrixinvcoeffs[97]=0;
matrixinvcoeffs[98]=0;
matrixinvcoeffs[99]=0;
matrixinvcoeffs[100]=r21;
matrixinvcoeffs[101]=npy;
matrixinvcoeffs[102]=0;
matrixinvcoeffs[103]=0;
matrixinvcoeffs[104]=0;
matrixinvcoeffs[105]=0;
matrixinvcoeffs[106]=0;
matrixinvcoeffs[107]=0;
matrixinvcoeffs[108]=x59;
matrixinvcoeffs[109]=0;
matrixinvcoeffs[110]=x57;
matrixinvcoeffs[111]=0;
matrixinvcoeffs[112]=0;
matrixinvcoeffs[113]=0;
matrixinvcoeffs[114]=0;
matrixinvcoeffs[115]=0;
matrixinvcoeffs[116]=0;
matrixinvcoeffs[117]=0;
matrixinvcoeffs[118]=r21;
matrixinvcoeffs[119]=npy;
matrixinvcoeffs[120]=0;
matrixinvcoeffs[121]=0;
matrixinvcoeffs[122]=0;
matrixinvcoeffs[123]=0;
matrixinvcoeffs[124]=0;
matrixinvcoeffs[125]=x59;
matrixinvcoeffs[126]=0;
matrixinvcoeffs[127]=x53;
matrixinvcoeffs[128]=0;
matrixinvcoeffs[129]=0;
matrixinvcoeffs[130]=0;
matrixinvcoeffs[131]=0;
matrixinvcoeffs[132]=x55;
matrixinvcoeffs[133]=x60;
matrixinvcoeffs[134]=0;
matrixinvcoeffs[135]=0;
matrixinvcoeffs[136]=0;
matrixinvcoeffs[137]=0;
matrixinvcoeffs[138]=0;
matrixinvcoeffs[139]=0;
matrixinvcoeffs[140]=rxp0_2;
matrixinvcoeffs[141]=0;
matrixinvcoeffs[142]=((0.1)*r20);
matrixinvcoeffs[143]=0;
matrixinvcoeffs[144]=0;
matrixinvcoeffs[145]=0;
matrixinvcoeffs[146]=0;
matrixinvcoeffs[147]=0;
matrixinvcoeffs[148]=0;
matrixinvcoeffs[149]=0;
matrixinvcoeffs[150]=x55;
matrixinvcoeffs[151]=x60;
matrixinvcoeffs[152]=0;
matrixinvcoeffs[153]=0;
matrixinvcoeffs[154]=0;
matrixinvcoeffs[155]=0;
matrixinvcoeffs[156]=0;
matrixinvcoeffs[157]=rxp0_2;
matrixinvcoeffs[158]=0;
matrixinvcoeffs[159]=x54;
matrixinvcoeffs[160]=0;
matrixinvcoeffs[161]=0;
matrixinvcoeffs[162]=0;
matrixinvcoeffs[163]=0;
matrixinvcoeffs[164]=x61;
matrixinvcoeffs[165]=x62;
matrixinvcoeffs[166]=0;
matrixinvcoeffs[167]=0;
matrixinvcoeffs[168]=0;
matrixinvcoeffs[169]=0;
matrixinvcoeffs[170]=0;
matrixinvcoeffs[171]=0;
matrixinvcoeffs[172]=rxp2_2;
matrixinvcoeffs[173]=0;
matrixinvcoeffs[174]=x52;
matrixinvcoeffs[175]=0;
matrixinvcoeffs[176]=0;
matrixinvcoeffs[177]=0;
matrixinvcoeffs[178]=0;
matrixinvcoeffs[179]=0;
matrixinvcoeffs[180]=0;
matrixinvcoeffs[181]=0;
matrixinvcoeffs[182]=x61;
matrixinvcoeffs[183]=x62;
matrixinvcoeffs[184]=0;
matrixinvcoeffs[185]=0;
matrixinvcoeffs[186]=0;
matrixinvcoeffs[187]=0;
matrixinvcoeffs[188]=0;
matrixinvcoeffs[189]=rxp2_2;
matrixinvcoeffs[190]=0;
matrixinvcoeffs[191]=((-0.1)*r22);
matrixinvcoeffs[192]=0;
matrixinvcoeffs[193]=0;
matrixinvcoeffs[194]=0;
matrixinvcoeffs[195]=0;
matrixinvcoeffs[196]=0;
matrixinvcoeffs[197]=0;
matrixinvcoeffs[198]=0;
matrixinvcoeffs[199]=0;
matrixinvcoeffs[200]=npy;
matrixinvcoeffs[201]=0;
matrixinvcoeffs[202]=0;
matrixinvcoeffs[203]=x58;
matrixinvcoeffs[204]=x53;
matrixinvcoeffs[205]=0;
matrixinvcoeffs[206]=x59;
matrixinvcoeffs[207]=0;
matrixinvcoeffs[208]=0;
matrixinvcoeffs[209]=0;
matrixinvcoeffs[210]=0;
matrixinvcoeffs[211]=0;
matrixinvcoeffs[212]=0;
matrixinvcoeffs[213]=0;
matrixinvcoeffs[214]=0;
matrixinvcoeffs[215]=0;
matrixinvcoeffs[216]=0;
matrixinvcoeffs[217]=((-1.0)*npy);
matrixinvcoeffs[218]=r21;
matrixinvcoeffs[219]=0;
matrixinvcoeffs[220]=0;
matrixinvcoeffs[221]=x53;
matrixinvcoeffs[222]=0;
matrixinvcoeffs[223]=rxp1_2;
matrixinvcoeffs[224]=0;
matrixinvcoeffs[225]=0;
matrixinvcoeffs[226]=0;
matrixinvcoeffs[227]=0;
matrixinvcoeffs[228]=0;
matrixinvcoeffs[229]=0;
matrixinvcoeffs[230]=0;
matrixinvcoeffs[231]=0;
matrixinvcoeffs[232]=x60;
matrixinvcoeffs[233]=0;
matrixinvcoeffs[234]=0;
matrixinvcoeffs[235]=r20;
matrixinvcoeffs[236]=x54;
matrixinvcoeffs[237]=0;
matrixinvcoeffs[238]=rxp0_2;
matrixinvcoeffs[239]=0;
matrixinvcoeffs[240]=0;
matrixinvcoeffs[241]=0;
matrixinvcoeffs[242]=0;
matrixinvcoeffs[243]=0;
matrixinvcoeffs[244]=0;
matrixinvcoeffs[245]=0;
matrixinvcoeffs[246]=0;
matrixinvcoeffs[247]=0;
matrixinvcoeffs[248]=0;
matrixinvcoeffs[249]=npx;
matrixinvcoeffs[250]=x55;
matrixinvcoeffs[251]=0;
matrixinvcoeffs[252]=0;
matrixinvcoeffs[253]=x54;
matrixinvcoeffs[254]=0;
matrixinvcoeffs[255]=x56;
if( !matrixinverse<16>(matrixinvcoeffs) ) {
continue;
}
IkReal gclwh0_0=matrixinvcoeffs[0], gclwh0_1=matrixinvcoeffs[16], gclwh1_2=matrixinvcoeffs[33], gclwh1_3=matrixinvcoeffs[49], gclwh2_0=matrixinvcoeffs[2], gclwh2_1=matrixinvcoeffs[18], gclwh3_2=matrixinvcoeffs[35], gclwh3_3=matrixinvcoeffs[51], gclwh4_2=matrixinvcoeffs[36], gclwh4_3=matrixinvcoeffs[52], gclwh4_4=matrixinvcoeffs[68], gclwh4_8=matrixinvcoeffs[132], gclwh4_11=matrixinvcoeffs[180], gclwh4_14=matrixinvcoeffs[228], gclwh5_0=matrixinvcoeffs[5], gclwh5_1=matrixinvcoeffs[21], gclwh5_6=matrixinvcoeffs[101], gclwh5_9=matrixinvcoeffs[149], gclwh5_10=matrixinvcoeffs[165], gclwh5_15=matrixinvcoeffs[245], gclwh6_2=matrixinvcoeffs[38], gclwh6_4=matrixinvcoeffs[70], gclwh6_5=matrixinvcoeffs[86], gclwh6_11=matrixinvcoeffs[182], gclwh6_12=matrixinvcoeffs[198], gclwh7_0=matrixinvcoeffs[7], gclwh7_6=matrixinvcoeffs[103], gclwh7_7=matrixinvcoeffs[119], gclwh7_10=matrixinvcoeffs[167], gclwh7_13=matrixinvcoeffs[215], gclwh8_2=matrixinvcoeffs[40], gclwh8_4=matrixinvcoeffs[72], gclwh8_5=matrixinvcoeffs[88], gclwh8_11=matrixinvcoeffs[184], gclwh8_12=matrixinvcoeffs[200], gclwh9_0=matrixinvcoeffs[9], gclwh9_6=matrixinvcoeffs[105], gclwh9_7=matrixinvcoeffs[121], gclwh9_10=matrixinvcoeffs[169], gclwh9_13=matrixinvcoeffs[217], gclwh10_2=matrixinvcoeffs[42], gclwh10_4=matrixinvcoeffs[74], gclwh10_5=matrixinvcoeffs[90], gclwh10_11=matrixinvcoeffs[186], gclwh10_12=matrixinvcoeffs[202], gclwh11_0=matrixinvcoeffs[11], gclwh11_6=matrixinvcoeffs[107], gclwh11_7=matrixinvcoeffs[123], gclwh11_10=matrixinvcoeffs[171], gclwh11_13=matrixinvcoeffs[219], gclwh12_2=matrixinvcoeffs[44], gclwh12_3=matrixinvcoeffs[60], gclwh12_4=matrixinvcoeffs[76], gclwh12_8=matrixinvcoeffs[140], gclwh12_11=matrixinvcoeffs[188], gclwh12_14=matrixinvcoeffs[236], gclwh13_0=matrixinvcoeffs[13], gclwh13_1=matrixinvcoeffs[29], gclwh13_6=matrixinvcoeffs[109], gclwh13_9=matrixinvcoeffs[157], gclwh13_10=matrixinvcoeffs[173], gclwh13_15=matrixinvcoeffs[253], gclwh14_2=matrixinvcoeffs[46], gclwh14_3=matrixinvcoeffs[62], gclwh14_4=matrixinvcoeffs[78], gclwh14_8=matrixinvcoeffs[142], gclwh14_11=matrixinvcoeffs[190], gclwh14_14=matrixinvcoeffs[238], gclwh15_0=matrixinvcoeffs[15], gclwh15_1=matrixinvcoeffs[31], gclwh15_6=matrixinvcoeffs[111], gclwh15_9=matrixinvcoeffs[159], gclwh15_10=matrixinvcoeffs[175], gclwh15_15=matrixinvcoeffs[255];
IkReal op[72], zeror[48];
int numroots;;
IkReal x63=pz*pz;
IkReal x64=(pp*r21);
IkReal x65=(npx*pz);
IkReal x66=((0.2)*rxp1_2);
IkReal x67=((0.00134)*r22);
IkReal x68=(npy*pz);
IkReal x69=((0.02)*r22);
IkReal x70=((0.00784)*r21);
IkReal x71=((2.1952e-9)*r21);
IkReal x72=((0.00817)*r21);
IkReal x73=(gclwh4_3*pp);
IkReal x74=((0.2)*rxp2_2);
IkReal x75=(npz*pz);
IkReal x76=((2.0)*gclwh11_10);
IkReal x77=(gclwh10_2*r22);
IkReal x78=((1.4e-7)*pp);
IkReal x79=((0.2)*rxp0_2);
IkReal x80=((1.0)*pz);
IkReal x81=(gclwh5_9*r22);
IkReal x82=((0.02)*r21);
IkReal x83=((0.1568)*rxp0_2);
IkReal x84=(pp*r20);
IkReal x85=(pp*r22);
IkReal x86=(gclwh13_1*rxp1_2);
IkReal x87=((0.0066)*rxp2_2);
IkReal x88=((0.00033)*r20);
IkReal x89=((2.0)*gclwh9_10);
IkReal x90=((2.1952e-9)*r20);
IkReal x91=((0.00268)*r20);
IkReal x92=((0.268)*gclwh14_14);
IkReal x93=((0.00784)*r22);
IkReal x94=(gclwh12_14*r21);
IkReal x95=((0.01)*r22);
IkReal x96=(gclwh15_1*rxp0_2);
IkReal x97=((2.0)*gclwh10_11);
IkReal x98=(gclwh8_11*r20);
IkReal x99=(gclwh11_0*r22);
IkReal x100=(gclwh4_8*rxp2_2);
IkReal x101=(gclwh4_8*r22);
IkReal x102=(gclwh15_9*r20);
IkReal x103=(gclwh4_14*rxp2_2);
IkReal x104=((0.4)*rxp2_2);
IkReal x105=((0.0066)*rxp1_2);
IkReal x106=(gclwh14_8*rxp0_2);
IkReal x107=((0.02)*r20);
IkReal x108=(gclwh10_12*r22);
IkReal x109=(gclwh12_8*rxp1_2);
IkReal x110=((0.00134)*r20);
IkReal x111=((0.01)*r21);
IkReal x112=((2.8e-8)*rxp0_2);
IkReal x113=((0.0085)*r21);
IkReal x114=((2.0)*gclwh7_10);
IkReal x115=(gclwh5_9*rxp2_2);
IkReal x116=((0.0066)*rxp0_2);
IkReal x117=(gclwh13_9*rxp1_2);
IkReal x118=((0.00033)*r21);
IkReal x119=((0.0536)*rxp1_2);
IkReal x120=((0.1634)*rxp2_2);
IkReal x121=((2.1952e-9)*r22);
IkReal x122=((1.4e-9)*r21);
IkReal x123=((0.1568)*rxp2_2);
IkReal x124=(gclwh9_0*r20);
IkReal x125=((2.8e-9)*r21);
IkReal x126=((0.1568)*rxp1_2);
IkReal x127=(gclwh14_3*rxp0_2);
IkReal x128=((2.8e-8)*rxp1_2);
IkReal x129=(gclwh15_9*rxp0_2);
IkReal x130=((0.268)*gclwh4_14);
IkReal x131=(gclwh8_2*r20);
IkReal x132=((2.0)*gclwh6_11);
IkReal x133=((0.0268)*rxp0_2);
IkReal x134=(gclwh4_3*rxp2_2);
IkReal x135=((0.0268)*rxp1_2);
IkReal x136=((0.4)*rxp1_2);
IkReal x137=((0.268)*gclwh13_15);
IkReal x138=((0.01)*pz);
IkReal x139=((0.0268)*rxp2_2);
IkReal x140=((2.0)*gclwh8_11);
IkReal x141=(gclwh14_8*r20);
IkReal x142=((0.268)*gclwh5_15);
IkReal x143=((0.00268)*r22);
IkReal x144=(gclwh11_13*r22);
IkReal x145=((0.4)*rxp0_2);
IkReal x146=((0.00817)*r20);
IkReal x147=((2.8e-8)*rxp2_2);
IkReal x148=(gclwh12_3*rxp1_2);
IkReal x149=((0.1634)*rxp1_2);
IkReal x150=(gclwh11_0*pz);
IkReal x151=((0.268)*gclwh15_15);
IkReal x152=(gclwh5_1*rxp2_2);
IkReal x153=(gclwh13_15*r21);
IkReal x154=((0.1634)*rxp0_2);
IkReal x155=((0.00134)*r21);
IkReal x156=((0.00784)*r20);
IkReal x157=((0.0536)*rxp0_2);
IkReal x158=((0.268)*gclwh12_14);
IkReal x159=(gclwh14_14*x133);
IkReal x160=(gclwh6_5*x155);
IkReal x161=((0.0268)*x103);
IkReal x162=(gclwh10_5*x67);
IkReal x163=(gclwh8_5*x110);
IkReal x164=(gclwh12_14*x135);
IkReal x165=(gclwh12_2*x128);
IkReal x166=(gclwh4_2*x147);
IkReal x167=(gclwh12_11*x66);
IkReal x168=(gclwh6_2*x122);
IkReal x169=(gclwh4_11*x74);
IkReal x170=(gclwh6_11*x111);
IkReal x171=((0.01)*x98);
IkReal x172=((1.4e-9)*x77);
IkReal x173=(gclwh10_11*x95);
IkReal x174=(gclwh14_11*x79);
IkReal x175=(gclwh14_2*x112);
IkReal x176=((1.4e-9)*x131);
IkReal x177=(gclwh5_0*x147);
IkReal x178=(gclwh13_0*x128);
IkReal x179=(gclwh11_10*x95);
IkReal x180=(gclwh7_0*x122);
IkReal x181=(gclwh15_10*x79);
IkReal x182=((0.01)*gclwh9_10*r20);
IkReal x183=(gclwh7_10*x111);
IkReal x184=(gclwh15_0*x112);
IkReal x185=(gclwh5_10*x74);
IkReal x186=((1.4e-9)*x99);
IkReal x187=(gclwh13_10*x66);
IkReal x188=((1.4e-9)*x124);
IkReal x189=(gclwh15_15*x133);
IkReal x190=(gclwh7_7*x155);
IkReal x191=(gclwh13_15*x135);
IkReal x192=(gclwh9_7*x110);
IkReal x193=(gclwh11_7*x67);
IkReal x194=(gclwh5_15*x139);
IkReal x195=(gclwh8_5*x133);
IkReal x196=(gclwh10_5*x139);
IkReal x197=(gclwh14_14*x110);
IkReal x198=((0.00134)*x94);
IkReal x199=(gclwh4_14*x67);
IkReal x200=(gclwh6_5*x135);
IkReal x201=(gclwh5_15*x67);
IkReal x202=((0.00134)*x153);
IkReal x203=(gclwh7_7*x135);
IkReal x204=(gclwh11_7*x139);
IkReal x205=(gclwh9_7*x133);
IkReal x206=(gclwh15_15*x110);
IkReal x207=(gclwh14_11*x145);
IkReal x208=(gclwh10_11*x69);
IkReal x209=((0.02)*x98);
IkReal x210=(gclwh4_11*x104);
IkReal x211=(gclwh6_11*x82);
IkReal x212=(gclwh12_11*x136);
IkReal x213=(gclwh14_8*x84);
IkReal x214=((2.0)*x63);
IkReal x215=((0.134)*gclwh6_5*x64);
IkReal x216=((0.268)*gclwh10_5*x75);
IkReal x217=((0.268)*gclwh8_5*x65);
IkReal x218=((0.268)*gclwh6_5*x68);
IkReal x219=((0.134)*gclwh8_5*x84);
IkReal x220=((0.134)*gclwh10_5*x85);
IkReal x221=((2.8e-7)*gclwh10_2*x75);
IkReal x222=(gclwh14_2*pz*x79);
IkReal x223=(x75*x97);
IkReal x224=((1.4e-7)*gclwh6_2*x64);
IkReal x225=(x140*x65);
IkReal x226=(pp*pz*x77);
IkReal x227=((2.8e-7)*gclwh8_2*x65);
IkReal x228=(x138*x77);
IkReal x229=(gclwh12_3*pp*x66);
IkReal x230=(gclwh8_2*pz*x84);
IkReal x231=(x73*x74);
IkReal x232=(x131*x138);
IkReal x233=(gclwh12_2*pz*x66);
IkReal x234=(gclwh14_3*pp*x79);
IkReal x235=((2.8e-7)*gclwh6_2*x68);
IkReal x236=(gclwh4_2*pz*x74);
IkReal x237=(x132*x68);
IkReal x238=(gclwh6_2*pz*x111);
IkReal x239=(x77*x78);
IkReal x240=(x131*x78);
IkReal x241=(gclwh13_1*pp*x66);
IkReal x242=((2.8e-7)*gclwh9_0*x65);
IkReal x243=((2.8e-7)*gclwh11_0*x75);
IkReal x244=((1.4e-7)*gclwh7_0*x64);
IkReal x245=(x150*x85);
IkReal x246=(gclwh5_1*pp*x74);
IkReal x247=(x114*x68);
IkReal x248=(gclwh15_0*pz*x79);
IkReal x249=(x150*x95);
IkReal x250=(x124*x138);
IkReal x251=(gclwh9_0*pz*x84);
IkReal x252=(gclwh15_1*pp*x79);
IkReal x253=(x75*x76);
IkReal x254=(x65*x89);
IkReal x255=(gclwh5_0*pz*x74);
IkReal x256=(gclwh13_0*pz*x66);
IkReal x257=(gclwh7_0*pz*x111);
IkReal x258=((2.8e-7)*gclwh7_0*x68);
IkReal x259=(x78*x99);
IkReal x260=(x124*x78);
IkReal x261=((0.268)*gclwh9_7*x65);
IkReal x262=((0.134)*gclwh7_7*x64);
IkReal x263=((0.268)*gclwh11_7*x75);
IkReal x264=((0.134)*gclwh11_7*x85);
IkReal x265=((0.268)*gclwh7_7*x68);
IkReal x266=((0.134)*gclwh9_7*x84);
IkReal x267=(x158*x68);
IkReal x268=((0.134)*gclwh14_14*x84);
IkReal x269=(x130*x75);
IkReal x270=((0.134)*gclwh12_14*x64);
IkReal x271=(x65*x92);
IkReal x272=((0.134)*gclwh4_14*x85);
IkReal x273=((0.134)*gclwh13_15*x64);
IkReal x274=(x151*x65);
IkReal x275=((0.134)*gclwh5_15*x85);
IkReal x276=(x142*x75);
IkReal x277=((0.134)*gclwh15_15*x84);
IkReal x278=(x137*x68);
IkReal x279=(x140*x84);
IkReal x280=(x85*x97);
IkReal x281=((4.0)*gclwh6_11*x68);
IkReal x282=((4.0)*gclwh8_11*x65);
IkReal x283=(x132*x64);
IkReal x284=((4.0)*gclwh10_11*x75);
IkReal x285=(gclwh6_2*npy*x214);
IkReal x286=(gclwh6_2*x64*x80);
IkReal x287=(gclwh10_2*npz*x214);
IkReal x288=(gclwh8_2*npx*x214);
IkReal x289=(gclwh7_0*npy*x214);
IkReal x290=(gclwh9_0*npx*x214);
IkReal x291=(gclwh11_0*npz*x214);
IkReal x292=(gclwh7_0*x64*x80);
IkReal x293=(x191+x194);
IkReal x294=(x161+x164);
IkReal x295=(x196+x195);
IkReal x296=(x205+x204);
IkReal x297=(x179+x181+x182+x247);
IkReal x298=(x171+x173+x174+x237);
IkReal x299=(x197+x267+x269+x268);
IkReal x300=(x206+x276+x277+x278);
IkReal x301=((3.752e-8)+x190+x261+x263+x262);
IkReal x302=((3.752e-8)+x160+x215+x216+x217);
IkReal x303=(x170+x169+x167+x223+x225);
IkReal x304=(x185+x187+x183+x254+x253);
IkReal x305=(x162+x163+x218+x219+x220);
IkReal x306=(x199+x198+x272+x270+x271);
IkReal x307=(x202+x201+x274+x275+x273);
IkReal x308=(x193+x192+x265+x264+x266);
IkReal x309=(x210+x211+x212+x284+x283+x282);
IkReal x310=(x207+x209+x208+x279+x281+x280);
IkReal x311=(x184+x186+x188+x258+x259+x255+x256+x257+x252+x290+x291+x292+x260);
IkReal x312=(x172+x175+x176+x238+x239+x233+x236+x234+x235+x240+x288+x287+x286);
IkReal x313=(x178+x177+x180+x250+x251+x243+x242+x241+x246+x245+x244+x249+x248+x289);
IkReal x314=(x168+x166+x165+x229+x228+x221+x222+x224+x227+x226+x232+x230+x231+x285);
op[0]=((((1.634)*gclwh10_12*x75))+(((-1.0)*x159))+(((-0.817)*gclwh8_12*x84))+(((0.817)*gclwh6_12*x64))+(((-1.634)*gclwh6_12*x68))+(((0.1634)*x106))+x302+x294+(((-0.1634)*x100))+(((-0.1634)*x109))+(((-0.817)*gclwh10_12*x85))+(((1.634)*gclwh8_12*x65))+((gclwh6_12*x72))+(((-0.00817)*x108))+(((-1.0)*gclwh8_12*x146))+(((-1.0)*x305)));
op[1]=((((0.020000028)*x109))+(((0.020000028)*x100))+(((0.135089000000004)*x127))+(((-0.135089000000004)*x148))+(((-1.0)*gclwh6_11*x64))+x314+x298+(((-1.0)*x312))+((gclwh8_11*x84))+(((-1.0)*x303))+(((-0.135089000000004)*x134))+((gclwh10_11*x85))+(((-0.020000028)*x106)));
op[2]=((-0.210112)+x310+(((-5.6e-8)*x106))+(((5.6e-8)*x109))+(((5.6e-8)*x100))+(((-1.0)*x309)));
op[3]=((((-1.0)*gclwh4_2*x123))+(((-1.568)*gclwh10_2*x75))+((gclwh14_14*x157))+(((-1.0)*gclwh6_2*x70))+(((-4.3904e-8)*x127))+(((-0.0536)*x103))+(((4.3904e-8)*x134))+(((4.3904e-8)*x148))+(((0.00784)*x77))+(((-1.0)*gclwh12_14*x119))+(((-1.0)*gclwh12_2*x126))+(((0.784)*gclwh8_2*x84))+(((0.17)*x109))+(((0.17)*x100))+(((-0.784)*gclwh6_2*x64))+((gclwh14_2*x83))+(((0.00784)*x131))+(((-1.568)*gclwh8_2*x65))+(((-0.17)*x106))+(((1.568)*gclwh6_2*x68))+(((0.784)*pp*x77)));
op[4]=((((0.066)*gclwh10_12*x75))+(((0.066)*gclwh8_12*x65))+((gclwh12_8*x105))+(((0.033)*gclwh6_12*x64))+(((-0.0066)*x106))+(((-0.033)*gclwh10_12*x85))+(((-1.0)*x294))+((gclwh6_12*x118))+x159+(((-0.066)*gclwh6_12*x68))+x302+(((-0.033)*gclwh8_12*x84))+(((-1.0)*gclwh8_12*x88))+((gclwh4_8*x87))+(((-0.00033)*x108))+(((-1.0)*x305)));
op[5]=((((-1.0)*gclwh8_11*x84))+(((-0.00180900000000392)*x134))+(((-1.0)*gclwh10_11*x85))+(((-1.0)*x298))+x303+x314+(((-0.019999972)*x106))+(((0.019999972)*x109))+(((0.019999972)*x100))+(((-1.0)*x312))+((gclwh6_11*x64))+(((-0.00180900000000392)*x148))+(((0.00180900000000392)*x127)));
op[6]=(((gclwh7_10*x64))+(((-1.0)*x297))+(((-0.135089000000004)*x152))+(((-0.019999972)*x129))+(((-0.135089000000004)*x86))+x304+x313+(((0.135089000000004)*x96))+(((-1.0)*x311))+(((0.019999972)*x117))+(((0.019999972)*x115))+(((-1.0)*gclwh9_10*x84))+(((-1.0)*gclwh11_10*x85)));
op[7]=((((1.634)*gclwh9_13*x65))+(((0.1634)*x129))+(((-1.0)*gclwh9_13*x146))+(((-1.634)*gclwh7_13*x68))+(((-0.817)*gclwh11_13*x85))+(((-1.0)*x189))+(((-0.817)*gclwh9_13*x84))+(((1.634)*gclwh11_13*x75))+x301+(((-0.00817)*x144))+x293+((gclwh7_13*x72))+(((-0.1634)*x117))+(((-0.1634)*x115))+(((0.817)*gclwh7_13*x64))+(((-1.0)*x308)));
op[8]=((((-1.0)*gclwh15_15*x157))+(((-0.784)*gclwh7_0*x64))+(((1.568)*gclwh7_0*x68))+(((-1.0)*gclwh7_0*x70))+((gclwh13_15*x119))+(((-1.0)*gclwh13_0*x126))+(((-4.3904e-8)*x96))+((gclwh15_0*x83))+(((-1.0)*gclwh5_0*x123))+(((-1.568)*gclwh9_0*x65))+(((4.3904e-8)*x152))+(((4.3904e-8)*x86))+((gclwh11_0*x93))+(((0.17)*x129))+(((0.00784)*x124))+(((-1.568)*gclwh11_0*x75))+(((0.0536)*gclwh5_15*rxp2_2))+(((0.784)*gclwh11_0*x85))+(((0.784)*gclwh9_0*x84))+(((-0.17)*x117))+(((-0.17)*x115)));
op[9]=((-0.210112)+((x84*x89))+(((-4.0)*gclwh9_10*x65))+((gclwh15_10*x145))+(((-1.0)*x114*x64))+(((-4.0)*gclwh11_10*x75))+((x76*x85))+(((-1.0)*gclwh13_10*x136))+(((5.6e-8)*x115))+(((5.6e-8)*x117))+(((4.0)*gclwh7_10*x68))+(((-5.6e-8)*x129))+((gclwh9_10*x107))+(((-1.0)*gclwh5_10*x104))+(((-1.0)*gclwh7_10*x82))+((gclwh11_10*x69)));
op[10]=((((0.020000028)*x117))+(((0.020000028)*x115))+(((-1.0)*gclwh7_10*x64))+x313+x297+(((-1.0)*x311))+(((-0.00180900000000392)*x86))+((gclwh11_10*x85))+(((0.00180900000000392)*x96))+((gclwh9_10*x84))+(((-0.00180900000000392)*x152))+(((-0.020000028)*x129))+(((-1.0)*x304)));
op[11]=(((gclwh7_13*x118))+(((0.066)*gclwh11_13*x75))+(((-1.0)*x293))+(((-0.066)*gclwh7_13*x68))+(((-1.0)*gclwh9_13*x88))+x189+x301+(((-0.033)*gclwh9_13*x84))+((gclwh5_9*x87))+(((-0.033)*gclwh11_13*x85))+(((0.033)*gclwh7_13*x64))+((gclwh13_9*x105))+(((0.066)*gclwh9_13*x65))+(((-1.0)*x308))+(((-1.0)*gclwh15_9*x116))+(((-0.00033)*x144)));
op[12]=((-2.2876e-7)+(((-1.634)*gclwh14_8*x65))+(((-0.817)*gclwh12_8*x64))+(((-1.0)*gclwh12_8*x72))+(((-1.0)*gclwh6_12*x149))+(((-0.817)*gclwh4_8*x85))+(((0.00817)*x141))+(((-1.0)*x299))+((gclwh10_12*x120))+(((1.634)*gclwh4_8*x75))+(((-1.0)*x200))+x306+(((1.634)*gclwh12_8*x68))+x295+(((0.817)*x213))+(((-0.00817)*x101))+((gclwh8_12*x154)));
op[13]=((-0.68544499999998)+(((-2.8e-7)*gclwh4_2*npz*pz))+(((-0.2)*gclwh10_11*rxp2_2))+(((-1.0)*gclwh12_2*pp*pz*r21))+(((-2.8e-7)*gclwh1_2*npx*pz))+(((2.0)*gclwh12_2*npy*(pz*pz)))+((gclwh14_2*pp*pz*r20))+(((0.0010000014)*gclwh12_8*r21))+(((0.20000028)*gclwh14_8*npx*pz))+(((2.0)*gclwh3_2*npy*(pz*pz)))+(((-2.0)*gclwh14_11*npx*pz))+(((-2.0)*gclwh4_3*npz*pp*pz))+(((2.0)*gclwh1_2*npx*(pz*pz)))+(((0.01)*gclwh14_2*pz*r20))+(((-0.20000028)*gclwh4_8*npz*pz))+((gclwh12_3*r21*(pp*pp)))+(((-0.10000014)*gclwh14_8*pp*r20))+(((0.2)*gclwh6_11*rxp1_2))+(((-1.0)*gclwh12_11*pp*r21))+(((0.01)*gclwh1_2*pz*r20))+(((-2.8e-8)*gclwh6_2*rxp1_2))+(((-1.0)*gclwh1_2*pp*pz*r20))+(((0.0067544500000002)*gclwh1_3*r20))+(((0.01)*gclwh3_2*pz*r21))+(((-2.0)*gclwh14_2*npx*(pz*pz)))+(((-1.4e-7)*gclwh14_2*pp*r20))+(((2.0)*gclwh4_11*npz*pz))+(((1.35089000000004)*gclwh12_3*npy*pz))+(((2.8e-7)*gclwh14_2*npx*pz))+(((-2.8e-7)*gclwh12_2*npy*pz))+(((1.4e-7)*gclwh1_2*pp*r20))+(((1.35089000000004)*gclwh4_3*npz*pz))+(((0.0067544500000002)*gclwh3_3*r21))+(((0.2)*pz))+(((-1.4e-9)*gclwh14_2*r20))+(((1.35089000000004)*gclwh1_3*npx*pz))+(((1.4e-7)*gclwh4_2*pp*r22))+(((0.0067544500000002)*gclwh14_3*r20))+(((2.8e-8)*gclwh10_2*rxp2_2))+(((-0.01)*gclwh4_2*pz*r22))+(((0.66544500000002)*gclwh14_3*pp*r20))+(((0.0010000014)*gclwh4_8*r22))+((gclwh3_3*r21*(pp*pp)))+(((-0.68544500000002)*gclwh3_3*pp*r21))+((gclwh1_3*r20*(pp*pp)))+(((-0.66544500000002)*gclwh4_3*pp*r22))+(((-0.0067544500000002)*gclwh12_3*r21))+(((1.35089000000004)*gclwh3_3*npy*pz))+(((-0.0067544500000002)*gclwh4_3*r22))+(((0.2)*gclwh6_2*pz*rxp1_2))+(((2.0)*gclwh14_3*npx*pp*pz))+(((-0.0010000014)*gclwh14_8*r20))+(((-1.35089000000004)*gclwh14_3*npx*pz))+(((-2.0)*gclwh12_3*npy*pp*pz))+(((1.4e-9)*gclwh4_2*r22))+(((2.8e-8)*gclwh8_2*rxp0_2))+(((0.01)*gclwh14_11*r20))+(((-0.2)*gclwh8_2*pz*rxp0_2))+(((-0.01)*gclwh12_11*r21))+(((1.4e-9)*gclwh12_2*r21))+(((-1.0)*gclwh3_2*pp*pz*r21))+(((-0.66544500000002)*gclwh12_3*pp*r21))+(((1.4e-7)*gclwh3_2*pp*r21))+(((-0.01)*gclwh12_2*pz*r21))+(((-0.2)*gclwh10_2*pz*rxp2_2))+(((1.4e-7)*gclwh12_2*pp*r21))+(((-0.20000028)*gclwh12_8*npy*pz))+((gclwh4_3*r22*(pp*pp)))+(((2.0)*gclwh4_2*npz*(pz*pz)))+(((-1.0)*gclwh14_3*r20*(pp*pp)))+(((-2.8e-7)*gclwh3_2*npy*pz))+(((-2.0)*gclwh1_3*npx*pp*pz))+(((-0.2)*gclwh8_11*rxp0_2))+((gclwh14_11*pp*r20))+(((-1.0)*gclwh4_11*pp*r22))+(((0.10000014)*gclwh12_8*pp*r21))+(((-0.68544500000002)*gclwh1_3*pp*r20))+(((-2.0)*gclwh3_3*npy*pp*pz))+(((0.10000014)*gclwh4_8*pp*r22))+(((2.0)*gclwh12_11*npy*pz))+(((-0.01)*gclwh4_11*r22))+(((-1.4e-9)*gclwh1_2*r20))+(((-1.0)*gclwh4_2*pp*pz*r22))+(((-1.4e-9)*gclwh3_2*r21)));
op[14]=((-0.0898339999999608)+(((2.8e-7)*gclwh4_8*x85))+(((-1.0)*gclwh10_11*x104))+((gclwh6_11*x136))+(((-1.0)*gclwh4_11*x69))+(((2.0)*gclwh14_11*x84))+(((-2.0)*gclwh4_11*x85))+((gclwh12_8*x125))+(((-4.0)*gclwh14_11*x65))+(((4.0)*gclwh4_11*x75))+(((-2.8e-7)*x213))+(((-5.6e-7)*gclwh12_8*x68))+(((-2.0)*gclwh12_11*x64))+(((2.8e-7)*gclwh12_8*x64))+(((-2.8e-9)*x141))+(((-1.0)*gclwh12_11*x82))+(((2.8e-9)*x101))+(((-5.6e-7)*gclwh4_8*x75))+(((4.0)*gclwh12_11*x68))+(((-1.0)*gclwh8_11*x145))+((gclwh14_11*x107))+(((5.6e-7)*gclwh14_8*x65)));
op[15]=((2.38e-7)+(((-1.7)*gclwh12_8*x68))+((gclwh1_2*x156))+((gclwh12_3*x71))+(((-1.0)*gclwh4_2*x93))+(((1.568)*gclwh3_2*x68))+(((-0.0085)*x141))+(((0.536)*gclwh12_14*x68))+(((-0.85)*x213))+(((-1.0)*gclwh8_2*x83))+(((-1.7)*gclwh4_8*x75))+(((-1.0)*gclwh10_2*x123))+(((-0.784)*gclwh4_2*x85))+((gclwh12_8*x113))+(((-0.784)*gclwh1_2*x84))+((gclwh3_2*x70))+(((-0.784)*gclwh3_2*x64))+((gclwh6_2*x126))+(((2.1952e-7)*r22*x73))+(((-1.0)*gclwh4_14*x143))+(((0.85)*gclwh4_8*x85))+(((-0.00268)*x94))+(((0.784)*gclwh14_2*x84))+(((-1.568)*gclwh14_2*x65))+(((1.568)*gclwh12_2*x68))+((gclwh14_14*x91))+(((1.7)*gclwh14_8*x65))+(((-1.0)*gclwh14_3*x90))+(((1.568)*gclwh4_2*x75))+(((0.0085)*x101))+(((-4.3904e-7)*gclwh12_3*x68))+((gclwh14_2*x156))+(((0.536)*gclwh4_14*x75))+(((-0.784)*gclwh12_2*x64))+(((-2.1952e-7)*gclwh14_3*x84))+(((-1.0)*gclwh3_3*x71))+(((-0.536)*gclwh14_14*x65))+(((-1.0)*gclwh1_3*x90))+(((-4.3904e-7)*gclwh4_3*x75))+(((-1.0)*x158*x64))+(((-1.0)*gclwh12_2*x70))+(((2.1952e-7)*gclwh1_3*x84))+(((2.1952e-7)*gclwh3_3*x64))+(((4.3904e-7)*gclwh14_3*x65))+(((-4.3904e-7)*gclwh3_3*x68))+((gclwh4_3*x121))+(((-1.0)*x130*x85))+(((0.85)*gclwh12_8*x64))+(((1.568)*gclwh1_2*x65))+(((2.1952e-7)*gclwh12_3*x64))+((x84*x92))+(((-4.3904e-7)*gclwh1_3*x65)));
op[16]=((9.24e-9)+(((0.00033)*x101))+((gclwh8_12*x116))+(((-0.066)*gclwh4_8*x75))+((gclwh12_8*x118))+(((-1.0)*gclwh14_8*x88))+(((-1.0)*gclwh6_12*x105))+(((-1.0)*x200))+((gclwh10_12*x87))+x299+x295+(((-0.033)*x213))+(((0.033)*gclwh12_8*x64))+(((0.066)*gclwh14_8*x65))+(((-0.066)*gclwh12_8*x68))+(((-1.0)*x306))+(((0.033)*gclwh4_8*x85)));
op[17]=((0.0190449999999804)+(((-2.8e-7)*gclwh4_2*npz*pz))+(((-1.0)*gclwh12_2*pp*pz*r21))+(((-2.8e-7)*gclwh1_2*npx*pz))+(((2.0)*gclwh12_2*npy*(pz*pz)))+((gclwh14_2*pp*pz*r20))+(((0.01)*gclwh12_11*r21))+(((-9.0450000000196e-5)*gclwh12_3*r21))+(((-0.0009999986)*gclwh14_8*r20))+((gclwh12_11*pp*r21))+(((2.0)*gclwh3_2*npy*(pz*pz)))+(((-0.01)*gclwh14_11*r20))+(((-2.0)*gclwh4_3*npz*pp*pz))+(((-2.0)*gclwh12_11*npy*pz))+(((2.0)*gclwh1_2*npx*(pz*pz)))+(((0.2)*gclwh10_11*rxp2_2))+(((0.0180900000000392)*gclwh1_3*npx*pz))+(((0.01)*gclwh14_2*pz*r20))+(((0.0009549999999804)*gclwh12_3*pp*r21))+((gclwh12_3*r21*(pp*pp)))+(((0.0009999986)*gclwh12_8*r21))+(((-0.0190450000000196)*gclwh3_3*pp*r21))+(((0.19999972)*gclwh14_8*npx*pz))+(((0.01)*gclwh1_2*pz*r20))+(((-2.8e-8)*gclwh6_2*rxp1_2))+(((-1.0)*gclwh1_2*pp*pz*r20))+(((-0.19999972)*gclwh12_8*npy*pz))+(((0.01)*gclwh3_2*pz*r21))+(((-2.0)*gclwh14_2*npx*(pz*pz)))+(((-1.4e-7)*gclwh14_2*pp*r20))+(((2.8e-7)*gclwh14_2*npx*pz))+(((0.0009549999999804)*gclwh4_3*pp*r22))+(((-2.8e-7)*gclwh12_2*npy*pz))+(((1.4e-7)*gclwh1_2*pp*r20))+(((0.2)*pz))+(((-1.4e-9)*gclwh14_2*r20))+(((-0.0009549999999804)*gclwh14_3*pp*r20))+(((1.4e-7)*gclwh4_2*pp*r22))+(((0.01)*gclwh4_11*r22))+(((-1.0)*gclwh14_11*pp*r20))+(((2.8e-8)*gclwh10_2*rxp2_2))+(((-0.2)*gclwh6_11*rxp1_2))+(((9.0450000000196e-5)*gclwh14_3*r20))+(((9.0450000000196e-5)*gclwh1_3*r20))+(((-0.01)*gclwh4_2*pz*r22))+(((-0.09999986)*gclwh14_8*pp*r20))+(((0.2)*gclwh8_11*rxp0_2))+(((-9.0450000000196e-5)*gclwh4_3*r22))+((gclwh3_3*r21*(pp*pp)))+((gclwh1_3*r20*(pp*pp)))+(((0.09999986)*gclwh4_8*pp*r22))+(((0.2)*gclwh6_2*pz*rxp1_2))+(((0.0009999986)*gclwh4_8*r22))+(((2.0)*gclwh14_3*npx*pp*pz))+(((-2.0)*gclwh12_3*npy*pp*pz))+(((1.4e-9)*gclwh4_2*r22))+(((2.0)*gclwh14_11*npx*pz))+(((2.8e-8)*gclwh8_2*rxp0_2))+(((-0.0190450000000196)*gclwh1_3*pp*r20))+(((0.0180900000000392)*gclwh3_3*npy*pz))+(((-0.2)*gclwh8_2*pz*rxp0_2))+(((1.4e-9)*gclwh12_2*r21))+(((-1.0)*gclwh3_2*pp*pz*r21))+(((1.4e-7)*gclwh3_2*pp*r21))+(((-0.01)*gclwh12_2*pz*r21))+(((0.0180900000000392)*gclwh12_3*npy*pz))+(((-0.2)*gclwh10_2*pz*rxp2_2))+(((1.4e-7)*gclwh12_2*pp*r21))+(((0.0180900000000392)*gclwh4_3*npz*pz))+(((0.09999986)*gclwh12_8*pp*r21))+((gclwh4_3*r22*(pp*pp)))+(((2.0)*gclwh4_2*npz*(pz*pz)))+(((-1.0)*gclwh14_3*r20*(pp*pp)))+(((9.0450000000196e-5)*gclwh3_3*r21))+(((-2.8e-7)*gclwh3_2*npy*pz))+(((-2.0)*gclwh4_11*npz*pz))+(((-2.0)*gclwh1_3*npx*pp*pz))+((gclwh4_11*pp*r22))+(((-2.0)*gclwh3_3*npy*pp*pz))+(((-0.19999972)*gclwh4_8*npz*pz))+(((-1.4e-9)*gclwh1_2*r20))+(((-1.0)*gclwh4_2*pp*pz*r22))+(((-1.4e-9)*gclwh3_2*r21))+(((-0.0180900000000392)*gclwh14_3*npx*pz)));
op[18]=((0.68544499999998)+(((-0.01)*gclwh15_0*pz*r20))+(((-0.0067544500000002)*gclwh15_1*r20))+(((0.01)*gclwh13_0*pz*r21))+(((1.4e-7)*gclwh15_0*pp*r20))+(((-0.2)*gclwh11_10*rxp2_2))+(((0.01)*gclwh0_0*pz*r20))+(((-2.8e-8)*gclwh11_0*rxp2_2))+(((0.2)*gclwh11_0*pz*rxp2_2))+(((0.0067544500000002)*gclwh2_1*r21))+(((0.01)*gclwh2_0*pz*r21))+((gclwh15_1*r20*(pp*pp)))+(((1.4e-9)*gclwh15_0*r20))+(((2.0)*gclwh0_0*npx*(pz*pz)))+(((2.0)*gclwh2_0*npy*(pz*pz)))+(((2.8e-8)*gclwh7_0*rxp1_2))+(((1.35089000000004)*gclwh15_1*npx*pz))+((gclwh5_0*pp*pz*r22))+(((0.01)*gclwh5_0*pz*r22))+(((-1.4e-9)*gclwh13_0*r21))+(((2.8e-7)*gclwh5_0*npz*pz))+(((1.35089000000004)*gclwh2_1*npy*pz))+(((-1.0)*gclwh0_0*pp*pz*r20))+(((-0.19999972)*gclwh15_9*npx*pz))+(((2.0)*gclwh5_1*npz*pp*pz))+(((-2.0)*gclwh15_10*npx*pz))+((gclwh13_0*pp*pz*r21))+(((-1.4e-9)*gclwh5_0*r22))+(((2.8e-7)*gclwh13_0*npy*pz))+(((0.2)*pz))+(((-2.8e-7)*gclwh15_0*npx*pz))+(((-2.0)*gclwh13_0*npy*(pz*pz)))+(((0.0009999986)*gclwh15_9*r20))+(((-2.0)*gclwh15_1*npx*pp*pz))+(((-0.68544500000002)*gclwh2_1*pp*r21))+(((2.0)*gclwh13_1*npy*pp*pz))+(((0.2)*gclwh9_0*pz*rxp0_2))+(((1.4e-7)*gclwh0_0*pp*r20))+(((1.4e-7)*gclwh2_0*pp*r21))+(((-2.8e-8)*gclwh9_0*rxp0_2))+(((0.19999972)*gclwh5_9*npz*pz))+(((-1.0)*gclwh13_10*pp*r21))+(((-0.01)*gclwh13_10*r21))+(((-0.2)*gclwh7_0*pz*rxp1_2))+(((-1.0)*gclwh13_1*r21*(pp*pp)))+(((-2.0)*gclwh0_1*npx*pp*pz))+(((-2.0)*gclwh5_0*npz*(pz*pz)))+(((-1.4e-9)*gclwh2_0*r21))+(((0.2)*gclwh7_10*rxp1_2))+(((-1.0)*gclwh2_0*pp*pz*r21))+(((-1.0)*gclwh5_10*pp*r22))+(((-0.0009999986)*gclwh5_9*r22))+(((-0.2)*gclwh9_10*rxp0_2))+(((-0.0009999986)*gclwh13_9*r21))+(((-2.8e-7)*gclwh0_0*npx*pz))+(((0.0067544500000002)*gclwh5_1*r22))+(((-0.66544500000002)*gclwh15_1*pp*r20))+(((-1.4e-7)*gclwh5_0*pp*r22))+(((-1.35089000000004)*gclwh5_1*npz*pz))+(((1.35089000000004)*gclwh0_1*npx*pz))+(((0.01)*gclwh15_10*r20))+(((0.66544500000002)*gclwh13_1*pp*r21))+(((0.19999972)*gclwh13_9*npy*pz))+(((2.0)*gclwh15_0*npx*(pz*pz)))+(((-1.0)*gclwh5_1*r22*(pp*pp)))+((gclwh2_1*r21*(pp*pp)))+(((2.0)*gclwh5_10*npz*pz))+(((-0.09999986)*gclwh13_9*pp*r21))+(((-0.68544500000002)*gclwh0_1*pp*r20))+(((0.0067544500000002)*gclwh0_1*r20))+(((-2.8e-7)*gclwh2_0*npy*pz))+(((2.0)*gclwh13_10*npy*pz))+(((-1.0)*gclwh15_0*pp*pz*r20))+(((-1.4e-7)*gclwh13_0*pp*r21))+((gclwh15_10*pp*r20))+(((0.66544500000002)*gclwh5_1*pp*r22))+(((-1.4e-9)*gclwh0_0*r20))+(((-2.0)*gclwh2_1*npy*pp*pz))+(((0.09999986)*gclwh15_9*pp*r20))+(((-1.35089000000004)*gclwh13_1*npy*pz))+((gclwh0_1*r20*(pp*pp)))+(((0.0067544500000002)*gclwh13_1*r21))+(((-0.09999986)*gclwh5_9*pp*r22))+(((-0.01)*gclwh5_10*r22)));
op[19]=((-2.2876e-7)+(((0.817)*pp*x81))+(((1.634)*gclwh15_9*x65))+((gclwh13_9*x72))+(((-1.0)*gclwh11_13*x120))+(((-1.0)*gclwh9_13*x154))+(((0.817)*gclwh13_9*x64))+((gclwh7_13*x149))+(((-1.0)*x296))+(((-1.634)*gclwh5_9*x75))+(((0.00817)*x81))+x300+x203+(((-0.817)*gclwh15_9*x84))+(((-0.00817)*x102))+(((-1.634)*gclwh13_9*x68))+(((-1.0)*x307)));
op[20]=((-2.38e-7)+((x151*x84))+(((-1.0)*gclwh2_1*x71))+(((-1.7)*gclwh5_9*x75))+((gclwh11_0*x123))+(((-1.7)*gclwh13_9*x68))+(((1.7)*gclwh15_9*x65))+(((2.1952e-7)*gclwh2_1*x64))+(((-1.0)*gclwh7_0*x126))+((gclwh15_1*x90))+(((1.568)*gclwh15_0*x65))+(((2.1952e-7)*gclwh0_1*x84))+(((-0.784)*gclwh0_0*x84))+(((0.784)*gclwh5_0*x85))+(((-1.0)*x137*x64))+(((-1.0)*x142*x85))+(((-0.0085)*x102))+((gclwh5_0*x93))+(((-0.536)*gclwh15_15*x65))+(((1.568)*gclwh2_0*x68))+(((0.784)*gclwh13_0*x64))+((gclwh2_0*x70))+(((0.536)*gclwh13_15*x68))+(((-2.1952e-7)*gclwh5_1*x85))+(((0.85)*pp*x81))+((gclwh13_0*x70))+(((-1.0)*gclwh15_0*x156))+(((-2.1952e-7)*gclwh13_1*x64))+(((0.85)*gclwh13_9*x64))+(((-0.00268)*x153))+(((-0.85)*gclwh15_9*x84))+(((-0.784)*gclwh2_0*x64))+(((4.3904e-7)*gclwh5_1*x75))+(((-1.568)*gclwh5_0*x75))+(((-1.0)*gclwh0_1*x90))+(((0.536)*gclwh5_15*x75))+(((-1.0)*gclwh13_1*x71))+(((-4.3904e-7)*gclwh0_1*x65))+(((-0.784)*gclwh15_0*x84))+(((1.568)*gclwh0_0*x65))+((gclwh13_9*x113))+(((-1.568)*gclwh13_0*x68))+((gclwh0_0*x156))+(((-4.3904e-7)*gclwh15_1*x65))+(((-1.0)*gclwh5_1*x121))+(((0.0085)*x81))+((gclwh15_15*x91))+((gclwh9_0*x83))+(((2.1952e-7)*gclwh15_1*x84))+(((-4.3904e-7)*gclwh2_1*x68))+(((4.3904e-7)*gclwh13_1*x68))+(((-1.0)*gclwh5_15*x143)));
op[21]=((-0.0898339999999608)+((gclwh9_10*x145))+(((-2.0)*gclwh15_10*x84))+(((-2.8e-9)*x81))+(((2.0)*gclwh13_10*x64))+(((2.0)*gclwh5_10*x85))+(((-1.0)*gclwh7_10*x136))+(((5.6e-7)*gclwh13_9*x68))+(((4.0)*gclwh15_10*x65))+(((-4.0)*gclwh13_10*x68))+((gclwh11_10*x104))+(((5.6e-7)*gclwh5_9*x75))+(((2.8e-9)*x102))+(((-2.8e-7)*gclwh13_9*x64))+(((-1.0)*gclwh13_9*x125))+(((-5.6e-7)*gclwh15_9*x65))+(((-2.8e-7)*pp*x81))+((gclwh5_10*x69))+(((2.8e-7)*gclwh15_9*x84))+(((-1.0)*gclwh15_10*x107))+((gclwh13_10*x82))+(((-4.0)*gclwh5_10*x75)));
op[22]=((-0.0190449999999804)+(((-0.01)*gclwh15_0*pz*r20))+(((0.01)*gclwh13_0*pz*r21))+(((1.4e-7)*gclwh15_0*pp*r20))+(((-0.0180900000000392)*gclwh5_1*npz*pz))+(((-2.0)*gclwh5_10*npz*pz))+(((0.01)*gclwh0_0*pz*r20))+((gclwh5_10*pp*r22))+(((0.2)*gclwh11_10*rxp2_2))+(((9.0450000000196e-5)*gclwh13_1*r21))+(((-2.8e-8)*gclwh11_0*rxp2_2))+(((0.2)*gclwh11_0*pz*rxp2_2))+(((0.01)*gclwh2_0*pz*r21))+(((-0.10000014)*gclwh5_9*pp*r22))+((gclwh15_1*r20*(pp*pp)))+(((1.4e-9)*gclwh15_0*r20))+(((2.0)*gclwh0_0*npx*(pz*pz)))+(((2.0)*gclwh2_0*npy*(pz*pz)))+(((2.8e-8)*gclwh7_0*rxp1_2))+((gclwh5_0*pp*pz*r22))+(((9.0450000000196e-5)*gclwh2_1*r21))+(((0.01)*gclwh5_0*pz*r22))+(((-1.4e-9)*gclwh13_0*r21))+((gclwh13_10*pp*r21))+(((2.8e-7)*gclwh5_0*npz*pz))+(((9.0450000000196e-5)*gclwh0_1*r20))+(((0.0180900000000392)*gclwh15_1*npx*pz))+(((0.0180900000000392)*gclwh0_1*npx*pz))+(((-1.0)*gclwh0_0*pp*pz*r20))+(((2.0)*gclwh5_1*npz*pp*pz))+((gclwh13_0*pp*pz*r21))+(((-1.4e-9)*gclwh5_0*r22))+(((-0.0180900000000392)*gclwh13_1*npy*pz))+(((2.8e-7)*gclwh13_0*npy*pz))+(((0.2)*pz))+(((-0.01)*gclwh15_10*r20))+(((-9.0450000000196e-5)*gclwh15_1*r20))+(((0.0180900000000392)*gclwh2_1*npy*pz))+(((-2.8e-7)*gclwh15_0*npx*pz))+(((-2.0)*gclwh13_0*npy*(pz*pz)))+(((0.01)*gclwh13_10*r21))+(((-2.0)*gclwh15_1*npx*pp*pz))+(((0.01)*gclwh5_10*r22))+(((-2.0)*gclwh13_10*npy*pz))+(((-0.2)*gclwh7_10*rxp1_2))+(((2.0)*gclwh13_1*npy*pp*pz))+(((0.2)*gclwh9_0*pz*rxp0_2))+(((1.4e-7)*gclwh0_0*pp*r20))+(((-0.0009549999999804)*gclwh13_1*pp*r21))+(((1.4e-7)*gclwh2_0*pp*r21))+(((-2.8e-8)*gclwh9_0*rxp0_2))+(((-0.2)*gclwh7_0*pz*rxp1_2))+(((-0.0009549999999804)*gclwh5_1*pp*r22))+(((-1.0)*gclwh13_1*r21*(pp*pp)))+(((-2.0)*gclwh0_1*npx*pp*pz))+(((9.0450000000196e-5)*gclwh5_1*r22))+(((-2.0)*gclwh5_0*npz*(pz*pz)))+(((-1.4e-9)*gclwh2_0*r21))+(((-1.0)*gclwh2_0*pp*pz*r21))+(((-0.0190450000000196)*gclwh2_1*pp*r21))+(((-0.20000028)*gclwh15_9*npx*pz))+(((0.20000028)*gclwh5_9*npz*pz))+(((-2.8e-7)*gclwh0_0*npx*pz))+(((-1.4e-7)*gclwh5_0*pp*r22))+(((2.0)*gclwh15_10*npx*pz))+(((2.0)*gclwh15_0*npx*(pz*pz)))+(((-1.0)*gclwh5_1*r22*(pp*pp)))+(((-1.0)*gclwh15_10*pp*r20))+(((0.2)*gclwh9_10*rxp0_2))+((gclwh2_1*r21*(pp*pp)))+(((0.0010000014)*gclwh15_9*r20))+(((0.20000028)*gclwh13_9*npy*pz))+(((-2.8e-7)*gclwh2_0*npy*pz))+(((-0.0190450000000196)*gclwh0_1*pp*r20))+(((-1.0)*gclwh15_0*pp*pz*r20))+(((-0.10000014)*gclwh13_9*pp*r21))+(((-1.4e-7)*gclwh13_0*pp*r21))+(((-1.4e-9)*gclwh0_0*r20))+(((-2.0)*gclwh2_1*npy*pp*pz))+(((0.10000014)*gclwh15_9*pp*r20))+(((0.0009549999999804)*gclwh15_1*pp*r20))+((gclwh0_1*r20*(pp*pp)))+(((-0.0010000014)*gclwh5_9*r22))+(((-0.0010000014)*gclwh13_9*r21)));
op[23]=((9.24e-9)+((gclwh7_13*x105))+(((-0.00033)*x81))+(((-1.0)*x296))+(((-1.0)*gclwh11_13*x87))+(((0.066)*gclwh5_9*x75))+(((-1.0)*gclwh9_13*x116))+x307+x203+(((0.033)*gclwh15_9*x84))+(((-1.0)*gclwh13_9*x118))+(((-0.033)*pp*x81))+(((0.066)*gclwh13_9*x68))+(((-0.033)*gclwh13_9*x64))+((gclwh15_9*x88))+(((-1.0)*x300))+(((-0.066)*gclwh15_9*x65)));
op[24]=((-0.437912)+(((-2.8e-9)*gclwh8_12*r20))+(((5.6e-7)*gclwh8_12*x65))+(((-2.8e-9)*x108))+(((-2.8e-7)*gclwh8_12*x84))+(((5.6e-7)*gclwh10_12*x75))+((gclwh6_12*x125))+(((2.8e-7)*gclwh6_12*x64))+x310+(((-5.6e-7)*gclwh6_12*x68))+(((-1.0)*x309))+(((-2.8e-7)*gclwh10_12*x85)));
IkReal x315=pz*pz;
IkReal x316=(pp*r21);
IkReal x317=((0.2)*rxp1_2);
IkReal x318=((0.00134)*r22);
IkReal x319=(pp*r20);
IkReal x320=((0.02)*r21);
IkReal x321=(gclwh5_0*r22);
IkReal x322=((0.0132)*rxp2_2);
IkReal x323=(npy*pz);
IkReal x324=((2.0)*gclwh7_10);
IkReal x325=((0.02)*r22);
IkReal x326=((0.00784)*r21);
IkReal x327=(pp*r22);
IkReal x328=((0.2)*rxp2_2);
IkReal x329=(gclwh12_8*r21);
IkReal x330=(npz*pz);
IkReal x331=((2.0)*gclwh11_10);
IkReal x332=((0.2)*rxp0_2);
IkReal x333=((0.00784)*r22);
IkReal x334=(npx*pz);
IkReal x335=(gclwh6_12*rxp1_2);
IkReal x336=((1.0)*pz);
IkReal x337=((4.0)*gclwh12_11);
IkReal x338=((0.1568)*rxp0_2);
IkReal x339=(gclwh10_12*rxp2_2);
IkReal x340=((0.00066)*r20);
IkReal x341=(gclwh13_1*rxp1_2);
IkReal x342=((0.536)*gclwh15_15);
IkReal x343=(gclwh9_0*r20);
IkReal x344=((0.536)*gclwh5_15);
IkReal x345=(gclwh14_8*r20);
IkReal x346=(gclwh11_0*pz);
IkReal x347=((0.3268)*rxp1_2);
IkReal x348=((2.0)*gclwh9_10);
IkReal x349=((0.3136)*rxp0_2);
IkReal x350=((4.0)*gclwh14_11);
IkReal x351=((0.0132)*rxp1_2);
IkReal x352=(gclwh15_15*r20);
IkReal x353=(gclwh10_12*r22);
IkReal x354=((0.268)*gclwh14_14);
IkReal x355=(gclwh12_14*r21);
IkReal x356=(gclwh11_10*r22);
IkReal x357=(gclwh15_1*rxp0_2);
IkReal x358=((2.0)*gclwh10_11);
IkReal x359=((0.00066)*r21);
IkReal x360=((0.01634)*r21);
IkReal x361=((0.0132)*rxp0_2);
IkReal x362=(gclwh11_0*r22);
IkReal x363=((0.0066)*rxp1_2);
IkReal x364=(gclwh5_9*rxp2_2);
IkReal x365=(gclwh4_8*rxp2_2);
IkReal x366=((0.00817)*r22);
IkReal x367=((0.0268)*rxp2_2);
IkReal x368=((0.02)*r20);
IkReal x369=((0.4)*rxp2_2);
IkReal x370=(gclwh9_10*r20);
IkReal x371=((0.8)*rxp1_2);
IkReal x372=((4.0)*gclwh15_10);
IkReal x373=(gclwh14_8*rxp0_2);
IkReal x374=((0.8)*rxp0_2);
IkReal x375=((2.1952e-9)*r21);
IkReal x376=(gclwh12_8*rxp1_2);
IkReal x377=((4.0)*gclwh8_11);
IkReal x378=(gclwh8_12*r20);
IkReal x379=((0.00134)*r20);
IkReal x380=((0.01)*r21);
IkReal x381=(gclwh15_0*rxp0_2);
IkReal x382=(gclwh10_2*r22);
IkReal x383=(gclwh7_13*r21);
IkReal x384=(gclwh13_9*rxp1_2);
IkReal x385=(gclwh6_12*r21);
IkReal x386=((0.536)*gclwh14_14);
IkReal x387=((0.0536)*rxp1_2);
IkReal x388=((1.4e-9)*r21);
IkReal x389=(gclwh5_15*r22);
IkReal x390=((4.0)*gclwh9_10);
IkReal x391=(gclwh10_11*r22);
IkReal x392=(gclwh5_0*rxp2_2);
IkReal x393=((0.8)*rxp2_2);
IkReal x394=((0.04)*r22);
IkReal x395=((4.0)*gclwh7_10);
IkReal x396=(gclwh14_3*rxp0_2);
IkReal x397=(gclwh13_0*rxp1_2);
IkReal x398=(gclwh11_13*rxp2_2);
IkReal x399=((0.01634)*r20);
IkReal x400=(gclwh5_1*rxp2_2);
IkReal x401=((4.0)*gclwh4_11);
IkReal x402=((0.04)*r21);
IkReal x403=(gclwh15_9*rxp0_2);
IkReal x404=((0.268)*gclwh4_14);
IkReal x405=(gclwh8_2*r20);
IkReal x406=((2.0)*gclwh6_11);
IkReal x407=((0.00134)*r21);
IkReal x408=(gclwh9_13*r20);
IkReal x409=((0.0268)*rxp0_2);
IkReal x410=((0.3268)*rxp0_2);
IkReal x411=((0.1568)*rxp2_2);
IkReal x412=(gclwh13_15*rxp1_2);
IkReal x413=((0.536)*gclwh13_15);
IkReal x414=((0.00033)*r22);
IkReal x415=((0.1568)*rxp1_2);
IkReal x416=((0.4)*rxp1_2);
IkReal x417=((0.01)*pz);
IkReal x418=(gclwh7_13*rxp1_2);
IkReal x419=((2.1952e-9)*r20);
IkReal x420=(gclwh8_12*rxp0_2);
IkReal x421=((2.0)*gclwh8_11);
IkReal x422=(gclwh4_14*rxp2_2);
IkReal x423=((4.0)*gclwh11_10);
IkReal x424=(gclwh4_8*r22);
IkReal x425=(gclwh4_3*rxp2_2);
IkReal x426=((4.0)*gclwh5_10);
IkReal x427=(gclwh14_14*r20);
IkReal x428=((4.0)*gclwh10_11);
IkReal x429=((4.0)*gclwh6_11);
IkReal x430=(gclwh12_3*rxp1_2);
IkReal x431=((0.4)*rxp0_2);
IkReal x432=((0.04)*r20);
IkReal x433=((0.3268)*rxp2_2);
IkReal x434=(gclwh13_15*r21);
IkReal x435=(gclwh4_14*r22);
IkReal x436=((0.536)*gclwh12_14);
IkReal x437=(gclwh12_14*rxp1_2);
IkReal x438=(gclwh11_13*r22);
IkReal x439=((0.536)*gclwh4_14);
IkReal x440=(gclwh5_15*rxp2_2);
IkReal x441=(gclwh14_14*rxp0_2);
IkReal x442=((0.00784)*r20);
IkReal x443=((4.0)*gclwh13_10);
IkReal x444=(gclwh15_15*rxp0_2);
IkReal x445=(gclwh4_2*r22);
IkReal x446=((0.268)*gclwh12_14);
IkReal x447=(gclwh12_14*x387);
IkReal x448=((0.0536)*x422);
IkReal x449=((0.0536)*x441);
IkReal x450=((0.0536)*x444);
IkReal x451=(gclwh13_15*x387);
IkReal x452=((0.0536)*x440);
IkReal x453=(gclwh13_10*x416);
IkReal x454=(gclwh7_10*x320);
IkReal x455=((2.8e-9)*x383);
IkReal x456=(gclwh5_10*x369);
IkReal x457=(gclwh11_10*x325);
IkReal x458=((2.8e-9)*x438);
IkReal x459=((2.8e-9)*x408);
IkReal x460=(gclwh15_10*x431);
IkReal x461=(gclwh9_10*x368);
IkReal x462=((5.6e-8)*x420);
IkReal x463=((5.6e-8)*x339);
IkReal x464=(gclwh4_11*x325);
IkReal x465=(gclwh12_11*x320);
IkReal x466=(gclwh10_11*x369);
IkReal x467=(gclwh8_11*x431);
IkReal x468=((5.6e-8)*x335);
IkReal x469=(gclwh14_11*x368);
IkReal x470=(gclwh6_11*x416);
IkReal x471=((0.00268)*x355);
IkReal x472=((0.00268)*x435);
IkReal x473=((0.00268)*x427);
IkReal x474=((0.00268)*x389);
IkReal x475=((0.00268)*x434);
IkReal x476=((0.00268)*x352);
IkReal x477=((5.6e-8)*x418);
IkReal x478=(gclwh7_10*x416);
IkReal x479=(gclwh15_10*x368);
IkReal x480=((5.6e-8)*gclwh9_13*rxp0_2);
IkReal x481=(gclwh9_10*x431);
IkReal x482=(gclwh5_10*x325);
IkReal x483=(gclwh11_10*x369);
IkReal x484=(gclwh13_10*x320);
IkReal x485=((5.6e-8)*x398);
IkReal x486=(gclwh4_11*x369);
IkReal x487=(gclwh6_11*x320);
IkReal x488=(gclwh12_11*x416);
IkReal x489=(gclwh14_11*x431);
IkReal x490=(gclwh10_11*x325);
IkReal x491=(gclwh8_11*x368);
IkReal x492=(gclwh4_14*x367);
IkReal x493=(gclwh6_5*x407);
IkReal x494=((0.0268)*x437);
IkReal x495=(gclwh14_14*x409);
IkReal x496=(gclwh10_5*x318);
IkReal x497=(gclwh8_5*x379);
IkReal x498=((0.01)*gclwh8_11*r20);
IkReal x499=((1.4e-9)*x382);
IkReal x500=((0.01)*x391);
IkReal x501=(gclwh14_11*x332);
IkReal x502=((2.8e-8)*gclwh14_2*rxp0_2);
IkReal x503=((1.4e-9)*x405);
IkReal x504=((2.8e-8)*gclwh12_2*rxp1_2);
IkReal x505=((2.8e-8)*gclwh4_2*rxp2_2);
IkReal x506=(gclwh12_11*x317);
IkReal x507=(gclwh6_2*x388);
IkReal x508=(gclwh4_11*x328);
IkReal x509=(gclwh6_11*x380);
IkReal x510=(gclwh7_10*x380);
IkReal x511=((2.8e-8)*x381);
IkReal x512=(gclwh5_10*x328);
IkReal x513=((1.4e-9)*x362);
IkReal x514=(gclwh13_10*x317);
IkReal x515=((1.4e-9)*x343);
IkReal x516=((2.8e-8)*x392);
IkReal x517=((2.8e-8)*x397);
IkReal x518=((0.01)*x356);
IkReal x519=(gclwh7_0*x388);
IkReal x520=(gclwh15_10*x332);
IkReal x521=((0.01)*x370);
IkReal x522=((0.0268)*x412);
IkReal x523=(gclwh5_15*x367);
IkReal x524=(gclwh7_7*x407);
IkReal x525=(gclwh15_15*x409);
IkReal x526=(gclwh9_7*x379);
IkReal x527=(gclwh11_7*x318);
IkReal x528=((0.00134)*x355);
IkReal x529=(gclwh8_5*x409);
IkReal x530=(gclwh10_5*x367);
IkReal x531=(gclwh4_14*x318);
IkReal x532=((0.0268)*gclwh6_5*rxp1_2);
IkReal x533=(gclwh14_14*x379);
IkReal x534=((2.0)*x315);
IkReal x535=((5.6e-7)*gclwh11_13*x330);
IkReal x536=((2.8e-7)*gclwh7_13*x316);
IkReal x537=((5.6e-7)*gclwh9_13*x334);
IkReal x538=(x316*x324);
IkReal x539=(x334*x390);
IkReal x540=(x330*x423);
IkReal x541=((2.8e-7)*gclwh11_13*x327);
IkReal x542=((5.6e-7)*gclwh7_13*x323);
IkReal x543=(x327*x331);
IkReal x544=((2.8e-7)*gclwh9_13*x319);
IkReal x545=(x323*x395);
IkReal x546=(x319*x348);
IkReal x547=((2.0)*gclwh4_11*x327);
IkReal x548=((2.0)*gclwh12_11*x316);
IkReal x549=(x334*x350);
IkReal x550=((2.0)*gclwh14_11*x319);
IkReal x551=(x323*x337);
IkReal x552=(x330*x401);
IkReal x553=(x316*x446);
IkReal x554=(x334*x386);
IkReal x555=(x327*x404);
IkReal x556=(x330*x439);
IkReal x557=(x319*x354);
IkReal x558=(x323*x436);
IkReal x559=((0.268)*gclwh13_15*x316);
IkReal x560=((0.268)*gclwh5_15*x327);
IkReal x561=(x334*x342);
IkReal x562=((0.268)*gclwh15_15*x319);
IkReal x563=(x330*x344);
IkReal x564=(x323*x413);
IkReal x565=((2.0)*gclwh15_10*x319);
IkReal x566=(x330*x426);
IkReal x567=(x323*x443);
IkReal x568=((2.0)*gclwh13_10*x316);
IkReal x569=(x334*x372);
IkReal x570=((2.0)*gclwh5_10*x327);
IkReal x571=(x334*x377);
IkReal x572=(x316*x406);
IkReal x573=(x330*x428);
IkReal x574=(x319*x421);
IkReal x575=(x327*x358);
IkReal x576=(x323*x429);
IkReal x577=((0.134)*gclwh6_5*x316);
IkReal x578=((0.268)*gclwh10_5*x330);
IkReal x579=((0.268)*gclwh8_5*x334);
IkReal x580=((0.268)*gclwh6_5*x323);
IkReal x581=((0.134)*gclwh8_5*x319);
IkReal x582=((0.134)*gclwh10_5*x327);
IkReal x583=((2.8e-7)*gclwh6_2*x323);
IkReal x584=(gclwh14_2*pz*x332);
IkReal x585=(x323*x406);
IkReal x586=(gclwh10_2*pz*x327);
IkReal x587=(x382*x417);
IkReal x588=(gclwh12_3*pp*x317);
IkReal x589=(gclwh8_2*pz*x319);
IkReal x590=((1.4e-7)*gclwh10_2*x327);
IkReal x591=(gclwh4_3*pp*x328);
IkReal x592=(x405*x417);
IkReal x593=((1.4e-7)*gclwh8_2*x319);
IkReal x594=(gclwh12_2*pz*x317);
IkReal x595=((2.8e-7)*gclwh10_2*x330);
IkReal x596=(gclwh14_3*pp*x332);
IkReal x597=(gclwh4_2*pz*x328);
IkReal x598=(x330*x358);
IkReal x599=((1.4e-7)*gclwh6_2*x316);
IkReal x600=(gclwh6_2*pz*x380);
IkReal x601=(x334*x421);
IkReal x602=((2.8e-7)*gclwh8_2*x334);
IkReal x603=(x330*x331);
IkReal x604=(x334*x348);
IkReal x605=(gclwh13_1*pp*x317);
IkReal x606=((2.8e-7)*gclwh7_0*x323);
IkReal x607=(x327*x346);
IkReal x608=(gclwh5_1*pp*x328);
IkReal x609=((1.4e-7)*gclwh11_0*x327);
IkReal x610=(gclwh15_0*pz*x332);
IkReal x611=((0.01)*r22*x346);
IkReal x612=(x343*x417);
IkReal x613=((1.4e-7)*gclwh9_0*x319);
IkReal x614=(gclwh9_0*pz*x319);
IkReal x615=(gclwh15_1*pp*x332);
IkReal x616=(gclwh5_0*pz*x328);
IkReal x617=(gclwh13_0*pz*x317);
IkReal x618=(gclwh7_0*pz*x380);
IkReal x619=((2.8e-7)*gclwh9_0*x334);
IkReal x620=((2.8e-7)*gclwh11_0*x330);
IkReal x621=((1.4e-7)*gclwh7_0*x316);
IkReal x622=(x323*x324);
IkReal x623=((0.268)*gclwh9_7*x334);
IkReal x624=((0.134)*gclwh7_7*x316);
IkReal x625=((0.268)*gclwh11_7*x330);
IkReal x626=((0.134)*gclwh11_7*x327);
IkReal x627=((0.268)*gclwh7_7*x323);
IkReal x628=((0.134)*gclwh9_7*x319);
IkReal x629=((0.134)*gclwh12_14*x316);
IkReal x630=(x334*x354);
IkReal x631=((0.134)*gclwh4_14*x327);
IkReal x632=(x323*x446);
IkReal x633=((0.134)*gclwh14_14*x319);
IkReal x634=(x330*x404);
IkReal x635=(gclwh6_2*npy*x534);
IkReal x636=(gclwh6_2*x316*x336);
IkReal x637=(gclwh10_2*npz*x534);
IkReal x638=(gclwh8_2*npx*x534);
IkReal x639=(gclwh7_0*npy*x534);
IkReal x640=(gclwh9_0*npx*x534);
IkReal x641=(gclwh11_0*npz*x534);
IkReal x642=(gclwh7_0*x316*x336);
IkReal x643=(x448+x447);
IkReal x644=(x522+x523);
IkReal x645=(x480+x485);
IkReal x646=(x452+x451);
IkReal x647=(x530+x529);
IkReal x648=(x492+x494);
IkReal x649=(x463+x462);
IkReal x650=(x498+x500+x501+x585);
IkReal x651=(x520+x521+x518+x622);
IkReal x652=(x473+x558+x557+x556);
IkReal x653=(x455+x535+x537+x536);
IkReal x654=(x476+x564+x562+x563);
IkReal x655=(x533+x634+x632+x633);
IkReal x656=((-3.752e-8)+x493+x579+x578+x577);
IkReal x657=((-3.752e-8)+x524+x625+x624+x623);
IkReal x658=(x508+x509+x506+x598+x601);
IkReal x659=(x514+x512+x510+x603+x604);
IkReal x660=(x526+x527+x627+x626+x628);
IkReal x661=(x478+x479+x566+x567+x565);
IkReal x662=(x471+x472+x553+x555+x554);
IkReal x663=(x531+x528+x629+x630+x631);
IkReal x664=(x496+x497+x580+x581+x582);
IkReal x665=(x469+x470+x552+x551+x550);
IkReal x666=(x458+x459+x544+x541+x542);
IkReal x667=(x474+x475+x559+x560+x561);
IkReal x668=(x456+x454+x453+x540+x539+x538);
IkReal x669=(x488+x487+x486+x571+x573+x572);
IkReal x670=(x457+x461+x460+x545+x546+x543);
IkReal x671=(x489+x490+x491+x575+x574+x576);
IkReal x672=(x467+x466+x465+x464+x547+x548+x549);
IkReal x673=(x481+x483+x482+x484+x570+x568+x569);
IkReal x674=(x504+x505+x507+x597+x596+x595+x594+x599+x602+x600+x636+x637+x638);
IkReal x675=(x519+x517+x516+x642+x641+x640+x618+x619+x615+x616+x617+x621+x620);
IkReal x676=(x499+x502+x503+x583+x584+x586+x587+x588+x589+x593+x592+x591+x590+x635);
IkReal x677=(x515+x513+x511+x607+x606+x605+x609+x608+x614+x610+x611+x612+x613+x639);
op[25]=(((gclwh8_2*x399))+(((-1.634)*gclwh6_2*x316))+((gclwh14_2*x410))+(((-1.0)*gclwh12_2*x347))+(((0.01634)*x382))+(((-1.0)*x643))+x449+(((-1.0)*gclwh4_2*x433))+(((-3.268)*gclwh10_2*x330))+(((-1.0)*gclwh6_2*x360))+(((-3.268)*gclwh8_2*x334))+(((1.634)*gclwh10_2*x327))+(((3.268)*gclwh6_2*x323))+(((1.634)*gclwh8_2*x319)));
op[26]=((((3.136)*gclwh6_12*x323))+(((-0.01568)*x385))+(((0.01568)*x378))+(((0.1072)*x441))+(((1.568)*gclwh10_12*x327))+(((-3.136)*gclwh8_12*x334))+(((0.01568)*x353))+(((-1.568)*gclwh6_12*x316))+(((-0.1072)*x437))+(((-3.136)*gclwh10_12*x330))+(((-0.1072)*x422))+(((1.568)*gclwh8_12*x319)));
op[27]=((((-1.0)*x327*x428))+((gclwh6_11*x402))+(((-0.04)*x391))+((gclwh12_11*x371))+(((-1.0)*gclwh8_11*x432))+(((-1.0)*gclwh14_11*x374))+(((8.0)*gclwh8_11*x334))+((x316*x429))+(((-1.0)*x319*x377))+(((-8.0)*gclwh6_11*x323))+(((8.0)*gclwh10_11*x330))+((gclwh4_11*x393)));
op[28]=((-0.017688)+(((-5.6e-7)*gclwh6_12*x323))+(((-2.8e-7)*gclwh10_12*x327))+(((2.8e-9)*x385))+(((2.8e-7)*gclwh6_12*x316))+(((-2.8e-7)*gclwh8_12*x319))+(((5.6e-7)*gclwh8_12*x334))+x669+(((-2.8e-9)*x353))+(((-2.8e-9)*x378))+(((5.6e-7)*gclwh10_12*x330))+(((-1.0)*x671)));
op[29]=((((-1.0)*x449))+(((0.066)*gclwh10_2*x327))+(((0.066)*gclwh8_2*x319))+((gclwh14_2*x361))+(((-1.0)*gclwh12_2*x351))+(((-1.0)*gclwh4_2*x322))+((gclwh8_2*x340))+(((-0.066)*gclwh6_2*x316))+(((0.00066)*x382))+x643+(((0.132)*gclwh6_2*x323))+(((-0.132)*gclwh10_2*x330))+(((-0.132)*gclwh8_2*x334))+(((-1.0)*gclwh6_2*x359)));
op[30]=((((1.634)*gclwh9_0*x319))+(((-1.0)*gclwh13_0*x347))+(((3.268)*gclwh7_0*x323))+(((-3.268)*gclwh9_0*x334))+(((-1.0)*x450))+(((0.01634)*x343))+(((1.634)*gclwh11_0*x327))+(((-1.0)*gclwh7_0*x360))+(((0.01634)*x362))+(((-0.3268)*x392))+x646+(((-1.634)*gclwh7_0*x316))+(((0.3268)*x381))+(((-3.268)*gclwh11_0*x330)));
op[31]=((-0.437912)+(((-1.0)*x666))+(((-1.0)*x668))+x653+x670);
op[32]=((((0.04)*x370))+(((-1.0)*gclwh7_10*x402))+(((-1.0)*gclwh5_10*x393))+(((-1.0)*gclwh13_10*x371))+((gclwh15_10*x374))+(((8.0)*gclwh7_10*x323))+(((0.04)*x356))+((x327*x423))+(((-8.0)*gclwh9_10*x334))+(((-8.0)*gclwh11_10*x330))+((x319*x390))+(((-1.0)*x316*x395)));
op[33]=((((-0.01568)*x383))+(((0.1072)*x444))+(((-3.136)*gclwh9_13*x334))+(((0.01568)*x438))+(((-0.1072)*x440))+(((0.01568)*x408))+(((-1.568)*gclwh7_13*x316))+(((3.136)*gclwh7_13*x323))+(((1.568)*gclwh11_13*x327))+(((1.568)*gclwh9_13*x319))+(((-0.1072)*x412))+(((-3.136)*gclwh11_13*x330)));
op[34]=((((-0.132)*gclwh11_0*x330))+(((-1.0)*gclwh5_0*x322))+(((0.00066)*x362))+(((0.066)*gclwh9_0*x319))+((gclwh15_0*x361))+(((-1.0)*x646))+x450+(((0.066)*gclwh11_0*x327))+(((0.132)*gclwh7_0*x323))+((gclwh9_0*x340))+(((-0.066)*gclwh7_0*x316))+(((-1.0)*gclwh7_0*x359))+(((-0.132)*gclwh9_0*x334))+(((-1.0)*gclwh13_0*x351)));
op[35]=((-0.017688)+(((-1.0)*x666))+x653+x668+(((-1.0)*x670)));
op[36]=((1.29906599999996)+(((-1.0)*x468))+x649+x665+(((-1.0)*x672)));
op[37]=((-4.5752e-7)+(((-1.634)*gclwh1_2*x319))+((gclwh14_2*x399))+(((-3.268)*gclwh14_2*x334))+((gclwh6_2*x347))+(((-1.0)*gclwh10_2*x433))+(((-0.01634)*x445))+(((3.268)*gclwh4_2*x330))+(((3.268)*gclwh3_2*x323))+(((-1.634)*gclwh3_2*x316))+(((1.634)*gclwh14_2*x319))+(((-1.0)*gclwh12_2*x360))+(((3.268)*gclwh1_2*x334))+((gclwh3_2*x360))+(((-1.0)*x662))+x652+((gclwh1_2*x399))+(((-1.634)*gclwh4_2*x327))+(((-1.634)*gclwh12_2*x316))+(((3.268)*gclwh12_2*x323))+(((-1.0)*gclwh8_2*x410)));
op[38]=((-4.76e-7)+(((1.072)*gclwh12_14*x323))+(((1.072)*gclwh4_14*x330))+(((-1.0)*gclwh8_12*x349))+((x319*x386))+(((-0.3136)*x339))+(((-1.0)*x316*x436))+(((-0.00536)*x435))+(((0.00536)*x427))+(((-1.0)*x327*x439))+(((0.3136)*x335))+(((-1.072)*gclwh14_14*x334))+(((-0.00536)*x355)));
op[39]=((-0.0360199999999216)+((x327*x401))+((gclwh8_11*x374))+(((-1.0)*gclwh6_11*x371))+((x316*x337))+(((8.0)*gclwh14_11*x334))+(((-8.0)*gclwh12_11*x323))+(((-1.0)*x319*x350))+((gclwh10_11*x393))+((gclwh12_11*x402))+(((-1.0)*gclwh14_11*x432))+(((-8.0)*gclwh4_11*x330))+((gclwh4_11*x394)));
op[40]=((0.0337340000000392)+(((-1.0)*x468))+(((-1.0)*x665))+x649+x672);
op[41]=((1.848e-8)+(((0.066)*gclwh14_2*x319))+(((-1.0)*gclwh12_2*x359))+(((-1.0)*gclwh10_2*x322))+((gclwh3_2*x359))+(((0.132)*gclwh12_2*x323))+((gclwh14_2*x340))+(((-0.066)*gclwh3_2*x316))+((gclwh6_2*x351))+(((-0.066)*gclwh12_2*x316))+(((-1.0)*x652))+(((-0.132)*gclwh14_2*x334))+(((-0.066)*gclwh1_2*x319))+(((0.132)*gclwh3_2*x323))+x662+(((0.132)*gclwh4_2*x330))+(((-0.00066)*x445))+(((-0.066)*gclwh4_2*x327))+(((-1.0)*gclwh8_2*x361))+((gclwh1_2*x340))+(((0.132)*gclwh1_2*x334)));
op[42]=((4.5752e-7)+(((-3.268)*gclwh5_0*x330))+(((-1.0)*gclwh7_0*x347))+((gclwh2_0*x360))+((gclwh11_0*x433))+(((-1.634)*gclwh0_0*x319))+(((1.634)*gclwh13_0*x316))+(((3.268)*gclwh2_0*x323))+((gclwh9_0*x410))+((gclwh13_0*x360))+(((-1.0)*x667))+(((3.268)*gclwh15_0*x334))+x654+(((-1.634)*gclwh15_0*x319))+(((1.634)*pp*x321))+(((-1.634)*gclwh2_0*x316))+(((0.01634)*x321))+(((-3.268)*gclwh13_0*x323))+(((3.268)*gclwh0_0*x334))+(((-1.0)*gclwh15_0*x399))+((gclwh0_0*x399)));
op[43]=((1.29906599999996)+(((-1.0)*x645))+x477+(((-1.0)*x661))+x673);
op[44]=((0.0360199999999216)+(((-1.0)*gclwh7_10*x371))+((x316*x443))+((gclwh11_10*x393))+((gclwh13_10*x402))+(((8.0)*gclwh15_10*x334))+(((-1.0)*x319*x372))+((x327*x426))+((gclwh9_10*x374))+((gclwh5_10*x394))+(((-8.0)*gclwh13_10*x323))+(((-8.0)*gclwh5_10*x330))+(((-1.0)*gclwh15_10*x432)));
op[45]=((-4.76e-7)+((x327*x344))+(((-1.072)*gclwh13_15*x323))+((gclwh9_13*x349))+(((1.072)*gclwh15_15*x334))+(((-1.072)*gclwh5_15*x330))+(((0.3136)*x398))+(((-0.3136)*x418))+(((-1.0)*x319*x342))+(((0.00536)*x434))+((x316*x413))+(((-0.00536)*x352))+(((0.00536)*x389)));
op[46]=((-1.848e-8)+(((0.132)*gclwh15_0*x334))+(((-0.132)*gclwh5_0*x330))+((gclwh9_0*x361))+(((-1.0)*gclwh15_0*x340))+(((-0.066)*gclwh0_0*x319))+(((0.066)*gclwh13_0*x316))+(((-1.0)*x654))+((gclwh13_0*x359))+(((-0.132)*gclwh13_0*x323))+((gclwh2_0*x359))+((gclwh0_0*x340))+x667+(((0.132)*gclwh0_0*x334))+((gclwh11_0*x322))+(((-1.0)*gclwh7_0*x351))+(((0.00066)*x321))+(((-0.066)*gclwh2_0*x316))+(((-0.066)*gclwh15_0*x319))+(((0.132)*gclwh2_0*x323))+(((0.066)*pp*x321)));
op[47]=((0.0337340000000392)+(((-1.0)*x645))+x477+x661+(((-1.0)*x673)));
op[48]=((((0.817)*gclwh8_12*x319))+(((-0.00817)*x385))+(((0.00817)*x378))+(((-0.1634)*x365))+(((-0.817)*gclwh6_12*x316))+(((-0.1634)*x376))+(((-1.0)*x648))+x495+(((-1.0)*x664))+(((0.817)*gclwh10_12*x327))+x656+(((-1.634)*gclwh8_12*x334))+(((0.1634)*x373))+(((0.00817)*x353))+(((1.634)*gclwh6_12*x323))+(((-1.634)*gclwh10_12*x330)));
op[49]=((((-1.0)*gclwh10_11*x327))+(((-0.135089000000004)*x425))+(((0.020000028)*x365))+(((0.020000028)*x376))+(((-0.135089000000004)*x430))+(((-1.0)*x650))+(((-1.0)*gclwh8_11*x319))+x658+x676+(((0.135089000000004)*x396))+(((-0.020000028)*x373))+(((-1.0)*x674))+((gclwh6_11*x316)));
op[50]=((0.210112)+(((5.6e-8)*x365))+(((5.6e-8)*x376))+x669+(((-5.6e-8)*x373))+(((-1.0)*x671)));
op[51]=((((4.3904e-8)*x425))+(((-1.0)*x449))+(((-1.0)*gclwh10_2*x333))+(((1.568)*gclwh8_2*x334))+(((-4.3904e-8)*x396))+(((0.17)*x376))+((gclwh6_2*x326))+(((0.17)*x365))+(((-0.784)*gclwh10_2*x327))+(((0.784)*gclwh6_2*x316))+((gclwh4_2*x411))+((gclwh12_2*x415))+(((-0.17)*x373))+(((-1.568)*gclwh6_2*x323))+(((1.568)*gclwh10_2*x330))+x643+(((-1.0)*gclwh14_2*x338))+(((4.3904e-8)*x430))+(((-0.784)*gclwh8_2*x319))+(((-0.00784)*x405)));
op[52]=((((-0.066)*gclwh8_12*x334))+((gclwh12_8*x363))+(((-1.0)*x495))+(((-0.066)*gclwh10_12*x330))+(((0.033)*gclwh8_12*x319))+(((-0.0066)*x373))+(((-0.00033)*x385))+(((0.066)*gclwh6_12*x323))+(((-1.0)*x664))+x648+x656+(((0.00033)*x378))+(((0.00033)*x353))+(((0.033)*gclwh10_12*x327))+(((0.0066)*x365))+(((-0.033)*gclwh6_12*x316)));
op[53]=(((gclwh8_11*x319))+(((-0.019999972)*x373))+(((-0.00180900000000392)*x430))+(((0.00180900000000392)*x396))+(((-0.00180900000000392)*x425))+(((-1.0)*x658))+((gclwh10_11*x327))+(((0.019999972)*x365))+(((0.019999972)*x376))+x650+x676+(((-1.0)*gclwh6_11*x316))+(((-1.0)*x674)));
op[54]=(((gclwh11_10*x327))+(((0.135089000000004)*x357))+(((0.019999972)*x384))+(((-1.0)*x659))+(((-0.135089000000004)*x341))+(((-0.135089000000004)*x400))+(((0.019999972)*x364))+x651+x677+(((-0.019999972)*x403))+((gclwh9_10*x319))+(((-1.0)*x675))+(((-1.0)*gclwh7_10*x316)));
op[55]=((((1.634)*gclwh7_13*x323))+(((0.817)*gclwh11_13*x327))+(((-0.00817)*x383))+((gclwh11_13*x366))+(((-1.634)*gclwh11_13*x330))+(((0.00817)*x408))+(((-0.1634)*x364))+(((-0.817)*gclwh7_13*x316))+(((-1.0)*x644))+(((-1.634)*gclwh9_13*x334))+(((0.817)*gclwh9_13*x319))+(((-1.0)*x660))+x525+x657+(((0.1634)*x403))+(((-0.1634)*x384)));
op[56]=((((-0.784)*gclwh9_0*x319))+(((4.3904e-8)*x400))+((gclwh7_0*x326))+(((0.784)*gclwh7_0*x316))+(((-0.17)*x384))+(((0.17)*x403))+(((-0.784)*gclwh11_0*x327))+(((1.568)*gclwh9_0*x334))+(((-4.3904e-8)*x357))+(((0.1568)*x397))+(((0.1568)*x392))+(((-1.568)*gclwh7_0*x323))+(((-1.0)*x646))+(((4.3904e-8)*x341))+(((-1.0)*gclwh11_0*x333))+x450+(((-0.17)*x364))+(((1.568)*gclwh11_0*x330))+(((-0.00784)*x343))+(((-1.0)*gclwh15_0*x338)));
op[57]=((0.210112)+(((5.6e-8)*x384))+(((5.6e-8)*x364))+(((-5.6e-8)*x403))+x668+(((-1.0)*x670)));
op[58]=((((-0.00180900000000392)*x341))+(((0.020000028)*x364))+((gclwh7_10*x316))+(((-1.0)*gclwh9_10*x319))+(((0.00180900000000392)*x357))+(((-1.0)*x651))+x659+x677+(((-0.020000028)*x403))+(((-1.0)*gclwh11_10*x327))+(((-1.0)*x675))+(((-0.00180900000000392)*x400))+(((0.020000028)*x384)));
op[59]=(((gclwh13_9*x363))+(((0.00033)*x408))+(((0.033)*gclwh11_13*x327))+(((-0.066)*gclwh11_13*x330))+(((0.033)*gclwh9_13*x319))+(((-0.00033)*x383))+(((-0.0066)*x403))+(((-0.033)*gclwh7_13*x316))+(((-1.0)*x525))+((gclwh11_13*x414))+(((0.066)*gclwh7_13*x323))+(((-0.066)*gclwh9_13*x334))+(((-1.0)*x660))+x644+x657+(((0.0066)*x364)));
op[60]=((2.2876e-7)+(((-1.0)*gclwh4_8*x366))+(((-0.817)*gclwh12_8*x316))+(((1.634)*gclwh12_8*x323))+(((1.634)*gclwh4_8*x330))+(((0.817)*gclwh14_8*x319))+(((-1.634)*gclwh14_8*x334))+(((-0.00817)*x329))+(((-1.0)*x532))+(((0.00817)*x345))+(((0.1634)*x335))+(((-1.0)*x663))+(((-0.1634)*x420))+x647+x655+(((-0.817)*gclwh4_8*x327))+(((-0.1634)*x339)));
op[61]=((0.68544499999998)+(((-1.0)*gclwh12_2*pp*pz*r21))+(((2.0)*gclwh12_2*npy*(pz*pz)))+((gclwh14_2*pp*pz*r20))+(((0.01)*gclwh12_11*r21))+((gclwh12_11*pp*r21))+(((0.0010000014)*gclwh12_8*r21))+(((0.20000028)*gclwh14_8*npx*pz))+(((2.0)*gclwh3_2*npy*(pz*pz)))+(((-1.4e-7)*gclwh4_2*pp*r22))+(((-0.01)*gclwh14_11*r20))+(((1.4e-7)*gclwh14_2*pp*r20))+(((-2.8e-7)*gclwh14_2*npx*pz))+(((-2.0)*gclwh4_3*npz*pp*pz))+(((-2.0)*gclwh12_11*npy*pz))+(((2.0)*gclwh1_2*npx*(pz*pz)))+(((0.2)*gclwh10_11*rxp2_2))+(((0.01)*gclwh14_2*pz*r20))+(((-0.20000028)*gclwh4_8*npz*pz))+((gclwh12_3*r21*(pp*pp)))+(((-0.10000014)*gclwh14_8*pp*r20))+(((-1.4e-9)*gclwh4_2*r22))+(((0.01)*gclwh1_2*pz*r20))+(((2.8e-7)*gclwh1_2*npx*pz))+(((-1.0)*gclwh1_2*pp*pz*r20))+(((0.0067544500000002)*gclwh1_3*r20))+(((0.01)*gclwh3_2*pz*r21))+(((-2.0)*gclwh14_2*npx*(pz*pz)))+(((1.35089000000004)*gclwh12_3*npy*pz))+(((1.35089000000004)*gclwh4_3*npz*pz))+(((-1.4e-7)*gclwh12_2*pp*r21))+(((0.0067544500000002)*gclwh3_3*r21))+(((0.2)*pz))+(((1.35089000000004)*gclwh1_3*npx*pz))+(((0.0067544500000002)*gclwh14_3*r20))+(((0.01)*gclwh4_11*r22))+(((-1.0)*gclwh14_11*pp*r20))+(((-0.2)*gclwh6_11*rxp1_2))+(((-2.8e-8)*gclwh8_2*rxp0_2))+(((-0.01)*gclwh4_2*pz*r22))+(((0.66544500000002)*gclwh14_3*pp*r20))+(((0.2)*gclwh8_11*rxp0_2))+(((0.0010000014)*gclwh4_8*r22))+(((1.4e-9)*gclwh14_2*r20))+((gclwh3_3*r21*(pp*pp)))+(((-0.68544500000002)*gclwh3_3*pp*r21))+((gclwh1_3*r20*(pp*pp)))+(((-0.66544500000002)*gclwh4_3*pp*r22))+(((-0.0067544500000002)*gclwh12_3*r21))+(((1.35089000000004)*gclwh3_3*npy*pz))+(((-0.0067544500000002)*gclwh4_3*r22))+(((0.2)*gclwh6_2*pz*rxp1_2))+(((2.0)*gclwh14_3*npx*pp*pz))+(((-0.0010000014)*gclwh14_8*r20))+(((-1.4e-9)*gclwh12_2*r21))+(((-1.35089000000004)*gclwh14_3*npx*pz))+(((-2.0)*gclwh12_3*npy*pp*pz))+(((2.0)*gclwh14_11*npx*pz))+(((1.4e-9)*gclwh1_2*r20))+(((-0.2)*gclwh8_2*pz*rxp0_2))+(((-1.0)*gclwh3_2*pp*pz*r21))+(((-0.66544500000002)*gclwh12_3*pp*r21))+(((-0.01)*gclwh12_2*pz*r21))+(((-0.2)*gclwh10_2*pz*rxp2_2))+(((1.4e-9)*gclwh3_2*r21))+(((-1.4e-7)*gclwh1_2*pp*r20))+(((-0.20000028)*gclwh12_8*npy*pz))+((gclwh4_3*r22*(pp*pp)))+(((2.0)*gclwh4_2*npz*(pz*pz)))+(((-1.0)*gclwh14_3*r20*(pp*pp)))+(((-2.0)*gclwh4_11*npz*pz))+(((-2.0)*gclwh1_3*npx*pp*pz))+((gclwh4_11*pp*r22))+(((-1.4e-7)*gclwh3_2*pp*r21))+(((0.10000014)*gclwh12_8*pp*r21))+(((-2.8e-8)*gclwh10_2*rxp2_2))+(((2.8e-7)*gclwh12_2*npy*pz))+(((-0.68544500000002)*gclwh1_3*pp*r20))+(((-2.0)*gclwh3_3*npy*pp*pz))+(((0.10000014)*gclwh4_8*pp*r22))+(((2.8e-7)*gclwh3_2*npy*pz))+(((2.8e-8)*gclwh6_2*rxp1_2))+(((-1.0)*gclwh4_2*pp*pz*r22))+(((2.8e-7)*gclwh4_2*npz*pz)));
op[62]=((0.0898339999999608)+(((-5.6e-7)*gclwh4_8*x330))+(((2.8e-9)*x329))+(((-5.6e-7)*gclwh12_8*x323))+(((2.8e-9)*x424))+(((2.8e-7)*gclwh12_8*x316))+(((-1.0)*x665))+(((-2.8e-7)*gclwh14_8*x319))+(((5.6e-7)*gclwh14_8*x334))+x672+(((2.8e-7)*gclwh4_8*x327))+(((-2.8e-9)*x345)));
op[63]=((-2.38e-7)+(((-1.568)*gclwh3_2*x323))+(((2.1952e-7)*gclwh1_3*x319))+(((-4.3904e-7)*gclwh12_3*x323))+(((0.784)*gclwh1_2*x319))+(((-4.3904e-7)*gclwh3_3*x323))+((gclwh4_2*x333))+(((-1.0)*gclwh14_3*x419))+(((-1.568)*gclwh4_2*x330))+(((-1.0)*gclwh1_3*x419))+(((2.1952e-7)*gclwh3_3*x316))+(((0.0085)*x424))+(((2.1952e-7)*gclwh4_3*x327))+((gclwh10_2*x411))+(((-0.784)*gclwh14_2*x319))+(((0.85)*gclwh4_8*x327))+(((0.0085)*x329))+(((-4.3904e-7)*gclwh1_3*x334))+(((-1.0)*gclwh3_3*x375))+(((0.784)*gclwh12_2*x316))+(((-1.0)*gclwh3_2*x326))+(((-2.1952e-7)*gclwh14_3*x319))+(((-1.568)*gclwh12_2*x323))+(((-1.0)*x652))+((gclwh8_2*x338))+(((-1.7)*gclwh4_8*x330))+((gclwh12_2*x326))+(((-1.7)*gclwh12_8*x323))+(((-1.0)*gclwh6_2*x415))+(((-1.568)*gclwh1_2*x334))+(((2.1952e-9)*gclwh4_3*r22))+x662+(((-0.0085)*x345))+(((2.1952e-7)*gclwh12_3*x316))+(((-1.0)*gclwh14_2*x442))+(((-0.85)*gclwh14_8*x319))+(((0.784)*gclwh3_2*x316))+((gclwh12_3*x375))+(((0.784)*gclwh4_2*x327))+(((0.85)*gclwh12_8*x316))+(((-4.3904e-7)*gclwh4_3*x330))+(((4.3904e-7)*gclwh14_3*x334))+(((1.568)*gclwh14_2*x334))+(((1.7)*gclwh14_8*x334))+(((-1.0)*gclwh1_2*x442)));
op[64]=((-9.24e-9)+(((-0.033)*gclwh14_8*x319))+(((-0.066)*gclwh12_8*x323))+(((-0.00033)*x345))+(((-1.0)*x532))+(((0.0066)*x335))+(((-1.0)*x655))+(((0.033)*gclwh12_8*x316))+(((0.066)*gclwh14_8*x334))+(((-0.0066)*x339))+(((-0.066)*gclwh4_8*x330))+(((-0.0066)*x420))+(((0.00033)*x329))+x647+x663+(((0.033)*gclwh4_8*x327))+((gclwh4_8*x414)));
op[65]=((-0.0190449999999804)+(((-0.2)*gclwh10_11*rxp2_2))+(((-1.0)*gclwh12_2*pp*pz*r21))+(((2.0)*gclwh12_2*npy*(pz*pz)))+((gclwh14_2*pp*pz*r20))+(((-9.0450000000196e-5)*gclwh12_3*r21))+(((-0.0009999986)*gclwh14_8*r20))+(((2.0)*gclwh3_2*npy*(pz*pz)))+(((-2.0)*gclwh14_11*npx*pz))+(((-1.4e-7)*gclwh4_2*pp*r22))+(((1.4e-7)*gclwh14_2*pp*r20))+(((-2.8e-7)*gclwh14_2*npx*pz))+(((-2.0)*gclwh4_3*npz*pp*pz))+(((2.0)*gclwh1_2*npx*(pz*pz)))+(((0.0180900000000392)*gclwh1_3*npx*pz))+(((0.01)*gclwh14_2*pz*r20))+(((0.0009549999999804)*gclwh12_3*pp*r21))+((gclwh12_3*r21*(pp*pp)))+(((-1.4e-9)*gclwh4_2*r22))+(((0.0009999986)*gclwh12_8*r21))+(((-0.0190450000000196)*gclwh3_3*pp*r21))+(((0.2)*gclwh6_11*rxp1_2))+(((0.19999972)*gclwh14_8*npx*pz))+(((-1.0)*gclwh12_11*pp*r21))+(((0.01)*gclwh1_2*pz*r20))+(((2.8e-7)*gclwh1_2*npx*pz))+(((-1.0)*gclwh1_2*pp*pz*r20))+(((-0.19999972)*gclwh12_8*npy*pz))+(((0.01)*gclwh3_2*pz*r21))+(((-2.0)*gclwh14_2*npx*(pz*pz)))+(((2.0)*gclwh4_11*npz*pz))+(((0.0009549999999804)*gclwh4_3*pp*r22))+(((-1.4e-7)*gclwh12_2*pp*r21))+(((0.2)*pz))+(((-0.0009549999999804)*gclwh14_3*pp*r20))+(((-2.8e-8)*gclwh8_2*rxp0_2))+(((9.0450000000196e-5)*gclwh14_3*r20))+(((9.0450000000196e-5)*gclwh1_3*r20))+(((-0.01)*gclwh4_2*pz*r22))+(((-0.09999986)*gclwh14_8*pp*r20))+(((-9.0450000000196e-5)*gclwh4_3*r22))+(((1.4e-9)*gclwh14_2*r20))+((gclwh3_3*r21*(pp*pp)))+((gclwh1_3*r20*(pp*pp)))+(((0.09999986)*gclwh4_8*pp*r22))+(((0.2)*gclwh6_2*pz*rxp1_2))+(((0.0009999986)*gclwh4_8*r22))+(((2.0)*gclwh14_3*npx*pp*pz))+(((-1.4e-9)*gclwh12_2*r21))+(((-2.0)*gclwh12_3*npy*pp*pz))+(((-0.0190450000000196)*gclwh1_3*pp*r20))+(((0.0180900000000392)*gclwh3_3*npy*pz))+(((0.01)*gclwh14_11*r20))+(((1.4e-9)*gclwh1_2*r20))+(((-0.2)*gclwh8_2*pz*rxp0_2))+(((-0.01)*gclwh12_11*r21))+(((-1.0)*gclwh3_2*pp*pz*r21))+(((-0.01)*gclwh12_2*pz*r21))+(((0.0180900000000392)*gclwh12_3*npy*pz))+(((-0.2)*gclwh10_2*pz*rxp2_2))+(((1.4e-9)*gclwh3_2*r21))+(((-1.4e-7)*gclwh1_2*pp*r20))+(((0.0180900000000392)*gclwh4_3*npz*pz))+(((0.09999986)*gclwh12_8*pp*r21))+((gclwh4_3*r22*(pp*pp)))+(((2.0)*gclwh4_2*npz*(pz*pz)))+(((-1.0)*gclwh14_3*r20*(pp*pp)))+(((9.0450000000196e-5)*gclwh3_3*r21))+(((-2.0)*gclwh1_3*npx*pp*pz))+(((-0.2)*gclwh8_11*rxp0_2))+((gclwh14_11*pp*r20))+(((-1.4e-7)*gclwh3_2*pp*r21))+(((-1.0)*gclwh4_11*pp*r22))+(((-2.8e-8)*gclwh10_2*rxp2_2))+(((2.8e-7)*gclwh12_2*npy*pz))+(((-2.0)*gclwh3_3*npy*pp*pz))+(((2.0)*gclwh12_11*npy*pz))+(((2.8e-7)*gclwh3_2*npy*pz))+(((-0.19999972)*gclwh4_8*npz*pz))+(((-0.01)*gclwh4_11*r22))+(((2.8e-8)*gclwh6_2*rxp1_2))+(((-1.0)*gclwh4_2*pp*pz*r22))+(((2.8e-7)*gclwh4_2*npz*pz))+(((-0.0180900000000392)*gclwh14_3*npx*pz)));
IkReal x678=(pp*r21);
IkReal x679=(pp*r20);
IkReal x680=(gclwh15_9*r20);
IkReal x681=(gclwh5_9*r22);
IkReal x682=((2.1952e-9)*r21);
IkReal x683=(npy*pz);
IkReal x684=(npz*pz);
IkReal x685=((0.268)*gclwh5_15);
IkReal x686=((0.268)*gclwh13_15);
IkReal x687=(gclwh9_13*rxp0_2);
IkReal x688=(gclwh5_15*r22);
IkReal x689=(npx*pz);
IkReal x690=(pp*r22);
IkReal x691=((0.00784)*r21);
IkReal x692=(gclwh13_9*r21);
IkReal x693=(gclwh15_15*r20);
IkReal x694=(gclwh7_13*rxp1_2);
IkReal x695=(gclwh13_15*r21);
IkReal x696=((0.268)*gclwh15_15);
IkReal x697=((0.00784)*r20);
IkReal x698=(gclwh11_13*rxp2_2);
IkReal x699=((2.1952e-9)*r20);
IkReal x700=((0.00134)*x693);
IkReal x701=((0.0268)*gclwh7_7*rxp1_2);
IkReal x702=((0.0268)*gclwh11_7*rxp2_2);
IkReal x703=((0.00134)*x688);
IkReal x704=((0.00134)*x695);
IkReal x705=((0.0268)*gclwh9_7*rxp0_2);
IkReal x706=(gclwh5_9*x684);
IkReal x707=(gclwh15_9*x689);
IkReal x708=(x684*x685);
IkReal x709=((0.134)*gclwh15_15*x679);
IkReal x710=(x683*x686);
IkReal x711=((0.134)*gclwh13_15*x678);
IkReal x712=(x689*x696);
IkReal x713=((0.134)*pp*x688);
IkReal x714=(x702+x705);
IkReal x715=(x710+x708+x709+x700);
IkReal x716=(x711+x713+x712+x703+x704);
op[66]=((-0.68544499999998)+(((1.4e-9)*gclwh13_0*r21))+(((-0.01)*gclwh15_0*pz*r20))+(((-0.0067544500000002)*gclwh15_1*r20))+(((0.01)*gclwh13_0*pz*r21))+(((2.8e-7)*gclwh0_0*npx*pz))+(((-2.0)*gclwh5_10*npz*pz))+(((1.4e-9)*gclwh0_0*r20))+(((0.01)*gclwh0_0*pz*r20))+((gclwh5_10*pp*r22))+(((0.2)*gclwh11_10*rxp2_2))+(((2.8e-7)*gclwh2_0*npy*pz))+(((0.2)*gclwh11_0*pz*rxp2_2))+(((0.0067544500000002)*gclwh2_1*r21))+(((2.8e-8)*gclwh9_0*rxp0_2))+(((0.01)*gclwh2_0*pz*r21))+((gclwh15_1*r20*(pp*pp)))+(((2.8e-8)*gclwh11_0*rxp2_2))+(((2.0)*gclwh0_0*npx*(pz*pz)))+(((2.0)*gclwh2_0*npy*(pz*pz)))+(((1.35089000000004)*gclwh15_1*npx*pz))+((gclwh5_0*pp*pz*r22))+(((0.01)*gclwh5_0*pz*r22))+((gclwh13_10*pp*r21))+(((1.35089000000004)*gclwh2_1*npy*pz))+(((-1.0)*gclwh0_0*pp*pz*r20))+(((-0.19999972)*gclwh15_9*npx*pz))+(((-1.4e-7)*gclwh15_0*pp*r20))+(((2.0)*gclwh5_1*npz*pp*pz))+(((1.4e-7)*gclwh5_0*pp*r22))+((gclwh13_0*pp*pz*r21))+(((1.4e-9)*gclwh2_0*r21))+(((0.2)*pz))+(((-0.01)*gclwh15_10*r20))+(((-1.4e-7)*gclwh2_0*pp*r21))+(((-2.0)*gclwh13_0*npy*(pz*pz)))+(((0.01)*gclwh13_10*r21))+(((0.0009999986)*gclwh15_9*r20))+(((-2.0)*gclwh15_1*npx*pp*pz))+(((-1.4e-7)*gclwh0_0*pp*r20))+(((0.01)*gclwh5_10*r22))+(((-2.0)*gclwh13_10*npy*pz))+(((-0.68544500000002)*gclwh2_1*pp*r21))+(((-0.2)*gclwh7_10*rxp1_2))+(((2.0)*gclwh13_1*npy*pp*pz))+(((0.2)*gclwh9_0*pz*rxp0_2))+(((-2.8e-7)*gclwh5_0*npz*pz))+(((0.19999972)*gclwh5_9*npz*pz))+(((2.8e-7)*gclwh15_0*npx*pz))+(((-0.2)*gclwh7_0*pz*rxp1_2))+(((-1.4e-9)*gclwh15_0*r20))+(((-1.0)*gclwh13_1*r21*(pp*pp)))+(((-2.0)*gclwh0_1*npx*pp*pz))+(((-2.0)*gclwh5_0*npz*(pz*pz)))+(((-1.0)*gclwh2_0*pp*pz*r21))+(((-2.8e-8)*gclwh7_0*rxp1_2))+(((-0.0009999986)*gclwh5_9*r22))+(((-0.0009999986)*gclwh13_9*r21))+(((0.0067544500000002)*gclwh5_1*r22))+(((-0.66544500000002)*gclwh15_1*pp*r20))+(((-1.35089000000004)*gclwh5_1*npz*pz))+(((1.35089000000004)*gclwh0_1*npx*pz))+(((2.0)*gclwh15_10*npx*pz))+(((0.66544500000002)*gclwh13_1*pp*r21))+(((0.19999972)*gclwh13_9*npy*pz))+(((2.0)*gclwh15_0*npx*(pz*pz)))+(((-1.0)*gclwh5_1*r22*(pp*pp)))+(((-2.8e-7)*gclwh13_0*npy*pz))+(((-1.0)*gclwh15_10*pp*r20))+(((0.2)*gclwh9_10*rxp0_2))+((gclwh2_1*r21*(pp*pp)))+(((-0.09999986)*gclwh13_9*pp*r21))+(((-0.68544500000002)*gclwh0_1*pp*r20))+(((0.0067544500000002)*gclwh0_1*r20))+(((1.4e-9)*gclwh5_0*r22))+(((-1.0)*gclwh15_0*pp*pz*r20))+(((0.66544500000002)*gclwh5_1*pp*r22))+(((-2.0)*gclwh2_1*npy*pp*pz))+(((0.09999986)*gclwh15_9*pp*r20))+(((-1.35089000000004)*gclwh13_1*npy*pz))+((gclwh0_1*r20*(pp*pp)))+(((0.0067544500000002)*gclwh13_1*r21))+(((-0.09999986)*gclwh5_9*pp*r22))+(((1.4e-7)*gclwh13_0*pp*r21)));
op[67]=((2.2876e-7)+(((0.817)*gclwh13_9*x678))+(((-0.1634)*x694))+(((0.1634)*x687))+(((-1.634)*x706))+(((-0.817)*gclwh15_9*x679))+(((0.817)*pp*x681))+(((-1.0)*x714))+(((-1.0)*x715))+(((1.634)*x707))+(((-0.00817)*x680))+(((0.00817)*x692))+x716+x701+(((0.1634)*x698))+(((0.00817)*x681))+(((-1.634)*gclwh13_9*x683)));
op[68]=((2.38e-7)+(((-1.7)*x706))+(((0.0085)*x681))+(((-4.3904e-7)*gclwh15_1*x689))+((x678*x686))+((gclwh15_1*x699))+(((4.3904e-7)*gclwh5_1*x684))+(((0.00268)*x695))+(((-0.85)*gclwh15_9*x679))+(((0.536)*gclwh15_15*x689))+(((0.0085)*x692))+(((-1.0)*gclwh13_0*x691))+(((-2.1952e-7)*gclwh5_1*x690))+(((-0.1568)*gclwh9_0*rxp0_2))+(((0.784)*gclwh15_0*x679))+(((-1.7)*gclwh13_9*x683))+(((-4.3904e-7)*gclwh0_1*x689))+(((1.568)*gclwh13_0*x683))+(((-1.568)*gclwh15_0*x689))+(((-0.784)*gclwh13_0*x678))+(((-0.536)*gclwh5_15*x684))+(((2.1952e-7)*gclwh2_1*x678))+(((0.784)*gclwh0_0*x679))+(((1.568)*gclwh5_0*x684))+(((-2.1952e-9)*gclwh5_1*r22))+(((-0.00268)*x693))+(((-0.536)*gclwh13_15*x683))+(((-2.1952e-7)*gclwh13_1*x678))+(((-1.0)*gclwh2_0*x691))+(((0.00268)*x688))+(((-0.784)*gclwh5_0*x690))+(((0.85)*pp*x681))+(((2.1952e-7)*gclwh0_1*x679))+(((-1.568)*gclwh2_0*x683))+(((-1.0)*gclwh13_1*x682))+(((-1.0)*gclwh0_1*x699))+(((0.85)*gclwh13_9*x678))+(((-0.00784)*gclwh5_0*r22))+(((0.784)*gclwh2_0*x678))+(((2.1952e-7)*gclwh15_1*x679))+(((-1.0)*gclwh0_0*x697))+((x685*x690))+(((-0.0085)*x680))+(((-0.1568)*gclwh11_0*rxp2_2))+(((-1.568)*gclwh0_0*x689))+(((0.1568)*gclwh7_0*rxp1_2))+(((-1.0)*x679*x696))+(((4.3904e-7)*gclwh13_1*x683))+(((1.7)*x707))+(((-1.0)*gclwh2_1*x682))+((gclwh15_0*x697))+(((-4.3904e-7)*gclwh2_1*x683)));
op[69]=((0.0898339999999608)+(((-0.02)*gclwh13_10*r21))+(((-2.8e-7)*gclwh13_9*x678))+(((2.0)*gclwh15_10*x679))+(((-0.4)*gclwh9_10*rxp0_2))+(((-0.4)*gclwh11_10*rxp2_2))+(((-2.8e-7)*pp*x681))+(((-5.6e-7)*x707))+(((-4.0)*gclwh15_10*x689))+(((4.0)*gclwh5_10*x684))+(((5.6e-7)*x706))+(((2.8e-7)*gclwh15_9*x679))+(((4.0)*gclwh13_10*x683))+(((-2.8e-9)*x692))+(((-2.0)*gclwh13_10*x678))+(((-2.8e-9)*x681))+(((0.4)*gclwh7_10*rxp1_2))+(((5.6e-7)*gclwh13_9*x683))+(((2.8e-9)*x680))+(((-2.0)*gclwh5_10*x690))+(((0.02)*gclwh15_10*r20))+(((-0.02)*gclwh5_10*r22)));
op[70]=((0.0190449999999804)+(((1.4e-9)*gclwh13_0*r21))+(((-0.01)*gclwh15_0*pz*r20))+(((0.01)*gclwh13_0*pz*r21))+(((2.8e-7)*gclwh0_0*npx*pz))+(((-0.0180900000000392)*gclwh5_1*npz*pz))+(((1.4e-9)*gclwh0_0*r20))+(((-0.2)*gclwh11_10*rxp2_2))+(((0.01)*gclwh0_0*pz*r20))+(((9.0450000000196e-5)*gclwh13_1*r21))+(((2.8e-7)*gclwh2_0*npy*pz))+(((0.2)*gclwh11_0*pz*rxp2_2))+(((2.8e-8)*gclwh9_0*rxp0_2))+(((0.01)*gclwh2_0*pz*r21))+(((-0.10000014)*gclwh5_9*pp*r22))+((gclwh15_1*r20*(pp*pp)))+(((2.8e-8)*gclwh11_0*rxp2_2))+(((2.0)*gclwh0_0*npx*(pz*pz)))+(((2.0)*gclwh2_0*npy*(pz*pz)))+((gclwh5_0*pp*pz*r22))+(((9.0450000000196e-5)*gclwh2_1*r21))+(((0.01)*gclwh5_0*pz*r22))+(((9.0450000000196e-5)*gclwh0_1*r20))+(((0.0180900000000392)*gclwh15_1*npx*pz))+(((0.0180900000000392)*gclwh0_1*npx*pz))+(((-1.0)*gclwh0_0*pp*pz*r20))+(((-1.4e-7)*gclwh15_0*pp*r20))+(((2.0)*gclwh5_1*npz*pp*pz))+(((1.4e-7)*gclwh5_0*pp*r22))+(((-2.0)*gclwh15_10*npx*pz))+((gclwh13_0*pp*pz*r21))+(((1.4e-9)*gclwh2_0*r21))+(((-0.0180900000000392)*gclwh13_1*npy*pz))+(((0.2)*pz))+(((-1.4e-7)*gclwh2_0*pp*r21))+(((-9.0450000000196e-5)*gclwh15_1*r20))+(((0.0180900000000392)*gclwh2_1*npy*pz))+(((-2.0)*gclwh13_0*npy*(pz*pz)))+(((-2.0)*gclwh15_1*npx*pp*pz))+(((-1.4e-7)*gclwh0_0*pp*r20))+(((2.0)*gclwh13_1*npy*pp*pz))+(((0.2)*gclwh9_0*pz*rxp0_2))+(((-2.8e-7)*gclwh5_0*npz*pz))+(((-0.0009549999999804)*gclwh13_1*pp*r21))+(((-1.0)*gclwh13_10*pp*r21))+(((2.8e-7)*gclwh15_0*npx*pz))+(((-0.01)*gclwh13_10*r21))+(((-0.2)*gclwh7_0*pz*rxp1_2))+(((-0.0009549999999804)*gclwh5_1*pp*r22))+(((-1.4e-9)*gclwh15_0*r20))+(((-1.0)*gclwh13_1*r21*(pp*pp)))+(((-2.0)*gclwh0_1*npx*pp*pz))+(((9.0450000000196e-5)*gclwh5_1*r22))+(((-2.0)*gclwh5_0*npz*(pz*pz)))+(((0.2)*gclwh7_10*rxp1_2))+(((-1.0)*gclwh2_0*pp*pz*r21))+(((-2.8e-8)*gclwh7_0*rxp1_2))+(((-0.0190450000000196)*gclwh2_1*pp*r21))+(((-1.0)*gclwh5_10*pp*r22))+(((-0.20000028)*gclwh15_9*npx*pz))+(((-0.2)*gclwh9_10*rxp0_2))+(((0.20000028)*gclwh5_9*npz*pz))+(((0.01)*gclwh15_10*r20))+(((2.0)*gclwh15_0*npx*(pz*pz)))+(((-1.0)*gclwh5_1*r22*(pp*pp)))+(((-2.8e-7)*gclwh13_0*npy*pz))+((gclwh2_1*r21*(pp*pp)))+(((0.0010000014)*gclwh15_9*r20))+(((2.0)*gclwh5_10*npz*pz))+(((0.20000028)*gclwh13_9*npy*pz))+(((1.4e-9)*gclwh5_0*r22))+(((-0.0190450000000196)*gclwh0_1*pp*r20))+(((2.0)*gclwh13_10*npy*pz))+(((-1.0)*gclwh15_0*pp*pz*r20))+(((-0.10000014)*gclwh13_9*pp*r21))+((gclwh15_10*pp*r20))+(((-2.0)*gclwh2_1*npy*pp*pz))+(((0.10000014)*gclwh15_9*pp*r20))+(((0.0009549999999804)*gclwh15_1*pp*r20))+((gclwh0_1*r20*(pp*pp)))+(((-0.0010000014)*gclwh5_9*r22))+(((-0.0010000014)*gclwh13_9*r21))+(((-0.01)*gclwh5_10*r22))+(((1.4e-7)*gclwh13_0*pp*r21)));
op[71]=((-9.24e-9)+(((0.066)*x706))+(((-0.033)*pp*x681))+(((-0.0066)*x694))+(((-0.066)*x707))+(((-0.00033)*x692))+(((0.00033)*x680))+(((-0.033)*gclwh13_9*x678))+(((-0.00033)*x681))+(((0.0066)*x687))+(((-1.0)*x716))+(((-1.0)*x714))+(((0.0066)*x698))+(((0.033)*gclwh15_9*x679))+x715+x701+(((0.066)*gclwh13_9*x683)));
solvedialyticpoly8qep(op,zeror,numroots);
IkReal j1array[16], cj1array[16], sj1array[16], j2array[16], cj2array[16], sj2array[16], j3array[16], cj3array[16], sj3array[16];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ij1 += 3)
{
IkReal htj1 = zeror[ij1+0], htj2 = zeror[ij1+1], htj3 = zeror[ij1+2];
if(isnan(htj1)||isnan(htj2)||isnan(htj3)){
continue;
}
j1array[numsolutions]=((2.0)*(atan(htj1)));
j2array[numsolutions]=((2.0)*(atan(htj2)));
j3array[numsolutions]=((2.0)*(atan(htj3)));
if(isinf(htj1)){
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
}
else{
IkReal x717=htj1*htj1;
CheckValue<IkReal> x718=IKPowWithIntegerCheck(((1.0)+x717),-1);
if(!x718.valid){
continue;
}
cj1array[numsolutions]=((x718.value)*(((1.0)+(((-1.0)*x717)))));
CheckValue<IkReal> x719=IKPowWithIntegerCheck(((1.0)+(htj1*htj1)),-1);
if(!x719.valid){
continue;
}
sj1array[numsolutions]=((2.0)*htj1*(x719.value));
}
if(isinf(htj2)){
cj2array[numsolutions] = IKcos(j2array[numsolutions]);
sj2array[numsolutions] = IKsin(j2array[numsolutions]);
}
else{
IkReal x720=htj2*htj2;
CheckValue<IkReal> x721=IKPowWithIntegerCheck(((1.0)+x720),-1);
if(!x721.valid){
continue;
}
cj2array[numsolutions]=((x721.value)*(((1.0)+(((-1.0)*x720)))));
CheckValue<IkReal> x722=IKPowWithIntegerCheck(((1.0)+(htj2*htj2)),-1);
if(!x722.valid){
continue;
}
sj2array[numsolutions]=((2.0)*htj2*(x722.value));
}
if(isinf(htj3)){
cj3array[numsolutions] = IKcos(j3array[numsolutions]);
sj3array[numsolutions] = IKsin(j3array[numsolutions]);
}
else{
IkReal x723=htj3*htj3;
CheckValue<IkReal> x724=IKPowWithIntegerCheck(((1.0)+x723),-1);
if(!x724.valid){
continue;
}
cj3array[numsolutions]=((x724.value)*(((1.0)+(((-1.0)*x723)))));
CheckValue<IkReal> x725=IKPowWithIntegerCheck(((1.0)+(htj3*htj3)),-1);
if(!x725.valid){
continue;
}
sj3array[numsolutions]=((2.0)*htj3*(x725.value));
}
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
if( j2array[numsolutions] > IKPI )
{
    j2array[numsolutions]-=IK2PI;
}
else if( j2array[numsolutions] < -IKPI )
{
    j2array[numsolutions]+=IK2PI;
}
if( j3array[numsolutions] > IKPI )
{
    j3array[numsolutions]-=IK2PI;
}
else if( j3array[numsolutions] < -IKPI )
{
    j3array[numsolutions]+=IK2PI;
}
numsolutions++;
}
bool j1valid[16]={true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true};
_nj1 = 16;
_nj2 = 1;
_nj3 = 1;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
_ij2[0] = 0; _ij2[1] = -1;
_ij3[0] = 0; _ij3[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( !j1valid[iij1] ) { continue; }
if( IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(cj2array[ij1]-cj2array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij1]-sj2array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(cj3array[ij1]-cj3array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij1]-sj3array[iij1]) < IKFAST_SOLUTION_THRESH &&  1 )
{
    j1valid[iij1]=false; _ij1[1] = iij1; _ij2[1] = 0; _ij3[1] = 0;  break; 
}
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

    j2 = j2array[ij1]; cj2 = cj2array[ij1]; sj2 = sj2array[ij1];

    j3 = j3array[ij1]; cj3 = cj3array[ij1]; sj3 = sj3array[ij1];

innerfn(solutions);
    }
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots5(IkReal rawcoeffs[5+1], IkReal rawroots[5], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots4(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[5];
    const int maxsteps = 110;
    for(int i = 0; i < 5; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[5];
    IkReal err[5];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 5; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 5; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 5; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 5; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[5] = {false};
    for(int i = 0; i < 5; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 5; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots5(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[6];
    const int maxsteps = 110;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[6];
    IkReal err[6];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[6] = {false};
    for(int i = 0; i < 6; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 6; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
inline void innerfn(IkSolutionListBase<IkReal>& solutions) {
for(int fniter = 0; fniter < 1; ++fniter) {
{
IkReal j5eval[2];
j5eval[0]=((r20*r20)+(r21*r21));
j5eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((r20*r20)+(r21*r21));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x726=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x726);
rxp1_0=(pz*r11);
rxp1_1=(r01*x726);
j4eval[0]=cj3;
j4eval[1]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x727=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x727);
rxp1_0=(pz*r11);
rxp1_1=(r01*x727);
j4eval[0]=r22;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x728=IKPowWithIntegerCheck(r22,-1);
if(!x728.valid){
continue;
}
CheckValue<IkReal> x729=IKPowWithIntegerCheck(sj3,-1);
if(!x729.valid){
continue;
}
sj4array[0]=((x728.value)*(x729.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+((cj3*r22*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x730=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x730);
rxp1_0=(pz*r11);
rxp1_1=(r01*x730);
IkReal x731=((16.0)*sj4);
IkReal x732=(cj1*cj2);
IkReal x733=((4.0)*sj3);
IkReal x734=((8.0)*sj4);
IkReal x735=((4.0)*cj4);
IkReal x736=(sj1*sj2);
IkReal x737=((4.0)*sj4);
IkReal x738=(cj3*r02);
IkReal x739=((16.0)*sj3);
IkReal x740=((8.0)*sj3);
IkReal x741=((12.0)*cj4);
IkReal x742=((12.0)*sj4);
IkReal x743=(cj3*r12);
IkReal x744=(r11*x733);
IkReal x745=(r01*x733);
IkReal x746=(r01*x736);
IkReal x747=(cj3*cj4*r01);
IkReal x748=(cj3*cj4*r11);
IkReal x749=(cj3*r10*x735);
IkReal x750=(x742*x743);
IkReal x751=(cj3*r00*x735);
IkReal x752=(x738*x742);
IkReal x753=(r00*x736*x737);
IkReal x754=(r02*x736*x741);
IkReal x755=(r00*x732*x737);
IkReal x756=(r02*x732*x741);
IkReal x757=(r10*x736*x737);
IkReal x758=(r12*x732*x741);
IkReal x759=(r12*x736*x741);
IkReal x760=(r10*x732*x737);
IkReal x761=(x755+x744);
IkReal x762=(x757+x745);
IkReal x763=(x753+x749);
IkReal x764=(x756+x750);
IkReal x765=(x751+x760);
IkReal x766=(x752+x759);
j5eval[0]=((((0.5)*(IKabs(((((-16.0)*x747))+((r11*x731*x736))+(((-1.0)*r11*x731*x732))+(((-1.0)*r00*x739)))))))+(((0.5)*(IKabs(((((-1.0)*x766))+(((-1.0)*x765))+x758+x762)))))+(((0.5)*(IKabs(((((-1.0)*x765))+(((-1.0)*x737*x738))+(((-1.0)*r12*x735*x736))+x762+((r12*x732*x735)))))))+(((0.5)*(IKabs(((((-1.0)*x762))+(((-1.0)*x766))+x758+x765)))))+(((0.5)*(IKabs(((((-16.0)*x748))+((r01*x731*x732))+(((-1.0)*x731*x746))+(((-1.0)*r10*x739)))))))+(((0.5)*(IKabs(((((-1.0)*x764))+(((-1.0)*x763))+x754+x761)))))+(((0.5)*(IKabs(((((-1.0)*x737*x743))+(((-1.0)*x763))+((r02*x735*x736))+x761+(((-1.0)*r02*x732*x735)))))))+(IKabs((((r01*x732*x734))+(((-1.0)*r10*x740))+(((-8.0)*x748))+(((-1.0)*x734*x746)))))+(IKabs(((((-1.0)*r11*x732*x734))+((r11*x734*x736))+(((-8.0)*x747))+(((-1.0)*r00*x740)))))+(((0.5)*(IKabs(((((-1.0)*x764))+(((-1.0)*x761))+x754+x763))))));
if( IKabs(j5eval[0]) < 0.0000000010000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x767=(r10*sj3);
IkReal x768=(r01*sj4);
IkReal x769=(cj1*cj2);
IkReal x770=(cj3*cj4);
IkReal x771=(sj1*sj2);
IkReal x772=(cj4*r02);
IkReal x773=((4.0)*r11*sj3);
IkReal x774=(cj3*r12*sj4);
IkReal x775=((4.0)*r00*sj4);
IkReal x776=((4.0)*r10*x770);
IkReal x777=((12.0)*x774);
IkReal x778=((4.0)*x774);
IkReal x779=(x769*x775);
IkReal x780=(x771*x775);
IkReal x781=((12.0)*x771*x772);
IkReal x782=((12.0)*x769*x772);
IkReal x783=((4.0)*x771*x772);
IkReal x784=((4.0)*x769*x772);
IkReal x785=(x773+x779);
IkReal x786=(x776+x780);
IkReal x787=(x778+x784);
IkReal x788=(x777+x782);
IkReal x789=((((-8.0)*r11*x770))+(((-8.0)*x768*x771))+(((-8.0)*x767))+(((8.0)*x768*x769)));
op[0]=((((-1.0)*x787))+(((-1.0)*x786))+x783+x785);
op[1]=x789;
op[2]=((((-1.0)*x786))+(((-1.0)*x788))+x781+x785);
op[3]=((((-16.0)*r11*x770))+(((16.0)*x768*x769))+(((-16.0)*x767))+(((-16.0)*x768*x771)));
op[4]=((((-1.0)*x788))+(((-1.0)*x785))+x781+x786);
op[5]=x789;
op[6]=((((-1.0)*x787))+(((-1.0)*x785))+x783+x786);
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

IkReal x790=(cj1*cj2);
IkReal x791=((4.0)*cj4);
IkReal x792=(sj1*sj2);
IkReal x793=((4.0)*sj4);
IkReal x794=(r00*sj3);
IkReal x795=(cj3*r02);
IkReal x796=((4.0)*r01*sj3);
IkReal x797=((16.0)*r11*sj4);
IkReal x798=(cj3*cj4*r01);
IkReal x799=((12.0)*cj4*r12);
IkReal x800=((8.0)*r11*sj4);
IkReal x801=(cj3*r00*x791);
IkReal x802=((12.0)*sj4*x795);
IkReal x803=(x793*x795);
IkReal x804=(r10*x790*x793);
IkReal x805=(r10*x792*x793);
IkReal x806=(x790*x799);
IkReal x807=(x792*x799);
IkReal x808=(r12*x790*x791);
IkReal x809=(r12*x791*x792);
IkReal x810=(x796+x805);
IkReal x811=(x804+x801);
IkReal x812=(x809+x803);
IkReal x813=(x807+x802);
IkReal x814=((((-1.0)*x790*x800))+(((-8.0)*x798))+(((-8.0)*x794))+((x792*x800)));
j5evalpoly[0]=((((-1.0)*x810))+(((-1.0)*x812))+(((htj5*htj5)*(((((-1.0)*x810))+(((-1.0)*x813))+x811+x806))))+((x814*(htj5*htj5*htj5*htj5*htj5)))+(((htj5*htj5*htj5)*(((((-16.0)*x798))+(((-16.0)*x794))+(((-1.0)*x790*x797))+((x792*x797))))))+((htj5*x814))+x811+x808+(((htj5*htj5*htj5*htj5)*(((((-1.0)*x811))+(((-1.0)*x813))+x810+x806))))+(((htj5*htj5*htj5*htj5*htj5*htj5)*(((((-1.0)*x811))+(((-1.0)*x812))+x810+x808)))));
if( IKabs(j5evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x815=(cj5*sj4);
IkReal x816=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+((r01*x816))+(((-1.0)*r00*x815)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x816))+((r10*x815))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+((r01*x816))+(((-1.0)*r00*x815))))+IKsqr(((((-1.0)*r11*x816))+((r10*x815))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+((r01*x816))+(((-1.0)*r00*x815))), ((((-1.0)*r11*x816))+((r10*x815))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x817=IKcos(j0);
IkReal x818=IKsin(j0);
IkReal x819=(r02*sj4);
IkReal x820=((0.1)*sj5);
IkReal x821=((0.392)*sj1);
IkReal x822=(cj5*r11);
IkReal x823=((1.0)*sj3);
IkReal x824=(r12*sj4);
IkReal x825=((1.0)*cj3);
IkReal x826=((1.0)*cj1);
IkReal x827=(r11*sj5);
IkReal x828=(cj5*r01);
IkReal x829=((0.392)*cj2);
IkReal x830=(r00*sj5);
IkReal x831=((1.0)*cj2);
IkReal x832=(r10*sj5);
IkReal x833=((1.0)*cj4);
IkReal x834=(sj2*x818);
IkReal x835=(cj4*cj5*r00);
IkReal x836=(sj1*x817);
IkReal x837=(sj2*x817);
IkReal x838=(cj4*cj5*r10);
IkReal x839=(cj4*r01*sj5);
IkReal x840=(cj1*x817);
IkReal x841=(cj1*x818);
IkReal x842=((1.0)*cj5*sj4);
IkReal x843=(sj1*x818);
evalcond[0]=((((-1.0)*r10*x842))+(((-1.0)*r12*x833))+x817+((sj4*x827)));
evalcond[1]=((((-1.0)*r02*x833))+((r01*sj4*sj5))+(((-1.0)*x818))+(((-1.0)*r00*x842)));
evalcond[2]=(((cj3*x819))+(((-1.0)*cj2*x817*x826))+((sj3*x828))+((cj3*x839))+((sj3*x830))+(((-1.0)*x825*x835))+((sj2*x836)));
evalcond[3]=(((cj3*cj4*x827))+((sj3*x822))+(((-1.0)*cj2*x818*x826))+((sj3*x832))+(((-1.0)*x825*x838))+((sj1*x834))+((cj3*x824)));
evalcond[4]=((((-1.0)*x826*x837))+(((-1.0)*x819*x823))+(((-1.0)*x823*x839))+((cj3*x830))+((sj3*x835))+((cj3*x828))+(((-1.0)*x831*x836)));
evalcond[5]=((((-1.0)*x831*x843))+(((-1.0)*x826*x834))+(((-1.0)*x823*x824))+(((-1.0)*cj4*x823*x827))+((cj3*x832))+((sj3*x838))+((cj3*x822)));
evalcond[6]=((((-0.1)*x828))+(((-1.0)*x821*x837))+(((1.4e-7)*x836))+(((0.425)*x840))+(((-0.134)*x818))+(((-1.0)*px))+((x829*x840))+(((-1.0)*r00*x820)));
evalcond[7]=((((0.134)*x817))+(((-0.1)*x822))+(((-1.0)*x821*x834))+(((1.4e-7)*x843))+(((0.425)*x841))+(((-1.0)*py))+((x829*x841))+(((-1.0)*r10*x820)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x844=IKPowWithIntegerCheck(cj3,-1);
if(!x844.valid){
continue;
}
CheckValue<IkReal> x845=IKPowWithIntegerCheck(r22,-1);
if(!x845.valid){
continue;
}
sj4array[0]=((-1.0)*(x844.value)*(x845.value)*((((cj2*sj1))+((cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*sj3*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x846=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x846);
rxp1_0=(pz*r11);
rxp1_1=(r01*x846);
IkReal x847=((16.0)*sj4);
IkReal x848=(cj1*cj2);
IkReal x849=((4.0)*sj3);
IkReal x850=((8.0)*sj4);
IkReal x851=((4.0)*cj4);
IkReal x852=(sj1*sj2);
IkReal x853=((4.0)*sj4);
IkReal x854=(cj3*r02);
IkReal x855=((16.0)*sj3);
IkReal x856=((8.0)*sj3);
IkReal x857=((12.0)*cj4);
IkReal x858=((12.0)*sj4);
IkReal x859=(cj3*r12);
IkReal x860=(r11*x849);
IkReal x861=(r01*x849);
IkReal x862=(r01*x852);
IkReal x863=(cj3*cj4*r01);
IkReal x864=(cj3*cj4*r11);
IkReal x865=(cj3*r10*x851);
IkReal x866=(x858*x859);
IkReal x867=(cj3*r00*x851);
IkReal x868=(x854*x858);
IkReal x869=(r00*x852*x853);
IkReal x870=(r02*x852*x857);
IkReal x871=(r00*x848*x853);
IkReal x872=(r02*x848*x857);
IkReal x873=(r10*x852*x853);
IkReal x874=(r12*x848*x857);
IkReal x875=(r12*x852*x857);
IkReal x876=(r10*x848*x853);
IkReal x877=(x860+x871);
IkReal x878=(x861+x873);
IkReal x879=(x869+x865);
IkReal x880=(x866+x872);
IkReal x881=(x867+x876);
IkReal x882=(x868+x875);
j5eval[0]=((((0.5)*(IKabs(((((-1.0)*x853*x854))+(((-1.0)*x881))+((r12*x848*x851))+(((-1.0)*r12*x851*x852))+x878)))))+(IKabs(((((-1.0)*r00*x856))+((r11*x850*x852))+(((-1.0)*r11*x848*x850))+(((-8.0)*x863)))))+(((0.5)*(IKabs(((((-1.0)*x880))+x879+x870+(((-1.0)*x877)))))))+(((0.5)*(IKabs(((((-16.0)*x864))+(((-1.0)*x847*x862))+(((-1.0)*r10*x855))+((r01*x847*x848)))))))+(IKabs(((((-1.0)*x850*x862))+((r01*x848*x850))+(((-1.0)*r10*x856))+(((-8.0)*x864)))))+(((0.5)*(IKabs(((((-1.0)*x882))+x874+x881+(((-1.0)*x878)))))))+(((0.5)*(IKabs(((((-1.0)*r11*x847*x848))+(((-1.0)*r00*x855))+(((-16.0)*x863))+((r11*x847*x852)))))))+(((0.5)*(IKabs(((((-1.0)*x853*x859))+((r02*x851*x852))+(((-1.0)*r02*x848*x851))+x877+(((-1.0)*x879)))))))+(((0.5)*(IKabs(((((-1.0)*x880))+x870+x877+(((-1.0)*x879)))))))+(((0.5)*(IKabs(((((-1.0)*x882))+(((-1.0)*x881))+x878+x874))))));
if( IKabs(j5eval[0]) < 0.0000000010000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x883=(r10*sj3);
IkReal x884=(r01*sj4);
IkReal x885=(cj1*cj2);
IkReal x886=(cj3*cj4);
IkReal x887=(sj1*sj2);
IkReal x888=(cj4*r02);
IkReal x889=((4.0)*r11*sj3);
IkReal x890=(cj3*r12*sj4);
IkReal x891=((4.0)*r00*sj4);
IkReal x892=((4.0)*r10*x886);
IkReal x893=((12.0)*x890);
IkReal x894=((4.0)*x890);
IkReal x895=(x885*x891);
IkReal x896=(x887*x891);
IkReal x897=((12.0)*x887*x888);
IkReal x898=((12.0)*x885*x888);
IkReal x899=((4.0)*x887*x888);
IkReal x900=((4.0)*x885*x888);
IkReal x901=(x889+x895);
IkReal x902=(x896+x892);
IkReal x903=(x894+x900);
IkReal x904=(x893+x898);
IkReal x905=((((-8.0)*x883))+(((8.0)*x884*x885))+(((-8.0)*r11*x886))+(((-8.0)*x884*x887)));
op[0]=((((-1.0)*x903))+(((-1.0)*x902))+x899+x901);
op[1]=x905;
op[2]=((((-1.0)*x904))+(((-1.0)*x902))+x897+x901);
op[3]=((((-16.0)*x883))+(((16.0)*x884*x885))+(((-16.0)*x884*x887))+(((-16.0)*r11*x886)));
op[4]=((((-1.0)*x904))+(((-1.0)*x901))+x897+x902);
op[5]=x905;
op[6]=((((-1.0)*x903))+(((-1.0)*x901))+x899+x902);
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

IkReal x906=(cj1*cj2);
IkReal x907=((4.0)*cj4);
IkReal x908=(sj1*sj2);
IkReal x909=((4.0)*sj4);
IkReal x910=(r00*sj3);
IkReal x911=(cj3*r02);
IkReal x912=((4.0)*r01*sj3);
IkReal x913=((16.0)*r11*sj4);
IkReal x914=(cj3*cj4*r01);
IkReal x915=((12.0)*cj4*r12);
IkReal x916=((8.0)*r11*sj4);
IkReal x917=(cj3*r00*x907);
IkReal x918=((12.0)*sj4*x911);
IkReal x919=(x909*x911);
IkReal x920=(r10*x906*x909);
IkReal x921=(r10*x908*x909);
IkReal x922=(x906*x915);
IkReal x923=(x908*x915);
IkReal x924=(r12*x906*x907);
IkReal x925=(r12*x907*x908);
IkReal x926=(x921+x912);
IkReal x927=(x920+x917);
IkReal x928=(x925+x919);
IkReal x929=(x923+x918);
IkReal x930=((((-1.0)*x906*x916))+(((-8.0)*x914))+(((-8.0)*x910))+((x908*x916)));
j5evalpoly[0]=((((-1.0)*x926))+(((-1.0)*x928))+(((htj5*htj5*htj5*htj5*htj5*htj5)*(((((-1.0)*x927))+(((-1.0)*x928))+x926+x924))))+((htj5*x930))+(((htj5*htj5*htj5)*(((((-1.0)*x906*x913))+((x908*x913))+(((-16.0)*x914))+(((-16.0)*x910))))))+(((htj5*htj5)*(((((-1.0)*x926))+(((-1.0)*x929))+x927+x922))))+x927+x924+(((htj5*htj5*htj5*htj5)*(((((-1.0)*x927))+(((-1.0)*x929))+x926+x922))))+((x930*(htj5*htj5*htj5*htj5*htj5))));
if( IKabs(j5evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x931=(cj5*sj4);
IkReal x932=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+((r01*x932))+(((-1.0)*r00*x931)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x931))+(((-1.0)*r11*x932))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+((r01*x932))+(((-1.0)*r00*x931))))+IKsqr((((r10*x931))+(((-1.0)*r11*x932))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+((r01*x932))+(((-1.0)*r00*x931))), (((r10*x931))+(((-1.0)*r11*x932))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x933=IKcos(j0);
IkReal x934=IKsin(j0);
IkReal x935=(r02*sj4);
IkReal x936=((0.1)*sj5);
IkReal x937=((0.392)*sj1);
IkReal x938=(cj5*r11);
IkReal x939=((1.0)*sj3);
IkReal x940=(r12*sj4);
IkReal x941=((1.0)*cj3);
IkReal x942=((1.0)*cj1);
IkReal x943=(r11*sj5);
IkReal x944=(cj5*r01);
IkReal x945=((0.392)*cj2);
IkReal x946=(r00*sj5);
IkReal x947=((1.0)*cj2);
IkReal x948=(r10*sj5);
IkReal x949=((1.0)*cj4);
IkReal x950=(sj2*x934);
IkReal x951=(cj4*cj5*r00);
IkReal x952=(sj1*x933);
IkReal x953=(sj2*x933);
IkReal x954=(cj4*cj5*r10);
IkReal x955=(cj4*r01*sj5);
IkReal x956=(cj1*x933);
IkReal x957=(cj1*x934);
IkReal x958=((1.0)*cj5*sj4);
IkReal x959=(sj1*x934);
evalcond[0]=((((-1.0)*r10*x958))+(((-1.0)*r12*x949))+((sj4*x943))+x933);
evalcond[1]=((((-1.0)*r02*x949))+(((-1.0)*r00*x958))+((r01*sj4*sj5))+(((-1.0)*x934)));
evalcond[2]=(((sj3*x944))+((sj3*x946))+(((-1.0)*x941*x951))+((cj3*x935))+((cj3*x955))+((sj2*x952))+(((-1.0)*cj2*x933*x942)));
evalcond[3]=((((-1.0)*cj2*x934*x942))+((sj3*x948))+(((-1.0)*x941*x954))+((cj3*x940))+((cj3*cj4*x943))+((sj1*x950))+((sj3*x938)));
evalcond[4]=((((-1.0)*x935*x939))+(((-1.0)*x942*x953))+((cj3*x944))+((cj3*x946))+(((-1.0)*x939*x955))+(((-1.0)*x947*x952))+((sj3*x951)));
evalcond[5]=((((-1.0)*x939*x940))+(((-1.0)*x942*x950))+((cj3*x948))+(((-1.0)*cj4*x939*x943))+(((-1.0)*x947*x959))+((cj3*x938))+((sj3*x954)));
evalcond[6]=((((1.4e-7)*x952))+(((-1.0)*px))+(((0.425)*x956))+((x945*x956))+(((-1.0)*x937*x953))+(((-1.0)*r00*x936))+(((-0.1)*x944))+(((-0.134)*x934)));
evalcond[7]=((((1.4e-7)*x959))+(((-0.1)*x938))+(((-1.0)*r10*x936))+(((-1.0)*py))+(((0.134)*x933))+(((0.425)*x957))+((x945*x957))+(((-1.0)*x937*x950)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x960=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x960);
rxp1_0=(pz*r11);
rxp1_1=(r01*x960);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=cj3;
j4eval[1]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x961=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x961);
rxp1_0=(pz*r11);
rxp1_1=(r01*x961);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x962=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x962);
rxp1_0=(pz*r11);
rxp1_1=(r01*x962);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x963=IKPowWithIntegerCheck(r22,-1);
if(!x963.valid){
continue;
}
sj4array[0]=((-1.0)*(x963.value)*((((cj2*sj1))+((cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x964=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x964);
rxp1_0=(pz*r11);
rxp1_1=(r01*x964);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x966 = IKatan2WithCheck(IkReal(((-1.0)*cj4*r00)),IkReal((cj4*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x966.valid){
continue;
}
IkReal x965=x966.value;
j5array[0]=((-1.0)*x965);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x965)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r11*(IKsin(j5))))+(((-1.0)*cj4*r10*(IKcos(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x967=(cj5*sj4);
IkReal x968=(sj4*sj5);
if( IKabs((((r01*x968))+(((-1.0)*r00*x967)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x968))+((r10*x967)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x968))+(((-1.0)*r00*x967))))+IKsqr(((((-1.0)*r11*x968))+((r10*x967))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x968))+(((-1.0)*r00*x967))), ((((-1.0)*r11*x968))+((r10*x967))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x969=IKcos(j0);
IkReal x970=IKsin(j0);
IkReal x971=((0.1)*sj5);
IkReal x972=(cj5*r11);
IkReal x973=(cj5*r01);
IkReal x974=(sj4*sj5);
IkReal x975=((0.425)*cj1);
IkReal x976=((1.0)*cj2);
IkReal x977=(sj1*x969);
IkReal x978=((1.0)*cj1*sj2);
IkReal x979=((1.0)*cj5*sj4);
IkReal x980=(sj1*x970);
evalcond[0]=(((r11*x974))+x969+(((-1.0)*r10*x979)));
evalcond[1]=((((-1.0)*x970))+(((-1.0)*r00*x979))+((r01*x974)));
evalcond[2]=(((r00*sj5))+(((-1.0)*x969*x978))+(((-1.0)*x976*x977))+x973);
evalcond[3]=(((r10*sj5))+(((-1.0)*x970*x978))+(((-1.0)*x976*x980))+x972);
evalcond[4]=(((x969*x975))+(((1.4e-7)*x977))+(((-0.1)*x973))+(((-1.0)*r00*x971))+(((-1.0)*px))+(((-0.134)*x970)));
evalcond[5]=((((1.4e-7)*x980))+(((-0.1)*x972))+(((-1.0)*py))+(((0.134)*x969))+((x970*x975))+(((-1.0)*r10*x971)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x981=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x981);
rxp1_0=(pz*r11);
rxp1_1=(r01*x981);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x982=IKPowWithIntegerCheck(r22,-1);
if(!x982.valid){
continue;
}
sj4array[0]=((x982.value)*((((cj2*sj1))+((cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x983=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x983);
rxp1_0=(pz*r11);
rxp1_1=(r01*x983);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x985 = IKatan2WithCheck(IkReal((cj4*r00)),IkReal(((-1.0)*cj4*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x985.valid){
continue;
}
IkReal x984=x985.value;
j5array[0]=((-1.0)*x984);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x984)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r10*(IKcos(j5))))+(((-1.0)*cj4*r11*(IKsin(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x986=(cj5*sj4);
IkReal x987=(sj4*sj5);
if( IKabs((((r01*x987))+(((-1.0)*r00*x986)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x987))+((r10*x986)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x987))+(((-1.0)*r00*x986))))+IKsqr(((((-1.0)*r11*x987))+((r10*x986))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x987))+(((-1.0)*r00*x986))), ((((-1.0)*r11*x987))+((r10*x986))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x988=IKcos(j0);
IkReal x989=IKsin(j0);
IkReal x990=(r00*sj5);
IkReal x991=(cj5*r11);
IkReal x992=(sj4*sj5);
IkReal x993=((1.0)*r10);
IkReal x994=((1.0)*cj2);
IkReal x995=((0.425)*cj1);
IkReal x996=((1.0)*cj5);
IkReal x997=(sj1*x988);
IkReal x998=((1.0)*cj1*sj2);
IkReal x999=(sj1*x989);
evalcond[0]=(x988+(((-1.0)*cj5*sj4*x993))+((r11*x992)));
evalcond[1]=((((-1.0)*x989))+((r01*x992))+(((-1.0)*r00*sj4*x996)));
evalcond[2]=((((-1.0)*x990))+(((-1.0)*x994*x997))+(((-1.0)*r01*x996))+(((-1.0)*x988*x998)));
evalcond[3]=((((-1.0)*x991))+(((-1.0)*x994*x999))+(((-1.0)*sj5*x993))+(((-1.0)*x989*x998)));
evalcond[4]=(((x988*x995))+(((-0.1)*cj5*r01))+(((-1.0)*px))+(((-0.1)*x990))+(((-0.134)*x989))+(((1.4e-7)*x997)));
evalcond[5]=(((x989*x995))+(((-1.0)*py))+(((-0.1)*x991))+(((1.4e-7)*x999))+(((0.134)*x988))+(((-0.1)*r10*sj5)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1000=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1000);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1000);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1001=IKPowWithIntegerCheck(r22,-1);
if(!x1001.valid){
continue;
}
sj4array[0]=((x1001.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1002=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1002);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1002);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1004 = IKatan2WithCheck(IkReal((cj4*r00)),IkReal(((-1.0)*cj4*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1004.valid){
continue;
}
IkReal x1003=x1004.value;
j5array[0]=((-1.0)*x1003);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1003)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r10*(IKcos(j5))))+(((-1.0)*cj4*r11*(IKsin(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1005=(cj5*sj4);
IkReal x1006=(sj4*sj5);
if( IKabs((((r01*x1006))+(((-1.0)*r00*x1005)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x1006))+((r10*x1005)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1006))+(((-1.0)*r00*x1005))))+IKsqr(((((-1.0)*r11*x1006))+((r10*x1005))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x1006))+(((-1.0)*r00*x1005))), ((((-1.0)*r11*x1006))+((r10*x1005))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1007=IKcos(j0);
IkReal x1008=IKsin(j0);
IkReal x1009=((0.1)*sj5);
IkReal x1010=(sj1*sj2);
IkReal x1011=(cj5*r11);
IkReal x1012=(cj5*r01);
IkReal x1013=((0.425)*cj1);
IkReal x1014=(sj4*sj5);
IkReal x1015=(cj1*cj2);
IkReal x1016=((1.4e-7)*sj1);
IkReal x1017=((0.392)*x1008);
IkReal x1018=((0.392)*x1007);
IkReal x1019=((1.0)*x1008);
IkReal x1020=((1.0)*cj5*sj4);
evalcond[0]=(x1007+(((-1.0)*r10*x1020))+((r11*x1014)));
evalcond[1]=((((-1.0)*x1019))+(((-1.0)*r00*x1020))+((r01*x1014)));
evalcond[2]=(((r00*sj5))+x1012+(((-1.0)*x1007*x1015))+((x1007*x1010)));
evalcond[3]=(x1011+((r10*sj5))+(((-1.0)*x1015*x1019))+((x1008*x1010)));
evalcond[4]=((((-1.0)*x1010*x1018))+(((-1.0)*px))+(((-0.134)*x1008))+((x1015*x1018))+(((-1.0)*r00*x1009))+((x1007*x1016))+((x1007*x1013))+(((-0.1)*x1012)));
evalcond[5]=((((-1.0)*r10*x1009))+(((-1.0)*x1010*x1017))+(((0.134)*x1007))+(((-1.0)*py))+((x1015*x1017))+((x1008*x1016))+((x1008*x1013))+(((-0.1)*x1011)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1021=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1021);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1021);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1022=IKPowWithIntegerCheck(r22,-1);
if(!x1022.valid){
continue;
}
sj4array[0]=((-1.0)*(x1022.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1023=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1023);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1023);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1025 = IKatan2WithCheck(IkReal(((-1.0)*cj4*r00)),IkReal((cj4*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1025.valid){
continue;
}
IkReal x1024=x1025.value;
j5array[0]=((-1.0)*x1024);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1024)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r11*(IKsin(j5))))+(((-1.0)*cj4*r10*(IKcos(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1026=(cj5*sj4);
IkReal x1027=(sj4*sj5);
if( IKabs((((r01*x1027))+(((-1.0)*r00*x1026)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x1027))+((r10*x1026)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1027))+(((-1.0)*r00*x1026))))+IKsqr(((((-1.0)*r11*x1027))+((r10*x1026))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x1027))+(((-1.0)*r00*x1026))), ((((-1.0)*r11*x1027))+((r10*x1026))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1028=IKcos(j0);
IkReal x1029=IKsin(j0);
IkReal x1030=((0.1)*sj5);
IkReal x1031=(sj1*sj2);
IkReal x1032=(cj5*r11);
IkReal x1033=((0.425)*cj1);
IkReal x1034=(sj4*sj5);
IkReal x1035=(cj1*cj2);
IkReal x1036=((1.0)*sj5);
IkReal x1037=((1.0)*cj5);
IkReal x1038=((1.4e-7)*sj1);
IkReal x1039=((0.392)*x1029);
IkReal x1040=((0.392)*x1028);
IkReal x1041=((1.0)*x1029);
evalcond[0]=(x1028+(((-1.0)*r10*sj4*x1037))+((r11*x1034)));
evalcond[1]=((((-1.0)*r00*sj4*x1037))+(((-1.0)*x1041))+((r01*x1034)));
evalcond[2]=(((x1028*x1031))+(((-1.0)*r01*x1037))+(((-1.0)*r00*x1036))+(((-1.0)*x1028*x1035)));
evalcond[3]=((((-1.0)*r10*x1036))+(((-1.0)*x1032))+((x1029*x1031))+(((-1.0)*x1035*x1041)));
evalcond[4]=((((-1.0)*x1031*x1040))+((x1035*x1040))+(((-0.1)*cj5*r01))+(((-1.0)*px))+((x1028*x1033))+((x1028*x1038))+(((-1.0)*r00*x1030))+(((-0.134)*x1029)));
evalcond[5]=((((-1.0)*r10*x1030))+(((-0.1)*x1032))+(((0.134)*x1028))+(((-1.0)*py))+((x1029*x1033))+((x1029*x1038))+(((-1.0)*x1031*x1039))+((x1035*x1039)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4, j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1042=IKPowWithIntegerCheck(r22,-1);
if(!x1042.valid){
continue;
}
CheckValue<IkReal> x1043=IKPowWithIntegerCheck(sj3,-1);
if(!x1043.valid){
continue;
}
sj4array[0]=((x1042.value)*(x1043.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+((cj3*r22*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1044=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1044);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1044);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j5eval[0]=((IKabs(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3)))))+(IKabs(((((4.0)*cj2*cj3*cj4*r00*sj1))+(((4.0)*cj1*cj2*cj3*r01))+(((-4.0)*cj3*r01*sj1*sj2))+(((4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*r01*sj2*sj3))+(((-4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r00*sj3)))))+(IKabs(((((8.0)*cj2*cj3*cj4*r01*sj1))+(((8.0)*cj1*r00*sj2*sj3))+(((8.0)*cj2*r00*sj1*sj3))+(((8.0)*cj3*r00*sj1*sj2))+(((-8.0)*cj4*r01*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r01*sj3))+(((8.0)*cj1*cj3*cj4*r01*sj2))+(((-8.0)*cj1*cj2*cj3*r00)))))+(((0.5)*(IKabs(((((-4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*cj2*cj4*r00*sj3))+(((4.0)*cj1*r01*sj2*sj3))+(((4.0)*cj3*r01*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r01))+(((4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*cj3*cj4*r00*sj1)))))))+(((0.5)*(IKabs(((((16.0)*cj2*cj3*cj4*r11*sj1))+(((-16.0)*cj4*r11*sj1*sj2*sj3))+(((16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj1*cj2*cj3*r10))+(((16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj2*r10*sj1*sj3))+(((16.0)*cj1*cj2*cj4*r11*sj3)))))))+(((0.5)*(IKabs(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3)))))))+(IKabs(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3)))))+(((0.5)*(IKabs(((((16.0)*cj2*cj3*cj4*r01*sj1))+(((16.0)*cj1*r00*sj2*sj3))+(((16.0)*cj2*r00*sj1*sj3))+(((16.0)*cj1*cj3*cj4*r01*sj2))+(((-16.0)*cj1*cj2*cj3*r00))+(((16.0)*cj1*cj2*cj4*r01*sj3))+(((-16.0)*cj4*r01*sj1*sj2*sj3))+(((16.0)*cj3*r00*sj1*sj2))))))));
if( IKabs(j5eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j0, j5]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x1045=((4.0)*r01);
IkReal x1046=((16.0)*r00);
IkReal x1047=(cj3*sj2);
IkReal x1048=((8.0)*r00);
IkReal x1049=(cj2*cj3);
IkReal x1050=(cj4*r01);
IkReal x1051=((16.0)*cj1);
IkReal x1052=((8.0)*sj1);
IkReal x1053=((16.0)*sj1);
IkReal x1054=((8.0)*cj1);
IkReal x1055=(sj2*sj3);
IkReal x1056=(cj2*sj3);
IkReal x1057=(sj1*x1056);
IkReal x1058=((4.0)*cj4*r00);
IkReal x1059=(((sj1*x1055*x1058))+((sj1*x1045*x1047))+((cj1*x1045*x1055))+((x1045*x1057)));
IkReal x1060=(((cj1*x1045*x1049))+((cj1*x1056*x1058))+((sj1*x1049*x1058))+((cj1*x1047*x1058)));
IkReal x1061=((((-1.0)*x1059))+x1060);
IkReal x1062=(((x1047*x1050*x1054))+((x1048*x1057))+(((-1.0)*x1050*x1052*x1055))+(((-1.0)*cj1*x1048*x1049))+((sj1*x1047*x1048))+((cj1*x1048*x1055))+((x1050*x1054*x1056))+((x1049*x1050*x1052)));
IkReal x1063=(x1059+(((-1.0)*x1060)));
op[0]=x1061;
op[1]=x1062;
op[2]=x1061;
op[3]=(((x1050*x1051*x1056))+((x1047*x1050*x1051))+(((-1.0)*x1050*x1053*x1055))+((sj1*x1046*x1047))+((x1049*x1050*x1053))+((cj1*x1046*x1055))+(((-1.0)*cj1*x1046*x1049))+((x1046*x1057)));
op[4]=x1063;
op[5]=x1062;
op[6]=x1063;
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

j5evalpoly[0]=((((htj5*htj5*htj5*htj5*htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))+(((htj5*htj5*htj5*htj5*htj5)*(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3))))))+(((htj5*htj5*htj5)*(((((16.0)*cj2*cj3*cj4*r11*sj1))+(((-16.0)*cj4*r11*sj1*sj2*sj3))+(((16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj1*cj2*cj3*r10))+(((16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj2*r10*sj1*sj3))+(((16.0)*cj1*cj2*cj4*r11*sj3))))))+(((htj5*htj5*htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))+(((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((htj5*htj5)*(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))))))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))+((htj5*(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3)))))));
if( IKabs(j5evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1064=(cj5*sj4);
IkReal x1065=(sj4*sj5);
if( IKabs(((((-1.0)*r00*x1064))+((r01*x1065)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x1065))+((r10*x1064)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x1064))+((r01*x1065))))+IKsqr(((((-1.0)*r11*x1065))+((r10*x1064))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*x1064))+((r01*x1065))), ((((-1.0)*r11*x1065))+((r10*x1064))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1066=IKcos(j0);
IkReal x1067=IKsin(j0);
IkReal x1068=((0.1)*sj5);
IkReal x1069=((0.392)*sj1);
IkReal x1070=(cj5*r11);
IkReal x1071=((1.0)*cj3);
IkReal x1072=((1.0)*cj1);
IkReal x1073=(r11*sj5);
IkReal x1074=(cj5*r01);
IkReal x1075=(r01*sj5);
IkReal x1076=((0.392)*cj2);
IkReal x1077=(cj3*cj4);
IkReal x1078=(r00*sj5);
IkReal x1079=((1.0)*cj2);
IkReal x1080=(r10*sj5);
IkReal x1081=(sj2*x1067);
IkReal x1082=(cj4*cj5*r00);
IkReal x1083=(sj1*x1066);
IkReal x1084=(sj2*x1066);
IkReal x1085=(cj4*cj5*r10);
IkReal x1086=((1.0)*cj4*sj3);
IkReal x1087=(cj1*x1066);
IkReal x1088=(cj1*x1067);
IkReal x1089=((1.0)*cj5*sj4);
IkReal x1090=(sj1*x1067);
evalcond[0]=(x1066+(((-1.0)*r10*x1089))+((sj4*x1073)));
evalcond[1]=((((-1.0)*r00*x1089))+((sj4*x1075))+(((-1.0)*x1067)));
evalcond[2]=(((sj3*x1078))+((sj3*x1074))+((sj2*x1083))+((x1075*x1077))+(((-1.0)*x1071*x1082))+(((-1.0)*cj2*x1066*x1072)));
evalcond[3]=((((-1.0)*cj2*x1067*x1072))+((sj3*x1080))+((sj3*x1070))+((x1073*x1077))+((sj1*x1081))+(((-1.0)*x1071*x1085)));
evalcond[4]=(((sj3*x1082))+((cj3*x1074))+((cj3*x1078))+(((-1.0)*x1079*x1083))+(((-1.0)*x1075*x1086))+(((-1.0)*x1072*x1084)));
evalcond[5]=((((-1.0)*x1079*x1090))+((sj3*x1085))+((cj3*x1070))+(((-1.0)*x1073*x1086))+((cj3*x1080))+(((-1.0)*x1072*x1081)));
evalcond[6]=(((x1076*x1087))+(((-1.0)*r00*x1068))+(((-0.1)*x1074))+(((-0.134)*x1067))+(((-1.0)*x1069*x1084))+(((1.4e-7)*x1083))+(((-1.0)*px))+(((0.425)*x1087)));
evalcond[7]=(((x1076*x1088))+(((1.4e-7)*x1090))+(((-0.1)*x1070))+(((-1.0)*r10*x1068))+(((-1.0)*x1069*x1081))+(((-1.0)*py))+(((0.134)*x1066))+(((0.425)*x1088)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1091=IKPowWithIntegerCheck(cj3,-1);
if(!x1091.valid){
continue;
}
CheckValue<IkReal> x1092=IKPowWithIntegerCheck(r22,-1);
if(!x1092.valid){
continue;
}
sj4array[0]=((-1.0)*(x1091.value)*(x1092.value)*((((cj2*sj1))+((cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*sj3*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1093=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1093);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1093);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j5eval[0]=((IKabs(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3)))))+(IKabs(((((4.0)*cj2*cj3*cj4*r00*sj1))+(((4.0)*cj1*cj2*cj3*r01))+(((-4.0)*cj3*r01*sj1*sj2))+(((4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*r01*sj2*sj3))+(((-4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r00*sj3)))))+(IKabs(((((8.0)*cj2*cj3*cj4*r01*sj1))+(((8.0)*cj1*r00*sj2*sj3))+(((8.0)*cj2*r00*sj1*sj3))+(((8.0)*cj3*r00*sj1*sj2))+(((-8.0)*cj4*r01*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r01*sj3))+(((8.0)*cj1*cj3*cj4*r01*sj2))+(((-8.0)*cj1*cj2*cj3*r00)))))+(((0.5)*(IKabs(((((-4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*cj2*cj4*r00*sj3))+(((4.0)*cj1*r01*sj2*sj3))+(((4.0)*cj3*r01*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r01))+(((4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*cj3*cj4*r00*sj1)))))))+(((0.5)*(IKabs(((((16.0)*cj2*cj3*cj4*r11*sj1))+(((-16.0)*cj4*r11*sj1*sj2*sj3))+(((16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj1*cj2*cj3*r10))+(((16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj2*r10*sj1*sj3))+(((16.0)*cj1*cj2*cj4*r11*sj3)))))))+(((0.5)*(IKabs(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3)))))))+(IKabs(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3)))))+(((0.5)*(IKabs(((((16.0)*cj2*cj3*cj4*r01*sj1))+(((16.0)*cj1*r00*sj2*sj3))+(((16.0)*cj2*r00*sj1*sj3))+(((16.0)*cj1*cj3*cj4*r01*sj2))+(((-16.0)*cj1*cj2*cj3*r00))+(((16.0)*cj1*cj2*cj4*r01*sj3))+(((-16.0)*cj4*r01*sj1*sj2*sj3))+(((16.0)*cj3*r00*sj1*sj2))))))));
if( IKabs(j5eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j0, j5]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x1094=((4.0)*r01);
IkReal x1095=((16.0)*r00);
IkReal x1096=(cj3*sj2);
IkReal x1097=((8.0)*r00);
IkReal x1098=(cj2*cj3);
IkReal x1099=(cj4*r01);
IkReal x1100=((16.0)*cj1);
IkReal x1101=((8.0)*sj1);
IkReal x1102=((16.0)*sj1);
IkReal x1103=((8.0)*cj1);
IkReal x1104=(sj2*sj3);
IkReal x1105=(cj2*sj3);
IkReal x1106=(sj1*x1105);
IkReal x1107=((4.0)*cj4*r00);
IkReal x1108=(((sj1*x1094*x1096))+((x1094*x1106))+((cj1*x1094*x1104))+((sj1*x1104*x1107)));
IkReal x1109=(((cj1*x1105*x1107))+((cj1*x1096*x1107))+((cj1*x1094*x1098))+((sj1*x1098*x1107)));
IkReal x1110=(x1109+(((-1.0)*x1108)));
IkReal x1111=(((x1097*x1106))+((cj1*x1097*x1104))+(((-1.0)*x1099*x1101*x1104))+(((-1.0)*cj1*x1097*x1098))+((x1096*x1099*x1103))+((x1099*x1103*x1105))+((x1098*x1099*x1101))+((sj1*x1096*x1097)));
IkReal x1112=(x1108+(((-1.0)*x1109)));
op[0]=x1110;
op[1]=x1111;
op[2]=x1110;
op[3]=(((sj1*x1095*x1096))+(((-1.0)*x1099*x1102*x1104))+((x1096*x1099*x1100))+((x1099*x1100*x1105))+(((-1.0)*cj1*x1095*x1098))+((x1098*x1099*x1102))+((cj1*x1095*x1104))+((x1095*x1106)));
op[4]=x1112;
op[5]=x1111;
op[6]=x1112;
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

j5evalpoly[0]=((((htj5*htj5*htj5*htj5*htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))+(((htj5*htj5*htj5*htj5*htj5)*(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3))))))+(((htj5*htj5*htj5)*(((((16.0)*cj2*cj3*cj4*r11*sj1))+(((-16.0)*cj4*r11*sj1*sj2*sj3))+(((16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj1*cj2*cj3*r10))+(((16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj2*r10*sj1*sj3))+(((16.0)*cj1*cj2*cj4*r11*sj3))))))+(((htj5*htj5*htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))+(((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((htj5*htj5)*(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))))))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))+((htj5*(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3)))))));
if( IKabs(j5evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1113=(cj5*sj4);
IkReal x1114=(sj4*sj5);
if( IKabs((((r01*x1114))+(((-1.0)*r00*x1113)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x1114))+((r10*x1113)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1114))+(((-1.0)*r00*x1113))))+IKsqr(((((-1.0)*r11*x1114))+((r10*x1113))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x1114))+(((-1.0)*r00*x1113))), ((((-1.0)*r11*x1114))+((r10*x1113))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1115=IKcos(j0);
IkReal x1116=IKsin(j0);
IkReal x1117=((0.1)*sj5);
IkReal x1118=((0.392)*sj1);
IkReal x1119=(cj5*r11);
IkReal x1120=((1.0)*cj3);
IkReal x1121=((1.0)*cj1);
IkReal x1122=(r11*sj5);
IkReal x1123=(cj5*r01);
IkReal x1124=(r01*sj5);
IkReal x1125=((0.392)*cj2);
IkReal x1126=(cj3*cj4);
IkReal x1127=(r00*sj5);
IkReal x1128=((1.0)*cj2);
IkReal x1129=(r10*sj5);
IkReal x1130=(sj2*x1116);
IkReal x1131=(cj4*cj5*r00);
IkReal x1132=(sj1*x1115);
IkReal x1133=(sj2*x1115);
IkReal x1134=(cj4*cj5*r10);
IkReal x1135=((1.0)*cj4*sj3);
IkReal x1136=(cj1*x1115);
IkReal x1137=(cj1*x1116);
IkReal x1138=((1.0)*cj5*sj4);
IkReal x1139=(sj1*x1116);
evalcond[0]=(x1115+(((-1.0)*r10*x1138))+((sj4*x1122)));
evalcond[1]=(((sj4*x1124))+(((-1.0)*x1116))+(((-1.0)*r00*x1138)));
evalcond[2]=((((-1.0)*cj2*x1115*x1121))+((x1124*x1126))+((sj2*x1132))+((sj3*x1123))+((sj3*x1127))+(((-1.0)*x1120*x1131)));
evalcond[3]=(((sj3*x1119))+((sj1*x1130))+((sj3*x1129))+((x1122*x1126))+(((-1.0)*x1120*x1134))+(((-1.0)*cj2*x1116*x1121)));
evalcond[4]=((((-1.0)*x1121*x1133))+(((-1.0)*x1128*x1132))+((sj3*x1131))+(((-1.0)*x1124*x1135))+((cj3*x1123))+((cj3*x1127)));
evalcond[5]=((((-1.0)*x1122*x1135))+(((-1.0)*x1121*x1130))+(((-1.0)*x1128*x1139))+((sj3*x1134))+((cj3*x1119))+((cj3*x1129)));
evalcond[6]=((((-1.0)*r00*x1117))+(((-0.134)*x1116))+(((-0.1)*x1123))+(((-1.0)*px))+((x1125*x1136))+(((1.4e-7)*x1132))+(((0.425)*x1136))+(((-1.0)*x1118*x1133)));
evalcond[7]=((((-1.0)*py))+((x1125*x1137))+(((1.4e-7)*x1139))+(((0.425)*x1137))+(((-1.0)*x1118*x1130))+(((-0.1)*x1119))+(((-1.0)*r10*x1117))+(((0.134)*x1115)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4, j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1142 = IKatan2WithCheck(IkReal(((-0.1)*r21)),IkReal(((-0.1)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1142.valid){
continue;
}
IkReal x1140=((1.0)*(x1142.value));
if((((((0.01)*(r20*r20)))+(((0.01)*(r21*r21))))) < -0.00001)
continue;
CheckValue<IkReal> x1143=IKPowWithIntegerCheck(IKabs(IKsqrt(((((0.01)*(r20*r20)))+(((0.01)*(r21*r21)))))),-1);
if(!x1143.valid){
continue;
}
if( (((x1143.value)*(((((-0.392)*cj1*sj2))+(((-0.392)*cj2*sj1))+(((1.4e-7)*cj1))+(((-1.0)*pz))+(((-0.425)*sj1)))))) < -1-IKFAST_SINCOS_THRESH || (((x1143.value)*(((((-0.392)*cj1*sj2))+(((-0.392)*cj2*sj1))+(((1.4e-7)*cj1))+(((-1.0)*pz))+(((-0.425)*sj1)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x1141=IKasin(((x1143.value)*(((((-0.392)*cj1*sj2))+(((-0.392)*cj2*sj1))+(((1.4e-7)*cj1))+(((-1.0)*pz))+(((-0.425)*sj1))))));
j5array[0]=((((-1.0)*x1140))+(((-1.0)*x1141)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+x1141+(((-1.0)*x1140)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IkReal j4eval[2];
IkReal x1144=cj5*cj5;
IkReal x1145=r21*r21;
IkReal x1146=(sj3*x1144);
IkReal x1147=(((sj3*(r22*r22)))+(((-2.0)*cj5*r20*r21*sj3*sj5))+((sj3*x1145))+((x1146*(r20*r20)))+(((-1.0)*x1145*x1146)));
j4eval[0]=x1147;
j4eval[1]=IKsign(x1147);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1148=cj5*cj5;
IkReal x1149=r21*r21;
IkReal x1150=((1.0)*cj3);
IkReal x1151=(cj3*x1148);
IkReal x1152=(((x1149*x1151))+(((-1.0)*x1149*x1150))+(((-1.0)*x1148*x1150*(r20*r20)))+(((-1.0)*x1150*(r22*r22)))+(((2.0)*cj3*cj5*r20*r21*sj5)));
j4eval[0]=x1152;
j4eval[1]=IKsign(x1152);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
IkReal x1153=cj1*cj1;
IkReal x1154=cj2*cj2;
IkReal x1155=(cj1*sj1);
IkReal x1156=((0.02744)*sj2);
IkReal x1157=(cj2*sj2);
IkReal x1158=(cj2*x1153);
IkReal x1159=(x1153*x1154);
j0eval[0]=((1563593.29446082)+(((-3035714.28571429)*sj2*x1155))+(((-1.0)*sj2))+((cj2*x1155))+((sj2*x1153))+(((245635.932944428)*x1153))+(((-2800000.0)*x1155*x1157))+(((1.08418367346939)*x1155))+(((2800000.0)*x1159))+(((-1400000.0)*x1154))+(((3035714.28571429)*x1158)));
j0eval[1]=IKsign(((42905.0000000049)+(((76832.0)*x1159))+(((-76832.0)*x1155*x1157))+(((-38416.0)*x1154))+(((-1.0)*x1156))+(((0.02975)*x1155))+((x1153*x1156))+(((83300.0)*x1158))+(((6740.2499999951)*x1153))+(((-83300.0)*sj2*x1155))+(((0.02744)*cj2*x1155))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1160=((1.0)*cj5);
IkReal x1161=((1.0)*sj5);
IkReal x1162=((((-1.0)*cj1*cj2))+((sj1*sj2)));
j0eval[0]=x1162;
j0eval[1]=((IKabs(((((-1.0)*r00*x1161))+(((-1.0)*r01*x1160)))))+(IKabs(((((-1.0)*r10*x1161))+(((-1.0)*r11*x1160))))));
j0eval[2]=IKsign(x1162);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1163=cj5*cj5;
IkReal x1164=r21*r21;
IkReal x1165=(sj1*sj2);
IkReal x1166=(r21*sj5);
IkReal x1167=(cj5*r20);
IkReal x1168=(cj1*cj2);
IkReal x1169=(x1164+(((-2.0)*x1166*x1167))+(((-1.0)*x1163*x1164))+(r22*r22)+((x1163*(r20*r20))));
j4eval[0]=x1169;
j4eval[1]=IKsign(x1169);
j4eval[2]=((IKabs(((((-1.0)*r22*x1168))+((r22*x1165)))))+(IKabs((((x1165*x1166))+(((-1.0)*x1165*x1167))+(((-1.0)*x1166*x1168))+((x1167*x1168))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j0eval[0]=((((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.67478761815078)*px))+(((2.14018460980658)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.67478761815078)*py))+(((2.14018460980658)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.67478761815078)*px))+(((2.14018460980658)*py))))+IKsqr(((((0.67478761815078)*py))+(((2.14018460980658)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.67478761815078)*px))+(((2.14018460980658)*py))), ((((0.67478761815078)*py))+(((2.14018460980658)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1170=IKcos(j0);
IkReal x1171=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((0.425)*x1170))+(((-0.134)*x1171)));
evalcond[1]=((((-1.0)*py))+(((0.425)*x1171))+(((0.134)*x1170)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1172=((1.0)*cj5);
IkReal x1173=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1172)));
j4eval[0]=x1173;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1172)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1173);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1174=((1.0)*cj5);
IkReal x1175=((((-1.0)*r10*sj5))+(((-1.0)*r11*x1174)));
j4eval[0]=x1175;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x1174))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x1175);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1176=cj5*cj5;
IkReal x1177=((1.0)*sj5);
IkReal x1178=(cj5*r20);
IkReal x1179=(r11*r21);
IkReal x1180=(x1179+(((-1.0)*r11*x1177*x1178))+((r10*r20*x1176))+(((-1.0)*x1176*x1179))+((r12*r22))+(((-1.0)*cj5*r10*r21*x1177)));
j4eval[0]=x1180;
j4eval[1]=IKsign(x1180);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x1177))+((cj0*x1178)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1181=cj5*cj5;
IkReal x1182=((1.0)*sj5);
IkReal x1183=(cj5*r20);
IkReal x1184=(r11*r21);
CheckValue<IkReal> x1185=IKPowWithIntegerCheck(IKsign((x1184+(((-1.0)*x1181*x1184))+(((-1.0)*cj5*r10*r21*x1182))+(((-1.0)*r11*x1182*x1183))+((r12*r22))+((r10*r20*x1181)))),-1);
if(!x1185.valid){
continue;
}
CheckValue<IkReal> x1186 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x1182))+((cj0*x1183)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1186.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1185.value)))+(x1186.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1187=IKsin(j4);
IkReal x1188=IKcos(j4);
IkReal x1189=((1.0)*sj0);
IkReal x1190=(cj5*r00);
IkReal x1191=(r11*sj5);
IkReal x1192=(cj5*r10);
IkReal x1193=(r21*sj5);
IkReal x1194=(cj5*r20);
IkReal x1195=(r01*sj5);
IkReal x1196=((1.0)*x1188);
IkReal x1197=((1.0)*x1187);
evalcond[0]=(((x1187*x1193))+(((-1.0)*x1194*x1197))+(((-1.0)*r22*x1196)));
evalcond[1]=((((-1.0)*x1193*x1196))+((x1188*x1194))+(((-1.0)*r22*x1197)));
evalcond[2]=(((x1187*x1191))+cj0+(((-1.0)*x1192*x1197))+(((-1.0)*r12*x1196)));
evalcond[3]=((((-1.0)*x1190*x1197))+((x1187*x1195))+(((-1.0)*x1189))+(((-1.0)*r02*x1196)));
evalcond[4]=((((-1.0)*x1195*x1196))+((x1188*x1190))+(((-1.0)*r02*x1197))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1191*x1196))+((x1188*x1192))+(((-1.0)*x1189))+(((-1.0)*r12*x1197)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1198=((1.0)*cj5);
CheckValue<IkReal> x1199 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x1198))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1199.valid){
continue;
}
CheckValue<IkReal> x1200=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x1198)))),-1);
if(!x1200.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1199.value)+(((1.5707963267949)*(x1200.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1201=IKsin(j4);
IkReal x1202=IKcos(j4);
IkReal x1203=((1.0)*sj0);
IkReal x1204=(cj5*r00);
IkReal x1205=(r11*sj5);
IkReal x1206=(cj5*r10);
IkReal x1207=(r21*sj5);
IkReal x1208=(cj5*r20);
IkReal x1209=(r01*sj5);
IkReal x1210=((1.0)*x1202);
IkReal x1211=((1.0)*x1201);
evalcond[0]=((((-1.0)*x1208*x1211))+(((-1.0)*r22*x1210))+((x1201*x1207)));
evalcond[1]=((((-1.0)*x1207*x1210))+(((-1.0)*r22*x1211))+((x1202*x1208)));
evalcond[2]=(cj0+(((-1.0)*x1206*x1211))+((x1201*x1205))+(((-1.0)*r12*x1210)));
evalcond[3]=((((-1.0)*x1204*x1211))+(((-1.0)*r02*x1210))+((x1201*x1209))+(((-1.0)*x1203)));
evalcond[4]=((((-1.0)*x1209*x1210))+(((-1.0)*r02*x1211))+((x1202*x1204))+(((-1.0)*cj0)));
evalcond[5]=(((x1202*x1206))+(((-1.0)*x1205*x1210))+(((-1.0)*r12*x1211))+(((-1.0)*x1203)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1212=((1.0)*cj5);
CheckValue<IkReal> x1213 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1212)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1213.valid){
continue;
}
CheckValue<IkReal> x1214=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x1212)))),-1);
if(!x1214.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1213.value)+(((1.5707963267949)*(x1214.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1215=IKsin(j4);
IkReal x1216=IKcos(j4);
IkReal x1217=((1.0)*sj0);
IkReal x1218=(cj5*r00);
IkReal x1219=(r11*sj5);
IkReal x1220=(cj5*r10);
IkReal x1221=(r21*sj5);
IkReal x1222=(cj5*r20);
IkReal x1223=(r01*sj5);
IkReal x1224=((1.0)*x1216);
IkReal x1225=((1.0)*x1215);
evalcond[0]=((((-1.0)*x1222*x1225))+((x1215*x1221))+(((-1.0)*r22*x1224)));
evalcond[1]=(((x1216*x1222))+(((-1.0)*x1221*x1224))+(((-1.0)*r22*x1225)));
evalcond[2]=(cj0+(((-1.0)*x1220*x1225))+(((-1.0)*r12*x1224))+((x1215*x1219)));
evalcond[3]=((((-1.0)*x1218*x1225))+(((-1.0)*x1217))+((x1215*x1223))+(((-1.0)*r02*x1224)));
evalcond[4]=(((x1216*x1218))+(((-1.0)*r02*x1225))+(((-1.0)*cj0))+(((-1.0)*x1223*x1224)));
evalcond[5]=(((x1216*x1220))+(((-1.0)*r12*x1225))+(((-1.0)*x1217))+(((-1.0)*x1219*x1224)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.67478761815078)*px))+(((2.14018460980658)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.67478761815078)*py))+(((2.14018460980658)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.67478761815078)*px))+(((2.14018460980658)*py))))+IKsqr(((((0.67478761815078)*py))+(((2.14018460980658)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.67478761815078)*px))+(((2.14018460980658)*py))), ((((0.67478761815078)*py))+(((2.14018460980658)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1226=IKcos(j0);
IkReal x1227=IKsin(j0);
evalcond[0]=((((-0.134)*x1227))+(((-1.0)*px))+(((0.425)*x1226)));
evalcond[1]=((((-1.0)*py))+(((0.425)*x1227))+(((0.134)*x1226)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1228=((1.0)*cj5);
IkReal x1229=((((-1.0)*r01*x1228))+(((-1.0)*r00*sj5)));
j4eval[0]=x1229;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1228)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1229);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1230=cj5*cj5;
IkReal x1231=((1.0)*r21);
IkReal x1232=(cj5*sj5);
IkReal x1233=((1.0)*r20);
IkReal x1234=((((-1.0)*r01*x1230*x1231))+((r01*r21))+(((-1.0)*r00*x1231*x1232))+(((-1.0)*r01*x1232*x1233))+((r00*r20*x1230))+((r02*r22)));
j4eval[0]=x1234;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1233)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1234);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1235=cj5*cj5;
IkReal x1236=(r21*sj5);
IkReal x1237=(r11*r21);
IkReal x1238=((1.0)*cj5*r20);
IkReal x1239=((((-1.0)*r11*sj5*x1238))+((r10*r20*x1235))+x1237+((r12*r22))+(((-1.0)*cj5*r10*x1236))+(((-1.0)*x1235*x1237)));
j4eval[0]=x1239;
j4eval[1]=((IKabs((((sj0*x1236))+(((-1.0)*sj0*x1238)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1239);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1240=cj5*cj5;
IkReal x1241=(r21*sj5);
IkReal x1242=(r11*r21);
IkReal x1243=((1.0)*cj5*r20);
CheckValue<IkReal> x1244 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*sj0*x1243))+((sj0*x1241)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1244.valid){
continue;
}
CheckValue<IkReal> x1245=IKPowWithIntegerCheck(IKsign((x1242+(((-1.0)*r11*sj5*x1243))+(((-1.0)*cj5*r10*x1241))+((r12*r22))+(((-1.0)*x1240*x1242))+((r10*r20*x1240)))),-1);
if(!x1245.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1244.value)+(((1.5707963267949)*(x1245.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1246=IKsin(j4);
IkReal x1247=IKcos(j4);
IkReal x1248=(r11*sj5);
IkReal x1249=(cj5*r00);
IkReal x1250=(cj5*r10);
IkReal x1251=(r21*sj5);
IkReal x1252=(cj5*r20);
IkReal x1253=(r01*sj5);
IkReal x1254=((1.0)*x1247);
IkReal x1255=((1.0)*x1246);
evalcond[0]=(((x1246*x1251))+(((-1.0)*r22*x1254))+(((-1.0)*x1252*x1255)));
evalcond[1]=(((x1247*x1252))+(((-1.0)*r22*x1255))+(((-1.0)*x1251*x1254)));
evalcond[2]=((((-1.0)*r12*x1254))+cj0+((x1246*x1248))+(((-1.0)*x1250*x1255)));
evalcond[3]=((((-1.0)*x1253*x1254))+cj0+((x1247*x1249))+(((-1.0)*r02*x1255)));
evalcond[4]=(((x1247*x1250))+(((-1.0)*r12*x1255))+sj0+(((-1.0)*x1248*x1254)));
evalcond[5]=((((-1.0)*x1249*x1255))+((x1246*x1253))+(((-1.0)*sj0))+(((-1.0)*r02*x1254)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1256=cj5*cj5;
IkReal x1257=((1.0)*r21);
IkReal x1258=(cj5*sj5);
IkReal x1259=((1.0)*r20);
CheckValue<IkReal> x1260 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1259)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1260.valid){
continue;
}
CheckValue<IkReal> x1261=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1258*x1259))+((r00*r20*x1256))+(((-1.0)*r00*x1257*x1258))+((r01*r21))+((r02*r22))+(((-1.0)*r01*x1256*x1257)))),-1);
if(!x1261.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1260.value)+(((1.5707963267949)*(x1261.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1262=IKsin(j4);
IkReal x1263=IKcos(j4);
IkReal x1264=(r11*sj5);
IkReal x1265=(cj5*r00);
IkReal x1266=(cj5*r10);
IkReal x1267=(r21*sj5);
IkReal x1268=(cj5*r20);
IkReal x1269=(r01*sj5);
IkReal x1270=((1.0)*x1263);
IkReal x1271=((1.0)*x1262);
evalcond[0]=((((-1.0)*x1268*x1271))+(((-1.0)*r22*x1270))+((x1262*x1267)));
evalcond[1]=((((-1.0)*x1267*x1270))+(((-1.0)*r22*x1271))+((x1263*x1268)));
evalcond[2]=(cj0+(((-1.0)*r12*x1270))+(((-1.0)*x1266*x1271))+((x1262*x1264)));
evalcond[3]=(cj0+(((-1.0)*x1269*x1270))+(((-1.0)*r02*x1271))+((x1263*x1265)));
evalcond[4]=(sj0+(((-1.0)*r12*x1271))+((x1263*x1266))+(((-1.0)*x1264*x1270)));
evalcond[5]=((((-1.0)*sj0))+((x1262*x1269))+(((-1.0)*r02*x1270))+(((-1.0)*x1265*x1271)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1272=((1.0)*cj5);
CheckValue<IkReal> x1273 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1272)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1273.valid){
continue;
}
CheckValue<IkReal> x1274=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1272))+(((-1.0)*r00*sj5)))),-1);
if(!x1274.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1273.value)+(((1.5707963267949)*(x1274.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1275=IKsin(j4);
IkReal x1276=IKcos(j4);
IkReal x1277=(r11*sj5);
IkReal x1278=(cj5*r00);
IkReal x1279=(cj5*r10);
IkReal x1280=(r21*sj5);
IkReal x1281=(cj5*r20);
IkReal x1282=(r01*sj5);
IkReal x1283=((1.0)*x1276);
IkReal x1284=((1.0)*x1275);
evalcond[0]=((((-1.0)*r22*x1283))+((x1275*x1280))+(((-1.0)*x1281*x1284)));
evalcond[1]=((((-1.0)*r22*x1284))+((x1276*x1281))+(((-1.0)*x1280*x1283)));
evalcond[2]=(((x1275*x1277))+cj0+(((-1.0)*x1279*x1284))+(((-1.0)*r12*x1283)));
evalcond[3]=((((-1.0)*r02*x1284))+((x1276*x1278))+cj0+(((-1.0)*x1282*x1283)));
evalcond[4]=(((x1276*x1279))+sj0+(((-1.0)*x1277*x1283))+(((-1.0)*r12*x1284)));
evalcond[5]=((((-1.0)*r02*x1283))+(((-1.0)*sj0))+((x1275*x1282))+(((-1.0)*x1278*x1284)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-7.46268656715603)*px))+(((7.79683671195407e-6)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((7.79683671195407e-6)*px))+(((7.46268656715603)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-7.46268656715603)*px))+(((7.79683671195407e-6)*py))))+IKsqr(((((7.79683671195407e-6)*px))+(((7.46268656715603)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-7.46268656715603)*px))+(((7.79683671195407e-6)*py))), ((((7.79683671195407e-6)*px))+(((7.46268656715603)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1285=IKcos(j0);
IkReal x1286=IKsin(j0);
evalcond[0]=((((1.4e-7)*x1285))+(((-1.0)*px))+(((-0.134)*x1286)));
evalcond[1]=((((1.4e-7)*x1286))+(((-1.0)*py))+(((0.134)*x1285)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1287=((1.0)*cj5);
IkReal x1288=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1287)));
j4eval[0]=x1288;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1287))))));
j4eval[2]=IKsign(x1288);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1289=((1.0)*cj5);
IkReal x1290=((((-1.0)*r10*sj5))+(((-1.0)*r11*x1289)));
j4eval[0]=x1290;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x1289))))));
j4eval[2]=IKsign(x1290);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1291=cj5*cj5;
IkReal x1292=((1.0)*sj5);
IkReal x1293=(cj5*r20);
IkReal x1294=(r11*r21);
IkReal x1295=(x1294+((r12*r22))+(((-1.0)*cj5*r10*r21*x1292))+(((-1.0)*x1291*x1294))+((r10*r20*x1291))+(((-1.0)*r11*x1292*x1293)));
j4eval[0]=x1295;
j4eval[1]=IKsign(x1295);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*x1292))+((cj0*x1293))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1296=cj5*cj5;
IkReal x1297=((1.0)*sj5);
IkReal x1298=(cj5*r20);
IkReal x1299=(r11*r21);
CheckValue<IkReal> x1300=IKPowWithIntegerCheck(IKsign((x1299+((r12*r22))+(((-1.0)*cj5*r10*r21*x1297))+((r10*r20*x1296))+(((-1.0)*x1296*x1299))+(((-1.0)*r11*x1297*x1298)))),-1);
if(!x1300.valid){
continue;
}
CheckValue<IkReal> x1301 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x1297))+((cj0*x1298)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1301.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1300.value)))+(x1301.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1302=IKsin(j4);
IkReal x1303=IKcos(j4);
IkReal x1304=((1.0)*sj0);
IkReal x1305=(cj5*r00);
IkReal x1306=(r11*sj5);
IkReal x1307=(cj5*r10);
IkReal x1308=(r21*sj5);
IkReal x1309=(cj5*r20);
IkReal x1310=(r01*sj5);
IkReal x1311=((1.0)*x1303);
IkReal x1312=((1.0)*x1302);
evalcond[0]=((((-1.0)*r22*x1311))+((x1302*x1308))+(((-1.0)*x1309*x1312)));
evalcond[1]=((((-1.0)*x1308*x1311))+(((-1.0)*r22*x1312))+((x1303*x1309)));
evalcond[2]=(cj0+(((-1.0)*x1307*x1312))+(((-1.0)*r12*x1311))+((x1302*x1306)));
evalcond[3]=((((-1.0)*x1304))+(((-1.0)*x1305*x1312))+(((-1.0)*r02*x1311))+((x1302*x1310)));
evalcond[4]=(((x1303*x1305))+(((-1.0)*r02*x1312))+(((-1.0)*x1310*x1311))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1306*x1311))+(((-1.0)*r12*x1312))+(((-1.0)*x1304))+((x1303*x1307)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1313=((1.0)*cj5);
CheckValue<IkReal> x1314 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x1313))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1314.valid){
continue;
}
CheckValue<IkReal> x1315=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x1313)))),-1);
if(!x1315.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1314.value)+(((1.5707963267949)*(x1315.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1316=IKsin(j4);
IkReal x1317=IKcos(j4);
IkReal x1318=((1.0)*sj0);
IkReal x1319=(cj5*r00);
IkReal x1320=(r11*sj5);
IkReal x1321=(cj5*r10);
IkReal x1322=(r21*sj5);
IkReal x1323=(cj5*r20);
IkReal x1324=(r01*sj5);
IkReal x1325=((1.0)*x1317);
IkReal x1326=((1.0)*x1316);
evalcond[0]=(((x1316*x1322))+(((-1.0)*x1323*x1326))+(((-1.0)*r22*x1325)));
evalcond[1]=((((-1.0)*r22*x1326))+(((-1.0)*x1322*x1325))+((x1317*x1323)));
evalcond[2]=(((x1316*x1320))+cj0+(((-1.0)*r12*x1325))+(((-1.0)*x1321*x1326)));
evalcond[3]=(((x1316*x1324))+(((-1.0)*x1319*x1326))+(((-1.0)*x1318))+(((-1.0)*r02*x1325)));
evalcond[4]=(((x1317*x1319))+(((-1.0)*x1324*x1325))+(((-1.0)*r02*x1326))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1318))+(((-1.0)*r12*x1326))+(((-1.0)*x1320*x1325))+((x1317*x1321)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1327=((1.0)*cj5);
CheckValue<IkReal> x1328 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1327)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1328.valid){
continue;
}
CheckValue<IkReal> x1329=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1327))+(((-1.0)*r00*sj5)))),-1);
if(!x1329.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1328.value)+(((1.5707963267949)*(x1329.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1330=IKsin(j4);
IkReal x1331=IKcos(j4);
IkReal x1332=((1.0)*sj0);
IkReal x1333=(cj5*r00);
IkReal x1334=(r11*sj5);
IkReal x1335=(cj5*r10);
IkReal x1336=(r21*sj5);
IkReal x1337=(cj5*r20);
IkReal x1338=(r01*sj5);
IkReal x1339=((1.0)*x1331);
IkReal x1340=((1.0)*x1330);
evalcond[0]=((((-1.0)*r22*x1339))+((x1330*x1336))+(((-1.0)*x1337*x1340)));
evalcond[1]=(((x1331*x1337))+(((-1.0)*x1336*x1339))+(((-1.0)*r22*x1340)));
evalcond[2]=(cj0+(((-1.0)*x1335*x1340))+((x1330*x1334))+(((-1.0)*r12*x1339)));
evalcond[3]=((((-1.0)*r02*x1339))+(((-1.0)*x1333*x1340))+((x1330*x1338))+(((-1.0)*x1332)));
evalcond[4]=((((-1.0)*r02*x1340))+((x1331*x1333))+(((-1.0)*x1338*x1339))+(((-1.0)*cj0)));
evalcond[5]=(((x1331*x1335))+(((-1.0)*x1334*x1339))+(((-1.0)*r12*x1340))+(((-1.0)*x1332)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-7.46268656715603)*px))+(((7.79683671195407e-6)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((7.79683671195407e-6)*px))+(((7.46268656715603)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-7.46268656715603)*px))+(((7.79683671195407e-6)*py))))+IKsqr(((((7.79683671195407e-6)*px))+(((7.46268656715603)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-7.46268656715603)*px))+(((7.79683671195407e-6)*py))), ((((7.79683671195407e-6)*px))+(((7.46268656715603)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1341=IKcos(j0);
IkReal x1342=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((1.4e-7)*x1341))+(((-0.134)*x1342)));
evalcond[1]=((((0.134)*x1341))+(((-1.0)*py))+(((1.4e-7)*x1342)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1343=((1.0)*cj5);
IkReal x1344=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1343)));
j4eval[0]=x1344;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1343)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1344);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1345=cj5*cj5;
IkReal x1346=((1.0)*r21);
IkReal x1347=(cj5*sj5);
IkReal x1348=((1.0)*r20);
IkReal x1349=((((-1.0)*r00*x1346*x1347))+((r01*r21))+(((-1.0)*r01*x1345*x1346))+(((-1.0)*r01*x1347*x1348))+((r02*r22))+((r00*r20*x1345)));
j4eval[0]=x1349;
j4eval[1]=((IKabs(((((-1.0)*cj0*cj5*x1348))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1349);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1350=cj5*cj5;
IkReal x1351=(r21*sj5);
IkReal x1352=(r11*r21);
IkReal x1353=((1.0)*cj5*r20);
IkReal x1354=(x1352+((r10*r20*x1350))+(((-1.0)*cj5*r10*x1351))+(((-1.0)*x1350*x1352))+((r12*r22))+(((-1.0)*r11*sj5*x1353)));
j4eval[0]=x1354;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((sj0*x1351))+(((-1.0)*sj0*x1353))))));
j4eval[2]=IKsign(x1354);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1355=cj5*cj5;
IkReal x1356=(r21*sj5);
IkReal x1357=(r11*r21);
IkReal x1358=((1.0)*cj5*r20);
CheckValue<IkReal> x1359=IKPowWithIntegerCheck(IKsign((x1357+((r10*r20*x1355))+(((-1.0)*cj5*r10*x1356))+((r12*r22))+(((-1.0)*r11*sj5*x1358))+(((-1.0)*x1355*x1357)))),-1);
if(!x1359.valid){
continue;
}
CheckValue<IkReal> x1360 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((sj0*x1356))+(((-1.0)*sj0*x1358)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1360.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1359.value)))+(x1360.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1361=IKsin(j4);
IkReal x1362=IKcos(j4);
IkReal x1363=(r11*sj5);
IkReal x1364=(cj5*r00);
IkReal x1365=(cj5*r10);
IkReal x1366=(r21*sj5);
IkReal x1367=(cj5*r20);
IkReal x1368=(r01*sj5);
IkReal x1369=((1.0)*x1362);
IkReal x1370=((1.0)*x1361);
evalcond[0]=(((x1361*x1366))+(((-1.0)*r22*x1369))+(((-1.0)*x1367*x1370)));
evalcond[1]=((((-1.0)*x1366*x1369))+(((-1.0)*r22*x1370))+((x1362*x1367)));
evalcond[2]=((((-1.0)*x1365*x1370))+(((-1.0)*r12*x1369))+cj0+((x1361*x1363)));
evalcond[3]=(cj0+(((-1.0)*r02*x1370))+(((-1.0)*x1368*x1369))+((x1362*x1364)));
evalcond[4]=(sj0+(((-1.0)*r12*x1370))+(((-1.0)*x1363*x1369))+((x1362*x1365)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x1369))+((x1361*x1368))+(((-1.0)*x1364*x1370)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1371=cj5*cj5;
IkReal x1372=((1.0)*r21);
IkReal x1373=(cj5*sj5);
IkReal x1374=((1.0)*r20);
CheckValue<IkReal> x1375=IKPowWithIntegerCheck(IKsign((((r00*r20*x1371))+((r01*r21))+(((-1.0)*r01*x1371*x1372))+(((-1.0)*r00*x1372*x1373))+(((-1.0)*r01*x1373*x1374))+((r02*r22)))),-1);
if(!x1375.valid){
continue;
}
CheckValue<IkReal> x1376 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1374)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1376.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1375.value)))+(x1376.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1377=IKsin(j4);
IkReal x1378=IKcos(j4);
IkReal x1379=(r11*sj5);
IkReal x1380=(cj5*r00);
IkReal x1381=(cj5*r10);
IkReal x1382=(r21*sj5);
IkReal x1383=(cj5*r20);
IkReal x1384=(r01*sj5);
IkReal x1385=((1.0)*x1378);
IkReal x1386=((1.0)*x1377);
evalcond[0]=((((-1.0)*x1383*x1386))+((x1377*x1382))+(((-1.0)*r22*x1385)));
evalcond[1]=((((-1.0)*x1382*x1385))+(((-1.0)*r22*x1386))+((x1378*x1383)));
evalcond[2]=((((-1.0)*r12*x1385))+cj0+((x1377*x1379))+(((-1.0)*x1381*x1386)));
evalcond[3]=(cj0+(((-1.0)*x1384*x1385))+(((-1.0)*r02*x1386))+((x1378*x1380)));
evalcond[4]=((((-1.0)*r12*x1386))+sj0+((x1378*x1381))+(((-1.0)*x1379*x1385)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x1385))+(((-1.0)*x1380*x1386))+((x1377*x1384)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1387=((1.0)*cj5);
CheckValue<IkReal> x1388 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x1387))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1388.valid){
continue;
}
CheckValue<IkReal> x1389=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x1387)))),-1);
if(!x1389.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1388.value)+(((1.5707963267949)*(x1389.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1390=IKsin(j4);
IkReal x1391=IKcos(j4);
IkReal x1392=(r11*sj5);
IkReal x1393=(cj5*r00);
IkReal x1394=(cj5*r10);
IkReal x1395=(r21*sj5);
IkReal x1396=(cj5*r20);
IkReal x1397=(r01*sj5);
IkReal x1398=((1.0)*x1391);
IkReal x1399=((1.0)*x1390);
evalcond[0]=((((-1.0)*x1396*x1399))+((x1390*x1395))+(((-1.0)*r22*x1398)));
evalcond[1]=((((-1.0)*x1395*x1398))+(((-1.0)*r22*x1399))+((x1391*x1396)));
evalcond[2]=((((-1.0)*r12*x1398))+cj0+(((-1.0)*x1394*x1399))+((x1390*x1392)));
evalcond[3]=((((-1.0)*r02*x1399))+cj0+(((-1.0)*x1397*x1398))+((x1391*x1393)));
evalcond[4]=((((-1.0)*x1392*x1398))+(((-1.0)*r12*x1399))+sj0+((x1391*x1394)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x1398))+(((-1.0)*x1393*x1399))+((x1390*x1397)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.14018460980658)*py))+(((-0.67478761815078)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.14018460980658)*px))+(((0.67478761815078)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.14018460980658)*py))+(((-0.67478761815078)*px))))+IKsqr(((((-2.14018460980658)*px))+(((0.67478761815078)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.14018460980658)*py))+(((-0.67478761815078)*px))), ((((-2.14018460980658)*px))+(((0.67478761815078)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1400=IKcos(j0);
IkReal x1401=IKsin(j0);
evalcond[0]=((((-0.134)*x1401))+(((-1.0)*px))+(((-0.425)*x1400)));
evalcond[1]=((((-1.0)*py))+(((-0.425)*x1401))+(((0.134)*x1400)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1402=((1.0)*cj5);
IkReal x1403=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1402)));
j4eval[0]=x1403;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1402)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1403);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1404=cj5*cj5;
IkReal x1405=((1.0)*r21);
IkReal x1406=(cj5*sj5);
IkReal x1407=((1.0)*r20);
IkReal x1408=((((-1.0)*r01*x1406*x1407))+(((-1.0)*r00*x1405*x1406))+((r01*r21))+((r00*r20*x1404))+((r02*r22))+(((-1.0)*r01*x1404*x1405)));
j4eval[0]=x1408;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1407))))));
j4eval[2]=IKsign(x1408);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1409=cj5*cj5;
IkReal x1410=(r21*sj5);
IkReal x1411=(r11*r21);
IkReal x1412=((1.0)*cj5*r20);
IkReal x1413=(((r10*r20*x1409))+(((-1.0)*cj5*r10*x1410))+((r12*r22))+(((-1.0)*r11*sj5*x1412))+x1411+(((-1.0)*x1409*x1411)));
j4eval[0]=x1413;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*sj0*x1412))+((sj0*x1410))))));
j4eval[2]=IKsign(x1413);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1414=cj5*cj5;
IkReal x1415=(r21*sj5);
IkReal x1416=(r11*r21);
IkReal x1417=((1.0)*cj5*r20);
CheckValue<IkReal> x1418 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*sj0*x1417))+((sj0*x1415)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1418.valid){
continue;
}
CheckValue<IkReal> x1419=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1414*x1416))+(((-1.0)*cj5*r10*x1415))+((r12*r22))+(((-1.0)*r11*sj5*x1417))+((r10*r20*x1414))+x1416)),-1);
if(!x1419.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1418.value)+(((1.5707963267949)*(x1419.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1420=IKsin(j4);
IkReal x1421=IKcos(j4);
IkReal x1422=(r11*sj5);
IkReal x1423=(cj5*r00);
IkReal x1424=(cj5*r10);
IkReal x1425=(r21*sj5);
IkReal x1426=(cj5*r20);
IkReal x1427=(r01*sj5);
IkReal x1428=((1.0)*x1421);
IkReal x1429=((1.0)*x1420);
evalcond[0]=((((-1.0)*x1426*x1429))+((x1420*x1425))+(((-1.0)*r22*x1428)));
evalcond[1]=((((-1.0)*x1425*x1428))+(((-1.0)*r22*x1429))+((x1421*x1426)));
evalcond[2]=(((x1420*x1422))+cj0+(((-1.0)*x1424*x1429))+(((-1.0)*r12*x1428)));
evalcond[3]=(cj0+(((-1.0)*x1427*x1428))+(((-1.0)*r02*x1429))+((x1421*x1423)));
evalcond[4]=(sj0+(((-1.0)*r12*x1429))+(((-1.0)*x1422*x1428))+((x1421*x1424)));
evalcond[5]=((((-1.0)*sj0))+((x1420*x1427))+(((-1.0)*x1423*x1429))+(((-1.0)*r02*x1428)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1430=cj5*cj5;
IkReal x1431=((1.0)*r21);
IkReal x1432=(cj5*sj5);
IkReal x1433=((1.0)*r20);
CheckValue<IkReal> x1434=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1432*x1433))+(((-1.0)*r01*x1430*x1431))+(((-1.0)*r00*x1431*x1432))+((r01*r21))+((r00*r20*x1430))+((r02*r22)))),-1);
if(!x1434.valid){
continue;
}
CheckValue<IkReal> x1435 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1433)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1435.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1434.value)))+(x1435.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1436=IKsin(j4);
IkReal x1437=IKcos(j4);
IkReal x1438=(r11*sj5);
IkReal x1439=(cj5*r00);
IkReal x1440=(cj5*r10);
IkReal x1441=(r21*sj5);
IkReal x1442=(cj5*r20);
IkReal x1443=(r01*sj5);
IkReal x1444=((1.0)*x1437);
IkReal x1445=((1.0)*x1436);
evalcond[0]=((((-1.0)*r22*x1444))+((x1436*x1441))+(((-1.0)*x1442*x1445)));
evalcond[1]=(((x1437*x1442))+(((-1.0)*r22*x1445))+(((-1.0)*x1441*x1444)));
evalcond[2]=(((x1436*x1438))+cj0+(((-1.0)*r12*x1444))+(((-1.0)*x1440*x1445)));
evalcond[3]=(cj0+((x1437*x1439))+(((-1.0)*r02*x1445))+(((-1.0)*x1443*x1444)));
evalcond[4]=(((x1437*x1440))+sj0+(((-1.0)*x1438*x1444))+(((-1.0)*r12*x1445)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x1439*x1445))+((x1436*x1443))+(((-1.0)*r02*x1444)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1446=((1.0)*cj5);
CheckValue<IkReal> x1447=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1446))+(((-1.0)*r00*sj5)))),-1);
if(!x1447.valid){
continue;
}
CheckValue<IkReal> x1448 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1446)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1448.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1447.value)))+(x1448.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1449=IKsin(j4);
IkReal x1450=IKcos(j4);
IkReal x1451=(r11*sj5);
IkReal x1452=(cj5*r00);
IkReal x1453=(cj5*r10);
IkReal x1454=(r21*sj5);
IkReal x1455=(cj5*r20);
IkReal x1456=(r01*sj5);
IkReal x1457=((1.0)*x1450);
IkReal x1458=((1.0)*x1449);
evalcond[0]=((((-1.0)*r22*x1457))+(((-1.0)*x1455*x1458))+((x1449*x1454)));
evalcond[1]=((((-1.0)*r22*x1458))+((x1450*x1455))+(((-1.0)*x1454*x1457)));
evalcond[2]=(cj0+(((-1.0)*x1453*x1458))+((x1449*x1451))+(((-1.0)*r12*x1457)));
evalcond[3]=(cj0+((x1450*x1452))+(((-1.0)*r02*x1458))+(((-1.0)*x1456*x1457)));
evalcond[4]=(sj0+((x1450*x1453))+(((-1.0)*x1451*x1457))+(((-1.0)*r12*x1458)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x1457))+(((-1.0)*x1452*x1458))+((x1449*x1456)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.14018460980658)*py))+(((-0.67478761815078)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.14018460980658)*px))+(((0.67478761815078)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.14018460980658)*py))+(((-0.67478761815078)*px))))+IKsqr(((((-2.14018460980658)*px))+(((0.67478761815078)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.14018460980658)*py))+(((-0.67478761815078)*px))), ((((-2.14018460980658)*px))+(((0.67478761815078)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1459=IKcos(j0);
IkReal x1460=IKsin(j0);
evalcond[0]=((((-0.134)*x1460))+(((-1.0)*px))+(((-0.425)*x1459)));
evalcond[1]=((((-1.0)*py))+(((-0.425)*x1460))+(((0.134)*x1459)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1461=((1.0)*cj5);
IkReal x1462=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1461)));
j4eval[0]=x1462;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1461)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1462);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1463=((1.0)*cj5);
IkReal x1464=((((-1.0)*r10*sj5))+(((-1.0)*r11*x1463)));
j4eval[0]=x1464;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x1463))))));
j4eval[2]=IKsign(x1464);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1465=cj5*cj5;
IkReal x1466=((1.0)*sj5);
IkReal x1467=(cj5*r20);
IkReal x1468=(r11*r21);
IkReal x1469=((((-1.0)*r11*x1466*x1467))+(((-1.0)*cj5*r10*r21*x1466))+((r12*r22))+((r10*r20*x1465))+x1468+(((-1.0)*x1465*x1468)));
j4eval[0]=x1469;
j4eval[1]=IKsign(x1469);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs((((cj0*x1467))+(((-1.0)*cj0*r21*x1466))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1470=cj5*cj5;
IkReal x1471=((1.0)*sj5);
IkReal x1472=(cj5*r20);
IkReal x1473=(r11*r21);
CheckValue<IkReal> x1474 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x1471))+((cj0*x1472)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1474.valid){
continue;
}
CheckValue<IkReal> x1475=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10*r21*x1471))+(((-1.0)*r11*x1471*x1472))+((r12*r22))+x1473+(((-1.0)*x1470*x1473))+((r10*r20*x1470)))),-1);
if(!x1475.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1474.value)+(((1.5707963267949)*(x1475.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1476=IKsin(j4);
IkReal x1477=IKcos(j4);
IkReal x1478=((1.0)*sj0);
IkReal x1479=(cj5*r00);
IkReal x1480=(r11*sj5);
IkReal x1481=(cj5*r10);
IkReal x1482=(r21*sj5);
IkReal x1483=(cj5*r20);
IkReal x1484=(r01*sj5);
IkReal x1485=((1.0)*x1477);
IkReal x1486=((1.0)*x1476);
evalcond[0]=(((x1476*x1482))+(((-1.0)*x1483*x1486))+(((-1.0)*r22*x1485)));
evalcond[1]=((((-1.0)*x1482*x1485))+((x1477*x1483))+(((-1.0)*r22*x1486)));
evalcond[2]=(((x1476*x1480))+cj0+(((-1.0)*r12*x1485))+(((-1.0)*x1481*x1486)));
evalcond[3]=((((-1.0)*x1479*x1486))+((x1476*x1484))+(((-1.0)*r02*x1485))+(((-1.0)*x1478)));
evalcond[4]=((((-1.0)*x1484*x1485))+(((-1.0)*r02*x1486))+((x1477*x1479))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x1486))+((x1477*x1481))+(((-1.0)*x1480*x1485))+(((-1.0)*x1478)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1487=((1.0)*cj5);
CheckValue<IkReal> x1488=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x1487))+(((-1.0)*r10*sj5)))),-1);
if(!x1488.valid){
continue;
}
CheckValue<IkReal> x1489 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x1487))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1489.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1488.value)))+(x1489.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1490=IKsin(j4);
IkReal x1491=IKcos(j4);
IkReal x1492=((1.0)*sj0);
IkReal x1493=(cj5*r00);
IkReal x1494=(r11*sj5);
IkReal x1495=(cj5*r10);
IkReal x1496=(r21*sj5);
IkReal x1497=(cj5*r20);
IkReal x1498=(r01*sj5);
IkReal x1499=((1.0)*x1491);
IkReal x1500=((1.0)*x1490);
evalcond[0]=((((-1.0)*x1497*x1500))+(((-1.0)*r22*x1499))+((x1490*x1496)));
evalcond[1]=((((-1.0)*r22*x1500))+(((-1.0)*x1496*x1499))+((x1491*x1497)));
evalcond[2]=((((-1.0)*r12*x1499))+cj0+(((-1.0)*x1495*x1500))+((x1490*x1494)));
evalcond[3]=((((-1.0)*x1492))+(((-1.0)*r02*x1499))+(((-1.0)*x1493*x1500))+((x1490*x1498)));
evalcond[4]=(((x1491*x1493))+(((-1.0)*r02*x1500))+(((-1.0)*x1498*x1499))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1494*x1499))+(((-1.0)*x1492))+((x1491*x1495))+(((-1.0)*r12*x1500)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1501=((1.0)*cj5);
CheckValue<IkReal> x1502 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x1501))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1502.valid){
continue;
}
CheckValue<IkReal> x1503=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1501))+(((-1.0)*r00*sj5)))),-1);
if(!x1503.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1502.value)+(((1.5707963267949)*(x1503.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1504=IKsin(j4);
IkReal x1505=IKcos(j4);
IkReal x1506=((1.0)*sj0);
IkReal x1507=(cj5*r00);
IkReal x1508=(r11*sj5);
IkReal x1509=(cj5*r10);
IkReal x1510=(r21*sj5);
IkReal x1511=(cj5*r20);
IkReal x1512=(r01*sj5);
IkReal x1513=((1.0)*x1505);
IkReal x1514=((1.0)*x1504);
evalcond[0]=((((-1.0)*r22*x1513))+((x1504*x1510))+(((-1.0)*x1511*x1514)));
evalcond[1]=((((-1.0)*r22*x1514))+(((-1.0)*x1510*x1513))+((x1505*x1511)));
evalcond[2]=(cj0+((x1504*x1508))+(((-1.0)*x1509*x1514))+(((-1.0)*r12*x1513)));
evalcond[3]=((((-1.0)*x1506))+((x1504*x1512))+(((-1.0)*x1507*x1514))+(((-1.0)*r02*x1513)));
evalcond[4]=((((-1.0)*r02*x1514))+(((-1.0)*x1512*x1513))+((x1505*x1507))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1506))+((x1505*x1509))+(((-1.0)*x1508*x1513))+(((-1.0)*r12*x1514)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-7.79683671195407e-6)*py))+(((-7.46268656715603)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-7.79683671195407e-6)*px))+(((7.46268656715603)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-7.79683671195407e-6)*py))+(((-7.46268656715603)*px))))+IKsqr(((((-7.79683671195407e-6)*px))+(((7.46268656715603)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-7.79683671195407e-6)*py))+(((-7.46268656715603)*px))), ((((-7.79683671195407e-6)*px))+(((7.46268656715603)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1515=IKcos(j0);
IkReal x1516=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((-1.4e-7)*x1515))+(((-0.134)*x1516)));
evalcond[1]=((((0.134)*x1515))+(((-1.0)*py))+(((-1.4e-7)*x1516)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1517=((1.0)*cj5);
IkReal x1518=((((-1.0)*r01*x1517))+(((-1.0)*r00*sj5)));
j4eval[0]=x1518;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r20*x1517))+((cj0*r21*sj5))))));
j4eval[2]=IKsign(x1518);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1519=cj5*cj5;
IkReal x1520=((1.0)*r21);
IkReal x1521=(cj5*sj5);
IkReal x1522=((1.0)*r20);
IkReal x1523=((((-1.0)*r01*x1521*x1522))+((r01*r21))+(((-1.0)*r01*x1519*x1520))+(((-1.0)*r00*x1520*x1521))+((r02*r22))+((r00*r20*x1519)));
j4eval[0]=x1523;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1522)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1523);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1524=cj5*cj5;
IkReal x1525=(r21*sj5);
IkReal x1526=(r11*r21);
IkReal x1527=((1.0)*cj5*r20);
IkReal x1528=((((-1.0)*x1524*x1526))+((r12*r22))+(((-1.0)*r11*sj5*x1527))+x1526+(((-1.0)*cj5*r10*x1525))+((r10*r20*x1524)));
j4eval[0]=x1528;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*sj0*x1527))+((sj0*x1525))))));
j4eval[2]=IKsign(x1528);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1529=cj5*cj5;
IkReal x1530=(r21*sj5);
IkReal x1531=(r11*r21);
IkReal x1532=((1.0)*cj5*r20);
CheckValue<IkReal> x1533=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1529*x1531))+((r12*r22))+x1531+(((-1.0)*cj5*r10*x1530))+(((-1.0)*r11*sj5*x1532))+((r10*r20*x1529)))),-1);
if(!x1533.valid){
continue;
}
CheckValue<IkReal> x1534 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*sj0*x1532))+((sj0*x1530)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1534.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1533.value)))+(x1534.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1535=IKsin(j4);
IkReal x1536=IKcos(j4);
IkReal x1537=(r11*sj5);
IkReal x1538=(cj5*r00);
IkReal x1539=(cj5*r10);
IkReal x1540=(r21*sj5);
IkReal x1541=(cj5*r20);
IkReal x1542=(r01*sj5);
IkReal x1543=((1.0)*x1536);
IkReal x1544=((1.0)*x1535);
evalcond[0]=((((-1.0)*r22*x1543))+((x1535*x1540))+(((-1.0)*x1541*x1544)));
evalcond[1]=(((x1536*x1541))+(((-1.0)*x1540*x1543))+(((-1.0)*r22*x1544)));
evalcond[2]=(cj0+((x1535*x1537))+(((-1.0)*x1539*x1544))+(((-1.0)*r12*x1543)));
evalcond[3]=((((-1.0)*r02*x1544))+cj0+((x1536*x1538))+(((-1.0)*x1542*x1543)));
evalcond[4]=(sj0+((x1536*x1539))+(((-1.0)*x1537*x1543))+(((-1.0)*r12*x1544)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x1543))+((x1535*x1542))+(((-1.0)*x1538*x1544)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1545=cj5*cj5;
IkReal x1546=((1.0)*r21);
IkReal x1547=(cj5*sj5);
IkReal x1548=((1.0)*r20);
CheckValue<IkReal> x1549=IKPowWithIntegerCheck(IKsign((((r01*r21))+(((-1.0)*r00*x1546*x1547))+((r00*r20*x1545))+(((-1.0)*r01*x1545*x1546))+((r02*r22))+(((-1.0)*r01*x1547*x1548)))),-1);
if(!x1549.valid){
continue;
}
CheckValue<IkReal> x1550 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1548)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1550.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1549.value)))+(x1550.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1551=IKsin(j4);
IkReal x1552=IKcos(j4);
IkReal x1553=(r11*sj5);
IkReal x1554=(cj5*r00);
IkReal x1555=(cj5*r10);
IkReal x1556=(r21*sj5);
IkReal x1557=(cj5*r20);
IkReal x1558=(r01*sj5);
IkReal x1559=((1.0)*x1552);
IkReal x1560=((1.0)*x1551);
evalcond[0]=(((x1551*x1556))+(((-1.0)*r22*x1559))+(((-1.0)*x1557*x1560)));
evalcond[1]=(((x1552*x1557))+(((-1.0)*r22*x1560))+(((-1.0)*x1556*x1559)));
evalcond[2]=(((x1551*x1553))+cj0+(((-1.0)*x1555*x1560))+(((-1.0)*r12*x1559)));
evalcond[3]=((((-1.0)*x1558*x1559))+(((-1.0)*r02*x1560))+cj0+((x1552*x1554)));
evalcond[4]=(sj0+((x1552*x1555))+(((-1.0)*x1553*x1559))+(((-1.0)*r12*x1560)));
evalcond[5]=(((x1551*x1558))+(((-1.0)*sj0))+(((-1.0)*r02*x1559))+(((-1.0)*x1554*x1560)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1561=((1.0)*cj5);
CheckValue<IkReal> x1562 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1561)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1562.valid){
continue;
}
CheckValue<IkReal> x1563=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x1561)))),-1);
if(!x1563.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1562.value)+(((1.5707963267949)*(x1563.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1564=IKsin(j4);
IkReal x1565=IKcos(j4);
IkReal x1566=(r11*sj5);
IkReal x1567=(cj5*r00);
IkReal x1568=(cj5*r10);
IkReal x1569=(r21*sj5);
IkReal x1570=(cj5*r20);
IkReal x1571=(r01*sj5);
IkReal x1572=((1.0)*x1565);
IkReal x1573=((1.0)*x1564);
evalcond[0]=((((-1.0)*x1570*x1573))+(((-1.0)*r22*x1572))+((x1564*x1569)));
evalcond[1]=((((-1.0)*r22*x1573))+(((-1.0)*x1569*x1572))+((x1565*x1570)));
evalcond[2]=(cj0+(((-1.0)*x1568*x1573))+(((-1.0)*r12*x1572))+((x1564*x1566)));
evalcond[3]=((((-1.0)*r02*x1573))+(((-1.0)*x1571*x1572))+cj0+((x1565*x1567)));
evalcond[4]=(sj0+(((-1.0)*x1566*x1572))+(((-1.0)*r12*x1573))+((x1565*x1568)));
evalcond[5]=((((-1.0)*r02*x1572))+(((-1.0)*sj0))+(((-1.0)*x1567*x1573))+((x1564*x1571)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-7.79683671195407e-6)*py))+(((-7.46268656715603)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-7.79683671195407e-6)*px))+(((7.46268656715603)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-7.79683671195407e-6)*py))+(((-7.46268656715603)*px))))+IKsqr(((((-7.79683671195407e-6)*px))+(((7.46268656715603)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-7.79683671195407e-6)*py))+(((-7.46268656715603)*px))), ((((-7.79683671195407e-6)*px))+(((7.46268656715603)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1574=IKcos(j0);
IkReal x1575=IKsin(j0);
evalcond[0]=((((-1.4e-7)*x1574))+(((-0.134)*x1575))+(((-1.0)*px)));
evalcond[1]=((((-1.4e-7)*x1575))+(((0.134)*x1574))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1576=((1.0)*cj5);
IkReal x1577=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1576)));
j4eval[0]=x1577;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1576))))));
j4eval[2]=IKsign(x1577);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1578=((1.0)*cj5);
IkReal x1579=((((-1.0)*r10*sj5))+(((-1.0)*r11*x1578)));
j4eval[0]=x1579;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x1578))))));
j4eval[2]=IKsign(x1579);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1580=cj5*cj5;
IkReal x1581=((1.0)*sj5);
IkReal x1582=(cj5*r20);
IkReal x1583=(r11*r21);
IkReal x1584=(((r10*r20*x1580))+((r12*r22))+(((-1.0)*r11*x1581*x1582))+(((-1.0)*x1580*x1583))+(((-1.0)*cj5*r10*r21*x1581))+x1583);
j4eval[0]=x1584;
j4eval[1]=IKsign(x1584);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x1581))+((cj0*x1582)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1585=cj5*cj5;
IkReal x1586=((1.0)*sj5);
IkReal x1587=(cj5*r20);
IkReal x1588=(r11*r21);
CheckValue<IkReal> x1589 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x1586))+((cj0*x1587)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1589.valid){
continue;
}
CheckValue<IkReal> x1590=IKPowWithIntegerCheck(IKsign((((r10*r20*x1585))+((r12*r22))+(((-1.0)*cj5*r10*r21*x1586))+(((-1.0)*x1585*x1588))+x1588+(((-1.0)*r11*x1586*x1587)))),-1);
if(!x1590.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1589.value)+(((1.5707963267949)*(x1590.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1591=IKsin(j4);
IkReal x1592=IKcos(j4);
IkReal x1593=((1.0)*sj0);
IkReal x1594=(cj5*r00);
IkReal x1595=(r11*sj5);
IkReal x1596=(cj5*r10);
IkReal x1597=(r21*sj5);
IkReal x1598=(cj5*r20);
IkReal x1599=(r01*sj5);
IkReal x1600=((1.0)*x1592);
IkReal x1601=((1.0)*x1591);
evalcond[0]=((((-1.0)*r22*x1600))+((x1591*x1597))+(((-1.0)*x1598*x1601)));
evalcond[1]=(((x1592*x1598))+(((-1.0)*r22*x1601))+(((-1.0)*x1597*x1600)));
evalcond[2]=(cj0+((x1591*x1595))+(((-1.0)*x1596*x1601))+(((-1.0)*r12*x1600)));
evalcond[3]=((((-1.0)*x1593))+(((-1.0)*x1594*x1601))+((x1591*x1599))+(((-1.0)*r02*x1600)));
evalcond[4]=(((x1592*x1594))+(((-1.0)*x1599*x1600))+(((-1.0)*r02*x1601))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1593))+((x1592*x1596))+(((-1.0)*x1595*x1600))+(((-1.0)*r12*x1601)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1602=((1.0)*cj5);
CheckValue<IkReal> x1603=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x1602)))),-1);
if(!x1603.valid){
continue;
}
CheckValue<IkReal> x1604 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x1602)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1604.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1603.value)))+(x1604.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1605=IKsin(j4);
IkReal x1606=IKcos(j4);
IkReal x1607=((1.0)*sj0);
IkReal x1608=(cj5*r00);
IkReal x1609=(r11*sj5);
IkReal x1610=(cj5*r10);
IkReal x1611=(r21*sj5);
IkReal x1612=(cj5*r20);
IkReal x1613=(r01*sj5);
IkReal x1614=((1.0)*x1606);
IkReal x1615=((1.0)*x1605);
evalcond[0]=((((-1.0)*r22*x1614))+((x1605*x1611))+(((-1.0)*x1612*x1615)));
evalcond[1]=((((-1.0)*x1611*x1614))+(((-1.0)*r22*x1615))+((x1606*x1612)));
evalcond[2]=((((-1.0)*r12*x1614))+cj0+(((-1.0)*x1610*x1615))+((x1605*x1609)));
evalcond[3]=((((-1.0)*x1607))+(((-1.0)*r02*x1614))+(((-1.0)*x1608*x1615))+((x1605*x1613)));
evalcond[4]=((((-1.0)*r02*x1615))+(((-1.0)*x1613*x1614))+((x1606*x1608))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x1615))+(((-1.0)*x1607))+(((-1.0)*x1609*x1614))+((x1606*x1610)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1616=((1.0)*cj5);
CheckValue<IkReal> x1617=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1616))+(((-1.0)*r00*sj5)))),-1);
if(!x1617.valid){
continue;
}
CheckValue<IkReal> x1618 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1616)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1618.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1617.value)))+(x1618.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1619=IKsin(j4);
IkReal x1620=IKcos(j4);
IkReal x1621=((1.0)*sj0);
IkReal x1622=(cj5*r00);
IkReal x1623=(r11*sj5);
IkReal x1624=(cj5*r10);
IkReal x1625=(r21*sj5);
IkReal x1626=(cj5*r20);
IkReal x1627=(r01*sj5);
IkReal x1628=((1.0)*x1620);
IkReal x1629=((1.0)*x1619);
evalcond[0]=((((-1.0)*r22*x1628))+((x1619*x1625))+(((-1.0)*x1626*x1629)));
evalcond[1]=(((x1620*x1626))+(((-1.0)*x1625*x1628))+(((-1.0)*r22*x1629)));
evalcond[2]=((((-1.0)*r12*x1628))+cj0+(((-1.0)*x1624*x1629))+((x1619*x1623)));
evalcond[3]=((((-1.0)*x1621))+(((-1.0)*r02*x1628))+(((-1.0)*x1622*x1629))+((x1619*x1627)));
evalcond[4]=(((x1620*x1622))+(((-1.0)*r02*x1629))+(((-1.0)*x1627*x1628))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x1629))+((x1620*x1624))+(((-1.0)*x1621))+(((-1.0)*x1623*x1628)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1630=(sj1*sj2);
IkReal x1631=(r00*sj5);
IkReal x1632=(cj1*cj2);
IkReal x1633=(cj5*r01);
IkReal x1634=((212.5)*cj1);
IkReal x1635=((7.0e-5)*sj1);
IkReal x1636=((500.0)*px);
CheckValue<IkReal> x1637=IKPowWithIntegerCheck(((((67.0)*x1630))+(((-67.0)*x1632))),-1);
if(!x1637.valid){
continue;
}
CheckValue<IkReal> x1638=IKPowWithIntegerCheck((x1630+(((-1.0)*x1632))),-1);
if(!x1638.valid){
continue;
}
if( IKabs(((x1637.value)*(((((-146.0)*x1631*x1632))+(((-146.0)*x1632*x1633))+(((-1.0)*x1633*x1635))+(((-1.0)*x1633*x1634))+(((146.0)*x1630*x1631))+(((146.0)*x1630*x1633))+((x1632*x1636))+(((-1.0)*x1630*x1636))+(((-1.0)*x1631*x1634))+(((-1.0)*x1631*x1635)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1638.value)*(((((-1.0)*x1633))+(((-1.0)*x1631)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1637.value)*(((((-146.0)*x1631*x1632))+(((-146.0)*x1632*x1633))+(((-1.0)*x1633*x1635))+(((-1.0)*x1633*x1634))+(((146.0)*x1630*x1631))+(((146.0)*x1630*x1633))+((x1632*x1636))+(((-1.0)*x1630*x1636))+(((-1.0)*x1631*x1634))+(((-1.0)*x1631*x1635))))))+IKsqr(((x1638.value)*(((((-1.0)*x1633))+(((-1.0)*x1631))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x1637.value)*(((((-146.0)*x1631*x1632))+(((-146.0)*x1632*x1633))+(((-1.0)*x1633*x1635))+(((-1.0)*x1633*x1634))+(((146.0)*x1630*x1631))+(((146.0)*x1630*x1633))+((x1632*x1636))+(((-1.0)*x1630*x1636))+(((-1.0)*x1631*x1634))+(((-1.0)*x1631*x1635))))), ((x1638.value)*(((((-1.0)*x1633))+(((-1.0)*x1631))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1639=IKcos(j0);
IkReal x1640=IKsin(j0);
IkReal x1641=((0.1)*sj5);
IkReal x1642=(sj1*sj2);
IkReal x1643=(cj5*r11);
IkReal x1644=(cj5*r01);
IkReal x1645=((0.425)*cj1);
IkReal x1646=(cj1*cj2);
IkReal x1647=((1.4e-7)*sj1);
IkReal x1648=((0.392)*x1640);
IkReal x1649=((0.392)*x1639);
evalcond[0]=(((r00*sj5))+x1644+(((-1.0)*x1639*x1646))+((x1639*x1642)));
evalcond[1]=(((x1640*x1642))+((r10*sj5))+x1643+(((-1.0)*x1640*x1646)));
evalcond[2]=((((-1.0)*r00*x1641))+(((-0.1)*x1644))+(((-0.134)*x1640))+(((-1.0)*x1642*x1649))+(((-1.0)*px))+((x1646*x1649))+((x1639*x1645))+((x1639*x1647)));
evalcond[3]=(((x1640*x1647))+((x1640*x1645))+(((0.134)*x1639))+(((-0.1)*x1643))+(((-1.0)*x1642*x1648))+(((-1.0)*py))+(((-1.0)*r10*x1641))+((x1646*x1648)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1650=((1.0)*cj5);
IkReal x1651=((((-1.0)*r01*x1650))+(((-1.0)*r00*sj5)));
j4eval[0]=x1651;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1650))))));
j4eval[2]=IKsign(x1651);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1652=((1.0)*cj5);
IkReal x1653=((((-1.0)*r10*sj5))+(((-1.0)*r11*x1652)));
j4eval[0]=x1653;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x1652))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x1653);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1654=((1.0)*sj0);
IkReal x1655=((1.0)*cj0);
IkReal x1656=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x1656;
j4eval[1]=((IKabs(((((-1.0)*r11*sj5*x1654))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x1655)))))+(IKabs(((((-1.0)*r12*x1654))+(((-1.0)*r02*x1655))))));
j4eval[2]=IKsign(x1656);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x1657=((-1.0)*r20);
IkReal x1659 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x1659)==0){
continue;
}
IkReal x1658=pow(x1659,-0.5);
CheckValue<IkReal> x1660 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1657),IKFAST_ATAN2_MAGTHRESH);
if(!x1660.valid){
continue;
}
IkReal gconst78=((-1.0)*(x1660.value));
IkReal gconst79=(r21*x1658);
IkReal gconst80=(x1657*x1658);
CheckValue<IkReal> x1661 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1661.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x1661.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1662=((-1.0)*r20);
IkReal x1663=x1658;
CheckValue<IkReal> x1665 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1662),IKFAST_ATAN2_MAGTHRESH);
if(!x1665.valid){
continue;
}
IkReal x1664=((-1.0)*(x1665.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x1664;
IkReal gconst78=x1664;
IkReal gconst79=(r21*x1663);
IkReal gconst80=(x1662*x1663);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x1666=((-1.0)*r20);
IkReal x1667=x1658;
CheckValue<IkReal> x1669 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1666),IKFAST_ATAN2_MAGTHRESH);
if(!x1669.valid){
continue;
}
IkReal x1668=((-1.0)*(x1669.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x1668;
IkReal gconst78=x1668;
IkReal gconst79=(r21*x1667);
IkReal gconst80=(x1666*x1667);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1670=((-1.0)*r20);
IkReal x1671=x1658;
CheckValue<IkReal> x1673 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1670),IKFAST_ATAN2_MAGTHRESH);
if(!x1673.valid){
continue;
}
IkReal x1672=((-1.0)*(x1673.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x1672;
IkReal gconst78=x1672;
IkReal gconst79=(r21*x1671);
IkReal gconst80=(x1670*x1671);
IkReal x1674=r22*r22;
CheckValue<IkReal> x1677=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x1674))),-1);
if(!x1677.valid){
continue;
}
IkReal x1675=x1677.value;
IkReal x1676=((((2.0)*x1675*(r20*r20)*(r21*r21)))+x1674+((x1675*(r20*r20*r20*r20)))+((x1675*(r21*r21*r21*r21))));
j4eval[0]=x1676;
j4eval[1]=IKsign(x1676);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1678=(sj1*sj2);
IkReal x1679=(gconst80*r20);
IkReal x1680=(gconst79*r21);
IkReal x1681=(cj1*cj2);
CheckValue<IkReal> x1682 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x1681))+((r22*x1678)))),IkReal(((((-1.0)*x1680*x1681))+((x1679*x1681))+(((-1.0)*x1678*x1679))+((x1678*x1680)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1682.valid){
continue;
}
CheckValue<IkReal> x1683=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x1679*x1679)+(((-2.0)*x1679*x1680))+(x1680*x1680))),-1);
if(!x1683.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1682.value)+(((1.5707963267949)*(x1683.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1684=IKsin(j4);
IkReal x1685=IKcos(j4);
IkReal x1686=(gconst79*r01);
IkReal x1687=(gconst79*r21);
IkReal x1688=((1.0)*cj2);
IkReal x1689=(gconst79*r11);
IkReal x1690=((1.0)*sj0);
IkReal x1691=(cj1*sj2);
IkReal x1692=((1.0)*x1685);
IkReal x1693=(gconst80*x1685);
IkReal x1694=((1.0)*x1684);
IkReal x1695=(gconst80*x1694);
evalcond[0]=((((-1.0)*r20*x1695))+(((-1.0)*r22*x1692))+((x1684*x1687)));
evalcond[1]=(cj0+(((-1.0)*r12*x1692))+((x1684*x1689))+(((-1.0)*r10*x1695)));
evalcond[2]=((((-1.0)*x1690))+(((-1.0)*r02*x1692))+((x1684*x1686))+(((-1.0)*r00*x1695)));
evalcond[3]=(((r20*x1693))+(((-1.0)*cj1*x1688))+(((-1.0)*x1687*x1692))+((sj1*sj2))+(((-1.0)*r22*x1694)));
evalcond[4]=((((-1.0)*x1686*x1692))+(((-1.0)*cj0*sj1*x1688))+(((-1.0)*cj0*x1691))+((r00*x1693))+(((-1.0)*r02*x1694)));
evalcond[5]=((((-1.0)*sj0*sj1*x1688))+((r10*x1693))+(((-1.0)*r12*x1694))+(((-1.0)*x1690*x1691))+(((-1.0)*x1689*x1692)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1696=((1.0)*gconst80);
CheckValue<IkReal> x1697=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x1696))+(((-1.0)*gconst79*r10)))),-1);
if(!x1697.valid){
continue;
}
CheckValue<IkReal> x1698 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x1696))+((gconst79*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1698.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1697.value)))+(x1698.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1699=IKsin(j4);
IkReal x1700=IKcos(j4);
IkReal x1701=(gconst79*r01);
IkReal x1702=(gconst79*r21);
IkReal x1703=((1.0)*cj2);
IkReal x1704=(gconst79*r11);
IkReal x1705=((1.0)*sj0);
IkReal x1706=(cj1*sj2);
IkReal x1707=((1.0)*x1700);
IkReal x1708=(gconst80*x1700);
IkReal x1709=((1.0)*x1699);
IkReal x1710=(gconst80*x1709);
evalcond[0]=((((-1.0)*r20*x1710))+(((-1.0)*r22*x1707))+((x1699*x1702)));
evalcond[1]=(cj0+(((-1.0)*r10*x1710))+((x1699*x1704))+(((-1.0)*r12*x1707)));
evalcond[2]=((((-1.0)*r00*x1710))+(((-1.0)*r02*x1707))+(((-1.0)*x1705))+((x1699*x1701)));
evalcond[3]=((((-1.0)*x1702*x1707))+(((-1.0)*cj1*x1703))+((sj1*sj2))+((r20*x1708))+(((-1.0)*r22*x1709)));
evalcond[4]=((((-1.0)*cj0*x1706))+((r00*x1708))+(((-1.0)*r02*x1709))+(((-1.0)*x1701*x1707))+(((-1.0)*cj0*sj1*x1703)));
evalcond[5]=((((-1.0)*sj0*sj1*x1703))+(((-1.0)*x1704*x1707))+(((-1.0)*x1705*x1706))+((r10*x1708))+(((-1.0)*r12*x1709)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1711=((1.0)*gconst80);
CheckValue<IkReal> x1712=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst79*r00))+(((-1.0)*r01*x1711)))),-1);
if(!x1712.valid){
continue;
}
CheckValue<IkReal> x1713 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst79*r21))+(((-1.0)*cj0*r20*x1711)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1713.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1712.value)))+(x1713.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1714=IKsin(j4);
IkReal x1715=IKcos(j4);
IkReal x1716=(gconst79*r01);
IkReal x1717=(gconst79*r21);
IkReal x1718=((1.0)*cj2);
IkReal x1719=(gconst79*r11);
IkReal x1720=((1.0)*sj0);
IkReal x1721=(cj1*sj2);
IkReal x1722=((1.0)*x1715);
IkReal x1723=(gconst80*x1715);
IkReal x1724=((1.0)*x1714);
IkReal x1725=(gconst80*x1724);
evalcond[0]=((((-1.0)*r22*x1722))+((x1714*x1717))+(((-1.0)*r20*x1725)));
evalcond[1]=(cj0+(((-1.0)*r10*x1725))+(((-1.0)*r12*x1722))+((x1714*x1719)));
evalcond[2]=(((x1714*x1716))+(((-1.0)*r00*x1725))+(((-1.0)*x1720))+(((-1.0)*r02*x1722)));
evalcond[3]=((((-1.0)*r22*x1724))+(((-1.0)*cj1*x1718))+((sj1*sj2))+(((-1.0)*x1717*x1722))+((r20*x1723)));
evalcond[4]=(((r00*x1723))+(((-1.0)*cj0*sj1*x1718))+(((-1.0)*x1716*x1722))+(((-1.0)*r02*x1724))+(((-1.0)*cj0*x1721)));
evalcond[5]=(((r10*x1723))+(((-1.0)*r12*x1724))+(((-1.0)*sj0*sj1*x1718))+(((-1.0)*x1720*x1721))+(((-1.0)*x1719*x1722)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1726=((-1.0)*r21);
IkReal x1728 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x1728)==0){
continue;
}
IkReal x1727=pow(x1728,-0.5);
CheckValue<IkReal> x1729 = IKatan2WithCheck(IkReal(x1726),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1729.valid){
continue;
}
IkReal gconst81=((3.14159265358979)+(((-1.0)*(x1729.value))));
IkReal gconst82=(x1726*x1727);
IkReal gconst83=((1.0)*r20*x1727);
CheckValue<IkReal> x1730 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1730.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x1730.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1731=((-1.0)*r21);
CheckValue<IkReal> x1734 = IKatan2WithCheck(IkReal(x1731),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1734.valid){
continue;
}
IkReal x1732=((1.0)*(x1734.value));
IkReal x1733=x1727;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x1732)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x1732)));
IkReal gconst82=(x1731*x1733);
IkReal gconst83=((1.0)*r20*x1733);
IkReal x1735=r22*r22;
IkReal x1736=((1.0)*x1735);
CheckValue<IkReal> x1740=IKPowWithIntegerCheck(((-1.0)+x1735),-1);
if(!x1740.valid){
continue;
}
IkReal x1737=x1740.value;
if((((1.0)+(((-1.0)*x1736)))) < -0.00001)
continue;
IkReal x1738=IKsqrt(((1.0)+(((-1.0)*x1736))));
IkReal x1739=(cj0*x1737*x1738);
j4eval[0]=((IKabs((x1739+(((-1.0)*x1736*x1739)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x1741=((-1.0)*r21);
CheckValue<IkReal> x1744 = IKatan2WithCheck(IkReal(x1741),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1744.valid){
continue;
}
IkReal x1742=((1.0)*(x1744.value));
IkReal x1743=x1727;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x1742)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x1742)));
IkReal gconst82=(x1741*x1743);
IkReal gconst83=((1.0)*r20*x1743);
IkReal x1745=r22*r22;
IkReal x1746=((1.0)*x1745);
CheckValue<IkReal> x1750=IKPowWithIntegerCheck(((-1.0)+x1745),-1);
if(!x1750.valid){
continue;
}
IkReal x1747=x1750.value;
if((((1.0)+(((-1.0)*x1746)))) < -0.00001)
continue;
IkReal x1748=IKsqrt(((1.0)+(((-1.0)*x1746))));
IkReal x1749=(sj0*x1747*x1748);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x1749+(((-1.0)*x1746*x1749))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x1751=((-1.0)*r21);
CheckValue<IkReal> x1754 = IKatan2WithCheck(IkReal(x1751),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1754.valid){
continue;
}
IkReal x1752=((1.0)*(x1754.value));
IkReal x1753=x1727;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x1752)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x1752)));
IkReal gconst82=(x1751*x1753);
IkReal gconst83=((1.0)*r20*x1753);
IkReal x1755=r22*r22;
IkReal x1756=(r12*sj0);
IkReal x1757=(cj0*r02);
CheckValue<IkReal> x1761=IKPowWithIntegerCheck(((-1.0)+x1755),-1);
if(!x1761.valid){
continue;
}
IkReal x1758=x1761.value;
if((((1.0)+(((-1.0)*x1755)))) < -0.00001)
continue;
IkReal x1759=IKsqrt(((1.0)+(((-1.0)*x1755))));
IkReal x1760=(r22*x1758*x1759);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs(((((-1.0)*x1757))+(((-1.0)*x1756)))))+(IKabs((((x1756*x1760))+((x1757*x1760))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1762=((1.0)*sj0);
IkReal x1763=((1.0)*cj0);
CheckValue<IkReal> x1764=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst82*r20))+(((-1.0)*gconst83*r21)))),-1);
if(!x1764.valid){
continue;
}
CheckValue<IkReal> x1765 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x1763))+(((-1.0)*r12*x1762)))),IkReal(((((-1.0)*gconst82*r11*x1762))+(((-1.0)*gconst82*r01*x1763))+((gconst83*r10*sj0))+((cj0*gconst83*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1765.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1764.value)))+(x1765.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1766=IKsin(j4);
IkReal x1767=IKcos(j4);
IkReal x1768=(gconst82*r11);
IkReal x1769=((1.0)*cj2);
IkReal x1770=((1.0)*sj0);
IkReal x1771=(cj1*sj2);
IkReal x1772=((1.0)*x1767);
IkReal x1773=(gconst83*x1767);
IkReal x1774=(gconst82*x1766);
IkReal x1775=((1.0)*x1766);
evalcond[0]=((((-1.0)*gconst83*r20*x1775))+((r21*x1774))+(((-1.0)*r22*x1772)));
evalcond[1]=((((-1.0)*gconst83*r10*x1775))+cj0+((x1766*x1768))+(((-1.0)*r12*x1772)));
evalcond[2]=((((-1.0)*gconst83*r00*x1775))+((r01*x1774))+(((-1.0)*r02*x1772))+(((-1.0)*x1770)));
evalcond[3]=((((-1.0)*cj1*x1769))+(((-1.0)*gconst82*r21*x1772))+((sj1*sj2))+((r20*x1773))+(((-1.0)*r22*x1775)));
evalcond[4]=((((-1.0)*cj0*x1771))+((r00*x1773))+(((-1.0)*gconst82*r01*x1772))+(((-1.0)*cj0*sj1*x1769))+(((-1.0)*r02*x1775)));
evalcond[5]=(((r10*x1773))+(((-1.0)*x1770*x1771))+(((-1.0)*x1768*x1772))+(((-1.0)*r12*x1775))+(((-1.0)*sj0*sj1*x1769)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1776=((1.0)*gconst83);
CheckValue<IkReal> x1777=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst82*r10))+(((-1.0)*r11*x1776)))),-1);
if(!x1777.valid){
continue;
}
CheckValue<IkReal> x1778 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x1776))+((gconst82*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1778.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1777.value)))+(x1778.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1779=IKsin(j4);
IkReal x1780=IKcos(j4);
IkReal x1781=(gconst82*r11);
IkReal x1782=((1.0)*cj2);
IkReal x1783=((1.0)*sj0);
IkReal x1784=(cj1*sj2);
IkReal x1785=((1.0)*x1780);
IkReal x1786=(gconst83*x1780);
IkReal x1787=(gconst82*x1779);
IkReal x1788=((1.0)*x1779);
evalcond[0]=((((-1.0)*gconst83*r20*x1788))+(((-1.0)*r22*x1785))+((r21*x1787)));
evalcond[1]=(cj0+(((-1.0)*r12*x1785))+((x1779*x1781))+(((-1.0)*gconst83*r10*x1788)));
evalcond[2]=((((-1.0)*x1783))+(((-1.0)*gconst83*r00*x1788))+(((-1.0)*r02*x1785))+((r01*x1787)));
evalcond[3]=(((r20*x1786))+(((-1.0)*r22*x1788))+((sj1*sj2))+(((-1.0)*cj1*x1782))+(((-1.0)*gconst82*r21*x1785)));
evalcond[4]=((((-1.0)*cj0*sj1*x1782))+(((-1.0)*gconst82*r01*x1785))+(((-1.0)*r02*x1788))+(((-1.0)*cj0*x1784))+((r00*x1786)));
evalcond[5]=(((r10*x1786))+(((-1.0)*x1783*x1784))+(((-1.0)*r12*x1788))+(((-1.0)*x1781*x1785))+(((-1.0)*sj0*sj1*x1782)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1789=((1.0)*gconst83);
CheckValue<IkReal> x1790 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x1789))+((cj0*gconst82*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1790.valid){
continue;
}
CheckValue<IkReal> x1791=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1789))+(((-1.0)*gconst82*r00)))),-1);
if(!x1791.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1790.value)+(((1.5707963267949)*(x1791.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1792=IKsin(j4);
IkReal x1793=IKcos(j4);
IkReal x1794=(gconst82*r11);
IkReal x1795=((1.0)*cj2);
IkReal x1796=((1.0)*sj0);
IkReal x1797=(cj1*sj2);
IkReal x1798=((1.0)*x1793);
IkReal x1799=(gconst83*x1793);
IkReal x1800=(gconst82*x1792);
IkReal x1801=((1.0)*x1792);
evalcond[0]=((((-1.0)*r22*x1798))+(((-1.0)*gconst83*r20*x1801))+((r21*x1800)));
evalcond[1]=((((-1.0)*gconst83*r10*x1801))+cj0+(((-1.0)*r12*x1798))+((x1792*x1794)));
evalcond[2]=((((-1.0)*x1796))+(((-1.0)*gconst83*r00*x1801))+(((-1.0)*r02*x1798))+((r01*x1800)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*cj1*x1795))+(((-1.0)*gconst82*r21*x1798))+(((-1.0)*r22*x1801))+((r20*x1799)));
evalcond[4]=(((r00*x1799))+(((-1.0)*cj0*sj1*x1795))+(((-1.0)*r02*x1801))+(((-1.0)*cj0*x1797))+(((-1.0)*gconst82*r01*x1798)));
evalcond[5]=((((-1.0)*x1796*x1797))+((r10*x1799))+(((-1.0)*sj0*sj1*x1795))+(((-1.0)*r12*x1801))+(((-1.0)*x1794*x1798)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1802=((-1.0)*r10);
IkReal x1804 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x1804)==0){
continue;
}
IkReal x1803=pow(x1804,-0.5);
CheckValue<IkReal> x1805 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x1802),IKFAST_ATAN2_MAGTHRESH);
if(!x1805.valid){
continue;
}
IkReal gconst84=((-1.0)*(x1805.value));
IkReal gconst85=(r11*x1803);
IkReal gconst86=(x1802*x1803);
CheckValue<IkReal> x1806 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x1806.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x1806.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x1807=((-1.0)*r10);
IkReal x1808=x1803;
CheckValue<IkReal> x1810 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x1807),IKFAST_ATAN2_MAGTHRESH);
if(!x1810.valid){
continue;
}
IkReal x1809=((-1.0)*(x1810.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst85;
cj5=gconst86;
j5=x1809;
IkReal gconst84=x1809;
IkReal gconst85=(r11*x1808);
IkReal gconst86=(x1807*x1808);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1811=((1.0)*sj0);
IkReal x1812=((1.0)*gconst85);
CheckValue<IkReal> x1813=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst86*r21))+(((-1.0)*r20*x1812)))),-1);
if(!x1813.valid){
continue;
}
CheckValue<IkReal> x1814 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x1811)))),IkReal((((cj0*gconst86*r00))+(((-1.0)*gconst85*r11*x1811))+((gconst86*r10*sj0))+(((-1.0)*cj0*r01*x1812)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1814.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1813.value)))+(x1814.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1815=IKsin(j4);
IkReal x1816=IKcos(j4);
IkReal x1817=(gconst85*r21);
IkReal x1818=(gconst86*r00);
IkReal x1819=(gconst86*r10);
IkReal x1820=((1.0)*cj2);
IkReal x1821=(gconst85*r11);
IkReal x1822=(gconst85*r01);
IkReal x1823=((1.0)*sj0);
IkReal x1824=(gconst86*r20);
IkReal x1825=(cj1*sj2);
IkReal x1826=((1.0)*x1816);
IkReal x1827=((1.0)*x1815);
evalcond[0]=((((-1.0)*r22*x1826))+((x1815*x1817))+(((-1.0)*x1824*x1827)));
evalcond[1]=(cj0+(((-1.0)*x1819*x1827))+(((-1.0)*r12*x1826))+((x1815*x1821)));
evalcond[2]=((((-1.0)*x1823))+(((-1.0)*x1818*x1827))+(((-1.0)*r02*x1826))+((x1815*x1822)));
evalcond[3]=((((-1.0)*x1817*x1826))+((sj1*sj2))+(((-1.0)*r22*x1827))+((x1816*x1824))+(((-1.0)*cj1*x1820)));
evalcond[4]=(((x1816*x1818))+(((-1.0)*cj0*sj1*x1820))+(((-1.0)*x1822*x1826))+(((-1.0)*r02*x1827))+(((-1.0)*cj0*x1825)));
evalcond[5]=((((-1.0)*x1821*x1826))+(((-1.0)*sj0*sj1*x1820))+((x1816*x1819))+(((-1.0)*r12*x1827))+(((-1.0)*x1823*x1825)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1828=((1.0)*gconst86);
CheckValue<IkReal> x1829 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x1828))+((cj0*gconst85*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1829.valid){
continue;
}
CheckValue<IkReal> x1830=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1828))+(((-1.0)*gconst85*r00)))),-1);
if(!x1830.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1829.value)+(((1.5707963267949)*(x1830.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1831=IKsin(j4);
IkReal x1832=IKcos(j4);
IkReal x1833=(gconst85*r21);
IkReal x1834=(gconst86*r00);
IkReal x1835=(gconst86*r10);
IkReal x1836=((1.0)*cj2);
IkReal x1837=(gconst85*r11);
IkReal x1838=(gconst85*r01);
IkReal x1839=((1.0)*sj0);
IkReal x1840=(gconst86*r20);
IkReal x1841=(cj1*sj2);
IkReal x1842=((1.0)*x1832);
IkReal x1843=((1.0)*x1831);
evalcond[0]=((((-1.0)*r22*x1842))+((x1831*x1833))+(((-1.0)*x1840*x1843)));
evalcond[1]=(cj0+((x1831*x1837))+(((-1.0)*r12*x1842))+(((-1.0)*x1835*x1843)));
evalcond[2]=((((-1.0)*r02*x1842))+(((-1.0)*x1839))+((x1831*x1838))+(((-1.0)*x1834*x1843)));
evalcond[3]=((((-1.0)*r22*x1843))+((x1832*x1840))+((sj1*sj2))+(((-1.0)*x1833*x1842))+(((-1.0)*cj1*x1836)));
evalcond[4]=((((-1.0)*r02*x1843))+(((-1.0)*cj0*x1841))+(((-1.0)*cj0*sj1*x1836))+((x1832*x1834))+(((-1.0)*x1838*x1842)));
evalcond[5]=((((-1.0)*x1839*x1841))+(((-1.0)*r12*x1843))+((x1832*x1835))+(((-1.0)*sj0*sj1*x1836))+(((-1.0)*x1837*x1842)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1844=((-1.0)*r11);
IkReal x1846 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x1846)==0){
continue;
}
IkReal x1845=pow(x1846,-0.5);
CheckValue<IkReal> x1847 = IKatan2WithCheck(IkReal(x1844),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x1847.valid){
continue;
}
IkReal gconst87=((3.14159265358979)+(((-1.0)*(x1847.value))));
IkReal gconst88=(x1844*x1845);
IkReal gconst89=((1.0)*r10*x1845);
CheckValue<IkReal> x1848 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x1848.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x1848.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x1849=((-1.0)*r11);
CheckValue<IkReal> x1852 = IKatan2WithCheck(IkReal(x1849),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x1852.valid){
continue;
}
IkReal x1850=((1.0)*(x1852.value));
IkReal x1851=x1845;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x1850)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x1850)));
IkReal gconst88=(x1849*x1851);
IkReal gconst89=((1.0)*r10*x1851);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x1853=((-1.0)*r11);
CheckValue<IkReal> x1856 = IKatan2WithCheck(IkReal(x1853),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x1856.valid){
continue;
}
IkReal x1854=((1.0)*(x1856.value));
IkReal x1855=x1845;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x1854)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x1854)));
IkReal gconst88=(x1853*x1855);
IkReal gconst89=((1.0)*r10*x1855);
IkReal x1857=r12*r12;
IkReal x1858=((1.0)*sj0);
IkReal x1859=(cj0*r02);
IkReal x1860=x1845;
j4eval[0]=((IKabs(((((-1.0)*x1859))+(((-1.0)*r12*x1858)))))+(IKabs((((sj0*x1857*x1860))+(((-1.0)*x1858*x1860))+((r12*x1859*x1860))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x1861=((-1.0)*r11);
CheckValue<IkReal> x1864 = IKatan2WithCheck(IkReal(x1861),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x1864.valid){
continue;
}
IkReal x1862=((1.0)*(x1864.value));
IkReal x1863=x1845;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x1862)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x1862)));
IkReal gconst88=(x1861*x1863);
IkReal gconst89=((1.0)*r10*x1863);
IkReal x1865=r12*r12;
IkReal x1866=(cj1*cj2*r22);
IkReal x1867=(r22*sj1*sj2);
CheckValue<IkReal> x1871=IKPowWithIntegerCheck(((-1.0)+x1865),-1);
if(!x1871.valid){
continue;
}
IkReal x1868=x1871.value;
if((((1.0)+(((-1.0)*x1865)))) < -0.00001)
continue;
IkReal x1869=IKsqrt(((1.0)+(((-1.0)*x1865))));
IkReal x1870=(r12*x1868*x1869);
j4eval[0]=((IKabs((x1867+(((-1.0)*x1866)))))+(IKabs((((x1866*x1870))+(((-1.0)*x1867*x1870))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1872=(cj1*cj2);
IkReal x1873=(gconst89*r20);
IkReal x1874=(gconst88*r21);
IkReal x1875=(sj1*sj2);
CheckValue<IkReal> x1876 = IKatan2WithCheck(IkReal((((r22*x1875))+(((-1.0)*r22*x1872)))),IkReal((((x1874*x1875))+(((-1.0)*x1873*x1875))+((x1872*x1873))+(((-1.0)*x1872*x1874)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1876.valid){
continue;
}
CheckValue<IkReal> x1877=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x1874*x1874)+(x1873*x1873)+(((-2.0)*x1873*x1874)))),-1);
if(!x1877.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1876.value)+(((1.5707963267949)*(x1877.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1878=IKsin(j4);
IkReal x1879=IKcos(j4);
IkReal x1880=((1.0)*sj0);
IkReal x1881=((1.0)*cj2);
IkReal x1882=(gconst89*r20);
IkReal x1883=(gconst89*r10);
IkReal x1884=(gconst89*r00);
IkReal x1885=(cj1*sj2);
IkReal x1886=((1.0)*x1879);
IkReal x1887=((1.0)*x1878);
IkReal x1888=(gconst88*x1878);
evalcond[0]=((((-1.0)*x1882*x1887))+((r21*x1888))+(((-1.0)*r22*x1886)));
evalcond[1]=(cj0+(((-1.0)*x1883*x1887))+(((-1.0)*r12*x1886))+((r11*x1888)));
evalcond[2]=((((-1.0)*r02*x1886))+((r01*x1888))+(((-1.0)*x1884*x1887))+(((-1.0)*x1880)));
evalcond[3]=(((x1879*x1882))+(((-1.0)*cj1*x1881))+(((-1.0)*r22*x1887))+((sj1*sj2))+(((-1.0)*gconst88*r21*x1886)));
evalcond[4]=((((-1.0)*gconst88*r01*x1886))+((x1879*x1884))+(((-1.0)*cj0*sj1*x1881))+(((-1.0)*cj0*x1885))+(((-1.0)*r02*x1887)));
evalcond[5]=(((x1879*x1883))+(((-1.0)*x1880*x1885))+(((-1.0)*r12*x1887))+(((-1.0)*gconst88*r11*x1886))+(((-1.0)*cj2*sj1*x1880)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1889=((1.0)*sj0);
IkReal x1890=((1.0)*cj0);
CheckValue<IkReal> x1891 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x1890))+(((-1.0)*r12*x1889)))),IkReal(((((-1.0)*gconst88*r01*x1890))+(((-1.0)*gconst88*r11*x1889))+((cj0*gconst89*r00))+((gconst89*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1891.valid){
continue;
}
CheckValue<IkReal> x1892=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst88*r20))+(((-1.0)*gconst89*r21)))),-1);
if(!x1892.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1891.value)+(((1.5707963267949)*(x1892.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1893=IKsin(j4);
IkReal x1894=IKcos(j4);
IkReal x1895=((1.0)*sj0);
IkReal x1896=((1.0)*cj2);
IkReal x1897=(gconst89*r20);
IkReal x1898=(gconst89*r10);
IkReal x1899=(gconst89*r00);
IkReal x1900=(cj1*sj2);
IkReal x1901=((1.0)*x1894);
IkReal x1902=((1.0)*x1893);
IkReal x1903=(gconst88*x1893);
evalcond[0]=((((-1.0)*r22*x1901))+((r21*x1903))+(((-1.0)*x1897*x1902)));
evalcond[1]=(cj0+(((-1.0)*x1898*x1902))+(((-1.0)*r12*x1901))+((r11*x1903)));
evalcond[2]=((((-1.0)*x1899*x1902))+((r01*x1903))+(((-1.0)*x1895))+(((-1.0)*r02*x1901)));
evalcond[3]=((((-1.0)*gconst88*r21*x1901))+(((-1.0)*cj1*x1896))+(((-1.0)*r22*x1902))+((sj1*sj2))+((x1894*x1897)));
evalcond[4]=((((-1.0)*gconst88*r01*x1901))+(((-1.0)*cj0*sj1*x1896))+(((-1.0)*cj0*x1900))+((x1894*x1899))+(((-1.0)*r02*x1902)));
evalcond[5]=((((-1.0)*r12*x1902))+(((-1.0)*gconst88*r11*x1901))+((x1894*x1898))+(((-1.0)*cj2*sj1*x1895))+(((-1.0)*x1895*x1900)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1904=((1.0)*gconst89);
CheckValue<IkReal> x1905=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1904))+(((-1.0)*gconst88*r00)))),-1);
if(!x1905.valid){
continue;
}
CheckValue<IkReal> x1906 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x1904))+((cj0*gconst88*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1906.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1905.value)))+(x1906.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1907=IKsin(j4);
IkReal x1908=IKcos(j4);
IkReal x1909=((1.0)*sj0);
IkReal x1910=((1.0)*cj2);
IkReal x1911=(gconst89*r20);
IkReal x1912=(gconst89*r10);
IkReal x1913=(gconst89*r00);
IkReal x1914=(cj1*sj2);
IkReal x1915=((1.0)*x1908);
IkReal x1916=((1.0)*x1907);
IkReal x1917=(gconst88*x1907);
evalcond[0]=((((-1.0)*x1911*x1916))+(((-1.0)*r22*x1915))+((r21*x1917)));
evalcond[1]=(cj0+(((-1.0)*r12*x1915))+((r11*x1917))+(((-1.0)*x1912*x1916)));
evalcond[2]=((((-1.0)*r02*x1915))+((r01*x1917))+(((-1.0)*x1913*x1916))+(((-1.0)*x1909)));
evalcond[3]=((((-1.0)*r22*x1916))+((sj1*sj2))+(((-1.0)*cj1*x1910))+((x1908*x1911))+(((-1.0)*gconst88*r21*x1915)));
evalcond[4]=((((-1.0)*r02*x1916))+(((-1.0)*gconst88*r01*x1915))+((x1908*x1913))+(((-1.0)*cj0*sj1*x1910))+(((-1.0)*cj0*x1914)));
evalcond[5]=((((-1.0)*r12*x1916))+(((-1.0)*cj2*sj1*x1909))+((x1908*x1912))+(((-1.0)*x1909*x1914))+(((-1.0)*gconst88*r11*x1915)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x1918=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x1918;
j4eval[1]=IKsign(x1918);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x1919=((1.0)*cj5);
IkReal x1920=((((-1.0)*r01*x1919))+(((-1.0)*r00*sj5)));
j4eval[0]=x1920;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x1919)))))+(IKabs(r22)));
j4eval[2]=IKsign(x1920);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x1921=cj5*cj5;
IkReal x1922=r11*r11;
IkReal x1923=(r11*sj5);
IkReal x1924=(cj5*r10);
IkReal x1925=((r12*r12)+x1922+(((-1.0)*x1921*x1922))+((x1921*(r10*r10)))+(((-2.0)*x1923*x1924)));
j4eval[0]=x1925;
j4eval[1]=IKsign(x1925);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x1923))+x1924))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1926=cj5*cj5;
IkReal x1927=r11*r11;
IkReal x1928=(cj5*r10);
IkReal x1929=(r11*sj5);
CheckValue<IkReal> x1930=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-1.0)*x1926*x1927))+(((-2.0)*x1928*x1929))+x1927+((x1926*(r10*r10))))),-1);
if(!x1930.valid){
continue;
}
CheckValue<IkReal> x1931 = IKatan2WithCheck(IkReal(((((-1.0)*x1929))+x1928)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x1931.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1930.value)))+(x1931.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1932=IKsin(j4);
IkReal x1933=IKcos(j4);
IkReal x1934=(cj5*r10);
IkReal x1935=(r01*sj5);
IkReal x1936=((1.0)*cj2);
IkReal x1937=(cj5*r00);
IkReal x1938=(cj5*r20);
IkReal x1939=((1.0)*x1933);
IkReal x1940=((1.0)*x1932);
IkReal x1941=(sj5*x1932);
evalcond[0]=((((-1.0)*r22*x1939))+((r21*x1941))+(((-1.0)*x1938*x1940)));
evalcond[1]=((((-1.0)*x1937*x1940))+((x1932*x1935))+(((-1.0)*r02*x1939)));
evalcond[2]=((((-1.0)*r11*sj5*x1939))+(((-1.0)*r12*x1940))+((x1933*x1934)));
evalcond[3]=((1.0)+((r11*x1941))+(((-1.0)*r12*x1939))+(((-1.0)*x1934*x1940)));
evalcond[4]=((((-1.0)*r22*x1940))+(((-1.0)*cj1*x1936))+((sj1*sj2))+((x1933*x1938))+(((-1.0)*r21*sj5*x1939)));
evalcond[5]=((((-1.0)*sj1*x1936))+(((-1.0)*cj1*sj2))+(((-1.0)*r02*x1940))+((x1933*x1937))+(((-1.0)*x1935*x1939)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1942=((1.0)*cj5);
CheckValue<IkReal> x1943 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x1942)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1943.valid){
continue;
}
CheckValue<IkReal> x1944=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x1942)))),-1);
if(!x1944.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1943.value)+(((1.5707963267949)*(x1944.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1945=IKsin(j4);
IkReal x1946=IKcos(j4);
IkReal x1947=(cj5*r10);
IkReal x1948=(r01*sj5);
IkReal x1949=((1.0)*cj2);
IkReal x1950=(cj5*r00);
IkReal x1951=(cj5*r20);
IkReal x1952=((1.0)*x1946);
IkReal x1953=((1.0)*x1945);
IkReal x1954=(sj5*x1945);
evalcond[0]=((((-1.0)*r22*x1952))+(((-1.0)*x1951*x1953))+((r21*x1954)));
evalcond[1]=(((x1945*x1948))+(((-1.0)*x1950*x1953))+(((-1.0)*r02*x1952)));
evalcond[2]=(((x1946*x1947))+(((-1.0)*r11*sj5*x1952))+(((-1.0)*r12*x1953)));
evalcond[3]=((1.0)+((r11*x1954))+(((-1.0)*x1947*x1953))+(((-1.0)*r12*x1952)));
evalcond[4]=((((-1.0)*r21*sj5*x1952))+(((-1.0)*r22*x1953))+((sj1*sj2))+((x1946*x1951))+(((-1.0)*cj1*x1949)));
evalcond[5]=((((-1.0)*x1948*x1952))+(((-1.0)*sj1*x1949))+(((-1.0)*r02*x1953))+(((-1.0)*cj1*sj2))+((x1946*x1950)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1955=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x1955.valid){
continue;
}
CheckValue<IkReal> x1956 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1956.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1955.value)))+(x1956.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1957=IKsin(j4);
IkReal x1958=IKcos(j4);
IkReal x1959=(cj5*r10);
IkReal x1960=(r01*sj5);
IkReal x1961=((1.0)*cj2);
IkReal x1962=(cj5*r00);
IkReal x1963=(cj5*r20);
IkReal x1964=((1.0)*x1958);
IkReal x1965=((1.0)*x1957);
IkReal x1966=(sj5*x1957);
evalcond[0]=((((-1.0)*r22*x1964))+((r21*x1966))+(((-1.0)*x1963*x1965)));
evalcond[1]=((((-1.0)*r02*x1964))+((x1957*x1960))+(((-1.0)*x1962*x1965)));
evalcond[2]=(((x1958*x1959))+(((-1.0)*r11*sj5*x1964))+(((-1.0)*r12*x1965)));
evalcond[3]=((1.0)+(((-1.0)*x1959*x1965))+((r11*x1966))+(((-1.0)*r12*x1964)));
evalcond[4]=(((x1958*x1963))+(((-1.0)*r21*sj5*x1964))+(((-1.0)*r22*x1965))+((sj1*sj2))+(((-1.0)*cj1*x1961)));
evalcond[5]=(((x1958*x1962))+(((-1.0)*r02*x1965))+(((-1.0)*sj1*x1961))+(((-1.0)*cj1*sj2))+(((-1.0)*x1960*x1964)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x1967=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x1967;
j4eval[1]=IKsign(x1967);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x1968=((1.0)*cj5);
IkReal x1969=((((-1.0)*r21*x1968))+(((-1.0)*r20*sj5)));
j4eval[0]=x1969;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x1968))))));
j4eval[2]=IKsign(x1969);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x1970=cj5*cj5;
IkReal x1971=r11*r11;
IkReal x1972=(cj5*r10);
IkReal x1973=(r11*sj5);
IkReal x1974=((((2.0)*x1972*x1973))+((x1970*x1971))+(((-1.0)*x1971))+(((-1.0)*(r12*r12)))+(((-1.0)*x1970*(r10*r10))));
j4eval[0]=x1974;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*x1973))+x1972))));
j4eval[2]=IKsign(x1974);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1975=cj5*cj5;
IkReal x1976=r11*r11;
IkReal x1977=(cj5*r10);
IkReal x1978=(r11*sj5);
CheckValue<IkReal> x1979=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1975*(r10*r10)))+((x1975*x1976))+(((-1.0)*x1976))+(((-1.0)*(r12*r12)))+(((2.0)*x1977*x1978)))),-1);
if(!x1979.valid){
continue;
}
CheckValue<IkReal> x1980 = IKatan2WithCheck(IkReal(((((-1.0)*x1978))+x1977)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x1980.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1979.value)))+(x1980.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1981=IKsin(j4);
IkReal x1982=IKcos(j4);
IkReal x1983=(cj5*r10);
IkReal x1984=(r01*sj5);
IkReal x1985=(cj5*r00);
IkReal x1986=(cj5*r20);
IkReal x1987=((1.0)*x1982);
IkReal x1988=((1.0)*x1981);
IkReal x1989=(sj5*x1981);
evalcond[0]=((((-1.0)*x1986*x1988))+((r21*x1989))+(((-1.0)*r22*x1987)));
evalcond[1]=((((-1.0)*r02*x1987))+(((-1.0)*x1985*x1988))+((x1981*x1984)));
evalcond[2]=((((-1.0)*r11*sj5*x1987))+(((-1.0)*r12*x1988))+((x1982*x1983)));
evalcond[3]=((-1.0)+(((-1.0)*x1983*x1988))+((r11*x1989))+(((-1.0)*r12*x1987)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r02*x1988))+((cj1*sj2))+(((-1.0)*x1984*x1987))+((x1982*x1985)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x1982*x1986))+(((-1.0)*r21*sj5*x1987))+(((-1.0)*r22*x1988)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1990=((1.0)*cj5);
CheckValue<IkReal> x1991=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x1990))+(((-1.0)*r20*sj5)))),-1);
if(!x1991.valid){
continue;
}
CheckValue<IkReal> x1992 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x1990)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1992.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1991.value)))+(x1992.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1993=IKsin(j4);
IkReal x1994=IKcos(j4);
IkReal x1995=(cj5*r10);
IkReal x1996=(r01*sj5);
IkReal x1997=(cj5*r00);
IkReal x1998=(cj5*r20);
IkReal x1999=((1.0)*x1994);
IkReal x2000=((1.0)*x1993);
IkReal x2001=(sj5*x1993);
evalcond[0]=(((r21*x2001))+(((-1.0)*x1998*x2000))+(((-1.0)*r22*x1999)));
evalcond[1]=((((-1.0)*r02*x1999))+(((-1.0)*x1997*x2000))+((x1993*x1996)));
evalcond[2]=((((-1.0)*r12*x2000))+((x1994*x1995))+(((-1.0)*r11*sj5*x1999)));
evalcond[3]=((-1.0)+((r11*x2001))+(((-1.0)*x1995*x2000))+(((-1.0)*r12*x1999)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x1996*x1999))+((cj1*sj2))+((x1994*x1997))+(((-1.0)*r02*x2000)));
evalcond[5]=((((-1.0)*r22*x2000))+(((-1.0)*r21*sj5*x1999))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x1994*x1998)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2002 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2002.valid){
continue;
}
CheckValue<IkReal> x2003=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x2003.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2002.value)+(((1.5707963267949)*(x2003.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2004=IKsin(j4);
IkReal x2005=IKcos(j4);
IkReal x2006=(cj5*r10);
IkReal x2007=(r01*sj5);
IkReal x2008=(cj5*r00);
IkReal x2009=(cj5*r20);
IkReal x2010=((1.0)*x2005);
IkReal x2011=((1.0)*x2004);
IkReal x2012=(sj5*x2004);
evalcond[0]=((((-1.0)*x2009*x2011))+((r21*x2012))+(((-1.0)*r22*x2010)));
evalcond[1]=((((-1.0)*x2008*x2011))+(((-1.0)*r02*x2010))+((x2004*x2007)));
evalcond[2]=((((-1.0)*r11*sj5*x2010))+(((-1.0)*r12*x2011))+((x2005*x2006)));
evalcond[3]=((-1.0)+(((-1.0)*x2006*x2011))+(((-1.0)*r12*x2010))+((r11*x2012)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x2007*x2010))+((cj1*sj2))+((x2005*x2008))+(((-1.0)*r02*x2011)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x2010))+((x2005*x2009))+(((-1.0)*r22*x2011)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2013=((-1.0)*r00);
IkReal x2015 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2015)==0){
continue;
}
IkReal x2014=pow(x2015,-0.5);
CheckValue<IkReal> x2016 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x2013),IKFAST_ATAN2_MAGTHRESH);
if(!x2016.valid){
continue;
}
IkReal gconst90=((-1.0)*(x2016.value));
IkReal gconst91=(r01*x2014);
IkReal gconst92=(x2013*x2014);
CheckValue<IkReal> x2017 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2017.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2017.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2018=((-1.0)*r00);
IkReal x2019=x2014;
CheckValue<IkReal> x2021 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x2018),IKFAST_ATAN2_MAGTHRESH);
if(!x2021.valid){
continue;
}
IkReal x2020=((-1.0)*(x2021.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst91;
cj5=gconst92;
j5=x2020;
IkReal gconst90=x2020;
IkReal gconst91=(r01*x2019);
IkReal gconst92=(x2018*x2019);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2022=((1.0)*sj0);
IkReal x2023=((1.0)*cj0);
CheckValue<IkReal> x2024=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst91*r20))+(((-1.0)*gconst92*r21)))),-1);
if(!x2024.valid){
continue;
}
CheckValue<IkReal> x2025 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x2023))+(((-1.0)*r12*x2022)))),IkReal((((cj0*gconst92*r00))+(((-1.0)*gconst91*r01*x2023))+((gconst92*r10*sj0))+(((-1.0)*gconst91*r11*x2022)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2025.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2024.value)))+(x2025.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2026=IKsin(j4);
IkReal x2027=IKcos(j4);
IkReal x2028=((1.0)*cj2);
IkReal x2029=(gconst92*r00);
IkReal x2030=(gconst92*r20);
IkReal x2031=((1.0)*sj0);
IkReal x2032=(gconst92*r10);
IkReal x2033=(cj1*sj2);
IkReal x2034=((1.0)*x2027);
IkReal x2035=(gconst91*x2026);
IkReal x2036=((1.0)*x2026);
evalcond[0]=(((r21*x2035))+(((-1.0)*r22*x2034))+(((-1.0)*x2030*x2036)));
evalcond[1]=(cj0+(((-1.0)*r12*x2034))+(((-1.0)*x2032*x2036))+((r11*x2035)));
evalcond[2]=(((r01*x2035))+(((-1.0)*x2029*x2036))+(((-1.0)*r02*x2034))+(((-1.0)*x2031)));
evalcond[3]=(((x2027*x2030))+(((-1.0)*r22*x2036))+(((-1.0)*cj1*x2028))+((sj1*sj2))+(((-1.0)*gconst91*r21*x2034)));
evalcond[4]=((((-1.0)*cj0*sj1*x2028))+(((-1.0)*gconst91*r01*x2034))+(((-1.0)*r02*x2036))+(((-1.0)*cj0*x2033))+((x2027*x2029)));
evalcond[5]=(((x2027*x2032))+(((-1.0)*r12*x2036))+(((-1.0)*sj0*sj1*x2028))+(((-1.0)*gconst91*r11*x2034))+(((-1.0)*x2031*x2033)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2037=((1.0)*gconst92);
CheckValue<IkReal> x2038=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst91*r10))+(((-1.0)*r11*x2037)))),-1);
if(!x2038.valid){
continue;
}
CheckValue<IkReal> x2039 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst91*r21*sj0))+(((-1.0)*r20*sj0*x2037)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2039.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2038.value)))+(x2039.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2040=IKsin(j4);
IkReal x2041=IKcos(j4);
IkReal x2042=((1.0)*cj2);
IkReal x2043=(gconst92*r00);
IkReal x2044=(gconst92*r20);
IkReal x2045=((1.0)*sj0);
IkReal x2046=(gconst92*r10);
IkReal x2047=(cj1*sj2);
IkReal x2048=((1.0)*x2041);
IkReal x2049=(gconst91*x2040);
IkReal x2050=((1.0)*x2040);
evalcond[0]=((((-1.0)*x2044*x2050))+((r21*x2049))+(((-1.0)*r22*x2048)));
evalcond[1]=(cj0+((r11*x2049))+(((-1.0)*x2046*x2050))+(((-1.0)*r12*x2048)));
evalcond[2]=((((-1.0)*x2045))+(((-1.0)*r02*x2048))+(((-1.0)*x2043*x2050))+((r01*x2049)));
evalcond[3]=(((x2041*x2044))+(((-1.0)*r22*x2050))+((sj1*sj2))+(((-1.0)*gconst91*r21*x2048))+(((-1.0)*cj1*x2042)));
evalcond[4]=(((x2041*x2043))+(((-1.0)*cj0*x2047))+(((-1.0)*r02*x2050))+(((-1.0)*cj0*sj1*x2042))+(((-1.0)*gconst91*r01*x2048)));
evalcond[5]=(((x2041*x2046))+(((-1.0)*sj0*sj1*x2042))+(((-1.0)*gconst91*r11*x2048))+(((-1.0)*x2045*x2047))+(((-1.0)*r12*x2050)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2051=((-1.0)*r01);
IkReal x2053 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2053)==0){
continue;
}
IkReal x2052=pow(x2053,-0.5);
CheckValue<IkReal> x2054 = IKatan2WithCheck(IkReal(x2051),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2054.valid){
continue;
}
IkReal gconst93=((3.14159265358979)+(((-1.0)*(x2054.value))));
IkReal gconst94=(x2051*x2052);
IkReal gconst95=((1.0)*r00*x2052);
CheckValue<IkReal> x2055 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2055.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2055.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x2056=((-1.0)*r01);
CheckValue<IkReal> x2059 = IKatan2WithCheck(IkReal(x2056),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2059.valid){
continue;
}
IkReal x2057=((1.0)*(x2059.value));
IkReal x2058=x2052;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2057)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2057)));
IkReal gconst94=(x2056*x2058);
IkReal gconst95=((1.0)*r00*x2058);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x2060=((-1.0)*r01);
CheckValue<IkReal> x2063 = IKatan2WithCheck(IkReal(x2060),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2063.valid){
continue;
}
IkReal x2061=((1.0)*(x2063.value));
IkReal x2062=x2052;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2061)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2061)));
IkReal gconst94=(x2060*x2062);
IkReal gconst95=((1.0)*r00*x2062);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2064=((-1.0)*r01);
CheckValue<IkReal> x2067 = IKatan2WithCheck(IkReal(x2064),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2067.valid){
continue;
}
IkReal x2065=((1.0)*(x2067.value));
IkReal x2066=x2052;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2065)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2065)));
IkReal gconst94=(x2064*x2066);
IkReal gconst95=((1.0)*r00*x2066);
IkReal x2068=r02*r02;
IkReal x2069=(r12*sj0);
IkReal x2070=((1.0)*cj0);
IkReal x2071=x2052;
j4eval[0]=((IKabs(((((-1.0)*r02*x2070))+(((-1.0)*x2069)))))+(IKabs((((cj0*x2068*x2071))+(((-1.0)*x2070*x2071))+((r02*x2069*x2071))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2072=((1.0)*sj0);
IkReal x2073=((1.0)*cj0);
CheckValue<IkReal> x2074=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst95*r21))+(((-1.0)*gconst94*r20)))),-1);
if(!x2074.valid){
continue;
}
CheckValue<IkReal> x2075 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x2073))+(((-1.0)*r12*x2072)))),IkReal(((((-1.0)*gconst94*r01*x2073))+((gconst95*r10*sj0))+(((-1.0)*gconst94*r11*x2072))+((cj0*gconst95*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2075.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2074.value)))+(x2075.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2076=IKsin(j4);
IkReal x2077=IKcos(j4);
IkReal x2078=(gconst94*r11);
IkReal x2079=((1.0)*cj2);
IkReal x2080=(gconst94*r21);
IkReal x2081=((1.0)*sj0);
IkReal x2082=(gconst94*r01);
IkReal x2083=(cj1*sj2);
IkReal x2084=((1.0)*x2077);
IkReal x2085=(gconst95*x2077);
IkReal x2086=((1.0)*x2076);
IkReal x2087=(gconst95*x2086);
evalcond[0]=((((-1.0)*r20*x2087))+(((-1.0)*r22*x2084))+((x2076*x2080)));
evalcond[1]=(cj0+((x2076*x2078))+(((-1.0)*r10*x2087))+(((-1.0)*r12*x2084)));
evalcond[2]=((((-1.0)*r02*x2084))+(((-1.0)*x2081))+((x2076*x2082))+(((-1.0)*r00*x2087)));
evalcond[3]=((((-1.0)*r22*x2086))+((r20*x2085))+((sj1*sj2))+(((-1.0)*x2080*x2084))+(((-1.0)*cj1*x2079)));
evalcond[4]=((((-1.0)*r02*x2086))+(((-1.0)*cj0*x2083))+(((-1.0)*x2082*x2084))+(((-1.0)*cj0*sj1*x2079))+((r00*x2085)));
evalcond[5]=((((-1.0)*x2078*x2084))+(((-1.0)*sj0*sj1*x2079))+(((-1.0)*x2081*x2083))+((r10*x2085))+(((-1.0)*r12*x2086)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2088=((1.0)*gconst95);
CheckValue<IkReal> x2089=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst94*r10))+(((-1.0)*r11*x2088)))),-1);
if(!x2089.valid){
continue;
}
CheckValue<IkReal> x2090 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst94*r21*sj0))+(((-1.0)*r20*sj0*x2088)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2090.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2089.value)))+(x2090.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2091=IKsin(j4);
IkReal x2092=IKcos(j4);
IkReal x2093=(gconst94*r11);
IkReal x2094=((1.0)*cj2);
IkReal x2095=(gconst94*r21);
IkReal x2096=((1.0)*sj0);
IkReal x2097=(gconst94*r01);
IkReal x2098=(cj1*sj2);
IkReal x2099=((1.0)*x2092);
IkReal x2100=(gconst95*x2092);
IkReal x2101=((1.0)*x2091);
IkReal x2102=(gconst95*x2101);
evalcond[0]=(((x2091*x2095))+(((-1.0)*r20*x2102))+(((-1.0)*r22*x2099)));
evalcond[1]=((((-1.0)*r10*x2102))+cj0+((x2091*x2093))+(((-1.0)*r12*x2099)));
evalcond[2]=((((-1.0)*x2096))+((x2091*x2097))+(((-1.0)*r00*x2102))+(((-1.0)*r02*x2099)));
evalcond[3]=(((r20*x2100))+(((-1.0)*r22*x2101))+(((-1.0)*x2095*x2099))+((sj1*sj2))+(((-1.0)*cj1*x2094)));
evalcond[4]=((((-1.0)*r02*x2101))+(((-1.0)*x2097*x2099))+(((-1.0)*cj0*sj1*x2094))+((r00*x2100))+(((-1.0)*cj0*x2098)));
evalcond[5]=((((-1.0)*x2096*x2098))+(((-1.0)*r12*x2101))+((r10*x2100))+(((-1.0)*x2093*x2099))+(((-1.0)*sj0*sj1*x2094)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2103=((1.0)*gconst95);
CheckValue<IkReal> x2104 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x2103))+((cj0*gconst94*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2104.valid){
continue;
}
CheckValue<IkReal> x2105=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst94*r00))+(((-1.0)*r01*x2103)))),-1);
if(!x2105.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2104.value)+(((1.5707963267949)*(x2105.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2106=IKsin(j4);
IkReal x2107=IKcos(j4);
IkReal x2108=(gconst94*r11);
IkReal x2109=((1.0)*cj2);
IkReal x2110=(gconst94*r21);
IkReal x2111=((1.0)*sj0);
IkReal x2112=(gconst94*r01);
IkReal x2113=(cj1*sj2);
IkReal x2114=((1.0)*x2107);
IkReal x2115=(gconst95*x2107);
IkReal x2116=((1.0)*x2106);
IkReal x2117=(gconst95*x2116);
evalcond[0]=((((-1.0)*r20*x2117))+((x2106*x2110))+(((-1.0)*r22*x2114)));
evalcond[1]=((((-1.0)*r10*x2117))+cj0+((x2106*x2108))+(((-1.0)*r12*x2114)));
evalcond[2]=((((-1.0)*r00*x2117))+((x2106*x2112))+(((-1.0)*x2111))+(((-1.0)*r02*x2114)));
evalcond[3]=((((-1.0)*cj1*x2109))+((sj1*sj2))+((r20*x2115))+(((-1.0)*x2110*x2114))+(((-1.0)*r22*x2116)));
evalcond[4]=((((-1.0)*x2112*x2114))+((r00*x2115))+(((-1.0)*r02*x2116))+(((-1.0)*cj0*x2113))+(((-1.0)*cj0*sj1*x2109)));
evalcond[5]=((((-1.0)*x2108*x2114))+(((-1.0)*x2111*x2113))+(((-1.0)*sj0*sj1*x2109))+((r10*x2115))+(((-1.0)*r12*x2116)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2118=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2118;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x2118);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2119=((1.0)*cj5);
IkReal x2120=((((-1.0)*r10*sj5))+(((-1.0)*r11*x2119)));
j4eval[0]=x2120;
j4eval[1]=((IKabs(((((-1.0)*r20*x2119))+((r21*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x2120);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2121=cj5*cj5;
IkReal x2122=r01*r01;
IkReal x2123=(r01*sj5);
IkReal x2124=(cj5*r00);
IkReal x2125=((((-1.0)*x2121*(r00*r00)))+(((-1.0)*(r02*r02)))+(((-1.0)*x2122))+((x2121*x2122))+(((2.0)*x2123*x2124)));
j4eval[0]=x2125;
j4eval[1]=IKsign(x2125);
j4eval[2]=((IKabs(r02))+(IKabs((x2124+(((-1.0)*x2123))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2126=cj5*cj5;
IkReal x2127=r01*r01;
IkReal x2128=(r01*sj5);
IkReal x2129=(cj5*r00);
CheckValue<IkReal> x2130=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((2.0)*x2128*x2129))+(((-1.0)*x2127))+(((-1.0)*x2126*(r00*r00)))+((x2126*x2127)))),-1);
if(!x2130.valid){
continue;
}
CheckValue<IkReal> x2131 = IKatan2WithCheck(IkReal((x2129+(((-1.0)*x2128)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x2131.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2130.value)))+(x2131.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2132=IKsin(j4);
IkReal x2133=IKcos(j4);
IkReal x2134=(cj5*r10);
IkReal x2135=(r01*sj5);
IkReal x2136=((1.0)*cj2);
IkReal x2137=(cj5*r00);
IkReal x2138=(cj5*r20);
IkReal x2139=((1.0)*x2133);
IkReal x2140=((1.0)*x2132);
IkReal x2141=(sj5*x2132);
evalcond[0]=((((-1.0)*x2138*x2140))+(((-1.0)*r22*x2139))+((r21*x2141)));
evalcond[1]=(((r11*x2141))+(((-1.0)*r12*x2139))+(((-1.0)*x2134*x2140)));
evalcond[2]=((((-1.0)*r02*x2140))+(((-1.0)*x2135*x2139))+((x2133*x2137)));
evalcond[3]=((-1.0)+((x2132*x2135))+(((-1.0)*x2137*x2140))+(((-1.0)*r02*x2139)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*cj1*x2136))+(((-1.0)*r21*sj5*x2139))+(((-1.0)*r22*x2140))+((x2133*x2138)));
evalcond[5]=((((-1.0)*sj1*x2136))+(((-1.0)*cj1*sj2))+(((-1.0)*r12*x2140))+(((-1.0)*r11*sj5*x2139))+((x2133*x2134)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2142=((1.0)*cj5);
CheckValue<IkReal> x2143 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x2142)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2143.valid){
continue;
}
CheckValue<IkReal> x2144=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x2142)))),-1);
if(!x2144.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2143.value)+(((1.5707963267949)*(x2144.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2145=IKsin(j4);
IkReal x2146=IKcos(j4);
IkReal x2147=(cj5*r10);
IkReal x2148=(r01*sj5);
IkReal x2149=((1.0)*cj2);
IkReal x2150=(cj5*r00);
IkReal x2151=(cj5*r20);
IkReal x2152=((1.0)*x2146);
IkReal x2153=((1.0)*x2145);
IkReal x2154=(sj5*x2145);
evalcond[0]=((((-1.0)*r22*x2152))+((r21*x2154))+(((-1.0)*x2151*x2153)));
evalcond[1]=((((-1.0)*r12*x2152))+(((-1.0)*x2147*x2153))+((r11*x2154)));
evalcond[2]=(((x2146*x2150))+(((-1.0)*x2148*x2152))+(((-1.0)*r02*x2153)));
evalcond[3]=((-1.0)+((x2145*x2148))+(((-1.0)*r02*x2152))+(((-1.0)*x2150*x2153)));
evalcond[4]=(((x2146*x2151))+((sj1*sj2))+(((-1.0)*cj1*x2149))+(((-1.0)*r22*x2153))+(((-1.0)*r21*sj5*x2152)));
evalcond[5]=(((x2146*x2147))+(((-1.0)*r11*sj5*x2152))+(((-1.0)*sj1*x2149))+(((-1.0)*cj1*sj2))+(((-1.0)*r12*x2153)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2155=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2155.valid){
continue;
}
CheckValue<IkReal> x2156 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2156.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2155.value)))+(x2156.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2157=IKsin(j4);
IkReal x2158=IKcos(j4);
IkReal x2159=(cj5*r10);
IkReal x2160=(r01*sj5);
IkReal x2161=((1.0)*cj2);
IkReal x2162=(cj5*r00);
IkReal x2163=(cj5*r20);
IkReal x2164=((1.0)*x2158);
IkReal x2165=((1.0)*x2157);
IkReal x2166=(sj5*x2157);
evalcond[0]=((((-1.0)*x2163*x2165))+((r21*x2166))+(((-1.0)*r22*x2164)));
evalcond[1]=((((-1.0)*x2159*x2165))+(((-1.0)*r12*x2164))+((r11*x2166)));
evalcond[2]=((((-1.0)*x2160*x2164))+((x2158*x2162))+(((-1.0)*r02*x2165)));
evalcond[3]=((-1.0)+((x2157*x2160))+(((-1.0)*r02*x2164))+(((-1.0)*x2162*x2165)));
evalcond[4]=((((-1.0)*r21*sj5*x2164))+((sj1*sj2))+(((-1.0)*cj1*x2161))+(((-1.0)*r22*x2165))+((x2158*x2163)));
evalcond[5]=((((-1.0)*sj1*x2161))+(((-1.0)*r11*sj5*x2164))+((x2158*x2159))+(((-1.0)*cj1*sj2))+(((-1.0)*r12*x2165)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2167=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x2167;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x2167);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2168=((1.0)*cj5);
IkReal x2169=((((-1.0)*r21*x2168))+(((-1.0)*r20*sj5)));
j4eval[0]=x2169;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x2168))+((r11*sj5))))));
j4eval[2]=IKsign(x2169);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2170=cj5*cj5;
IkReal x2171=r01*r01;
IkReal x2172=(cj5*r00);
IkReal x2173=(r01*sj5);
IkReal x2174=(x2171+(((-2.0)*x2172*x2173))+(r02*r02)+(((-1.0)*x2170*x2171))+((x2170*(r00*r00))));
j4eval[0]=x2174;
j4eval[1]=((IKabs(r02))+(IKabs((x2172+(((-1.0)*x2173))))));
j4eval[2]=IKsign(x2174);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2175=cj5*cj5;
IkReal x2176=r01*r01;
IkReal x2177=(r01*sj5);
IkReal x2178=(cj5*r00);
CheckValue<IkReal> x2179=IKPowWithIntegerCheck(IKsign(((((-2.0)*x2177*x2178))+((x2175*(r00*r00)))+(((-1.0)*x2175*x2176))+x2176+(r02*r02))),-1);
if(!x2179.valid){
continue;
}
CheckValue<IkReal> x2180 = IKatan2WithCheck(IkReal((x2178+(((-1.0)*x2177)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x2180.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2179.value)))+(x2180.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2181=IKsin(j4);
IkReal x2182=IKcos(j4);
IkReal x2183=(cj5*r10);
IkReal x2184=(r01*sj5);
IkReal x2185=(cj5*r00);
IkReal x2186=(cj5*r20);
IkReal x2187=((1.0)*x2182);
IkReal x2188=((1.0)*x2181);
IkReal x2189=(sj5*x2181);
evalcond[0]=((((-1.0)*x2186*x2188))+((r21*x2189))+(((-1.0)*r22*x2187)));
evalcond[1]=(((r11*x2189))+(((-1.0)*x2183*x2188))+(((-1.0)*r12*x2187)));
evalcond[2]=(((x2182*x2185))+(((-1.0)*r02*x2188))+(((-1.0)*x2184*x2187)));
evalcond[3]=((1.0)+(((-1.0)*x2185*x2188))+(((-1.0)*r02*x2187))+((x2181*x2184)));
evalcond[4]=((((-1.0)*r11*sj5*x2187))+((cj2*sj1))+((cj1*sj2))+((x2182*x2183))+(((-1.0)*r12*x2188)));
evalcond[5]=((((-1.0)*r21*sj5*x2187))+((x2182*x2186))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2188)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2190=((1.0)*cj5);
CheckValue<IkReal> x2191 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x2190))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2191.valid){
continue;
}
CheckValue<IkReal> x2192=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2190))+(((-1.0)*r20*sj5)))),-1);
if(!x2192.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2191.value)+(((1.5707963267949)*(x2192.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2193=IKsin(j4);
IkReal x2194=IKcos(j4);
IkReal x2195=(cj5*r10);
IkReal x2196=(r01*sj5);
IkReal x2197=(cj5*r00);
IkReal x2198=(cj5*r20);
IkReal x2199=((1.0)*x2194);
IkReal x2200=((1.0)*x2193);
IkReal x2201=(sj5*x2193);
evalcond[0]=((((-1.0)*x2198*x2200))+(((-1.0)*r22*x2199))+((r21*x2201)));
evalcond[1]=((((-1.0)*x2195*x2200))+((r11*x2201))+(((-1.0)*r12*x2199)));
evalcond[2]=((((-1.0)*x2196*x2199))+((x2194*x2197))+(((-1.0)*r02*x2200)));
evalcond[3]=((1.0)+((x2193*x2196))+(((-1.0)*x2197*x2200))+(((-1.0)*r02*x2199)));
evalcond[4]=(((cj2*sj1))+((x2194*x2195))+((cj1*sj2))+(((-1.0)*r12*x2200))+(((-1.0)*r11*sj5*x2199)));
evalcond[5]=((((-1.0)*r21*sj5*x2199))+((x2194*x2198))+(((-1.0)*r22*x2200))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2202 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2202.valid){
continue;
}
CheckValue<IkReal> x2203=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x2203.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2202.value)+(((1.5707963267949)*(x2203.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2204=IKsin(j4);
IkReal x2205=IKcos(j4);
IkReal x2206=(cj5*r10);
IkReal x2207=(r01*sj5);
IkReal x2208=(cj5*r00);
IkReal x2209=(cj5*r20);
IkReal x2210=((1.0)*x2205);
IkReal x2211=((1.0)*x2204);
IkReal x2212=(sj5*x2204);
evalcond[0]=((((-1.0)*r22*x2210))+(((-1.0)*x2209*x2211))+((r21*x2212)));
evalcond[1]=((((-1.0)*r12*x2210))+((r11*x2212))+(((-1.0)*x2206*x2211)));
evalcond[2]=((((-1.0)*x2207*x2210))+((x2205*x2208))+(((-1.0)*r02*x2211)));
evalcond[3]=((1.0)+(((-1.0)*x2208*x2211))+((x2204*x2207))+(((-1.0)*r02*x2210)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r12*x2211))+((x2205*x2206))+(((-1.0)*r11*sj5*x2210)));
evalcond[5]=((((-1.0)*r22*x2211))+(((-1.0)*r21*sj5*x2210))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x2205*x2209)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x2213=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2213);
rxp1_1=(px*r21);
rxp1_2=(r11*x2213);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2214=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2214);
rxp1_1=(px*r21);
rxp1_2=(r11*x2214);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2215=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2215);
rxp1_1=(px*r21);
rxp1_2=(r11*x2215);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2218=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x2218.valid){
continue;
}
IkReal x2216=x2218.value;
IkReal x2217=(sj0*x2216);
cj4array[0]=(((cj2*sj1*x2217))+((cj1*sj2*x2217)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2219=IKsin(j4);
IkReal x2220=IKcos(j4);
IkReal x2221=(cj5*r20);
IkReal x2222=(r21*sj5);
IkReal x2223=((1.0)*x2219);
IkReal x2224=((1.0)*x2220);
evalcond[0]=((-1.0)*r02*x2219);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x2224)));
evalcond[2]=((((-1.0)*x2221*x2223))+((x2219*x2222)));
evalcond[3]=((((-1.0)*cj5*r10*x2223))+((r11*sj5*x2219)));
evalcond[4]=((((-1.0)*x2222*x2224))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x2220*x2221)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2226=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x2226.valid){
continue;
}
IkReal x2225=x2226.value;
cj4array[0]=((((-1.0)*sj1*sj2*x2225))+((cj1*cj2*x2225)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2227=IKsin(j4);
IkReal x2228=IKcos(j4);
IkReal x2229=(r11*sj5);
IkReal x2230=((1.0)*sj0);
IkReal x2231=((1.0)*x2228);
IkReal x2232=((1.0)*cj5*x2227);
evalcond[0]=((-1.0)*r02*x2227);
evalcond[1]=((((-1.0)*r02*x2231))+(((-1.0)*x2230)));
evalcond[2]=((((-1.0)*r20*x2232))+((r21*sj5*x2227)));
evalcond[3]=((((-1.0)*r10*x2232))+((x2227*x2229)));
evalcond[4]=((((-1.0)*x2229*x2231))+((cj5*r10*x2228))+(((-1.0)*cj2*sj1*x2230))+(((-1.0)*cj1*sj2*x2230)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2233=IKPowWithIntegerCheck(r02,-1);
if(!x2233.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x2233.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2234=IKsin(j4);
IkReal x2235=IKcos(j4);
IkReal x2236=((1.0)*sj0);
IkReal x2237=(cj5*x2235);
IkReal x2238=(sj5*x2234);
IkReal x2239=((1.0)*sj5*x2235);
IkReal x2240=((1.0)*cj5*x2234);
evalcond[0]=((-1.0)*r02*x2234);
evalcond[1]=(((r21*x2238))+(((-1.0)*r20*x2240)));
evalcond[2]=((((-1.0)*r10*x2240))+((r11*x2238)));
evalcond[3]=((((-1.0)*r21*x2239))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x2237)));
evalcond[4]=(((r10*x2237))+(((-1.0)*r11*x2239))+(((-1.0)*cj2*sj1*x2236))+(((-1.0)*cj1*sj2*x2236)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2241=((1.0)*sj0);
IkReal x2242=((1.0)*cj0);
CheckValue<IkReal> x2243 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x2242))+(((-1.0)*r12*x2241)))),IkReal((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x2242))+(((-1.0)*r11*sj5*x2241)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2243.valid){
continue;
}
CheckValue<IkReal> x2244=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x2244.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2243.value)+(((1.5707963267949)*(x2244.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2245=IKsin(j4);
IkReal x2246=IKcos(j4);
IkReal x2247=(cj5*r10);
IkReal x2248=(r01*sj5);
IkReal x2249=((1.0)*cj2);
IkReal x2250=(cj5*r00);
IkReal x2251=((1.0)*sj0);
IkReal x2252=(cj5*r20);
IkReal x2253=(cj1*sj2);
IkReal x2254=((1.0)*x2246);
IkReal x2255=((1.0)*x2245);
IkReal x2256=(sj5*x2245);
evalcond[0]=((((-1.0)*r22*x2254))+(((-1.0)*x2252*x2255))+((r21*x2256)));
evalcond[1]=(cj0+(((-1.0)*r12*x2254))+(((-1.0)*x2247*x2255))+((r11*x2256)));
evalcond[2]=((((-1.0)*r02*x2254))+(((-1.0)*x2251))+(((-1.0)*x2250*x2255))+((x2245*x2248)));
evalcond[3]=(((x2246*x2252))+(((-1.0)*r22*x2255))+((sj1*sj2))+(((-1.0)*r21*sj5*x2254))+(((-1.0)*cj1*x2249)));
evalcond[4]=(((x2246*x2250))+(((-1.0)*r02*x2255))+(((-1.0)*cj0*x2253))+(((-1.0)*x2248*x2254))+(((-1.0)*cj0*sj1*x2249)));
evalcond[5]=(((x2246*x2247))+(((-1.0)*sj0*sj1*x2249))+(((-1.0)*r12*x2255))+(((-1.0)*r11*sj5*x2254))+(((-1.0)*x2251*x2253)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2257=((1.0)*cj5);
CheckValue<IkReal> x2258 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x2257)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2258.valid){
continue;
}
CheckValue<IkReal> x2259=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x2257)))),-1);
if(!x2259.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2258.value)+(((1.5707963267949)*(x2259.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2260=IKsin(j4);
IkReal x2261=IKcos(j4);
IkReal x2262=(cj5*r10);
IkReal x2263=(r01*sj5);
IkReal x2264=((1.0)*cj2);
IkReal x2265=(cj5*r00);
IkReal x2266=((1.0)*sj0);
IkReal x2267=(cj5*r20);
IkReal x2268=(cj1*sj2);
IkReal x2269=((1.0)*x2261);
IkReal x2270=((1.0)*x2260);
IkReal x2271=(sj5*x2260);
evalcond[0]=(((r21*x2271))+(((-1.0)*r22*x2269))+(((-1.0)*x2267*x2270)));
evalcond[1]=(cj0+((r11*x2271))+(((-1.0)*x2262*x2270))+(((-1.0)*r12*x2269)));
evalcond[2]=(((x2260*x2263))+(((-1.0)*r02*x2269))+(((-1.0)*x2266))+(((-1.0)*x2265*x2270)));
evalcond[3]=((((-1.0)*cj1*x2264))+((sj1*sj2))+((x2261*x2267))+(((-1.0)*r22*x2270))+(((-1.0)*r21*sj5*x2269)));
evalcond[4]=((((-1.0)*cj0*sj1*x2264))+((x2261*x2265))+(((-1.0)*x2263*x2269))+(((-1.0)*r02*x2270))+(((-1.0)*cj0*x2268)));
evalcond[5]=(((x2261*x2262))+(((-1.0)*sj0*sj1*x2264))+(((-1.0)*r11*sj5*x2269))+(((-1.0)*r12*x2270))+(((-1.0)*x2266*x2268)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2272=((1.0)*cj5);
CheckValue<IkReal> x2273=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2272))+(((-1.0)*r00*sj5)))),-1);
if(!x2273.valid){
continue;
}
CheckValue<IkReal> x2274 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x2272)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2274.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2273.value)))+(x2274.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2275=IKsin(j4);
IkReal x2276=IKcos(j4);
IkReal x2277=(cj5*r10);
IkReal x2278=(r01*sj5);
IkReal x2279=((1.0)*cj2);
IkReal x2280=(cj5*r00);
IkReal x2281=((1.0)*sj0);
IkReal x2282=(cj5*r20);
IkReal x2283=(cj1*sj2);
IkReal x2284=((1.0)*x2276);
IkReal x2285=((1.0)*x2275);
IkReal x2286=(sj5*x2275);
evalcond[0]=((((-1.0)*x2282*x2285))+((r21*x2286))+(((-1.0)*r22*x2284)));
evalcond[1]=((((-1.0)*x2277*x2285))+((r11*x2286))+cj0+(((-1.0)*r12*x2284)));
evalcond[2]=((((-1.0)*r02*x2284))+(((-1.0)*x2280*x2285))+(((-1.0)*x2281))+((x2275*x2278)));
evalcond[3]=((((-1.0)*cj1*x2279))+(((-1.0)*r21*sj5*x2284))+((sj1*sj2))+(((-1.0)*r22*x2285))+((x2276*x2282)));
evalcond[4]=((((-1.0)*r02*x2285))+(((-1.0)*cj0*sj1*x2279))+(((-1.0)*cj0*x2283))+(((-1.0)*x2278*x2284))+((x2276*x2280)));
evalcond[5]=((((-1.0)*r12*x2285))+((x2276*x2277))+(((-1.0)*r11*sj5*x2284))+(((-1.0)*sj0*sj1*x2279))+(((-1.0)*x2281*x2283)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2287=cj5*cj5;
IkReal x2288=r21*r21;
IkReal x2289=(sj1*sj2);
IkReal x2290=(r21*sj5);
IkReal x2291=(cj1*cj2);
IkReal x2292=(cj5*r20);
CheckValue<IkReal> x2293=IKPowWithIntegerCheck(IKsign((x2288+(r22*r22)+((x2287*(r20*r20)))+(((-1.0)*x2287*x2288))+(((-2.0)*x2290*x2292)))),-1);
if(!x2293.valid){
continue;
}
CheckValue<IkReal> x2294 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x2291))+((r22*x2289)))),IkReal((((x2291*x2292))+(((-1.0)*x2289*x2292))+((x2289*x2290))+(((-1.0)*x2290*x2291)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2294.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2293.value)))+(x2294.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x2295=IKsin(j4);
IkReal x2296=IKcos(j4);
IkReal x2297=(r21*sj5);
IkReal x2298=(cj5*r20);
IkReal x2299=((1.0)*x2296);
IkReal x2300=((1.0)*x2295);
evalcond[0]=(((x2295*x2297))+(((-1.0)*x2298*x2300))+(((-1.0)*r22*x2299)));
evalcond[1]=(((x2296*x2298))+(((-1.0)*r22*x2300))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x2297*x2299)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2301=(cj5*sj4);
IkReal x2302=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+((r01*x2302))+(((-1.0)*r00*x2301)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x2302))+((r10*x2301))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+((r01*x2302))+(((-1.0)*r00*x2301))))+IKsqr(((((-1.0)*r11*x2302))+((r10*x2301))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+((r01*x2302))+(((-1.0)*r00*x2301))), ((((-1.0)*r11*x2302))+((r10*x2301))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x2303=IKcos(j0);
IkReal x2304=IKsin(j0);
IkReal x2305=(cj4*cj5);
IkReal x2306=((0.1)*sj5);
IkReal x2307=((0.392)*sj1);
IkReal x2308=(cj5*r11);
IkReal x2309=(cj5*r01);
IkReal x2310=((0.425)*cj1);
IkReal x2311=((1.0)*cj1);
IkReal x2312=(r11*sj5);
IkReal x2313=((1.0)*sj4);
IkReal x2314=((0.392)*cj1);
IkReal x2315=((1.0)*sj1);
IkReal x2316=((1.4e-7)*sj1);
IkReal x2317=((1.0)*cj4);
IkReal x2318=(r01*sj5);
IkReal x2319=(sj2*x2304);
IkReal x2320=(sj2*x2303);
IkReal x2321=(cj2*x2303);
IkReal x2322=(cj2*x2304);
evalcond[0]=((((-1.0)*cj5*r10*x2313))+x2303+((sj4*x2312))+(((-1.0)*r12*x2317)));
evalcond[1]=((((-1.0)*x2304))+(((-1.0)*cj5*r00*x2313))+((sj4*x2318))+(((-1.0)*r02*x2317)));
evalcond[2]=(((r00*sj5))+x2309+(((-1.0)*x2311*x2321))+((sj1*x2320)));
evalcond[3]=(((r10*sj5))+x2308+(((-1.0)*x2311*x2322))+((sj1*x2319)));
evalcond[4]=((((-1.0)*x2315*x2321))+(((-1.0)*x2311*x2320))+(((-1.0)*r02*x2313))+((r00*x2305))+(((-1.0)*x2317*x2318)));
evalcond[5]=(((r10*x2305))+(((-1.0)*x2311*x2319))+(((-1.0)*x2315*x2322))+(((-1.0)*x2312*x2317))+(((-1.0)*r12*x2313)));
evalcond[6]=((((-1.0)*r00*x2306))+(((-0.1)*x2309))+((x2314*x2321))+(((-1.0)*px))+(((-1.0)*x2307*x2320))+(((-0.134)*x2304))+((x2303*x2316))+((x2303*x2310)));
evalcond[7]=((((-1.0)*r10*x2306))+(((0.134)*x2303))+((x2304*x2310))+((x2304*x2316))+(((-0.1)*x2308))+((x2314*x2322))+(((-1.0)*py))+(((-1.0)*x2307*x2319)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2323=((1.0)*cj5);
IkReal x2324=((1.0)*sj5);
CheckValue<IkReal> x2325 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x2324))+(((-1.0)*r11*x2323)))),IkReal(((((-1.0)*r00*x2324))+(((-1.0)*r01*x2323)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2325.valid){
continue;
}
CheckValue<IkReal> x2326=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj1*cj2))+((sj1*sj2)))),-1);
if(!x2326.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x2325.value)+(((1.5707963267949)*(x2326.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x2327=IKcos(j0);
IkReal x2328=IKsin(j0);
IkReal x2329=((0.1)*sj5);
IkReal x2330=(sj1*sj2);
IkReal x2331=(cj5*r11);
IkReal x2332=(cj5*r01);
IkReal x2333=((0.425)*cj1);
IkReal x2334=(cj1*cj2);
IkReal x2335=((1.4e-7)*sj1);
IkReal x2336=((0.392)*x2328);
IkReal x2337=((0.392)*x2327);
evalcond[0]=(((r00*sj5))+x2332+((x2327*x2330))+(((-1.0)*x2327*x2334)));
evalcond[1]=((((-1.0)*x2328*x2334))+((r10*sj5))+x2331+((x2328*x2330)));
evalcond[2]=((((-0.134)*x2328))+((x2334*x2337))+(((-1.0)*px))+((x2327*x2333))+((x2327*x2335))+(((-0.1)*x2332))+(((-1.0)*r00*x2329))+(((-1.0)*x2330*x2337)));
evalcond[3]=((((0.134)*x2327))+(((-1.0)*r10*x2329))+((x2334*x2336))+(((-1.0)*py))+(((-0.1)*x2331))+(((-1.0)*x2330*x2336))+((x2328*x2333))+((x2328*x2335)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x2338=((1.0)*cj5);
IkReal x2339=((((-1.0)*r00*sj5))+(((-1.0)*r01*x2338)));
j4eval[0]=x2339;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x2338)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x2339);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x2340=((1.0)*cj5);
IkReal x2341=((((-1.0)*r10*sj5))+(((-1.0)*r11*x2340)));
j4eval[0]=x2341;
j4eval[1]=((IKabs(((((-1.0)*r20*sj0*x2340))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x2341);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x2342=((1.0)*sj0);
IkReal x2343=((1.0)*cj0);
IkReal x2344=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x2344;
j4eval[1]=((IKabs(((((-1.0)*r02*x2343))+(((-1.0)*r12*x2342)))))+(IKabs(((((-1.0)*r01*sj5*x2343))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x2342))))));
j4eval[2]=IKsign(x2344);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x2345=((-1.0)*r20);
IkReal x2347 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x2347)==0){
continue;
}
IkReal x2346=pow(x2347,-0.5);
CheckValue<IkReal> x2348 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2345),IKFAST_ATAN2_MAGTHRESH);
if(!x2348.valid){
continue;
}
IkReal gconst78=((-1.0)*(x2348.value));
IkReal gconst79=(r21*x2346);
IkReal gconst80=(x2345*x2346);
CheckValue<IkReal> x2349 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2349.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2349.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x2350=((-1.0)*r20);
IkReal x2351=x2346;
CheckValue<IkReal> x2353 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2350),IKFAST_ATAN2_MAGTHRESH);
if(!x2353.valid){
continue;
}
IkReal x2352=((-1.0)*(x2353.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x2352;
IkReal gconst78=x2352;
IkReal gconst79=(r21*x2351);
IkReal gconst80=(x2350*x2351);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2354=((-1.0)*r20);
IkReal x2355=x2346;
CheckValue<IkReal> x2357 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2354),IKFAST_ATAN2_MAGTHRESH);
if(!x2357.valid){
continue;
}
IkReal x2356=((-1.0)*(x2357.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x2356;
IkReal gconst78=x2356;
IkReal gconst79=(r21*x2355);
IkReal gconst80=(x2354*x2355);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x2358=((-1.0)*r20);
IkReal x2359=x2346;
CheckValue<IkReal> x2361 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2358),IKFAST_ATAN2_MAGTHRESH);
if(!x2361.valid){
continue;
}
IkReal x2360=((-1.0)*(x2361.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x2360;
IkReal gconst78=x2360;
IkReal gconst79=(r21*x2359);
IkReal gconst80=(x2358*x2359);
IkReal x2362=r22*r22;
CheckValue<IkReal> x2365=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x2362))),-1);
if(!x2365.valid){
continue;
}
IkReal x2363=x2365.value;
IkReal x2364=(x2362+((x2363*(r21*r21*r21*r21)))+((x2363*(r20*r20*r20*r20)))+(((2.0)*x2363*(r20*r20)*(r21*r21))));
j4eval[0]=x2364;
j4eval[1]=IKsign(x2364);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2366=(sj1*sj2);
IkReal x2367=(gconst80*r20);
IkReal x2368=(gconst79*r21);
IkReal x2369=(cj1*cj2);
CheckValue<IkReal> x2370 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x2369))+((r22*x2366)))),IkReal(((((-1.0)*x2368*x2369))+((x2366*x2368))+((x2367*x2369))+(((-1.0)*x2366*x2367)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2370.valid){
continue;
}
CheckValue<IkReal> x2371=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x2368*x2368)+(x2367*x2367)+(((-2.0)*x2367*x2368)))),-1);
if(!x2371.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2370.value)+(((1.5707963267949)*(x2371.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2372=IKsin(j4);
IkReal x2373=IKcos(j4);
IkReal x2374=(gconst79*r01);
IkReal x2375=(gconst79*r21);
IkReal x2376=((1.0)*cj2);
IkReal x2377=(gconst79*r11);
IkReal x2378=((1.0)*sj0);
IkReal x2379=(cj1*sj2);
IkReal x2380=((1.0)*x2373);
IkReal x2381=(gconst80*x2373);
IkReal x2382=((1.0)*x2372);
IkReal x2383=(gconst80*x2382);
evalcond[0]=(((x2372*x2375))+(((-1.0)*r20*x2383))+(((-1.0)*r22*x2380)));
evalcond[1]=((((-1.0)*r12*x2380))+((x2372*x2377))+(((-1.0)*r10*x2383))+cj0);
evalcond[2]=(((x2372*x2374))+(((-1.0)*r02*x2380))+(((-1.0)*r00*x2383))+(((-1.0)*x2378)));
evalcond[3]=((((-1.0)*x2375*x2380))+((r20*x2381))+((sj1*sj2))+(((-1.0)*r22*x2382))+(((-1.0)*cj1*x2376)));
evalcond[4]=((((-1.0)*x2374*x2380))+(((-1.0)*r02*x2382))+((r00*x2381))+(((-1.0)*cj0*sj1*x2376))+(((-1.0)*cj0*x2379)));
evalcond[5]=((((-1.0)*r12*x2382))+(((-1.0)*x2378*x2379))+(((-1.0)*x2377*x2380))+((r10*x2381))+(((-1.0)*sj0*sj1*x2376)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2384=((1.0)*gconst80);
CheckValue<IkReal> x2385 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x2384))+((gconst79*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2385.valid){
continue;
}
CheckValue<IkReal> x2386=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst79*r10))+(((-1.0)*r11*x2384)))),-1);
if(!x2386.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2385.value)+(((1.5707963267949)*(x2386.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2387=IKsin(j4);
IkReal x2388=IKcos(j4);
IkReal x2389=(gconst79*r01);
IkReal x2390=(gconst79*r21);
IkReal x2391=((1.0)*cj2);
IkReal x2392=(gconst79*r11);
IkReal x2393=((1.0)*sj0);
IkReal x2394=(cj1*sj2);
IkReal x2395=((1.0)*x2388);
IkReal x2396=(gconst80*x2388);
IkReal x2397=((1.0)*x2387);
IkReal x2398=(gconst80*x2397);
evalcond[0]=(((x2387*x2390))+(((-1.0)*r20*x2398))+(((-1.0)*r22*x2395)));
evalcond[1]=((((-1.0)*r10*x2398))+((x2387*x2392))+cj0+(((-1.0)*r12*x2395)));
evalcond[2]=((((-1.0)*r00*x2398))+((x2387*x2389))+(((-1.0)*r02*x2395))+(((-1.0)*x2393)));
evalcond[3]=((((-1.0)*cj1*x2391))+(((-1.0)*x2390*x2395))+((r20*x2396))+((sj1*sj2))+(((-1.0)*r22*x2397)));
evalcond[4]=((((-1.0)*r02*x2397))+((r00*x2396))+(((-1.0)*x2389*x2395))+(((-1.0)*cj0*sj1*x2391))+(((-1.0)*cj0*x2394)));
evalcond[5]=(((r10*x2396))+(((-1.0)*x2392*x2395))+(((-1.0)*x2393*x2394))+(((-1.0)*sj0*sj1*x2391))+(((-1.0)*r12*x2397)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2399=((1.0)*gconst80);
CheckValue<IkReal> x2400=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2399))+(((-1.0)*gconst79*r00)))),-1);
if(!x2400.valid){
continue;
}
CheckValue<IkReal> x2401 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst79*r21))+(((-1.0)*cj0*r20*x2399)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2401.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2400.value)))+(x2401.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2402=IKsin(j4);
IkReal x2403=IKcos(j4);
IkReal x2404=(gconst79*r01);
IkReal x2405=(gconst79*r21);
IkReal x2406=((1.0)*cj2);
IkReal x2407=(gconst79*r11);
IkReal x2408=((1.0)*sj0);
IkReal x2409=(cj1*sj2);
IkReal x2410=((1.0)*x2403);
IkReal x2411=(gconst80*x2403);
IkReal x2412=((1.0)*x2402);
IkReal x2413=(gconst80*x2412);
evalcond[0]=((((-1.0)*r20*x2413))+((x2402*x2405))+(((-1.0)*r22*x2410)));
evalcond[1]=(cj0+(((-1.0)*r12*x2410))+(((-1.0)*r10*x2413))+((x2402*x2407)));
evalcond[2]=((((-1.0)*r00*x2413))+(((-1.0)*x2408))+(((-1.0)*r02*x2410))+((x2402*x2404)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*x2405*x2410))+(((-1.0)*cj1*x2406))+((r20*x2411))+(((-1.0)*r22*x2412)));
evalcond[4]=(((r00*x2411))+(((-1.0)*x2404*x2410))+(((-1.0)*r02*x2412))+(((-1.0)*cj0*sj1*x2406))+(((-1.0)*cj0*x2409)));
evalcond[5]=((((-1.0)*sj0*sj1*x2406))+((r10*x2411))+(((-1.0)*x2408*x2409))+(((-1.0)*x2407*x2410))+(((-1.0)*r12*x2412)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2414=((-1.0)*r21);
IkReal x2416 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x2416)==0){
continue;
}
IkReal x2415=pow(x2416,-0.5);
CheckValue<IkReal> x2417 = IKatan2WithCheck(IkReal(x2414),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2417.valid){
continue;
}
IkReal gconst81=((3.14159265358979)+(((-1.0)*(x2417.value))));
IkReal gconst82=(x2414*x2415);
IkReal gconst83=((1.0)*r20*x2415);
CheckValue<IkReal> x2418 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2418.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2418.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x2419=((-1.0)*r21);
CheckValue<IkReal> x2422 = IKatan2WithCheck(IkReal(x2419),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2422.valid){
continue;
}
IkReal x2420=((1.0)*(x2422.value));
IkReal x2421=x2415;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x2420)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x2420)));
IkReal gconst82=(x2419*x2421);
IkReal gconst83=((1.0)*r20*x2421);
IkReal x2423=r22*r22;
IkReal x2424=((1.0)*x2423);
CheckValue<IkReal> x2428=IKPowWithIntegerCheck(((-1.0)+x2423),-1);
if(!x2428.valid){
continue;
}
IkReal x2425=x2428.value;
if((((1.0)+(((-1.0)*x2424)))) < -0.00001)
continue;
IkReal x2426=IKsqrt(((1.0)+(((-1.0)*x2424))));
IkReal x2427=(cj0*x2425*x2426);
j4eval[0]=((IKabs((x2427+(((-1.0)*x2424*x2427)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2429=((-1.0)*r21);
CheckValue<IkReal> x2432 = IKatan2WithCheck(IkReal(x2429),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2432.valid){
continue;
}
IkReal x2430=((1.0)*(x2432.value));
IkReal x2431=x2415;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x2430)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x2430)));
IkReal gconst82=(x2429*x2431);
IkReal gconst83=((1.0)*r20*x2431);
IkReal x2433=r22*r22;
IkReal x2434=((1.0)*x2433);
CheckValue<IkReal> x2438=IKPowWithIntegerCheck(((-1.0)+x2433),-1);
if(!x2438.valid){
continue;
}
IkReal x2435=x2438.value;
if((((1.0)+(((-1.0)*x2434)))) < -0.00001)
continue;
IkReal x2436=IKsqrt(((1.0)+(((-1.0)*x2434))));
IkReal x2437=(sj0*x2435*x2436);
j4eval[0]=((IKabs((x2437+(((-1.0)*x2434*x2437)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x2439=((-1.0)*r21);
CheckValue<IkReal> x2442 = IKatan2WithCheck(IkReal(x2439),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2442.valid){
continue;
}
IkReal x2440=((1.0)*(x2442.value));
IkReal x2441=x2415;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x2440)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x2440)));
IkReal gconst82=(x2439*x2441);
IkReal gconst83=((1.0)*r20*x2441);
IkReal x2443=r22*r22;
IkReal x2444=(r12*sj0);
IkReal x2445=(cj0*r02);
CheckValue<IkReal> x2449=IKPowWithIntegerCheck(((-1.0)+x2443),-1);
if(!x2449.valid){
continue;
}
IkReal x2446=x2449.value;
if((((1.0)+(((-1.0)*x2443)))) < -0.00001)
continue;
IkReal x2447=IKsqrt(((1.0)+(((-1.0)*x2443))));
IkReal x2448=(r22*x2446*x2447);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs(((((-1.0)*x2444))+(((-1.0)*x2445)))))+(IKabs((((x2444*x2448))+((x2445*x2448))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2450=((1.0)*sj0);
IkReal x2451=((1.0)*cj0);
CheckValue<IkReal> x2452=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst82*r20))+(((-1.0)*gconst83*r21)))),-1);
if(!x2452.valid){
continue;
}
CheckValue<IkReal> x2453 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x2450))+(((-1.0)*r02*x2451)))),IkReal(((((-1.0)*gconst82*r11*x2450))+((gconst83*r10*sj0))+((cj0*gconst83*r00))+(((-1.0)*gconst82*r01*x2451)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2453.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2452.value)))+(x2453.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2454=IKsin(j4);
IkReal x2455=IKcos(j4);
IkReal x2456=(gconst82*r11);
IkReal x2457=((1.0)*cj2);
IkReal x2458=((1.0)*sj0);
IkReal x2459=(cj1*sj2);
IkReal x2460=((1.0)*x2455);
IkReal x2461=(gconst83*x2455);
IkReal x2462=(gconst82*x2454);
IkReal x2463=((1.0)*x2454);
evalcond[0]=((((-1.0)*r22*x2460))+((r21*x2462))+(((-1.0)*gconst83*r20*x2463)));
evalcond[1]=(cj0+(((-1.0)*r12*x2460))+((x2454*x2456))+(((-1.0)*gconst83*r10*x2463)));
evalcond[2]=(((r01*x2462))+(((-1.0)*gconst83*r00*x2463))+(((-1.0)*r02*x2460))+(((-1.0)*x2458)));
evalcond[3]=((((-1.0)*r22*x2463))+(((-1.0)*gconst82*r21*x2460))+((r20*x2461))+((sj1*sj2))+(((-1.0)*cj1*x2457)));
evalcond[4]=((((-1.0)*cj0*x2459))+(((-1.0)*gconst82*r01*x2460))+(((-1.0)*cj0*sj1*x2457))+(((-1.0)*r02*x2463))+((r00*x2461)));
evalcond[5]=((((-1.0)*r12*x2463))+(((-1.0)*x2456*x2460))+(((-1.0)*x2458*x2459))+(((-1.0)*sj0*sj1*x2457))+((r10*x2461)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2464=((1.0)*gconst83);
CheckValue<IkReal> x2465=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x2464))+(((-1.0)*gconst82*r10)))),-1);
if(!x2465.valid){
continue;
}
CheckValue<IkReal> x2466 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst82*r21*sj0))+(((-1.0)*r20*sj0*x2464)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2466.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2465.value)))+(x2466.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2467=IKsin(j4);
IkReal x2468=IKcos(j4);
IkReal x2469=(gconst82*r11);
IkReal x2470=((1.0)*cj2);
IkReal x2471=((1.0)*sj0);
IkReal x2472=(cj1*sj2);
IkReal x2473=((1.0)*x2468);
IkReal x2474=(gconst83*x2468);
IkReal x2475=(gconst82*x2467);
IkReal x2476=((1.0)*x2467);
evalcond[0]=(((r21*x2475))+(((-1.0)*r22*x2473))+(((-1.0)*gconst83*r20*x2476)));
evalcond[1]=(((x2467*x2469))+(((-1.0)*r12*x2473))+cj0+(((-1.0)*gconst83*r10*x2476)));
evalcond[2]=(((r01*x2475))+(((-1.0)*x2471))+(((-1.0)*gconst83*r00*x2476))+(((-1.0)*r02*x2473)));
evalcond[3]=(((sj1*sj2))+((r20*x2474))+(((-1.0)*r22*x2476))+(((-1.0)*gconst82*r21*x2473))+(((-1.0)*cj1*x2470)));
evalcond[4]=((((-1.0)*cj0*sj1*x2470))+(((-1.0)*cj0*x2472))+((r00*x2474))+(((-1.0)*r02*x2476))+(((-1.0)*gconst82*r01*x2473)));
evalcond[5]=((((-1.0)*r12*x2476))+((r10*x2474))+(((-1.0)*sj0*sj1*x2470))+(((-1.0)*x2471*x2472))+(((-1.0)*x2469*x2473)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2477=((1.0)*gconst83);
CheckValue<IkReal> x2478 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst82*r21))+(((-1.0)*cj0*r20*x2477)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2478.valid){
continue;
}
CheckValue<IkReal> x2479=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2477))+(((-1.0)*gconst82*r00)))),-1);
if(!x2479.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2478.value)+(((1.5707963267949)*(x2479.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2480=IKsin(j4);
IkReal x2481=IKcos(j4);
IkReal x2482=(gconst82*r11);
IkReal x2483=((1.0)*cj2);
IkReal x2484=((1.0)*sj0);
IkReal x2485=(cj1*sj2);
IkReal x2486=((1.0)*x2481);
IkReal x2487=(gconst83*x2481);
IkReal x2488=(gconst82*x2480);
IkReal x2489=((1.0)*x2480);
evalcond[0]=((((-1.0)*r22*x2486))+(((-1.0)*gconst83*r20*x2489))+((r21*x2488)));
evalcond[1]=(cj0+((x2480*x2482))+(((-1.0)*r12*x2486))+(((-1.0)*gconst83*r10*x2489)));
evalcond[2]=(((r01*x2488))+(((-1.0)*gconst83*r00*x2489))+(((-1.0)*x2484))+(((-1.0)*r02*x2486)));
evalcond[3]=((((-1.0)*r22*x2489))+(((-1.0)*gconst82*r21*x2486))+((sj1*sj2))+(((-1.0)*cj1*x2483))+((r20*x2487)));
evalcond[4]=((((-1.0)*gconst82*r01*x2486))+(((-1.0)*cj0*x2485))+(((-1.0)*r02*x2489))+(((-1.0)*cj0*sj1*x2483))+((r00*x2487)));
evalcond[5]=((((-1.0)*sj0*sj1*x2483))+(((-1.0)*x2482*x2486))+(((-1.0)*x2484*x2485))+(((-1.0)*r12*x2489))+((r10*x2487)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2490=((-1.0)*r10);
IkReal x2492 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2492)==0){
continue;
}
IkReal x2491=pow(x2492,-0.5);
CheckValue<IkReal> x2493 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x2490),IKFAST_ATAN2_MAGTHRESH);
if(!x2493.valid){
continue;
}
IkReal gconst84=((-1.0)*(x2493.value));
IkReal gconst85=(r11*x2491);
IkReal gconst86=(x2490*x2491);
CheckValue<IkReal> x2494 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2494.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2494.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2495=((-1.0)*r10);
IkReal x2496=x2491;
CheckValue<IkReal> x2498 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x2495),IKFAST_ATAN2_MAGTHRESH);
if(!x2498.valid){
continue;
}
IkReal x2497=((-1.0)*(x2498.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst85;
cj5=gconst86;
j5=x2497;
IkReal gconst84=x2497;
IkReal gconst85=(r11*x2496);
IkReal gconst86=(x2495*x2496);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2499=((1.0)*sj0);
IkReal x2500=((1.0)*gconst85);
CheckValue<IkReal> x2501 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x2499)))),IkReal(((((-1.0)*gconst85*r11*x2499))+((cj0*gconst86*r00))+(((-1.0)*cj0*r01*x2500))+((gconst86*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2501.valid){
continue;
}
CheckValue<IkReal> x2502=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst86*r21))+(((-1.0)*r20*x2500)))),-1);
if(!x2502.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2501.value)+(((1.5707963267949)*(x2502.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2503=IKsin(j4);
IkReal x2504=IKcos(j4);
IkReal x2505=(gconst85*r21);
IkReal x2506=(gconst86*r00);
IkReal x2507=(gconst86*r10);
IkReal x2508=((1.0)*cj2);
IkReal x2509=(gconst85*r11);
IkReal x2510=(gconst85*r01);
IkReal x2511=((1.0)*sj0);
IkReal x2512=(gconst86*r20);
IkReal x2513=(cj1*sj2);
IkReal x2514=((1.0)*x2504);
IkReal x2515=((1.0)*x2503);
evalcond[0]=((((-1.0)*r22*x2514))+(((-1.0)*x2512*x2515))+((x2503*x2505)));
evalcond[1]=(cj0+(((-1.0)*r12*x2514))+((x2503*x2509))+(((-1.0)*x2507*x2515)));
evalcond[2]=((((-1.0)*x2511))+(((-1.0)*x2506*x2515))+((x2503*x2510))+(((-1.0)*r02*x2514)));
evalcond[3]=(((x2504*x2512))+((sj1*sj2))+(((-1.0)*r22*x2515))+(((-1.0)*x2505*x2514))+(((-1.0)*cj1*x2508)));
evalcond[4]=(((x2504*x2506))+(((-1.0)*cj0*sj1*x2508))+(((-1.0)*x2510*x2514))+(((-1.0)*cj0*x2513))+(((-1.0)*r02*x2515)));
evalcond[5]=(((x2504*x2507))+(((-1.0)*r12*x2515))+(((-1.0)*x2509*x2514))+(((-1.0)*x2511*x2513))+(((-1.0)*sj0*sj1*x2508)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2516=((1.0)*gconst86);
CheckValue<IkReal> x2517 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst85*r21))+(((-1.0)*cj0*r20*x2516)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2517.valid){
continue;
}
CheckValue<IkReal> x2518=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2516))+(((-1.0)*gconst85*r00)))),-1);
if(!x2518.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2517.value)+(((1.5707963267949)*(x2518.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2519=IKsin(j4);
IkReal x2520=IKcos(j4);
IkReal x2521=(gconst85*r21);
IkReal x2522=(gconst86*r00);
IkReal x2523=(gconst86*r10);
IkReal x2524=((1.0)*cj2);
IkReal x2525=(gconst85*r11);
IkReal x2526=(gconst85*r01);
IkReal x2527=((1.0)*sj0);
IkReal x2528=(gconst86*r20);
IkReal x2529=(cj1*sj2);
IkReal x2530=((1.0)*x2520);
IkReal x2531=((1.0)*x2519);
evalcond[0]=((((-1.0)*x2528*x2531))+((x2519*x2521))+(((-1.0)*r22*x2530)));
evalcond[1]=(cj0+((x2519*x2525))+(((-1.0)*x2523*x2531))+(((-1.0)*r12*x2530)));
evalcond[2]=((((-1.0)*x2522*x2531))+((x2519*x2526))+(((-1.0)*r02*x2530))+(((-1.0)*x2527)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*cj1*x2524))+(((-1.0)*x2521*x2530))+(((-1.0)*r22*x2531))+((x2520*x2528)));
evalcond[4]=((((-1.0)*cj0*sj1*x2524))+(((-1.0)*r02*x2531))+(((-1.0)*x2526*x2530))+(((-1.0)*cj0*x2529))+((x2520*x2522)));
evalcond[5]=((((-1.0)*x2527*x2529))+(((-1.0)*x2525*x2530))+(((-1.0)*r12*x2531))+((x2520*x2523))+(((-1.0)*sj0*sj1*x2524)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2532=((-1.0)*r11);
IkReal x2534 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2534)==0){
continue;
}
IkReal x2533=pow(x2534,-0.5);
CheckValue<IkReal> x2535 = IKatan2WithCheck(IkReal(x2532),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2535.valid){
continue;
}
IkReal gconst87=((3.14159265358979)+(((-1.0)*(x2535.value))));
IkReal gconst88=(x2532*x2533);
IkReal gconst89=((1.0)*r10*x2533);
CheckValue<IkReal> x2536 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2536.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2536.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2537=((-1.0)*r11);
CheckValue<IkReal> x2540 = IKatan2WithCheck(IkReal(x2537),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2540.valid){
continue;
}
IkReal x2538=((1.0)*(x2540.value));
IkReal x2539=x2533;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2538)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2538)));
IkReal gconst88=(x2537*x2539);
IkReal gconst89=((1.0)*r10*x2539);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2541=((-1.0)*r11);
CheckValue<IkReal> x2544 = IKatan2WithCheck(IkReal(x2541),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2544.valid){
continue;
}
IkReal x2542=((1.0)*(x2544.value));
IkReal x2543=x2533;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2542)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2542)));
IkReal gconst88=(x2541*x2543);
IkReal gconst89=((1.0)*r10*x2543);
IkReal x2545=r12*r12;
IkReal x2546=((1.0)*sj0);
IkReal x2547=(cj0*r02);
IkReal x2548=x2533;
j4eval[0]=((IKabs((((sj0*x2545*x2548))+(((-1.0)*x2546*x2548))+((r12*x2547*x2548)))))+(IKabs(((((-1.0)*r12*x2546))+(((-1.0)*x2547))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2549=((-1.0)*r11);
CheckValue<IkReal> x2552 = IKatan2WithCheck(IkReal(x2549),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2552.valid){
continue;
}
IkReal x2550=((1.0)*(x2552.value));
IkReal x2551=x2533;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2550)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2550)));
IkReal gconst88=(x2549*x2551);
IkReal gconst89=((1.0)*r10*x2551);
IkReal x2553=r12*r12;
IkReal x2554=(cj1*cj2*r22);
IkReal x2555=(r22*sj1*sj2);
CheckValue<IkReal> x2559=IKPowWithIntegerCheck(((-1.0)+x2553),-1);
if(!x2559.valid){
continue;
}
IkReal x2556=x2559.value;
if((((1.0)+(((-1.0)*x2553)))) < -0.00001)
continue;
IkReal x2557=IKsqrt(((1.0)+(((-1.0)*x2553))));
IkReal x2558=(r12*x2556*x2557);
j4eval[0]=((IKabs((x2555+(((-1.0)*x2554)))))+(IKabs(((((-1.0)*x2555*x2558))+((x2554*x2558))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2560=(cj1*cj2);
IkReal x2561=(gconst89*r20);
IkReal x2562=(gconst88*r21);
IkReal x2563=(sj1*sj2);
CheckValue<IkReal> x2564=IKPowWithIntegerCheck(IKsign(((x2562*x2562)+(r22*r22)+(((-2.0)*x2561*x2562))+(x2561*x2561))),-1);
if(!x2564.valid){
continue;
}
CheckValue<IkReal> x2565 = IKatan2WithCheck(IkReal((((r22*x2563))+(((-1.0)*r22*x2560)))),IkReal((((x2560*x2561))+((x2562*x2563))+(((-1.0)*x2561*x2563))+(((-1.0)*x2560*x2562)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2565.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2564.value)))+(x2565.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2566=IKsin(j4);
IkReal x2567=IKcos(j4);
IkReal x2568=((1.0)*sj0);
IkReal x2569=((1.0)*cj2);
IkReal x2570=(gconst89*r20);
IkReal x2571=(gconst89*r10);
IkReal x2572=(gconst89*r00);
IkReal x2573=(cj1*sj2);
IkReal x2574=((1.0)*x2567);
IkReal x2575=((1.0)*x2566);
IkReal x2576=(gconst88*x2566);
evalcond[0]=(((r21*x2576))+(((-1.0)*x2570*x2575))+(((-1.0)*r22*x2574)));
evalcond[1]=((((-1.0)*r12*x2574))+(((-1.0)*x2571*x2575))+cj0+((r11*x2576)));
evalcond[2]=((((-1.0)*x2568))+((r01*x2576))+(((-1.0)*r02*x2574))+(((-1.0)*x2572*x2575)));
evalcond[3]=((((-1.0)*cj1*x2569))+((x2567*x2570))+((sj1*sj2))+(((-1.0)*gconst88*r21*x2574))+(((-1.0)*r22*x2575)));
evalcond[4]=(((x2567*x2572))+(((-1.0)*cj0*x2573))+(((-1.0)*cj0*sj1*x2569))+(((-1.0)*r02*x2575))+(((-1.0)*gconst88*r01*x2574)));
evalcond[5]=((((-1.0)*r12*x2575))+(((-1.0)*cj2*sj1*x2568))+((x2567*x2571))+(((-1.0)*x2568*x2573))+(((-1.0)*gconst88*r11*x2574)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2577=((1.0)*sj0);
IkReal x2578=((1.0)*cj0);
CheckValue<IkReal> x2579 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x2577))+(((-1.0)*r02*x2578)))),IkReal(((((-1.0)*gconst88*r11*x2577))+((cj0*gconst89*r00))+(((-1.0)*gconst88*r01*x2578))+((gconst89*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2579.valid){
continue;
}
CheckValue<IkReal> x2580=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst88*r20))+(((-1.0)*gconst89*r21)))),-1);
if(!x2580.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2579.value)+(((1.5707963267949)*(x2580.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2581=IKsin(j4);
IkReal x2582=IKcos(j4);
IkReal x2583=((1.0)*sj0);
IkReal x2584=((1.0)*cj2);
IkReal x2585=(gconst89*r20);
IkReal x2586=(gconst89*r10);
IkReal x2587=(gconst89*r00);
IkReal x2588=(cj1*sj2);
IkReal x2589=((1.0)*x2582);
IkReal x2590=((1.0)*x2581);
IkReal x2591=(gconst88*x2581);
evalcond[0]=((((-1.0)*x2585*x2590))+((r21*x2591))+(((-1.0)*r22*x2589)));
evalcond[1]=(cj0+(((-1.0)*x2586*x2590))+((r11*x2591))+(((-1.0)*r12*x2589)));
evalcond[2]=(((r01*x2591))+(((-1.0)*r02*x2589))+(((-1.0)*x2583))+(((-1.0)*x2587*x2590)));
evalcond[3]=((((-1.0)*cj1*x2584))+(((-1.0)*r22*x2590))+((sj1*sj2))+((x2582*x2585))+(((-1.0)*gconst88*r21*x2589)));
evalcond[4]=((((-1.0)*cj0*x2588))+(((-1.0)*r02*x2590))+(((-1.0)*cj0*sj1*x2584))+((x2582*x2587))+(((-1.0)*gconst88*r01*x2589)));
evalcond[5]=((((-1.0)*cj2*sj1*x2583))+(((-1.0)*gconst88*r11*x2589))+(((-1.0)*r12*x2590))+((x2582*x2586))+(((-1.0)*x2583*x2588)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2592=((1.0)*gconst89);
CheckValue<IkReal> x2593=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2592))+(((-1.0)*gconst88*r00)))),-1);
if(!x2593.valid){
continue;
}
CheckValue<IkReal> x2594 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x2592))+((cj0*gconst88*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2594.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2593.value)))+(x2594.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2595=IKsin(j4);
IkReal x2596=IKcos(j4);
IkReal x2597=((1.0)*sj0);
IkReal x2598=((1.0)*cj2);
IkReal x2599=(gconst89*r20);
IkReal x2600=(gconst89*r10);
IkReal x2601=(gconst89*r00);
IkReal x2602=(cj1*sj2);
IkReal x2603=((1.0)*x2596);
IkReal x2604=((1.0)*x2595);
IkReal x2605=(gconst88*x2595);
evalcond[0]=((((-1.0)*r22*x2603))+((r21*x2605))+(((-1.0)*x2599*x2604)));
evalcond[1]=(cj0+(((-1.0)*x2600*x2604))+(((-1.0)*r12*x2603))+((r11*x2605)));
evalcond[2]=((((-1.0)*x2601*x2604))+(((-1.0)*x2597))+(((-1.0)*r02*x2603))+((r01*x2605)));
evalcond[3]=((((-1.0)*cj1*x2598))+((sj1*sj2))+(((-1.0)*gconst88*r21*x2603))+(((-1.0)*r22*x2604))+((x2596*x2599)));
evalcond[4]=((((-1.0)*cj0*x2602))+(((-1.0)*gconst88*r01*x2603))+((x2596*x2601))+(((-1.0)*r02*x2604))+(((-1.0)*cj0*sj1*x2598)));
evalcond[5]=((((-1.0)*gconst88*r11*x2603))+(((-1.0)*cj2*sj1*x2597))+(((-1.0)*x2597*x2602))+((x2596*x2600))+(((-1.0)*r12*x2604)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2606=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2606;
j4eval[1]=IKsign(x2606);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2607=((1.0)*cj5);
IkReal x2608=((((-1.0)*r00*sj5))+(((-1.0)*r01*x2607)));
j4eval[0]=x2608;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x2607)))))+(IKabs(r22)));
j4eval[2]=IKsign(x2608);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2609=cj5*cj5;
IkReal x2610=r11*r11;
IkReal x2611=(r11*sj5);
IkReal x2612=(cj5*r10);
IkReal x2613=((r12*r12)+(((-2.0)*x2611*x2612))+(((-1.0)*x2609*x2610))+((x2609*(r10*r10)))+x2610);
j4eval[0]=x2613;
j4eval[1]=IKsign(x2613);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x2611))+x2612))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2614=cj5*cj5;
IkReal x2615=r11*r11;
IkReal x2616=(cj5*r10);
IkReal x2617=(r11*sj5);
CheckValue<IkReal> x2618 = IKatan2WithCheck(IkReal(((((-1.0)*x2617))+x2616)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x2618.valid){
continue;
}
CheckValue<IkReal> x2619=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x2616*x2617))+(((-1.0)*x2614*x2615))+((x2614*(r10*r10)))+x2615)),-1);
if(!x2619.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2618.value)+(((1.5707963267949)*(x2619.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2620=IKsin(j4);
IkReal x2621=IKcos(j4);
IkReal x2622=(cj5*r10);
IkReal x2623=(r01*sj5);
IkReal x2624=((1.0)*cj2);
IkReal x2625=(cj5*r00);
IkReal x2626=(cj5*r20);
IkReal x2627=((1.0)*x2621);
IkReal x2628=((1.0)*x2620);
IkReal x2629=(sj5*x2620);
evalcond[0]=((((-1.0)*x2626*x2628))+(((-1.0)*r22*x2627))+((r21*x2629)));
evalcond[1]=((((-1.0)*x2625*x2628))+((x2620*x2623))+(((-1.0)*r02*x2627)));
evalcond[2]=((((-1.0)*r12*x2628))+((x2621*x2622))+(((-1.0)*r11*sj5*x2627)));
evalcond[3]=((1.0)+(((-1.0)*x2622*x2628))+(((-1.0)*r12*x2627))+((r11*x2629)));
evalcond[4]=((((-1.0)*r21*sj5*x2627))+((sj1*sj2))+(((-1.0)*r22*x2628))+((x2621*x2626))+(((-1.0)*cj1*x2624)));
evalcond[5]=((((-1.0)*x2623*x2627))+(((-1.0)*cj1*sj2))+((x2621*x2625))+(((-1.0)*r02*x2628))+(((-1.0)*sj1*x2624)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2630=((1.0)*cj5);
CheckValue<IkReal> x2631 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x2630)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2631.valid){
continue;
}
CheckValue<IkReal> x2632=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x2630)))),-1);
if(!x2632.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2631.value)+(((1.5707963267949)*(x2632.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2633=IKsin(j4);
IkReal x2634=IKcos(j4);
IkReal x2635=(cj5*r10);
IkReal x2636=(r01*sj5);
IkReal x2637=((1.0)*cj2);
IkReal x2638=(cj5*r00);
IkReal x2639=(cj5*r20);
IkReal x2640=((1.0)*x2634);
IkReal x2641=((1.0)*x2633);
IkReal x2642=(sj5*x2633);
evalcond[0]=((((-1.0)*r22*x2640))+((r21*x2642))+(((-1.0)*x2639*x2641)));
evalcond[1]=((((-1.0)*r02*x2640))+((x2633*x2636))+(((-1.0)*x2638*x2641)));
evalcond[2]=((((-1.0)*r11*sj5*x2640))+(((-1.0)*r12*x2641))+((x2634*x2635)));
evalcond[3]=((1.0)+(((-1.0)*x2635*x2641))+((r11*x2642))+(((-1.0)*r12*x2640)));
evalcond[4]=((((-1.0)*r22*x2641))+(((-1.0)*r21*sj5*x2640))+(((-1.0)*cj1*x2637))+((sj1*sj2))+((x2634*x2639)));
evalcond[5]=((((-1.0)*r02*x2641))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x2637))+((x2634*x2638))+(((-1.0)*x2636*x2640)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2643=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2643.valid){
continue;
}
CheckValue<IkReal> x2644 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2644.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2643.value)))+(x2644.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2645=IKsin(j4);
IkReal x2646=IKcos(j4);
IkReal x2647=(cj5*r10);
IkReal x2648=(r01*sj5);
IkReal x2649=((1.0)*cj2);
IkReal x2650=(cj5*r00);
IkReal x2651=(cj5*r20);
IkReal x2652=((1.0)*x2646);
IkReal x2653=((1.0)*x2645);
IkReal x2654=(sj5*x2645);
evalcond[0]=((((-1.0)*r22*x2652))+(((-1.0)*x2651*x2653))+((r21*x2654)));
evalcond[1]=((((-1.0)*x2650*x2653))+(((-1.0)*r02*x2652))+((x2645*x2648)));
evalcond[2]=((((-1.0)*r11*sj5*x2652))+(((-1.0)*r12*x2653))+((x2646*x2647)));
evalcond[3]=((1.0)+((r11*x2654))+(((-1.0)*r12*x2652))+(((-1.0)*x2647*x2653)));
evalcond[4]=((((-1.0)*r22*x2653))+(((-1.0)*r21*sj5*x2652))+(((-1.0)*cj1*x2649))+((sj1*sj2))+((x2646*x2651)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*r02*x2653))+((x2646*x2650))+(((-1.0)*x2648*x2652))+(((-1.0)*sj1*x2649)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2655=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x2655;
j4eval[1]=IKsign(x2655);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2656=((1.0)*cj5);
IkReal x2657=((((-1.0)*r21*x2656))+(((-1.0)*r20*sj5)));
j4eval[0]=x2657;
j4eval[1]=((IKabs((((r01*sj5))+(((-1.0)*r00*x2656)))))+(IKabs(r02)));
j4eval[2]=IKsign(x2657);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2658=cj5*cj5;
IkReal x2659=r11*r11;
IkReal x2660=(cj5*r10);
IkReal x2661=(r11*sj5);
IkReal x2662=((((2.0)*x2660*x2661))+((x2658*x2659))+(((-1.0)*(r12*r12)))+(((-1.0)*x2658*(r10*r10)))+(((-1.0)*x2659)));
j4eval[0]=x2662;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*x2661))+x2660))));
j4eval[2]=IKsign(x2662);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2663=cj5*cj5;
IkReal x2664=r11*r11;
IkReal x2665=(cj5*r10);
IkReal x2666=(r11*sj5);
CheckValue<IkReal> x2667=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2664))+(((-1.0)*x2663*(r10*r10)))+((x2663*x2664))+(((-1.0)*(r12*r12)))+(((2.0)*x2665*x2666)))),-1);
if(!x2667.valid){
continue;
}
CheckValue<IkReal> x2668 = IKatan2WithCheck(IkReal(((((-1.0)*x2666))+x2665)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x2668.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2667.value)))+(x2668.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2669=IKsin(j4);
IkReal x2670=IKcos(j4);
IkReal x2671=(cj5*r10);
IkReal x2672=(r01*sj5);
IkReal x2673=(cj5*r00);
IkReal x2674=(cj5*r20);
IkReal x2675=((1.0)*x2670);
IkReal x2676=((1.0)*x2669);
IkReal x2677=(sj5*x2669);
evalcond[0]=(((r21*x2677))+(((-1.0)*x2674*x2676))+(((-1.0)*r22*x2675)));
evalcond[1]=((((-1.0)*x2673*x2676))+(((-1.0)*r02*x2675))+((x2669*x2672)));
evalcond[2]=((((-1.0)*r12*x2676))+((x2670*x2671))+(((-1.0)*r11*sj5*x2675)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x2675))+(((-1.0)*x2671*x2676))+((r11*x2677)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x2672*x2675))+(((-1.0)*r02*x2676))+((x2670*x2673)));
evalcond[5]=((((-1.0)*r21*sj5*x2675))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x2670*x2674))+(((-1.0)*r22*x2676)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2678=((1.0)*cj5);
CheckValue<IkReal> x2679 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x2678)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2679.valid){
continue;
}
CheckValue<IkReal> x2680=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2678))+(((-1.0)*r20*sj5)))),-1);
if(!x2680.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2679.value)+(((1.5707963267949)*(x2680.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2681=IKsin(j4);
IkReal x2682=IKcos(j4);
IkReal x2683=(cj5*r10);
IkReal x2684=(r01*sj5);
IkReal x2685=(cj5*r00);
IkReal x2686=(cj5*r20);
IkReal x2687=((1.0)*x2682);
IkReal x2688=((1.0)*x2681);
IkReal x2689=(sj5*x2681);
evalcond[0]=(((r21*x2689))+(((-1.0)*r22*x2687))+(((-1.0)*x2686*x2688)));
evalcond[1]=((((-1.0)*x2685*x2688))+(((-1.0)*r02*x2687))+((x2681*x2684)));
evalcond[2]=((((-1.0)*r12*x2688))+(((-1.0)*r11*sj5*x2687))+((x2682*x2683)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x2687))+((r11*x2689))+(((-1.0)*x2683*x2688)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r02*x2688))+(((-1.0)*x2684*x2687))+((cj1*sj2))+((x2682*x2685)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x2687))+(((-1.0)*r22*x2688))+((x2682*x2686)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2690 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2690.valid){
continue;
}
CheckValue<IkReal> x2691=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x2691.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2690.value)+(((1.5707963267949)*(x2691.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2692=IKsin(j4);
IkReal x2693=IKcos(j4);
IkReal x2694=(cj5*r10);
IkReal x2695=(r01*sj5);
IkReal x2696=(cj5*r00);
IkReal x2697=(cj5*r20);
IkReal x2698=((1.0)*x2693);
IkReal x2699=((1.0)*x2692);
IkReal x2700=(sj5*x2692);
evalcond[0]=((((-1.0)*r22*x2698))+(((-1.0)*x2697*x2699))+((r21*x2700)));
evalcond[1]=((((-1.0)*x2696*x2699))+(((-1.0)*r02*x2698))+((x2692*x2695)));
evalcond[2]=((((-1.0)*r11*sj5*x2698))+((x2693*x2694))+(((-1.0)*r12*x2699)));
evalcond[3]=((-1.0)+((r11*x2700))+(((-1.0)*r12*x2698))+(((-1.0)*x2694*x2699)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r02*x2699))+((x2693*x2696))+(((-1.0)*x2695*x2698)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x2698))+(((-1.0)*r22*x2699))+((x2693*x2697)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2701=((-1.0)*r00);
IkReal x2703 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2703)==0){
continue;
}
IkReal x2702=pow(x2703,-0.5);
CheckValue<IkReal> x2704 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x2701),IKFAST_ATAN2_MAGTHRESH);
if(!x2704.valid){
continue;
}
IkReal gconst90=((-1.0)*(x2704.value));
IkReal gconst91=(r01*x2702);
IkReal gconst92=(x2701*x2702);
CheckValue<IkReal> x2705 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2705.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2705.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2706=((-1.0)*r00);
IkReal x2707=x2702;
CheckValue<IkReal> x2709 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x2706),IKFAST_ATAN2_MAGTHRESH);
if(!x2709.valid){
continue;
}
IkReal x2708=((-1.0)*(x2709.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst91;
cj5=gconst92;
j5=x2708;
IkReal gconst90=x2708;
IkReal gconst91=(r01*x2707);
IkReal gconst92=(x2706*x2707);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2710=((1.0)*sj0);
IkReal x2711=((1.0)*cj0);
CheckValue<IkReal> x2712 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x2711))+(((-1.0)*r12*x2710)))),IkReal(((((-1.0)*gconst91*r01*x2711))+((cj0*gconst92*r00))+((gconst92*r10*sj0))+(((-1.0)*gconst91*r11*x2710)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2712.valid){
continue;
}
CheckValue<IkReal> x2713=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst91*r20))+(((-1.0)*gconst92*r21)))),-1);
if(!x2713.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2712.value)+(((1.5707963267949)*(x2713.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2714=IKsin(j4);
IkReal x2715=IKcos(j4);
IkReal x2716=((1.0)*cj2);
IkReal x2717=(gconst92*r00);
IkReal x2718=(gconst92*r20);
IkReal x2719=((1.0)*sj0);
IkReal x2720=(gconst92*r10);
IkReal x2721=(cj1*sj2);
IkReal x2722=((1.0)*x2715);
IkReal x2723=(gconst91*x2714);
IkReal x2724=((1.0)*x2714);
evalcond[0]=((((-1.0)*x2718*x2724))+((r21*x2723))+(((-1.0)*r22*x2722)));
evalcond[1]=(cj0+(((-1.0)*x2720*x2724))+(((-1.0)*r12*x2722))+((r11*x2723)));
evalcond[2]=((((-1.0)*x2719))+((r01*x2723))+(((-1.0)*x2717*x2724))+(((-1.0)*r02*x2722)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*r22*x2724))+(((-1.0)*gconst91*r21*x2722))+((x2715*x2718))+(((-1.0)*cj1*x2716)));
evalcond[4]=((((-1.0)*gconst91*r01*x2722))+(((-1.0)*cj0*sj1*x2716))+((x2715*x2717))+(((-1.0)*cj0*x2721))+(((-1.0)*r02*x2724)));
evalcond[5]=(((x2715*x2720))+(((-1.0)*sj0*sj1*x2716))+(((-1.0)*x2719*x2721))+(((-1.0)*gconst91*r11*x2722))+(((-1.0)*r12*x2724)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2725=((1.0)*gconst92);
CheckValue<IkReal> x2726=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst91*r10))+(((-1.0)*r11*x2725)))),-1);
if(!x2726.valid){
continue;
}
CheckValue<IkReal> x2727 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x2725))+((gconst91*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2727.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2726.value)))+(x2727.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2728=IKsin(j4);
IkReal x2729=IKcos(j4);
IkReal x2730=((1.0)*cj2);
IkReal x2731=(gconst92*r00);
IkReal x2732=(gconst92*r20);
IkReal x2733=((1.0)*sj0);
IkReal x2734=(gconst92*r10);
IkReal x2735=(cj1*sj2);
IkReal x2736=((1.0)*x2729);
IkReal x2737=(gconst91*x2728);
IkReal x2738=((1.0)*x2728);
evalcond[0]=(((r21*x2737))+(((-1.0)*r22*x2736))+(((-1.0)*x2732*x2738)));
evalcond[1]=(cj0+(((-1.0)*x2734*x2738))+(((-1.0)*r12*x2736))+((r11*x2737)));
evalcond[2]=((((-1.0)*x2731*x2738))+((r01*x2737))+(((-1.0)*r02*x2736))+(((-1.0)*x2733)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*gconst91*r21*x2736))+(((-1.0)*r22*x2738))+(((-1.0)*cj1*x2730))+((x2729*x2732)));
evalcond[4]=((((-1.0)*cj0*sj1*x2730))+(((-1.0)*gconst91*r01*x2736))+(((-1.0)*cj0*x2735))+(((-1.0)*r02*x2738))+((x2729*x2731)));
evalcond[5]=((((-1.0)*gconst91*r11*x2736))+(((-1.0)*x2733*x2735))+(((-1.0)*r12*x2738))+(((-1.0)*sj0*sj1*x2730))+((x2729*x2734)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2739=((-1.0)*r01);
IkReal x2741 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2741)==0){
continue;
}
IkReal x2740=pow(x2741,-0.5);
CheckValue<IkReal> x2742 = IKatan2WithCheck(IkReal(x2739),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2742.valid){
continue;
}
IkReal gconst93=((3.14159265358979)+(((-1.0)*(x2742.value))));
IkReal gconst94=(x2739*x2740);
IkReal gconst95=((1.0)*r00*x2740);
CheckValue<IkReal> x2743 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2743.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2743.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x2744=((-1.0)*r01);
CheckValue<IkReal> x2747 = IKatan2WithCheck(IkReal(x2744),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2747.valid){
continue;
}
IkReal x2745=((1.0)*(x2747.value));
IkReal x2746=x2740;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2745)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2745)));
IkReal gconst94=(x2744*x2746);
IkReal gconst95=((1.0)*r00*x2746);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x2748=((-1.0)*r01);
CheckValue<IkReal> x2751 = IKatan2WithCheck(IkReal(x2748),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2751.valid){
continue;
}
IkReal x2749=((1.0)*(x2751.value));
IkReal x2750=x2740;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2749)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2749)));
IkReal gconst94=(x2748*x2750);
IkReal gconst95=((1.0)*r00*x2750);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2752=((-1.0)*r01);
CheckValue<IkReal> x2755 = IKatan2WithCheck(IkReal(x2752),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2755.valid){
continue;
}
IkReal x2753=((1.0)*(x2755.value));
IkReal x2754=x2740;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2753)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2753)));
IkReal gconst94=(x2752*x2754);
IkReal gconst95=((1.0)*r00*x2754);
IkReal x2756=r02*r02;
IkReal x2757=(r12*sj0);
IkReal x2758=((1.0)*cj0);
IkReal x2759=x2740;
j4eval[0]=((IKabs((((cj0*x2756*x2759))+((r02*x2757*x2759))+(((-1.0)*x2758*x2759)))))+(IKabs(((((-1.0)*x2757))+(((-1.0)*r02*x2758))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2760=((1.0)*sj0);
IkReal x2761=((1.0)*cj0);
CheckValue<IkReal> x2762=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst95*r21))+(((-1.0)*gconst94*r20)))),-1);
if(!x2762.valid){
continue;
}
CheckValue<IkReal> x2763 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x2760))+(((-1.0)*r02*x2761)))),IkReal((((gconst95*r10*sj0))+(((-1.0)*gconst94*r11*x2760))+(((-1.0)*gconst94*r01*x2761))+((cj0*gconst95*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2763.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2762.value)))+(x2763.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2764=IKsin(j4);
IkReal x2765=IKcos(j4);
IkReal x2766=(gconst94*r11);
IkReal x2767=((1.0)*cj2);
IkReal x2768=(gconst94*r21);
IkReal x2769=((1.0)*sj0);
IkReal x2770=(gconst94*r01);
IkReal x2771=(cj1*sj2);
IkReal x2772=((1.0)*x2765);
IkReal x2773=(gconst95*x2765);
IkReal x2774=((1.0)*x2764);
IkReal x2775=(gconst95*x2774);
evalcond[0]=((((-1.0)*r20*x2775))+((x2764*x2768))+(((-1.0)*r22*x2772)));
evalcond[1]=((((-1.0)*r10*x2775))+cj0+(((-1.0)*r12*x2772))+((x2764*x2766)));
evalcond[2]=((((-1.0)*r00*x2775))+(((-1.0)*r02*x2772))+(((-1.0)*x2769))+((x2764*x2770)));
evalcond[3]=((((-1.0)*x2768*x2772))+((sj1*sj2))+((r20*x2773))+(((-1.0)*cj1*x2767))+(((-1.0)*r22*x2774)));
evalcond[4]=((((-1.0)*cj0*x2771))+((r00*x2773))+(((-1.0)*r02*x2774))+(((-1.0)*x2770*x2772))+(((-1.0)*cj0*sj1*x2767)));
evalcond[5]=((((-1.0)*x2766*x2772))+(((-1.0)*x2769*x2771))+(((-1.0)*sj0*sj1*x2767))+(((-1.0)*r12*x2774))+((r10*x2773)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2776=((1.0)*gconst95);
CheckValue<IkReal> x2777=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst94*r10))+(((-1.0)*r11*x2776)))),-1);
if(!x2777.valid){
continue;
}
CheckValue<IkReal> x2778 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst94*r21*sj0))+(((-1.0)*r20*sj0*x2776)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2778.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2777.value)))+(x2778.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2779=IKsin(j4);
IkReal x2780=IKcos(j4);
IkReal x2781=(gconst94*r11);
IkReal x2782=((1.0)*cj2);
IkReal x2783=(gconst94*r21);
IkReal x2784=((1.0)*sj0);
IkReal x2785=(gconst94*r01);
IkReal x2786=(cj1*sj2);
IkReal x2787=((1.0)*x2780);
IkReal x2788=(gconst95*x2780);
IkReal x2789=((1.0)*x2779);
IkReal x2790=(gconst95*x2789);
evalcond[0]=(((x2779*x2783))+(((-1.0)*r20*x2790))+(((-1.0)*r22*x2787)));
evalcond[1]=(((x2779*x2781))+(((-1.0)*r12*x2787))+cj0+(((-1.0)*r10*x2790)));
evalcond[2]=(((x2779*x2785))+(((-1.0)*x2784))+(((-1.0)*r00*x2790))+(((-1.0)*r02*x2787)));
evalcond[3]=((((-1.0)*cj1*x2782))+((sj1*sj2))+(((-1.0)*x2783*x2787))+(((-1.0)*r22*x2789))+((r20*x2788)));
evalcond[4]=((((-1.0)*cj0*sj1*x2782))+(((-1.0)*x2785*x2787))+(((-1.0)*cj0*x2786))+((r00*x2788))+(((-1.0)*r02*x2789)));
evalcond[5]=((((-1.0)*r12*x2789))+(((-1.0)*sj0*sj1*x2782))+(((-1.0)*x2784*x2786))+(((-1.0)*x2781*x2787))+((r10*x2788)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2791=((1.0)*gconst95);
CheckValue<IkReal> x2792=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst94*r00))+(((-1.0)*r01*x2791)))),-1);
if(!x2792.valid){
continue;
}
CheckValue<IkReal> x2793 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x2791))+((cj0*gconst94*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2793.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2792.value)))+(x2793.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2794=IKsin(j4);
IkReal x2795=IKcos(j4);
IkReal x2796=(gconst94*r11);
IkReal x2797=((1.0)*cj2);
IkReal x2798=(gconst94*r21);
IkReal x2799=((1.0)*sj0);
IkReal x2800=(gconst94*r01);
IkReal x2801=(cj1*sj2);
IkReal x2802=((1.0)*x2795);
IkReal x2803=(gconst95*x2795);
IkReal x2804=((1.0)*x2794);
IkReal x2805=(gconst95*x2804);
evalcond[0]=(((x2794*x2798))+(((-1.0)*r20*x2805))+(((-1.0)*r22*x2802)));
evalcond[1]=(cj0+((x2794*x2796))+(((-1.0)*r10*x2805))+(((-1.0)*r12*x2802)));
evalcond[2]=((((-1.0)*x2799))+(((-1.0)*r00*x2805))+(((-1.0)*r02*x2802))+((x2794*x2800)));
evalcond[3]=(((r20*x2803))+((sj1*sj2))+(((-1.0)*r22*x2804))+(((-1.0)*x2798*x2802))+(((-1.0)*cj1*x2797)));
evalcond[4]=((((-1.0)*x2800*x2802))+(((-1.0)*cj0*sj1*x2797))+(((-1.0)*r02*x2804))+(((-1.0)*cj0*x2801))+((r00*x2803)));
evalcond[5]=(((r10*x2803))+(((-1.0)*sj0*sj1*x2797))+(((-1.0)*r12*x2804))+(((-1.0)*x2799*x2801))+(((-1.0)*x2796*x2802)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2806=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2806;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x2806);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2807=((1.0)*cj5);
IkReal x2808=((((-1.0)*r10*sj5))+(((-1.0)*r11*x2807)));
j4eval[0]=x2808;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x2807)))))+(IKabs(r22)));
j4eval[2]=IKsign(x2808);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2809=cj5*cj5;
IkReal x2810=r01*r01;
IkReal x2811=(r01*sj5);
IkReal x2812=(cj5*r00);
IkReal x2813=(((x2809*x2810))+(((-1.0)*x2810))+(((-1.0)*(r02*r02)))+(((2.0)*x2811*x2812))+(((-1.0)*x2809*(r00*r00))));
j4eval[0]=x2813;
j4eval[1]=IKsign(x2813);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x2811))+x2812))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2814=cj5*cj5;
IkReal x2815=r01*r01;
IkReal x2816=(r01*sj5);
IkReal x2817=(cj5*r00);
CheckValue<IkReal> x2818 = IKatan2WithCheck(IkReal(((((-1.0)*x2816))+x2817)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x2818.valid){
continue;
}
CheckValue<IkReal> x2819=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2815))+(((-1.0)*(r02*r02)))+((x2814*x2815))+(((2.0)*x2816*x2817))+(((-1.0)*x2814*(r00*r00))))),-1);
if(!x2819.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2818.value)+(((1.5707963267949)*(x2819.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2820=IKsin(j4);
IkReal x2821=IKcos(j4);
IkReal x2822=(cj5*r10);
IkReal x2823=(r01*sj5);
IkReal x2824=((1.0)*cj2);
IkReal x2825=(cj5*r00);
IkReal x2826=(cj5*r20);
IkReal x2827=((1.0)*x2821);
IkReal x2828=((1.0)*x2820);
IkReal x2829=(sj5*x2820);
evalcond[0]=((((-1.0)*x2826*x2828))+((r21*x2829))+(((-1.0)*r22*x2827)));
evalcond[1]=((((-1.0)*r12*x2827))+(((-1.0)*x2822*x2828))+((r11*x2829)));
evalcond[2]=(((x2821*x2825))+(((-1.0)*r02*x2828))+(((-1.0)*x2823*x2827)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x2827))+(((-1.0)*x2825*x2828))+((x2820*x2823)));
evalcond[4]=(((x2821*x2826))+(((-1.0)*cj1*x2824))+((sj1*sj2))+(((-1.0)*r22*x2828))+(((-1.0)*r21*sj5*x2827)));
evalcond[5]=(((x2821*x2822))+(((-1.0)*r12*x2828))+(((-1.0)*sj1*x2824))+(((-1.0)*cj1*sj2))+(((-1.0)*r11*sj5*x2827)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2830=((1.0)*cj5);
CheckValue<IkReal> x2831 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x2830)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2831.valid){
continue;
}
CheckValue<IkReal> x2832=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x2830)))),-1);
if(!x2832.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2831.value)+(((1.5707963267949)*(x2832.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2833=IKsin(j4);
IkReal x2834=IKcos(j4);
IkReal x2835=(cj5*r10);
IkReal x2836=(r01*sj5);
IkReal x2837=((1.0)*cj2);
IkReal x2838=(cj5*r00);
IkReal x2839=(cj5*r20);
IkReal x2840=((1.0)*x2834);
IkReal x2841=((1.0)*x2833);
IkReal x2842=(sj5*x2833);
evalcond[0]=(((r21*x2842))+(((-1.0)*x2839*x2841))+(((-1.0)*r22*x2840)));
evalcond[1]=(((r11*x2842))+(((-1.0)*r12*x2840))+(((-1.0)*x2835*x2841)));
evalcond[2]=(((x2834*x2838))+(((-1.0)*r02*x2841))+(((-1.0)*x2836*x2840)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x2840))+(((-1.0)*x2838*x2841))+((x2833*x2836)));
evalcond[4]=((((-1.0)*cj1*x2837))+((x2834*x2839))+((sj1*sj2))+(((-1.0)*r22*x2841))+(((-1.0)*r21*sj5*x2840)));
evalcond[5]=(((x2834*x2835))+(((-1.0)*sj1*x2837))+(((-1.0)*r12*x2841))+(((-1.0)*cj1*sj2))+(((-1.0)*r11*sj5*x2840)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2843=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2843.valid){
continue;
}
CheckValue<IkReal> x2844 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2844.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2843.value)))+(x2844.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2845=IKsin(j4);
IkReal x2846=IKcos(j4);
IkReal x2847=(cj5*r10);
IkReal x2848=(r01*sj5);
IkReal x2849=((1.0)*cj2);
IkReal x2850=(cj5*r00);
IkReal x2851=(cj5*r20);
IkReal x2852=((1.0)*x2846);
IkReal x2853=((1.0)*x2845);
IkReal x2854=(sj5*x2845);
evalcond[0]=(((r21*x2854))+(((-1.0)*x2851*x2853))+(((-1.0)*r22*x2852)));
evalcond[1]=(((r11*x2854))+(((-1.0)*r12*x2852))+(((-1.0)*x2847*x2853)));
evalcond[2]=(((x2846*x2850))+(((-1.0)*r02*x2853))+(((-1.0)*x2848*x2852)));
evalcond[3]=((-1.0)+(((-1.0)*x2850*x2853))+(((-1.0)*r02*x2852))+((x2845*x2848)));
evalcond[4]=(((sj1*sj2))+((x2846*x2851))+(((-1.0)*r22*x2853))+(((-1.0)*r21*sj5*x2852))+(((-1.0)*cj1*x2849)));
evalcond[5]=((((-1.0)*r11*sj5*x2852))+(((-1.0)*sj1*x2849))+(((-1.0)*r12*x2853))+((x2846*x2847))+(((-1.0)*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2855=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x2855;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x2855);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2856=((1.0)*cj5);
IkReal x2857=((((-1.0)*r21*x2856))+(((-1.0)*r20*sj5)));
j4eval[0]=x2857;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x2856))))));
j4eval[2]=IKsign(x2857);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2858=cj5*cj5;
IkReal x2859=r01*r01;
IkReal x2860=(cj5*r00);
IkReal x2861=(r01*sj5);
IkReal x2862=((((-1.0)*x2858*x2859))+(((-2.0)*x2860*x2861))+(r02*r02)+x2859+((x2858*(r00*r00))));
j4eval[0]=x2862;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*x2861))+x2860))));
j4eval[2]=IKsign(x2862);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2863=cj5*cj5;
IkReal x2864=r01*r01;
IkReal x2865=(r01*sj5);
IkReal x2866=(cj5*r00);
CheckValue<IkReal> x2867 = IKatan2WithCheck(IkReal(((((-1.0)*x2865))+x2866)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x2867.valid){
continue;
}
CheckValue<IkReal> x2868=IKPowWithIntegerCheck(IKsign(((((-2.0)*x2865*x2866))+((x2863*(r00*r00)))+(r02*r02)+x2864+(((-1.0)*x2863*x2864)))),-1);
if(!x2868.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2867.value)+(((1.5707963267949)*(x2868.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2869=IKsin(j4);
IkReal x2870=IKcos(j4);
IkReal x2871=(cj5*r10);
IkReal x2872=(r01*sj5);
IkReal x2873=(cj5*r00);
IkReal x2874=(cj5*r20);
IkReal x2875=((1.0)*x2870);
IkReal x2876=((1.0)*x2869);
IkReal x2877=(sj5*x2869);
evalcond[0]=((((-1.0)*r22*x2875))+((r21*x2877))+(((-1.0)*x2874*x2876)));
evalcond[1]=((((-1.0)*x2871*x2876))+((r11*x2877))+(((-1.0)*r12*x2875)));
evalcond[2]=(((x2870*x2873))+(((-1.0)*r02*x2876))+(((-1.0)*x2872*x2875)));
evalcond[3]=((1.0)+(((-1.0)*r02*x2875))+((x2869*x2872))+(((-1.0)*x2873*x2876)));
evalcond[4]=(((cj2*sj1))+((x2870*x2871))+((cj1*sj2))+(((-1.0)*r11*sj5*x2875))+(((-1.0)*r12*x2876)));
evalcond[5]=(((x2870*x2874))+(((-1.0)*r22*x2876))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x2875)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2878=((1.0)*cj5);
CheckValue<IkReal> x2879=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2878))+(((-1.0)*r20*sj5)))),-1);
if(!x2879.valid){
continue;
}
CheckValue<IkReal> x2880 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x2878))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2880.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2879.value)))+(x2880.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2881=IKsin(j4);
IkReal x2882=IKcos(j4);
IkReal x2883=(cj5*r10);
IkReal x2884=(r01*sj5);
IkReal x2885=(cj5*r00);
IkReal x2886=(cj5*r20);
IkReal x2887=((1.0)*x2882);
IkReal x2888=((1.0)*x2881);
IkReal x2889=(sj5*x2881);
evalcond[0]=((((-1.0)*r22*x2887))+((r21*x2889))+(((-1.0)*x2886*x2888)));
evalcond[1]=((((-1.0)*x2883*x2888))+((r11*x2889))+(((-1.0)*r12*x2887)));
evalcond[2]=((((-1.0)*r02*x2888))+(((-1.0)*x2884*x2887))+((x2882*x2885)));
evalcond[3]=((1.0)+(((-1.0)*r02*x2887))+(((-1.0)*x2885*x2888))+((x2881*x2884)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r11*sj5*x2887))+((cj1*sj2))+((x2882*x2883))+(((-1.0)*r12*x2888)));
evalcond[5]=((((-1.0)*r22*x2888))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x2887))+((x2882*x2886)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2890 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2890.valid){
continue;
}
CheckValue<IkReal> x2891=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x2891.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2890.value)+(((1.5707963267949)*(x2891.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2892=IKsin(j4);
IkReal x2893=IKcos(j4);
IkReal x2894=(cj5*r10);
IkReal x2895=(r01*sj5);
IkReal x2896=(cj5*r00);
IkReal x2897=(cj5*r20);
IkReal x2898=((1.0)*x2893);
IkReal x2899=((1.0)*x2892);
IkReal x2900=(sj5*x2892);
evalcond[0]=((((-1.0)*r22*x2898))+((r21*x2900))+(((-1.0)*x2897*x2899)));
evalcond[1]=((((-1.0)*x2894*x2899))+((r11*x2900))+(((-1.0)*r12*x2898)));
evalcond[2]=((((-1.0)*x2895*x2898))+(((-1.0)*r02*x2899))+((x2893*x2896)));
evalcond[3]=((1.0)+(((-1.0)*r02*x2898))+((x2892*x2895))+(((-1.0)*x2896*x2899)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r11*sj5*x2898))+((x2893*x2894))+(((-1.0)*r12*x2899)));
evalcond[5]=((((-1.0)*r22*x2899))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x2893*x2897))+(((-1.0)*r21*sj5*x2898)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x2901=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2901);
rxp1_1=(px*r21);
rxp1_2=(r11*x2901);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2902=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2902);
rxp1_1=(px*r21);
rxp1_2=(r11*x2902);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2903=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2903);
rxp1_1=(px*r21);
rxp1_2=(r11*x2903);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2906=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x2906.valid){
continue;
}
IkReal x2904=x2906.value;
IkReal x2905=(sj0*x2904);
cj4array[0]=(((cj2*sj1*x2905))+((cj1*sj2*x2905)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2907=IKsin(j4);
IkReal x2908=IKcos(j4);
IkReal x2909=(cj5*r20);
IkReal x2910=(r21*sj5);
IkReal x2911=((1.0)*x2907);
IkReal x2912=((1.0)*x2908);
evalcond[0]=((-1.0)*r02*x2907);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x2912)));
evalcond[2]=(((x2907*x2910))+(((-1.0)*x2909*x2911)));
evalcond[3]=((((-1.0)*cj5*r10*x2911))+((r11*sj5*x2907)));
evalcond[4]=(((x2908*x2909))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x2910*x2912)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2914=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x2914.valid){
continue;
}
IkReal x2913=x2914.value;
cj4array[0]=(((cj1*cj2*x2913))+(((-1.0)*sj1*sj2*x2913)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2915=IKsin(j4);
IkReal x2916=IKcos(j4);
IkReal x2917=(r11*sj5);
IkReal x2918=((1.0)*sj0);
IkReal x2919=((1.0)*x2916);
IkReal x2920=((1.0)*cj5*x2915);
evalcond[0]=((-1.0)*r02*x2915);
evalcond[1]=((((-1.0)*r02*x2919))+(((-1.0)*x2918)));
evalcond[2]=((((-1.0)*r20*x2920))+((r21*sj5*x2915)));
evalcond[3]=((((-1.0)*r10*x2920))+((x2915*x2917)));
evalcond[4]=((((-1.0)*cj2*sj1*x2918))+(((-1.0)*x2917*x2919))+(((-1.0)*cj1*sj2*x2918))+((cj5*r10*x2916)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2921=IKPowWithIntegerCheck(r02,-1);
if(!x2921.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x2921.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2922=IKsin(j4);
IkReal x2923=IKcos(j4);
IkReal x2924=((1.0)*sj0);
IkReal x2925=(cj5*x2923);
IkReal x2926=(sj5*x2922);
IkReal x2927=((1.0)*sj5*x2923);
IkReal x2928=((1.0)*cj5*x2922);
evalcond[0]=((-1.0)*r02*x2922);
evalcond[1]=((((-1.0)*r20*x2928))+((r21*x2926)));
evalcond[2]=((((-1.0)*r10*x2928))+((r11*x2926)));
evalcond[3]=((((-1.0)*r21*x2927))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x2925)));
evalcond[4]=(((r10*x2925))+(((-1.0)*cj1*sj2*x2924))+(((-1.0)*cj2*sj1*x2924))+(((-1.0)*r11*x2927)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2929=((1.0)*sj0);
IkReal x2930=((1.0)*cj0);
CheckValue<IkReal> x2931 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x2929))+(((-1.0)*r02*x2930)))),IkReal((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x2929))+(((-1.0)*r01*sj5*x2930)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2931.valid){
continue;
}
CheckValue<IkReal> x2932=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x2932.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2931.value)+(((1.5707963267949)*(x2932.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2933=IKsin(j4);
IkReal x2934=IKcos(j4);
IkReal x2935=(cj5*r10);
IkReal x2936=(r01*sj5);
IkReal x2937=((1.0)*cj2);
IkReal x2938=(cj5*r00);
IkReal x2939=((1.0)*sj0);
IkReal x2940=(cj5*r20);
IkReal x2941=(cj1*sj2);
IkReal x2942=((1.0)*x2934);
IkReal x2943=((1.0)*x2933);
IkReal x2944=(sj5*x2933);
evalcond[0]=(((r21*x2944))+(((-1.0)*x2940*x2943))+(((-1.0)*r22*x2942)));
evalcond[1]=((((-1.0)*r12*x2942))+cj0+(((-1.0)*x2935*x2943))+((r11*x2944)));
evalcond[2]=((((-1.0)*r02*x2942))+(((-1.0)*x2939))+((x2933*x2936))+(((-1.0)*x2938*x2943)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*r21*sj5*x2942))+(((-1.0)*cj1*x2937))+(((-1.0)*r22*x2943))+((x2934*x2940)));
evalcond[4]=((((-1.0)*x2936*x2942))+(((-1.0)*r02*x2943))+(((-1.0)*cj0*x2941))+(((-1.0)*cj0*sj1*x2937))+((x2934*x2938)));
evalcond[5]=((((-1.0)*r12*x2943))+(((-1.0)*x2939*x2941))+(((-1.0)*r11*sj5*x2942))+(((-1.0)*sj0*sj1*x2937))+((x2934*x2935)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2945=((1.0)*cj5);
CheckValue<IkReal> x2946=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x2945)))),-1);
if(!x2946.valid){
continue;
}
CheckValue<IkReal> x2947 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x2945)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2947.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2946.value)))+(x2947.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2948=IKsin(j4);
IkReal x2949=IKcos(j4);
IkReal x2950=(cj5*r10);
IkReal x2951=(r01*sj5);
IkReal x2952=((1.0)*cj2);
IkReal x2953=(cj5*r00);
IkReal x2954=((1.0)*sj0);
IkReal x2955=(cj5*r20);
IkReal x2956=(cj1*sj2);
IkReal x2957=((1.0)*x2949);
IkReal x2958=((1.0)*x2948);
IkReal x2959=(sj5*x2948);
evalcond[0]=(((r21*x2959))+(((-1.0)*x2955*x2958))+(((-1.0)*r22*x2957)));
evalcond[1]=(cj0+(((-1.0)*r12*x2957))+(((-1.0)*x2950*x2958))+((r11*x2959)));
evalcond[2]=((((-1.0)*x2953*x2958))+(((-1.0)*r02*x2957))+(((-1.0)*x2954))+((x2948*x2951)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*r22*x2958))+((x2949*x2955))+(((-1.0)*cj1*x2952))+(((-1.0)*r21*sj5*x2957)));
evalcond[4]=((((-1.0)*r02*x2958))+(((-1.0)*cj0*x2956))+(((-1.0)*cj0*sj1*x2952))+(((-1.0)*x2951*x2957))+((x2949*x2953)));
evalcond[5]=((((-1.0)*sj0*sj1*x2952))+(((-1.0)*r11*sj5*x2957))+(((-1.0)*x2954*x2956))+(((-1.0)*r12*x2958))+((x2949*x2950)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2960=((1.0)*cj5);
CheckValue<IkReal> x2961 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x2960)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2961.valid){
continue;
}
CheckValue<IkReal> x2962=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x2960)))),-1);
if(!x2962.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2961.value)+(((1.5707963267949)*(x2962.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2963=IKsin(j4);
IkReal x2964=IKcos(j4);
IkReal x2965=(cj5*r10);
IkReal x2966=(r01*sj5);
IkReal x2967=((1.0)*cj2);
IkReal x2968=(cj5*r00);
IkReal x2969=((1.0)*sj0);
IkReal x2970=(cj5*r20);
IkReal x2971=(cj1*sj2);
IkReal x2972=((1.0)*x2964);
IkReal x2973=((1.0)*x2963);
IkReal x2974=(sj5*x2963);
evalcond[0]=((((-1.0)*r22*x2972))+((r21*x2974))+(((-1.0)*x2970*x2973)));
evalcond[1]=(cj0+(((-1.0)*r12*x2972))+(((-1.0)*x2965*x2973))+((r11*x2974)));
evalcond[2]=((((-1.0)*r02*x2972))+(((-1.0)*x2968*x2973))+(((-1.0)*x2969))+((x2963*x2966)));
evalcond[3]=(((x2964*x2970))+(((-1.0)*r21*sj5*x2972))+((sj1*sj2))+(((-1.0)*r22*x2973))+(((-1.0)*cj1*x2967)));
evalcond[4]=((((-1.0)*cj0*x2971))+(((-1.0)*r02*x2973))+(((-1.0)*cj0*sj1*x2967))+((x2964*x2968))+(((-1.0)*x2966*x2972)));
evalcond[5]=((((-1.0)*r12*x2973))+(((-1.0)*r11*sj5*x2972))+(((-1.0)*x2969*x2971))+(((-1.0)*sj0*sj1*x2967))+((x2964*x2965)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x2975=((((-1.0)*cj1*cj2))+((sj1*sj2)));
j0eval[0]=x2975;
j0eval[1]=((IKabs((((r00*sj5))+((cj5*r01)))))+(IKabs((((cj5*r11))+((r10*sj5))))));
j0eval[2]=IKsign(x2975);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x2976=r21*r21;
IkReal x2977=cj5*cj5;
IkReal x2978=(sj1*sj2);
IkReal x2979=(r21*sj5);
IkReal x2980=(cj5*r20);
IkReal x2981=(cj1*cj2);
IkReal x2982=((((-1.0)*x2976))+(((-1.0)*x2977*(r20*r20)))+(((-1.0)*(r22*r22)))+(((2.0)*x2979*x2980))+((x2976*x2977)));
j4eval[0]=x2982;
j4eval[1]=((IKabs(((((-1.0)*r22*x2981))+((r22*x2978)))))+(IKabs(((((-1.0)*x2978*x2980))+(((-1.0)*x2979*x2981))+((x2978*x2979))+((x2980*x2981))))));
j4eval[2]=IKsign(x2982);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j0eval[0]=((((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.67478761815078)*px))+(((2.14018460980658)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.67478761815078)*py))+(((2.14018460980658)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.67478761815078)*px))+(((2.14018460980658)*py))))+IKsqr(((((0.67478761815078)*py))+(((2.14018460980658)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.67478761815078)*px))+(((2.14018460980658)*py))), ((((0.67478761815078)*py))+(((2.14018460980658)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x2983=IKcos(j0);
IkReal x2984=IKsin(j0);
evalcond[0]=((((-0.134)*x2984))+(((-1.0)*px))+(((0.425)*x2983)));
evalcond[1]=((((0.134)*x2983))+(((-1.0)*py))+(((0.425)*x2984)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x2985=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x2985;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x2985);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x2986=((1.0)*cj5);
IkReal x2987=((((-1.0)*r01*x2986))+(((-1.0)*r00*sj5)));
j4eval[0]=x2987;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x2986))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x2987);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x2988=((1.0)*cj5);
IkReal x2989=((((-1.0)*r01*x2988))+(((-1.0)*r00*sj5)));
j4eval[0]=x2989;
j4eval[1]=IKsign(x2989);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x2988))+((r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2990=((1.0)*cj5);
CheckValue<IkReal> x2991 = IKatan2WithCheck(IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x2990)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x2991.valid){
continue;
}
CheckValue<IkReal> x2992=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x2990)))),-1);
if(!x2992.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2991.value)+(((1.5707963267949)*(x2992.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2993=IKcos(j4);
IkReal x2994=IKsin(j4);
IkReal x2995=((1.0)*sj0);
IkReal x2996=(cj5*r00);
IkReal x2997=(cj5*r10);
IkReal x2998=(cj5*r20);
IkReal x2999=((1.0)*x2993);
IkReal x3000=((1.0)*x2994);
IkReal x3001=(sj5*x2993);
IkReal x3002=(sj5*x2994);
evalcond[0]=(((r21*x3001))+((r22*x2994))+(((-1.0)*x2998*x2999)));
evalcond[1]=((((-1.0)*r22*x2999))+(((-1.0)*x2998*x3000))+((r21*x3002)));
evalcond[2]=((((-1.0)*x2997*x3000))+cj0+(((-1.0)*r12*x2999))+((r11*x3002)));
evalcond[3]=(((r01*x3001))+(((-1.0)*x2996*x2999))+((r02*x2994))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x2995))+((r12*x2994))+(((-1.0)*x2997*x2999))+((r11*x3001)));
evalcond[5]=((((-1.0)*x2995))+((r01*x3002))+(((-1.0)*x2996*x3000))+(((-1.0)*r02*x2999)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3003=((1.0)*cj5);
CheckValue<IkReal> x3004 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x3003))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3004.valid){
continue;
}
CheckValue<IkReal> x3005=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x3003))+(((-1.0)*r00*sj5)))),-1);
if(!x3005.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3004.value)+(((1.5707963267949)*(x3005.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3006=IKcos(j4);
IkReal x3007=IKsin(j4);
IkReal x3008=((1.0)*sj0);
IkReal x3009=(cj5*r00);
IkReal x3010=(cj5*r10);
IkReal x3011=(cj5*r20);
IkReal x3012=((1.0)*x3006);
IkReal x3013=((1.0)*x3007);
IkReal x3014=(sj5*x3006);
IkReal x3015=(sj5*x3007);
evalcond[0]=(((r22*x3007))+(((-1.0)*x3011*x3012))+((r21*x3014)));
evalcond[1]=((((-1.0)*r22*x3012))+(((-1.0)*x3011*x3013))+((r21*x3015)));
evalcond[2]=(cj0+(((-1.0)*r12*x3012))+(((-1.0)*x3010*x3013))+((r11*x3015)));
evalcond[3]=(((r01*x3014))+((r02*x3007))+(((-1.0)*cj0))+(((-1.0)*x3009*x3012)));
evalcond[4]=((((-1.0)*x3008))+((r12*x3007))+(((-1.0)*x3010*x3012))+((r11*x3014)));
evalcond[5]=(((r01*x3015))+(((-1.0)*r02*x3012))+(((-1.0)*x3008))+(((-1.0)*x3009*x3013)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3016 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3016.valid){
continue;
}
CheckValue<IkReal> x3017=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3017.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3016.value)+(((1.5707963267949)*(x3017.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3018=IKcos(j4);
IkReal x3019=IKsin(j4);
IkReal x3020=((1.0)*sj0);
IkReal x3021=(cj5*r00);
IkReal x3022=(cj5*r10);
IkReal x3023=(cj5*r20);
IkReal x3024=((1.0)*x3018);
IkReal x3025=((1.0)*x3019);
IkReal x3026=(sj5*x3018);
IkReal x3027=(sj5*x3019);
evalcond[0]=(((r22*x3019))+((r21*x3026))+(((-1.0)*x3023*x3024)));
evalcond[1]=(((r21*x3027))+(((-1.0)*x3023*x3025))+(((-1.0)*r22*x3024)));
evalcond[2]=((((-1.0)*r12*x3024))+((r11*x3027))+cj0+(((-1.0)*x3022*x3025)));
evalcond[3]=((((-1.0)*x3021*x3024))+((r01*x3026))+(((-1.0)*cj0))+((r02*x3019)));
evalcond[4]=(((r11*x3026))+(((-1.0)*x3020))+((r12*x3019))+(((-1.0)*x3022*x3024)));
evalcond[5]=((((-1.0)*x3020))+(((-1.0)*x3021*x3025))+((r01*x3027))+(((-1.0)*r02*x3024)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.67478761815078)*px))+(((2.14018460980658)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.67478761815078)*py))+(((2.14018460980658)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.67478761815078)*px))+(((2.14018460980658)*py))))+IKsqr(((((0.67478761815078)*py))+(((2.14018460980658)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.67478761815078)*px))+(((2.14018460980658)*py))), ((((0.67478761815078)*py))+(((2.14018460980658)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3028=IKcos(j0);
IkReal x3029=IKsin(j0);
evalcond[0]=((((-0.134)*x3029))+(((-1.0)*px))+(((0.425)*x3028)));
evalcond[1]=((((0.134)*x3028))+(((-1.0)*py))+(((0.425)*x3029)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3030=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3030;
j4eval[1]=IKsign(x3030);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3031=((1.0)*cj5);
IkReal x3032=((((-1.0)*r10*sj5))+(((-1.0)*r11*x3031)));
j4eval[0]=x3032;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3031))))));
j4eval[2]=IKsign(x3032);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3033=cj5*cj5;
IkReal x3034=((1.0)*r20);
IkReal x3035=(r01*r21);
IkReal x3036=(r21*sj5);
IkReal x3037=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((cj5*r00*x3036))+(((-1.0)*x3035))+((x3033*x3035))+(((-1.0)*r00*x3033*x3034)));
j4eval[0]=x3037;
j4eval[1]=((IKabs(((((-1.0)*cj0*cj5*x3034))+((cj0*x3036)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3037);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3038=cj5*cj5;
IkReal x3039=((1.0)*r20);
IkReal x3040=(r01*r21);
IkReal x3041=(r21*sj5);
CheckValue<IkReal> x3042 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*cj5*x3039))+((cj0*x3041)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3042.valid){
continue;
}
CheckValue<IkReal> x3043=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+((cj5*r00*x3041))+(((-1.0)*r02*r22))+(((-1.0)*r00*x3038*x3039))+(((-1.0)*x3040))+((x3038*x3040)))),-1);
if(!x3043.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3042.value)+(((1.5707963267949)*(x3043.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3044=IKcos(j4);
IkReal x3045=IKsin(j4);
IkReal x3046=(cj5*r00);
IkReal x3047=(cj5*r10);
IkReal x3048=(cj5*r20);
IkReal x3049=((1.0)*x3044);
IkReal x3050=((1.0)*x3045);
IkReal x3051=(sj5*x3044);
IkReal x3052=(sj5*x3045);
evalcond[0]=((((-1.0)*x3048*x3049))+((r22*x3045))+((r21*x3051)));
evalcond[1]=((((-1.0)*r22*x3049))+(((-1.0)*x3048*x3050))+((r21*x3052)));
evalcond[2]=(cj0+(((-1.0)*x3046*x3049))+((r01*x3051))+((r02*x3045)));
evalcond[3]=(sj0+((r11*x3051))+(((-1.0)*x3047*x3049))+((r12*x3045)));
evalcond[4]=((((-1.0)*x3047*x3050))+cj0+(((-1.0)*r12*x3049))+((r11*x3052)));
evalcond[5]=((((-1.0)*sj0))+((r01*x3052))+(((-1.0)*x3046*x3050))+(((-1.0)*r02*x3049)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3053=((1.0)*cj5);
CheckValue<IkReal> x3054 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3053)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3054.valid){
continue;
}
CheckValue<IkReal> x3055=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3053)))),-1);
if(!x3055.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3054.value)+(((1.5707963267949)*(x3055.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3056=IKcos(j4);
IkReal x3057=IKsin(j4);
IkReal x3058=(cj5*r00);
IkReal x3059=(cj5*r10);
IkReal x3060=(cj5*r20);
IkReal x3061=((1.0)*x3056);
IkReal x3062=((1.0)*x3057);
IkReal x3063=(sj5*x3056);
IkReal x3064=(sj5*x3057);
evalcond[0]=((((-1.0)*x3060*x3061))+((r22*x3057))+((r21*x3063)));
evalcond[1]=((((-1.0)*r22*x3061))+(((-1.0)*x3060*x3062))+((r21*x3064)));
evalcond[2]=((((-1.0)*x3058*x3061))+cj0+((r02*x3057))+((r01*x3063)));
evalcond[3]=(sj0+((r12*x3057))+((r11*x3063))+(((-1.0)*x3059*x3061)));
evalcond[4]=(cj0+(((-1.0)*r12*x3061))+((r11*x3064))+(((-1.0)*x3059*x3062)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x3058*x3062))+((r01*x3064))+(((-1.0)*r02*x3061)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3065 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3065.valid){
continue;
}
CheckValue<IkReal> x3066=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3066.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3065.value)+(((1.5707963267949)*(x3066.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3067=IKcos(j4);
IkReal x3068=IKsin(j4);
IkReal x3069=(cj5*r00);
IkReal x3070=(cj5*r10);
IkReal x3071=(cj5*r20);
IkReal x3072=((1.0)*x3067);
IkReal x3073=((1.0)*x3068);
IkReal x3074=(sj5*x3067);
IkReal x3075=(sj5*x3068);
evalcond[0]=(((r22*x3068))+(((-1.0)*x3071*x3072))+((r21*x3074)));
evalcond[1]=((((-1.0)*r22*x3072))+(((-1.0)*x3071*x3073))+((r21*x3075)));
evalcond[2]=(((r01*x3074))+cj0+(((-1.0)*x3069*x3072))+((r02*x3068)));
evalcond[3]=(sj0+(((-1.0)*x3070*x3072))+((r11*x3074))+((r12*x3068)));
evalcond[4]=(cj0+(((-1.0)*r12*x3072))+(((-1.0)*x3070*x3073))+((r11*x3075)));
evalcond[5]=(((r01*x3075))+(((-1.0)*sj0))+(((-1.0)*r02*x3072))+(((-1.0)*x3069*x3073)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-7.46268656715603)*px))+(((7.79683671195407e-6)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((7.79683671195407e-6)*px))+(((7.46268656715603)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-7.46268656715603)*px))+(((7.79683671195407e-6)*py))))+IKsqr(((((7.79683671195407e-6)*px))+(((7.46268656715603)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-7.46268656715603)*px))+(((7.79683671195407e-6)*py))), ((((7.79683671195407e-6)*px))+(((7.46268656715603)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3076=IKcos(j0);
IkReal x3077=IKsin(j0);
evalcond[0]=((((-0.134)*x3077))+(((-1.0)*px))+(((1.4e-7)*x3076)));
evalcond[1]=((((-1.0)*py))+(((0.134)*x3076))+(((1.4e-7)*x3077)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3078=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3078;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3078);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3079=((1.0)*cj5);
IkReal x3080=((((-1.0)*r01*x3079))+(((-1.0)*r00*sj5)));
j4eval[0]=x3080;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r20*x3079))+((cj0*r21*sj5))))));
j4eval[2]=IKsign(x3080);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3081=((1.0)*cj5);
IkReal x3082=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3081)));
j4eval[0]=x3082;
j4eval[1]=IKsign(x3082);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x3081))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3083=((1.0)*cj5);
CheckValue<IkReal> x3084=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3083)))),-1);
if(!x3084.valid){
continue;
}
CheckValue<IkReal> x3085 = IKatan2WithCheck(IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x3083)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3085.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3084.value)))+(x3085.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3086=IKcos(j4);
IkReal x3087=IKsin(j4);
IkReal x3088=((1.0)*sj0);
IkReal x3089=(cj5*r00);
IkReal x3090=(cj5*r10);
IkReal x3091=(cj5*r20);
IkReal x3092=((1.0)*x3086);
IkReal x3093=((1.0)*x3087);
IkReal x3094=(sj5*x3086);
IkReal x3095=(sj5*x3087);
evalcond[0]=(((r21*x3094))+(((-1.0)*x3091*x3092))+((r22*x3087)));
evalcond[1]=((((-1.0)*r22*x3092))+((r21*x3095))+(((-1.0)*x3091*x3093)));
evalcond[2]=((((-1.0)*r12*x3092))+cj0+(((-1.0)*x3090*x3093))+((r11*x3095)));
evalcond[3]=(((r01*x3094))+(((-1.0)*x3089*x3092))+((r02*x3087))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x3088))+((r12*x3087))+(((-1.0)*x3090*x3092))+((r11*x3094)));
evalcond[5]=(((r01*x3095))+(((-1.0)*r02*x3092))+(((-1.0)*x3088))+(((-1.0)*x3089*x3093)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3096=((1.0)*cj5);
CheckValue<IkReal> x3097 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3096)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3097.valid){
continue;
}
CheckValue<IkReal> x3098=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3096)))),-1);
if(!x3098.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3097.value)+(((1.5707963267949)*(x3098.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3099=IKcos(j4);
IkReal x3100=IKsin(j4);
IkReal x3101=((1.0)*sj0);
IkReal x3102=(cj5*r00);
IkReal x3103=(cj5*r10);
IkReal x3104=(cj5*r20);
IkReal x3105=((1.0)*x3099);
IkReal x3106=((1.0)*x3100);
IkReal x3107=(sj5*x3099);
IkReal x3108=(sj5*x3100);
evalcond[0]=(((r21*x3107))+((r22*x3100))+(((-1.0)*x3104*x3105)));
evalcond[1]=(((r21*x3108))+(((-1.0)*x3104*x3106))+(((-1.0)*r22*x3105)));
evalcond[2]=((((-1.0)*x3103*x3106))+((r11*x3108))+cj0+(((-1.0)*r12*x3105)));
evalcond[3]=((((-1.0)*x3102*x3105))+((r02*x3100))+((r01*x3107))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x3103*x3105))+((r11*x3107))+(((-1.0)*x3101))+((r12*x3100)));
evalcond[5]=((((-1.0)*x3101))+(((-1.0)*x3102*x3106))+((r01*x3108))+(((-1.0)*r02*x3105)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3109 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3109.valid){
continue;
}
CheckValue<IkReal> x3110=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3110.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3109.value)+(((1.5707963267949)*(x3110.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3111=IKcos(j4);
IkReal x3112=IKsin(j4);
IkReal x3113=((1.0)*sj0);
IkReal x3114=(cj5*r00);
IkReal x3115=(cj5*r10);
IkReal x3116=(cj5*r20);
IkReal x3117=((1.0)*x3111);
IkReal x3118=((1.0)*x3112);
IkReal x3119=(sj5*x3111);
IkReal x3120=(sj5*x3112);
evalcond[0]=(((r22*x3112))+((r21*x3119))+(((-1.0)*x3116*x3117)));
evalcond[1]=(((r21*x3120))+(((-1.0)*r22*x3117))+(((-1.0)*x3116*x3118)));
evalcond[2]=((((-1.0)*x3115*x3118))+cj0+(((-1.0)*r12*x3117))+((r11*x3120)));
evalcond[3]=((((-1.0)*x3114*x3117))+((r02*x3112))+((r01*x3119))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x3115*x3117))+((r12*x3112))+(((-1.0)*x3113))+((r11*x3119)));
evalcond[5]=((((-1.0)*x3114*x3118))+(((-1.0)*r02*x3117))+((r01*x3120))+(((-1.0)*x3113)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-7.46268656715603)*px))+(((7.79683671195407e-6)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((7.79683671195407e-6)*px))+(((7.46268656715603)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-7.46268656715603)*px))+(((7.79683671195407e-6)*py))))+IKsqr(((((7.79683671195407e-6)*px))+(((7.46268656715603)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-7.46268656715603)*px))+(((7.79683671195407e-6)*py))), ((((7.79683671195407e-6)*px))+(((7.46268656715603)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3121=IKcos(j0);
IkReal x3122=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((-0.134)*x3122))+(((1.4e-7)*x3121)));
evalcond[1]=((((-1.0)*py))+(((0.134)*x3121))+(((1.4e-7)*x3122)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3123=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3123;
j4eval[1]=IKsign(x3123);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3124=((1.0)*cj5);
IkReal x3125=((((-1.0)*r10*sj5))+(((-1.0)*r11*x3124)));
j4eval[0]=x3125;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x3124))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3125);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3126=cj5*cj5;
IkReal x3127=((1.0)*r20);
IkReal x3128=(r01*r21);
IkReal x3129=(r21*sj5);
IkReal x3130=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*r00*x3126*x3127))+((cj5*r00*x3129))+(((-1.0)*x3128))+((x3126*x3128)));
j4eval[0]=x3130;
j4eval[1]=((IKabs(((((-1.0)*cj0*cj5*x3127))+((cj0*x3129)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3130);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3131=cj5*cj5;
IkReal x3132=((1.0)*r20);
IkReal x3133=(r01*r21);
IkReal x3134=(r21*sj5);
CheckValue<IkReal> x3135 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*cj5*x3132))+((cj0*x3134)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3135.valid){
continue;
}
CheckValue<IkReal> x3136=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+((x3131*x3133))+(((-1.0)*r02*r22))+((cj5*r00*x3134))+(((-1.0)*x3133))+(((-1.0)*r00*x3131*x3132)))),-1);
if(!x3136.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3135.value)+(((1.5707963267949)*(x3136.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3137=IKcos(j4);
IkReal x3138=IKsin(j4);
IkReal x3139=(cj5*r00);
IkReal x3140=(cj5*r10);
IkReal x3141=(cj5*r20);
IkReal x3142=((1.0)*x3137);
IkReal x3143=((1.0)*x3138);
IkReal x3144=(sj5*x3137);
IkReal x3145=(sj5*x3138);
evalcond[0]=((((-1.0)*x3141*x3142))+((r22*x3138))+((r21*x3144)));
evalcond[1]=((((-1.0)*r22*x3142))+(((-1.0)*x3141*x3143))+((r21*x3145)));
evalcond[2]=(cj0+((r01*x3144))+((r02*x3138))+(((-1.0)*x3139*x3142)));
evalcond[3]=(sj0+(((-1.0)*x3140*x3142))+((r11*x3144))+((r12*x3138)));
evalcond[4]=((((-1.0)*r12*x3142))+cj0+(((-1.0)*x3140*x3143))+((r11*x3145)));
evalcond[5]=((((-1.0)*sj0))+((r01*x3145))+(((-1.0)*r02*x3142))+(((-1.0)*x3139*x3143)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3146=((1.0)*cj5);
CheckValue<IkReal> x3147 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3146)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3147.valid){
continue;
}
CheckValue<IkReal> x3148=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x3146))+(((-1.0)*r10*sj5)))),-1);
if(!x3148.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3147.value)+(((1.5707963267949)*(x3148.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3149=IKcos(j4);
IkReal x3150=IKsin(j4);
IkReal x3151=(cj5*r00);
IkReal x3152=(cj5*r10);
IkReal x3153=(cj5*r20);
IkReal x3154=((1.0)*x3149);
IkReal x3155=((1.0)*x3150);
IkReal x3156=(sj5*x3149);
IkReal x3157=(sj5*x3150);
evalcond[0]=((((-1.0)*x3153*x3154))+((r22*x3150))+((r21*x3156)));
evalcond[1]=((((-1.0)*r22*x3154))+(((-1.0)*x3153*x3155))+((r21*x3157)));
evalcond[2]=(((r02*x3150))+cj0+((r01*x3156))+(((-1.0)*x3151*x3154)));
evalcond[3]=(sj0+((r11*x3156))+((r12*x3150))+(((-1.0)*x3152*x3154)));
evalcond[4]=(cj0+((r11*x3157))+(((-1.0)*r12*x3154))+(((-1.0)*x3152*x3155)));
evalcond[5]=((((-1.0)*sj0))+((r01*x3157))+(((-1.0)*r02*x3154))+(((-1.0)*x3151*x3155)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3158 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3158.valid){
continue;
}
CheckValue<IkReal> x3159=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3159.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3158.value)+(((1.5707963267949)*(x3159.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3160=IKcos(j4);
IkReal x3161=IKsin(j4);
IkReal x3162=(cj5*r00);
IkReal x3163=(cj5*r10);
IkReal x3164=(cj5*r20);
IkReal x3165=((1.0)*x3160);
IkReal x3166=((1.0)*x3161);
IkReal x3167=(sj5*x3160);
IkReal x3168=(sj5*x3161);
evalcond[0]=(((r22*x3161))+(((-1.0)*x3164*x3165))+((r21*x3167)));
evalcond[1]=((((-1.0)*x3164*x3166))+((r21*x3168))+(((-1.0)*r22*x3165)));
evalcond[2]=(((r02*x3161))+(((-1.0)*x3162*x3165))+cj0+((r01*x3167)));
evalcond[3]=(sj0+(((-1.0)*x3163*x3165))+((r11*x3167))+((r12*x3161)));
evalcond[4]=((((-1.0)*r12*x3165))+(((-1.0)*x3163*x3166))+cj0+((r11*x3168)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x3162*x3166))+((r01*x3168))+(((-1.0)*r02*x3165)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.14018460980658)*py))+(((-0.67478761815078)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.14018460980658)*px))+(((0.67478761815078)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.14018460980658)*py))+(((-0.67478761815078)*px))))+IKsqr(((((-2.14018460980658)*px))+(((0.67478761815078)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.14018460980658)*py))+(((-0.67478761815078)*px))), ((((-2.14018460980658)*px))+(((0.67478761815078)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3169=IKcos(j0);
IkReal x3170=IKsin(j0);
evalcond[0]=((((-0.134)*x3170))+(((-1.0)*px))+(((-0.425)*x3169)));
evalcond[1]=((((-0.425)*x3170))+(((-1.0)*py))+(((0.134)*x3169)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3171=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3171;
j4eval[1]=IKsign(x3171);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3172=((1.0)*cj5);
IkReal x3173=((((-1.0)*r10*sj5))+(((-1.0)*r11*x3172)));
j4eval[0]=x3173;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3172)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3173);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3174=cj5*cj5;
IkReal x3175=((1.0)*r20);
IkReal x3176=(r01*r21);
IkReal x3177=(r21*sj5);
IkReal x3178=(((cj5*r01*r20*sj5))+((x3174*x3176))+(((-1.0)*r00*x3174*x3175))+(((-1.0)*r02*r22))+(((-1.0)*x3176))+((cj5*r00*x3177)));
j4eval[0]=x3178;
j4eval[1]=((IKabs((((cj0*x3177))+(((-1.0)*cj0*cj5*x3175)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3178);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3179=cj5*cj5;
IkReal x3180=((1.0)*r20);
IkReal x3181=(r01*r21);
IkReal x3182=(r21*sj5);
CheckValue<IkReal> x3183 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x3182))+(((-1.0)*cj0*cj5*x3180)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3183.valid){
continue;
}
CheckValue<IkReal> x3184=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*r00*x3179*x3180))+((cj5*r00*x3182))+((x3179*x3181))+(((-1.0)*x3181)))),-1);
if(!x3184.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3183.value)+(((1.5707963267949)*(x3184.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3185=IKcos(j4);
IkReal x3186=IKsin(j4);
IkReal x3187=(cj5*r00);
IkReal x3188=(cj5*r10);
IkReal x3189=(cj5*r20);
IkReal x3190=((1.0)*x3185);
IkReal x3191=((1.0)*x3186);
IkReal x3192=(sj5*x3185);
IkReal x3193=(sj5*x3186);
evalcond[0]=(((r22*x3186))+((r21*x3192))+(((-1.0)*x3189*x3190)));
evalcond[1]=((((-1.0)*r22*x3190))+((r21*x3193))+(((-1.0)*x3189*x3191)));
evalcond[2]=(cj0+(((-1.0)*x3187*x3190))+((r01*x3192))+((r02*x3186)));
evalcond[3]=(sj0+(((-1.0)*x3188*x3190))+((r12*x3186))+((r11*x3192)));
evalcond[4]=(cj0+(((-1.0)*x3188*x3191))+((r11*x3193))+(((-1.0)*r12*x3190)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x3187*x3191))+((r01*x3193))+(((-1.0)*r02*x3190)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3194=((1.0)*cj5);
CheckValue<IkReal> x3195 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3194)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3195.valid){
continue;
}
CheckValue<IkReal> x3196=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3194)))),-1);
if(!x3196.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3195.value)+(((1.5707963267949)*(x3196.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3197=IKcos(j4);
IkReal x3198=IKsin(j4);
IkReal x3199=(cj5*r00);
IkReal x3200=(cj5*r10);
IkReal x3201=(cj5*r20);
IkReal x3202=((1.0)*x3197);
IkReal x3203=((1.0)*x3198);
IkReal x3204=(sj5*x3197);
IkReal x3205=(sj5*x3198);
evalcond[0]=((((-1.0)*x3201*x3202))+((r22*x3198))+((r21*x3204)));
evalcond[1]=((((-1.0)*x3201*x3203))+(((-1.0)*r22*x3202))+((r21*x3205)));
evalcond[2]=(cj0+(((-1.0)*x3199*x3202))+((r01*x3204))+((r02*x3198)));
evalcond[3]=(sj0+(((-1.0)*x3200*x3202))+((r11*x3204))+((r12*x3198)));
evalcond[4]=(cj0+(((-1.0)*x3200*x3203))+((r11*x3205))+(((-1.0)*r12*x3202)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x3202))+(((-1.0)*x3199*x3203))+((r01*x3205)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3206 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3206.valid){
continue;
}
CheckValue<IkReal> x3207=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3207.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3206.value)+(((1.5707963267949)*(x3207.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3208=IKcos(j4);
IkReal x3209=IKsin(j4);
IkReal x3210=(cj5*r00);
IkReal x3211=(cj5*r10);
IkReal x3212=(cj5*r20);
IkReal x3213=((1.0)*x3208);
IkReal x3214=((1.0)*x3209);
IkReal x3215=(sj5*x3208);
IkReal x3216=(sj5*x3209);
evalcond[0]=(((r22*x3209))+(((-1.0)*x3212*x3213))+((r21*x3215)));
evalcond[1]=((((-1.0)*x3212*x3214))+((r21*x3216))+(((-1.0)*r22*x3213)));
evalcond[2]=(cj0+((r01*x3215))+(((-1.0)*x3210*x3213))+((r02*x3209)));
evalcond[3]=((((-1.0)*x3211*x3213))+sj0+((r12*x3209))+((r11*x3215)));
evalcond[4]=((((-1.0)*x3211*x3214))+cj0+((r11*x3216))+(((-1.0)*r12*x3213)));
evalcond[5]=((((-1.0)*sj0))+((r01*x3216))+(((-1.0)*x3210*x3214))+(((-1.0)*r02*x3213)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.14018460980658)*py))+(((-0.67478761815078)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.14018460980658)*px))+(((0.67478761815078)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.14018460980658)*py))+(((-0.67478761815078)*px))))+IKsqr(((((-2.14018460980658)*px))+(((0.67478761815078)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.14018460980658)*py))+(((-0.67478761815078)*px))), ((((-2.14018460980658)*px))+(((0.67478761815078)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3217=IKcos(j0);
IkReal x3218=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((-0.134)*x3218))+(((-0.425)*x3217)));
evalcond[1]=((((-1.0)*py))+(((0.134)*x3217))+(((-0.425)*x3218)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3219=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3219;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3219);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3220=((1.0)*cj5);
IkReal x3221=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3220)));
j4eval[0]=x3221;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3220)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3221);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3222=((1.0)*cj5);
IkReal x3223=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3222)));
j4eval[0]=x3223;
j4eval[1]=IKsign(x3223);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x3222))+((r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3224=((1.0)*cj5);
CheckValue<IkReal> x3225 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj0*x3224))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3225.valid){
continue;
}
CheckValue<IkReal> x3226=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3224)))),-1);
if(!x3226.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3225.value)+(((1.5707963267949)*(x3226.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3227=IKcos(j4);
IkReal x3228=IKsin(j4);
IkReal x3229=((1.0)*sj0);
IkReal x3230=(cj5*r00);
IkReal x3231=(cj5*r10);
IkReal x3232=(cj5*r20);
IkReal x3233=((1.0)*x3227);
IkReal x3234=((1.0)*x3228);
IkReal x3235=(sj5*x3227);
IkReal x3236=(sj5*x3228);
evalcond[0]=((((-1.0)*x3232*x3233))+((r22*x3228))+((r21*x3235)));
evalcond[1]=((((-1.0)*x3232*x3234))+(((-1.0)*r22*x3233))+((r21*x3236)));
evalcond[2]=(cj0+(((-1.0)*x3231*x3234))+((r11*x3236))+(((-1.0)*r12*x3233)));
evalcond[3]=(((r02*x3228))+((r01*x3235))+(((-1.0)*x3230*x3233))+(((-1.0)*cj0)));
evalcond[4]=(((r12*x3228))+(((-1.0)*x3231*x3233))+((r11*x3235))+(((-1.0)*x3229)));
evalcond[5]=((((-1.0)*r02*x3233))+((r01*x3236))+(((-1.0)*x3230*x3234))+(((-1.0)*x3229)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3237=((1.0)*cj5);
CheckValue<IkReal> x3238 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3237)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3238.valid){
continue;
}
CheckValue<IkReal> x3239=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x3237))+(((-1.0)*r00*sj5)))),-1);
if(!x3239.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3238.value)+(((1.5707963267949)*(x3239.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3240=IKcos(j4);
IkReal x3241=IKsin(j4);
IkReal x3242=((1.0)*sj0);
IkReal x3243=(cj5*r00);
IkReal x3244=(cj5*r10);
IkReal x3245=(cj5*r20);
IkReal x3246=((1.0)*x3240);
IkReal x3247=((1.0)*x3241);
IkReal x3248=(sj5*x3240);
IkReal x3249=(sj5*x3241);
evalcond[0]=(((r22*x3241))+((r21*x3248))+(((-1.0)*x3245*x3246)));
evalcond[1]=(((r21*x3249))+(((-1.0)*x3245*x3247))+(((-1.0)*r22*x3246)));
evalcond[2]=(cj0+(((-1.0)*r12*x3246))+(((-1.0)*x3244*x3247))+((r11*x3249)));
evalcond[3]=(((r01*x3248))+(((-1.0)*x3243*x3246))+((r02*x3241))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x3244*x3246))+(((-1.0)*x3242))+((r12*x3241))+((r11*x3248)));
evalcond[5]=(((r01*x3249))+(((-1.0)*x3243*x3247))+(((-1.0)*x3242))+(((-1.0)*r02*x3246)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3250 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3250.valid){
continue;
}
CheckValue<IkReal> x3251=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3251.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3250.value)+(((1.5707963267949)*(x3251.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3252=IKcos(j4);
IkReal x3253=IKsin(j4);
IkReal x3254=((1.0)*sj0);
IkReal x3255=(cj5*r00);
IkReal x3256=(cj5*r10);
IkReal x3257=(cj5*r20);
IkReal x3258=((1.0)*x3252);
IkReal x3259=((1.0)*x3253);
IkReal x3260=(sj5*x3252);
IkReal x3261=(sj5*x3253);
evalcond[0]=(((r21*x3260))+(((-1.0)*x3257*x3258))+((r22*x3253)));
evalcond[1]=(((r21*x3261))+(((-1.0)*x3257*x3259))+(((-1.0)*r22*x3258)));
evalcond[2]=(cj0+(((-1.0)*x3256*x3259))+((r11*x3261))+(((-1.0)*r12*x3258)));
evalcond[3]=(((r01*x3260))+((r02*x3253))+(((-1.0)*x3255*x3258))+(((-1.0)*cj0)));
evalcond[4]=(((r12*x3253))+(((-1.0)*x3256*x3258))+((r11*x3260))+(((-1.0)*x3254)));
evalcond[5]=((((-1.0)*r02*x3258))+((r01*x3261))+(((-1.0)*x3255*x3259))+(((-1.0)*x3254)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-7.79683671195407e-6)*py))+(((-7.46268656715603)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-7.79683671195407e-6)*px))+(((7.46268656715603)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-7.79683671195407e-6)*py))+(((-7.46268656715603)*px))))+IKsqr(((((-7.79683671195407e-6)*px))+(((7.46268656715603)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-7.79683671195407e-6)*py))+(((-7.46268656715603)*px))), ((((-7.79683671195407e-6)*px))+(((7.46268656715603)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3262=IKcos(j0);
IkReal x3263=IKsin(j0);
evalcond[0]=((((-1.4e-7)*x3262))+(((-0.134)*x3263))+(((-1.0)*px)));
evalcond[1]=((((-1.4e-7)*x3263))+(((-1.0)*py))+(((0.134)*x3262)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3264=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3264;
j4eval[1]=IKsign(x3264);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3265=((1.0)*cj5);
IkReal x3266=((((-1.0)*r11*x3265))+(((-1.0)*r10*sj5)));
j4eval[0]=x3266;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x3265))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3266);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3267=cj5*cj5;
IkReal x3268=((1.0)*r20);
IkReal x3269=(r01*r21);
IkReal x3270=(r21*sj5);
IkReal x3271=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*x3269))+((x3267*x3269))+(((-1.0)*r00*x3267*x3268))+((cj5*r00*x3270)));
j4eval[0]=x3271;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*x3270))+(((-1.0)*cj0*cj5*x3268))))));
j4eval[2]=IKsign(x3271);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3272=cj5*cj5;
IkReal x3273=((1.0)*r20);
IkReal x3274=(r01*r21);
IkReal x3275=(r21*sj5);
CheckValue<IkReal> x3276 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x3275))+(((-1.0)*cj0*cj5*x3273)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3276.valid){
continue;
}
CheckValue<IkReal> x3277=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*r00*x3272*x3273))+(((-1.0)*x3274))+((x3272*x3274))+((cj5*r00*x3275)))),-1);
if(!x3277.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3276.value)+(((1.5707963267949)*(x3277.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3278=IKcos(j4);
IkReal x3279=IKsin(j4);
IkReal x3280=(cj5*r00);
IkReal x3281=(cj5*r10);
IkReal x3282=(cj5*r20);
IkReal x3283=((1.0)*x3278);
IkReal x3284=((1.0)*x3279);
IkReal x3285=(sj5*x3278);
IkReal x3286=(sj5*x3279);
evalcond[0]=((((-1.0)*x3282*x3283))+((r21*x3285))+((r22*x3279)));
evalcond[1]=((((-1.0)*r22*x3283))+(((-1.0)*x3282*x3284))+((r21*x3286)));
evalcond[2]=((((-1.0)*x3280*x3283))+cj0+((r02*x3279))+((r01*x3285)));
evalcond[3]=(sj0+(((-1.0)*x3281*x3283))+((r12*x3279))+((r11*x3285)));
evalcond[4]=((((-1.0)*r12*x3283))+cj0+(((-1.0)*x3281*x3284))+((r11*x3286)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x3280*x3284))+(((-1.0)*r02*x3283))+((r01*x3286)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3287=((1.0)*cj5);
CheckValue<IkReal> x3288 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r20*x3287))+((cj0*r21*sj5)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3288.valid){
continue;
}
CheckValue<IkReal> x3289=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3287)))),-1);
if(!x3289.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3288.value)+(((1.5707963267949)*(x3289.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3290=IKcos(j4);
IkReal x3291=IKsin(j4);
IkReal x3292=(cj5*r00);
IkReal x3293=(cj5*r10);
IkReal x3294=(cj5*r20);
IkReal x3295=((1.0)*x3290);
IkReal x3296=((1.0)*x3291);
IkReal x3297=(sj5*x3290);
IkReal x3298=(sj5*x3291);
evalcond[0]=(((r21*x3297))+((r22*x3291))+(((-1.0)*x3294*x3295)));
evalcond[1]=((((-1.0)*r22*x3295))+((r21*x3298))+(((-1.0)*x3294*x3296)));
evalcond[2]=(((r01*x3297))+cj0+((r02*x3291))+(((-1.0)*x3292*x3295)));
evalcond[3]=(sj0+(((-1.0)*x3293*x3295))+((r11*x3297))+((r12*x3291)));
evalcond[4]=((((-1.0)*r12*x3295))+cj0+(((-1.0)*x3293*x3296))+((r11*x3298)));
evalcond[5]=(((r01*x3298))+(((-1.0)*sj0))+(((-1.0)*x3292*x3296))+(((-1.0)*r02*x3295)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3299 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3299.valid){
continue;
}
CheckValue<IkReal> x3300=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3300.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3299.value)+(((1.5707963267949)*(x3300.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3301=IKcos(j4);
IkReal x3302=IKsin(j4);
IkReal x3303=(cj5*r00);
IkReal x3304=(cj5*r10);
IkReal x3305=(cj5*r20);
IkReal x3306=((1.0)*x3301);
IkReal x3307=((1.0)*x3302);
IkReal x3308=(sj5*x3301);
IkReal x3309=(sj5*x3302);
evalcond[0]=((((-1.0)*x3305*x3306))+((r21*x3308))+((r22*x3302)));
evalcond[1]=((((-1.0)*x3305*x3307))+((r21*x3309))+(((-1.0)*r22*x3306)));
evalcond[2]=(cj0+((r02*x3302))+((r01*x3308))+(((-1.0)*x3303*x3306)));
evalcond[3]=(sj0+(((-1.0)*x3304*x3306))+((r11*x3308))+((r12*x3302)));
evalcond[4]=((((-1.0)*x3304*x3307))+cj0+((r11*x3309))+(((-1.0)*r12*x3306)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x3306))+((r01*x3309))+(((-1.0)*x3303*x3307)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-7.79683671195407e-6)*py))+(((-7.46268656715603)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-7.79683671195407e-6)*px))+(((7.46268656715603)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-7.79683671195407e-6)*py))+(((-7.46268656715603)*px))))+IKsqr(((((-7.79683671195407e-6)*px))+(((7.46268656715603)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-7.79683671195407e-6)*py))+(((-7.46268656715603)*px))), ((((-7.79683671195407e-6)*px))+(((7.46268656715603)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3310=IKcos(j0);
IkReal x3311=IKsin(j0);
evalcond[0]=((((-0.134)*x3311))+(((-1.4e-7)*x3310))+(((-1.0)*px)));
evalcond[1]=((((-1.4e-7)*x3311))+(((0.134)*x3310))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3312=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3312;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3312);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3313=((1.0)*cj5);
IkReal x3314=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3313)));
j4eval[0]=x3314;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3313))))));
j4eval[2]=IKsign(x3314);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3315=((1.0)*cj5);
IkReal x3316=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3315)));
j4eval[0]=x3316;
j4eval[1]=IKsign(x3316);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x3315))+((r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3317=((1.0)*cj5);
CheckValue<IkReal> x3318 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj0*x3317))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3318.valid){
continue;
}
CheckValue<IkReal> x3319=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3317)))),-1);
if(!x3319.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3318.value)+(((1.5707963267949)*(x3319.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3320=IKcos(j4);
IkReal x3321=IKsin(j4);
IkReal x3322=((1.0)*sj0);
IkReal x3323=(cj5*r00);
IkReal x3324=(cj5*r10);
IkReal x3325=(cj5*r20);
IkReal x3326=((1.0)*x3320);
IkReal x3327=((1.0)*x3321);
IkReal x3328=(sj5*x3320);
IkReal x3329=(sj5*x3321);
evalcond[0]=(((r22*x3321))+(((-1.0)*x3325*x3326))+((r21*x3328)));
evalcond[1]=((((-1.0)*x3325*x3327))+((r21*x3329))+(((-1.0)*r22*x3326)));
evalcond[2]=((((-1.0)*x3324*x3327))+cj0+((r11*x3329))+(((-1.0)*r12*x3326)));
evalcond[3]=(((r01*x3328))+(((-1.0)*x3323*x3326))+((r02*x3321))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x3322))+(((-1.0)*x3324*x3326))+((r12*x3321))+((r11*x3328)));
evalcond[5]=((((-1.0)*x3322))+(((-1.0)*r02*x3326))+((r01*x3329))+(((-1.0)*x3323*x3327)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3330=((1.0)*cj5);
CheckValue<IkReal> x3331=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3330)))),-1);
if(!x3331.valid){
continue;
}
CheckValue<IkReal> x3332 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3330)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3332.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3331.value)))+(x3332.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3333=IKcos(j4);
IkReal x3334=IKsin(j4);
IkReal x3335=((1.0)*sj0);
IkReal x3336=(cj5*r00);
IkReal x3337=(cj5*r10);
IkReal x3338=(cj5*r20);
IkReal x3339=((1.0)*x3333);
IkReal x3340=((1.0)*x3334);
IkReal x3341=(sj5*x3333);
IkReal x3342=(sj5*x3334);
evalcond[0]=((((-1.0)*x3338*x3339))+((r21*x3341))+((r22*x3334)));
evalcond[1]=((((-1.0)*x3338*x3340))+(((-1.0)*r22*x3339))+((r21*x3342)));
evalcond[2]=(cj0+(((-1.0)*x3337*x3340))+((r11*x3342))+(((-1.0)*r12*x3339)));
evalcond[3]=(((r02*x3334))+(((-1.0)*x3336*x3339))+(((-1.0)*cj0))+((r01*x3341)));
evalcond[4]=(((r12*x3334))+(((-1.0)*x3335))+(((-1.0)*x3337*x3339))+((r11*x3341)));
evalcond[5]=((((-1.0)*r02*x3339))+(((-1.0)*x3335))+((r01*x3342))+(((-1.0)*x3336*x3340)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3343 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3343.valid){
continue;
}
CheckValue<IkReal> x3344=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3344.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3343.value)+(((1.5707963267949)*(x3344.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3345=IKcos(j4);
IkReal x3346=IKsin(j4);
IkReal x3347=((1.0)*sj0);
IkReal x3348=(cj5*r00);
IkReal x3349=(cj5*r10);
IkReal x3350=(cj5*r20);
IkReal x3351=((1.0)*x3345);
IkReal x3352=((1.0)*x3346);
IkReal x3353=(sj5*x3345);
IkReal x3354=(sj5*x3346);
evalcond[0]=(((r22*x3346))+(((-1.0)*x3350*x3351))+((r21*x3353)));
evalcond[1]=((((-1.0)*x3350*x3352))+((r21*x3354))+(((-1.0)*r22*x3351)));
evalcond[2]=(cj0+((r11*x3354))+(((-1.0)*x3349*x3352))+(((-1.0)*r12*x3351)));
evalcond[3]=((((-1.0)*x3348*x3351))+((r01*x3353))+((r02*x3346))+(((-1.0)*cj0)));
evalcond[4]=(((r11*x3353))+(((-1.0)*x3349*x3351))+(((-1.0)*x3347))+((r12*x3346)));
evalcond[5]=((((-1.0)*x3348*x3352))+(((-1.0)*r02*x3351))+((r01*x3354))+(((-1.0)*x3347)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3355=(sj1*sj2);
IkReal x3356=(cj1*cj2);
IkReal x3357=(r00*sj5);
IkReal x3358=(cj5*r01);
IkReal x3359=((212.5)*cj1);
IkReal x3360=((7.0e-5)*sj1);
IkReal x3361=((500.0)*px);
CheckValue<IkReal> x3362=IKPowWithIntegerCheck(((((-67.0)*x3356))+(((67.0)*x3355))),-1);
if(!x3362.valid){
continue;
}
CheckValue<IkReal> x3363=IKPowWithIntegerCheck((x3355+(((-1.0)*x3356))),-1);
if(!x3363.valid){
continue;
}
if( IKabs(((x3362.value)*((((x3356*x3361))+((x3358*x3360))+((x3358*x3359))+(((-1.0)*x3355*x3361))+((x3357*x3360))+(((246.0)*x3356*x3358))+(((246.0)*x3356*x3357))+((x3357*x3359))+(((-246.0)*x3355*x3357))+(((-246.0)*x3355*x3358)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3363.value)*((x3357+x3358)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x3362.value)*((((x3356*x3361))+((x3358*x3360))+((x3358*x3359))+(((-1.0)*x3355*x3361))+((x3357*x3360))+(((246.0)*x3356*x3358))+(((246.0)*x3356*x3357))+((x3357*x3359))+(((-246.0)*x3355*x3357))+(((-246.0)*x3355*x3358))))))+IKsqr(((x3363.value)*((x3357+x3358))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x3362.value)*((((x3356*x3361))+((x3358*x3360))+((x3358*x3359))+(((-1.0)*x3355*x3361))+((x3357*x3360))+(((246.0)*x3356*x3358))+(((246.0)*x3356*x3357))+((x3357*x3359))+(((-246.0)*x3355*x3357))+(((-246.0)*x3355*x3358))))), ((x3363.value)*((x3357+x3358))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x3364=IKcos(j0);
IkReal x3365=IKsin(j0);
IkReal x3366=((0.1)*sj5);
IkReal x3367=(sj1*sj2);
IkReal x3368=(cj5*r11);
IkReal x3369=((1.4e-7)*sj1);
IkReal x3370=(cj1*cj2);
IkReal x3371=((1.0)*sj5);
IkReal x3372=((0.425)*cj1);
IkReal x3373=(cj5*r01);
IkReal x3374=((0.392)*x3365);
IkReal x3375=((0.392)*x3364);
evalcond[0]=((((-1.0)*x3373))+(((-1.0)*x3364*x3370))+(((-1.0)*r00*x3371))+((x3364*x3367)));
evalcond[1]=(((x3365*x3367))+(((-1.0)*r10*x3371))+(((-1.0)*x3368))+(((-1.0)*x3365*x3370)));
evalcond[2]=((((-0.134)*x3365))+(((-1.0)*x3367*x3375))+((x3364*x3372))+(((-1.0)*px))+(((-1.0)*r00*x3366))+((x3370*x3375))+(((-0.1)*x3373))+((x3364*x3369)));
evalcond[3]=(((x3365*x3369))+(((-1.0)*r10*x3366))+(((-0.1)*x3368))+(((-1.0)*x3367*x3374))+(((-1.0)*py))+((x3370*x3374))+((x3365*x3372))+(((0.134)*x3364)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3376=((1.0)*cj5);
IkReal x3377=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3376)));
j4eval[0]=x3377;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3376))))));
j4eval[2]=IKsign(x3377);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3378=((1.0)*cj5);
IkReal x3379=((((-1.0)*r10*sj5))+(((-1.0)*r11*x3378)));
j4eval[0]=x3379;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x3378))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x3379);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3380=((1.0)*sj0);
IkReal x3381=((1.0)*cj0);
IkReal x3382=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x3382;
j4eval[1]=((IKabs(((((-1.0)*r02*x3381))+(((-1.0)*r12*x3380)))))+(IKabs((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x3381))+(((-1.0)*r11*sj5*x3380))))));
j4eval[2]=IKsign(x3382);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x3383=((-1.0)*r20);
IkReal x3385 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x3385)==0){
continue;
}
IkReal x3384=pow(x3385,-0.5);
CheckValue<IkReal> x3386 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3383),IKFAST_ATAN2_MAGTHRESH);
if(!x3386.valid){
continue;
}
IkReal gconst96=((-1.0)*(x3386.value));
IkReal gconst97=(r21*x3384);
IkReal gconst98=(x3383*x3384);
CheckValue<IkReal> x3387 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3387.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x3387.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x3388=((-1.0)*r20);
IkReal x3389=x3384;
CheckValue<IkReal> x3391 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3388),IKFAST_ATAN2_MAGTHRESH);
if(!x3391.valid){
continue;
}
IkReal x3390=((-1.0)*(x3391.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x3390;
IkReal gconst96=x3390;
IkReal gconst97=(r21*x3389);
IkReal gconst98=(x3388*x3389);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3392=((-1.0)*r20);
IkReal x3393=x3384;
CheckValue<IkReal> x3395 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3392),IKFAST_ATAN2_MAGTHRESH);
if(!x3395.valid){
continue;
}
IkReal x3394=((-1.0)*(x3395.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x3394;
IkReal gconst96=x3394;
IkReal gconst97=(r21*x3393);
IkReal gconst98=(x3392*x3393);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x3396=((-1.0)*r20);
IkReal x3397=x3384;
CheckValue<IkReal> x3399 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3396),IKFAST_ATAN2_MAGTHRESH);
if(!x3399.valid){
continue;
}
IkReal x3398=((-1.0)*(x3399.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x3398;
IkReal gconst96=x3398;
IkReal gconst97=(r21*x3397);
IkReal gconst98=(x3396*x3397);
IkReal x3400=((1.0)*(r22*r22));
CheckValue<IkReal> x3404=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x3400))),-1);
if(!x3404.valid){
continue;
}
IkReal x3401=x3404.value;
IkReal x3402=((1.0)*x3401);
IkReal x3403=((((-1.0)*x3402*(r20*r20*r20*r20)))+(((-2.0)*x3401*(r20*r20)*(r21*r21)))+(((-1.0)*x3400))+(((-1.0)*x3402*(r21*r21*r21*r21))));
j4eval[0]=x3403;
j4eval[1]=IKsign(x3403);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3405=(cj1*cj2);
IkReal x3406=(gconst98*r20);
IkReal x3407=(sj1*sj2);
IkReal x3408=(gconst97*r21);
CheckValue<IkReal> x3409=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x3406*x3406)))+(((-1.0)*(r22*r22)))+(((2.0)*x3406*x3408))+(((-1.0)*(x3408*x3408))))),-1);
if(!x3409.valid){
continue;
}
CheckValue<IkReal> x3410 = IKatan2WithCheck(IkReal((((r22*x3407))+(((-1.0)*r22*x3405)))),IkReal(((((-1.0)*x3405*x3408))+(((-1.0)*x3406*x3407))+((x3407*x3408))+((x3405*x3406)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3410.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3409.value)))+(x3410.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3411=IKsin(j4);
IkReal x3412=IKcos(j4);
IkReal x3413=(gconst98*r10);
IkReal x3414=(gconst97*r21);
IkReal x3415=(gconst98*r20);
IkReal x3416=((1.0)*cj2);
IkReal x3417=((1.0)*sj0);
IkReal x3418=(gconst98*r00);
IkReal x3419=(cj1*sj2);
IkReal x3420=((1.0)*x3412);
IkReal x3421=((1.0)*x3411);
IkReal x3422=(gconst97*x3411);
IkReal x3423=(gconst97*x3412);
evalcond[0]=(((x3411*x3414))+(((-1.0)*x3415*x3421))+(((-1.0)*r22*x3420)));
evalcond[1]=((((-1.0)*r12*x3420))+cj0+(((-1.0)*x3413*x3421))+((r11*x3422)));
evalcond[2]=((((-1.0)*x3418*x3421))+(((-1.0)*r02*x3420))+((r01*x3422))+(((-1.0)*x3417)));
evalcond[3]=(((r22*x3411))+((sj1*sj2))+(((-1.0)*cj1*x3416))+(((-1.0)*x3415*x3420))+((x3412*x3414)));
evalcond[4]=(((r02*x3411))+(((-1.0)*cj0*x3419))+(((-1.0)*x3418*x3420))+(((-1.0)*cj0*sj1*x3416))+((r01*x3423)));
evalcond[5]=(((r12*x3411))+(((-1.0)*sj0*sj1*x3416))+(((-1.0)*x3413*x3420))+(((-1.0)*x3417*x3419))+((r11*x3423)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3424=((1.0)*gconst98);
CheckValue<IkReal> x3425 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst97*r21*sj0))+(((-1.0)*r20*sj0*x3424)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3425.valid){
continue;
}
CheckValue<IkReal> x3426=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x3424))+(((-1.0)*gconst97*r10)))),-1);
if(!x3426.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3425.value)+(((1.5707963267949)*(x3426.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3427=IKsin(j4);
IkReal x3428=IKcos(j4);
IkReal x3429=(gconst98*r10);
IkReal x3430=(gconst97*r21);
IkReal x3431=(gconst98*r20);
IkReal x3432=((1.0)*cj2);
IkReal x3433=((1.0)*sj0);
IkReal x3434=(gconst98*r00);
IkReal x3435=(cj1*sj2);
IkReal x3436=((1.0)*x3428);
IkReal x3437=((1.0)*x3427);
IkReal x3438=(gconst97*x3427);
IkReal x3439=(gconst97*x3428);
evalcond[0]=(((x3427*x3430))+(((-1.0)*x3431*x3437))+(((-1.0)*r22*x3436)));
evalcond[1]=((((-1.0)*r12*x3436))+cj0+((r11*x3438))+(((-1.0)*x3429*x3437)));
evalcond[2]=(((r01*x3438))+(((-1.0)*x3433))+(((-1.0)*x3434*x3437))+(((-1.0)*r02*x3436)));
evalcond[3]=(((x3428*x3430))+(((-1.0)*x3431*x3436))+((sj1*sj2))+(((-1.0)*cj1*x3432))+((r22*x3427)));
evalcond[4]=(((r01*x3439))+(((-1.0)*cj0*sj1*x3432))+(((-1.0)*x3434*x3436))+((r02*x3427))+(((-1.0)*cj0*x3435)));
evalcond[5]=((((-1.0)*sj0*sj1*x3432))+(((-1.0)*x3433*x3435))+((r12*x3427))+((r11*x3439))+(((-1.0)*x3429*x3436)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3440=((1.0)*gconst98);
CheckValue<IkReal> x3441=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst97*r00))+(((-1.0)*r01*x3440)))),-1);
if(!x3441.valid){
continue;
}
CheckValue<IkReal> x3442 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x3440))+((cj0*gconst97*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3442.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3441.value)))+(x3442.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3443=IKsin(j4);
IkReal x3444=IKcos(j4);
IkReal x3445=(gconst98*r10);
IkReal x3446=(gconst97*r21);
IkReal x3447=(gconst98*r20);
IkReal x3448=((1.0)*cj2);
IkReal x3449=((1.0)*sj0);
IkReal x3450=(gconst98*r00);
IkReal x3451=(cj1*sj2);
IkReal x3452=((1.0)*x3444);
IkReal x3453=((1.0)*x3443);
IkReal x3454=(gconst97*x3443);
IkReal x3455=(gconst97*x3444);
evalcond[0]=((((-1.0)*x3447*x3453))+((x3443*x3446))+(((-1.0)*r22*x3452)));
evalcond[1]=(cj0+(((-1.0)*r12*x3452))+(((-1.0)*x3445*x3453))+((r11*x3454)));
evalcond[2]=((((-1.0)*x3450*x3453))+(((-1.0)*r02*x3452))+((r01*x3454))+(((-1.0)*x3449)));
evalcond[3]=((((-1.0)*x3447*x3452))+((x3444*x3446))+((sj1*sj2))+((r22*x3443))+(((-1.0)*cj1*x3448)));
evalcond[4]=((((-1.0)*cj0*sj1*x3448))+((r02*x3443))+(((-1.0)*x3450*x3452))+(((-1.0)*cj0*x3451))+((r01*x3455)));
evalcond[5]=(((r12*x3443))+(((-1.0)*sj0*sj1*x3448))+(((-1.0)*x3445*x3452))+(((-1.0)*x3449*x3451))+((r11*x3455)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3456=((-1.0)*r21);
IkReal x3458 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x3458)==0){
continue;
}
IkReal x3457=pow(x3458,-0.5);
CheckValue<IkReal> x3459 = IKatan2WithCheck(IkReal(x3456),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3459.valid){
continue;
}
IkReal gconst99=((3.14159265358979)+(((-1.0)*(x3459.value))));
IkReal gconst100=(x3456*x3457);
IkReal gconst101=((1.0)*r20*x3457);
CheckValue<IkReal> x3460 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3460.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x3460.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x3461=((-1.0)*r21);
CheckValue<IkReal> x3464 = IKatan2WithCheck(IkReal(x3461),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3464.valid){
continue;
}
IkReal x3462=((1.0)*(x3464.value));
IkReal x3463=x3457;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x3462)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3462)));
IkReal gconst100=(x3461*x3463);
IkReal gconst101=((1.0)*r20*x3463);
IkReal x3465=r22*r22;
IkReal x3466=((1.0)*x3465);
CheckValue<IkReal> x3470=IKPowWithIntegerCheck(((-1.0)+x3465),-1);
if(!x3470.valid){
continue;
}
IkReal x3467=x3470.value;
if((((1.0)+(((-1.0)*x3466)))) < -0.00001)
continue;
IkReal x3468=IKsqrt(((1.0)+(((-1.0)*x3466))));
IkReal x3469=(cj0*x3467*x3468);
j4eval[0]=((IKabs((cj0*r22)))+(IKabs((x3469+(((-1.0)*x3466*x3469))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3471=((-1.0)*r21);
CheckValue<IkReal> x3474 = IKatan2WithCheck(IkReal(x3471),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3474.valid){
continue;
}
IkReal x3472=((1.0)*(x3474.value));
IkReal x3473=x3457;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x3472)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3472)));
IkReal gconst100=(x3471*x3473);
IkReal gconst101=((1.0)*r20*x3473);
IkReal x3475=r22*r22;
IkReal x3476=((1.0)*x3475);
CheckValue<IkReal> x3480=IKPowWithIntegerCheck(((-1.0)+x3475),-1);
if(!x3480.valid){
continue;
}
IkReal x3477=x3480.value;
if((((1.0)+(((-1.0)*x3476)))) < -0.00001)
continue;
IkReal x3478=IKsqrt(((1.0)+(((-1.0)*x3476))));
IkReal x3479=(sj0*x3477*x3478);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x3479+(((-1.0)*x3476*x3479))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x3481=((-1.0)*r21);
CheckValue<IkReal> x3484 = IKatan2WithCheck(IkReal(x3481),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3484.valid){
continue;
}
IkReal x3482=((1.0)*(x3484.value));
IkReal x3483=x3457;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x3482)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3482)));
IkReal gconst100=(x3481*x3483);
IkReal gconst101=((1.0)*r20*x3483);
IkReal x3485=r22*r22;
IkReal x3486=(r12*sj0);
IkReal x3487=(cj0*r02);
CheckValue<IkReal> x3491=IKPowWithIntegerCheck(((-1.0)+x3485),-1);
if(!x3491.valid){
continue;
}
IkReal x3488=x3491.value;
if((((1.0)+(((-1.0)*x3485)))) < -0.00001)
continue;
IkReal x3489=IKsqrt(((1.0)+(((-1.0)*x3485))));
IkReal x3490=(r22*x3488*x3489);
j4eval[0]=0;
j4eval[1]=((IKabs((((x3486*x3490))+((x3487*x3490)))))+(IKabs(((((-1.0)*x3487))+(((-1.0)*x3486))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3492=((1.0)*sj0);
IkReal x3493=((1.0)*gconst100);
CheckValue<IkReal> x3494=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst101*r21))+(((-1.0)*r20*x3493)))),-1);
if(!x3494.valid){
continue;
}
CheckValue<IkReal> x3495 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x3492))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*gconst100*r11*x3492))+((gconst101*r10*sj0))+((cj0*gconst101*r00))+(((-1.0)*cj0*r01*x3493)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3495.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3494.value)))+(x3495.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3496=IKsin(j4);
IkReal x3497=IKcos(j4);
IkReal x3498=(gconst101*r20);
IkReal x3499=(gconst101*r10);
IkReal x3500=((1.0)*cj2);
IkReal x3501=(gconst101*r00);
IkReal x3502=((1.0)*sj0);
IkReal x3503=(cj1*sj2);
IkReal x3504=((1.0)*x3497);
IkReal x3505=((1.0)*x3496);
IkReal x3506=(gconst100*x3496);
IkReal x3507=(gconst100*x3497);
evalcond[0]=((((-1.0)*x3498*x3505))+(((-1.0)*r22*x3504))+((r21*x3506)));
evalcond[1]=((((-1.0)*r12*x3504))+cj0+((r11*x3506))+(((-1.0)*x3499*x3505)));
evalcond[2]=(((r01*x3506))+(((-1.0)*x3502))+(((-1.0)*x3501*x3505))+(((-1.0)*r02*x3504)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*x3498*x3504))+((r22*x3496))+((r21*x3507))+(((-1.0)*cj1*x3500)));
evalcond[4]=(((r01*x3507))+(((-1.0)*cj0*sj1*x3500))+(((-1.0)*cj0*x3503))+(((-1.0)*x3501*x3504))+((r02*x3496)));
evalcond[5]=((((-1.0)*x3502*x3503))+((r11*x3507))+(((-1.0)*x3499*x3504))+((r12*x3496))+(((-1.0)*sj0*sj1*x3500)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3508=((1.0)*gconst101);
CheckValue<IkReal> x3509=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst100*r10))+(((-1.0)*r11*x3508)))),-1);
if(!x3509.valid){
continue;
}
CheckValue<IkReal> x3510 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x3508))+((gconst100*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3510.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3509.value)))+(x3510.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3511=IKsin(j4);
IkReal x3512=IKcos(j4);
IkReal x3513=(gconst101*r20);
IkReal x3514=(gconst101*r10);
IkReal x3515=((1.0)*cj2);
IkReal x3516=(gconst101*r00);
IkReal x3517=((1.0)*sj0);
IkReal x3518=(cj1*sj2);
IkReal x3519=((1.0)*x3512);
IkReal x3520=((1.0)*x3511);
IkReal x3521=(gconst100*x3511);
IkReal x3522=(gconst100*x3512);
evalcond[0]=(((r21*x3521))+(((-1.0)*x3513*x3520))+(((-1.0)*r22*x3519)));
evalcond[1]=(cj0+((r11*x3521))+(((-1.0)*r12*x3519))+(((-1.0)*x3514*x3520)));
evalcond[2]=((((-1.0)*r02*x3519))+((r01*x3521))+(((-1.0)*x3517))+(((-1.0)*x3516*x3520)));
evalcond[3]=((((-1.0)*cj1*x3515))+((r21*x3522))+(((-1.0)*x3513*x3519))+((sj1*sj2))+((r22*x3511)));
evalcond[4]=(((r01*x3522))+((r02*x3511))+(((-1.0)*cj0*x3518))+(((-1.0)*cj0*sj1*x3515))+(((-1.0)*x3516*x3519)));
evalcond[5]=((((-1.0)*x3514*x3519))+(((-1.0)*x3517*x3518))+((r11*x3522))+((r12*x3511))+(((-1.0)*sj0*sj1*x3515)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3523=((1.0)*gconst101);
CheckValue<IkReal> x3524 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst100*r21))+(((-1.0)*cj0*r20*x3523)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3524.valid){
continue;
}
CheckValue<IkReal> x3525=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst100*r00))+(((-1.0)*r01*x3523)))),-1);
if(!x3525.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3524.value)+(((1.5707963267949)*(x3525.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3526=IKsin(j4);
IkReal x3527=IKcos(j4);
IkReal x3528=(gconst101*r20);
IkReal x3529=(gconst101*r10);
IkReal x3530=((1.0)*cj2);
IkReal x3531=(gconst101*r00);
IkReal x3532=((1.0)*sj0);
IkReal x3533=(cj1*sj2);
IkReal x3534=((1.0)*x3527);
IkReal x3535=((1.0)*x3526);
IkReal x3536=(gconst100*x3526);
IkReal x3537=(gconst100*x3527);
evalcond[0]=(((r21*x3536))+(((-1.0)*x3528*x3535))+(((-1.0)*r22*x3534)));
evalcond[1]=(((r11*x3536))+cj0+(((-1.0)*r12*x3534))+(((-1.0)*x3529*x3535)));
evalcond[2]=((((-1.0)*r02*x3534))+(((-1.0)*x3531*x3535))+((r01*x3536))+(((-1.0)*x3532)));
evalcond[3]=((((-1.0)*cj1*x3530))+((sj1*sj2))+((r21*x3537))+(((-1.0)*x3528*x3534))+((r22*x3526)));
evalcond[4]=((((-1.0)*cj0*sj1*x3530))+((r02*x3526))+(((-1.0)*x3531*x3534))+((r01*x3537))+(((-1.0)*cj0*x3533)));
evalcond[5]=(((r11*x3537))+(((-1.0)*sj0*sj1*x3530))+(((-1.0)*x3529*x3534))+((r12*x3526))+(((-1.0)*x3532*x3533)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3538=((-1.0)*r10);
IkReal x3540 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x3540)==0){
continue;
}
IkReal x3539=pow(x3540,-0.5);
CheckValue<IkReal> x3541 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x3538),IKFAST_ATAN2_MAGTHRESH);
if(!x3541.valid){
continue;
}
IkReal gconst102=((-1.0)*(x3541.value));
IkReal gconst103=(r11*x3539);
IkReal gconst104=(x3538*x3539);
CheckValue<IkReal> x3542 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3542.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x3542.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x3543=((-1.0)*r10);
IkReal x3544=x3539;
CheckValue<IkReal> x3546 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x3543),IKFAST_ATAN2_MAGTHRESH);
if(!x3546.valid){
continue;
}
IkReal x3545=((-1.0)*(x3546.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst103;
cj5=gconst104;
j5=x3545;
IkReal gconst102=x3545;
IkReal gconst103=(r11*x3544);
IkReal gconst104=(x3543*x3544);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3547=((1.0)*sj0);
IkReal x3548=((1.0)*gconst103);
CheckValue<IkReal> x3549=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x3548))+(((-1.0)*gconst104*r21)))),-1);
if(!x3549.valid){
continue;
}
CheckValue<IkReal> x3550 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x3547)))),IkReal(((((-1.0)*cj0*r01*x3548))+(((-1.0)*gconst103*r11*x3547))+((gconst104*r10*sj0))+((cj0*gconst104*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3550.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3549.value)))+(x3550.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3551=IKsin(j4);
IkReal x3552=IKcos(j4);
IkReal x3553=(gconst103*r11);
IkReal x3554=((1.0)*cj2);
IkReal x3555=((1.0)*sj0);
IkReal x3556=(cj1*sj2);
IkReal x3557=((1.0)*x3552);
IkReal x3558=(gconst103*x3552);
IkReal x3559=(gconst103*x3551);
IkReal x3560=((1.0)*gconst104*x3551);
evalcond[0]=(((r21*x3559))+(((-1.0)*r20*x3560))+(((-1.0)*r22*x3557)));
evalcond[1]=(cj0+(((-1.0)*r10*x3560))+(((-1.0)*r12*x3557))+((x3551*x3553)));
evalcond[2]=(((r01*x3559))+(((-1.0)*r00*x3560))+(((-1.0)*x3555))+(((-1.0)*r02*x3557)));
evalcond[3]=(((r21*x3558))+(((-1.0)*gconst104*r20*x3557))+((sj1*sj2))+(((-1.0)*cj1*x3554))+((r22*x3551)));
evalcond[4]=((((-1.0)*gconst104*r00*x3557))+((r01*x3558))+(((-1.0)*cj0*x3556))+(((-1.0)*cj0*sj1*x3554))+((r02*x3551)));
evalcond[5]=((((-1.0)*x3555*x3556))+((r12*x3551))+((x3552*x3553))+(((-1.0)*sj0*sj1*x3554))+(((-1.0)*gconst104*r10*x3557)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3561=((1.0)*gconst104);
CheckValue<IkReal> x3562 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x3561))+((cj0*gconst103*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3562.valid){
continue;
}
CheckValue<IkReal> x3563=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst103*r00))+(((-1.0)*r01*x3561)))),-1);
if(!x3563.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3562.value)+(((1.5707963267949)*(x3563.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3564=IKsin(j4);
IkReal x3565=IKcos(j4);
IkReal x3566=(gconst103*r11);
IkReal x3567=((1.0)*cj2);
IkReal x3568=((1.0)*sj0);
IkReal x3569=(cj1*sj2);
IkReal x3570=((1.0)*x3565);
IkReal x3571=(gconst103*x3565);
IkReal x3572=(gconst103*x3564);
IkReal x3573=((1.0)*gconst104*x3564);
evalcond[0]=(((r21*x3572))+(((-1.0)*r22*x3570))+(((-1.0)*r20*x3573)));
evalcond[1]=((((-1.0)*r10*x3573))+cj0+((x3564*x3566))+(((-1.0)*r12*x3570)));
evalcond[2]=(((r01*x3572))+(((-1.0)*x3568))+(((-1.0)*r00*x3573))+(((-1.0)*r02*x3570)));
evalcond[3]=(((r21*x3571))+((sj1*sj2))+((r22*x3564))+(((-1.0)*gconst104*r20*x3570))+(((-1.0)*cj1*x3567)));
evalcond[4]=(((r01*x3571))+(((-1.0)*cj0*sj1*x3567))+((r02*x3564))+(((-1.0)*cj0*x3569))+(((-1.0)*gconst104*r00*x3570)));
evalcond[5]=(((x3565*x3566))+(((-1.0)*x3568*x3569))+(((-1.0)*sj0*sj1*x3567))+((r12*x3564))+(((-1.0)*gconst104*r10*x3570)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3574=((-1.0)*r11);
IkReal x3576 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x3576)==0){
continue;
}
IkReal x3575=pow(x3576,-0.5);
CheckValue<IkReal> x3577 = IKatan2WithCheck(IkReal(x3574),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3577.valid){
continue;
}
IkReal gconst105=((3.14159265358979)+(((-1.0)*(x3577.value))));
IkReal gconst106=(x3574*x3575);
IkReal gconst107=((1.0)*r10*x3575);
CheckValue<IkReal> x3578 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3578.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x3578.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x3579=((-1.0)*r11);
CheckValue<IkReal> x3582 = IKatan2WithCheck(IkReal(x3579),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3582.valid){
continue;
}
IkReal x3580=((1.0)*(x3582.value));
IkReal x3581=x3575;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x3580)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x3580)));
IkReal gconst106=(x3579*x3581);
IkReal gconst107=((1.0)*r10*x3581);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3583=((-1.0)*r11);
CheckValue<IkReal> x3586 = IKatan2WithCheck(IkReal(x3583),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3586.valid){
continue;
}
IkReal x3584=((1.0)*(x3586.value));
IkReal x3585=x3575;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x3584)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x3584)));
IkReal gconst106=(x3583*x3585);
IkReal gconst107=((1.0)*r10*x3585);
IkReal x3587=r12*r12;
IkReal x3588=((1.0)*sj0);
IkReal x3589=(cj0*r02);
IkReal x3590=x3575;
j4eval[0]=((IKabs(((((-1.0)*x3589))+(((-1.0)*r12*x3588)))))+(IKabs((((r12*x3589*x3590))+((sj0*x3587*x3590))+(((-1.0)*x3588*x3590))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x3591=((-1.0)*r11);
CheckValue<IkReal> x3594 = IKatan2WithCheck(IkReal(x3591),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3594.valid){
continue;
}
IkReal x3592=((1.0)*(x3594.value));
IkReal x3593=x3575;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x3592)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x3592)));
IkReal gconst106=(x3591*x3593);
IkReal gconst107=((1.0)*r10*x3593);
IkReal x3595=r12*r12;
IkReal x3596=((1.0)+(((-1.0)*x3595)));
IkReal x3597=(r22*sj1*sj2);
IkReal x3598=(cj1*cj2*r22);
CheckValue<IkReal> x3605=IKPowWithIntegerCheck(x3596,-1);
if(!x3605.valid){
continue;
}
IkReal x3599=x3605.value;
CheckValue<IkReal> x3606=IKPowWithIntegerCheck(((-1.0)+x3595),-1);
if(!x3606.valid){
continue;
}
IkReal x3600=x3606.value;
IkReal x3601=((1.0)*x3599);
if((x3596) < -0.00001)
continue;
IkReal x3602=IKsqrt(x3596);
IkReal x3603=(r12*x3600*x3602);
IkReal x3604=((((-2.0)*r10*r11*r20*r21*x3599))+(((-1.0)*x3601*(r10*r10)*(r20*r20)))+(((-1.0)*x3601*(r11*r11)*(r21*r21)))+(((-1.0)*(r22*r22))));
j4eval[0]=x3604;
j4eval[1]=((IKabs((((x3598*x3603))+(((-1.0)*x3597*x3603)))))+(IKabs((x3597+(((-1.0)*x3598))))));
j4eval[2]=IKsign(x3604);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3607=(sj1*sj2);
IkReal x3608=(gconst106*r21);
IkReal x3609=(gconst107*r20);
IkReal x3610=(cj1*cj2);
CheckValue<IkReal> x3611=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r22*r22)))+(((-1.0)*(x3608*x3608)))+(((-1.0)*(x3609*x3609)))+(((2.0)*x3608*x3609)))),-1);
if(!x3611.valid){
continue;
}
CheckValue<IkReal> x3612 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x3610))+((r22*x3607)))),IkReal((((x3609*x3610))+((x3607*x3608))+(((-1.0)*x3607*x3609))+(((-1.0)*x3608*x3610)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3612.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3611.value)))+(x3612.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3613=IKsin(j4);
IkReal x3614=IKcos(j4);
IkReal x3615=(gconst107*r10);
IkReal x3616=(gconst107*r00);
IkReal x3617=((1.0)*cj2);
IkReal x3618=(gconst107*r20);
IkReal x3619=((1.0)*sj0);
IkReal x3620=(cj1*sj2);
IkReal x3621=((1.0)*x3614);
IkReal x3622=(gconst106*x3614);
IkReal x3623=(gconst106*x3613);
IkReal x3624=((1.0)*x3613);
evalcond[0]=(((r21*x3623))+(((-1.0)*x3618*x3624))+(((-1.0)*r22*x3621)));
evalcond[1]=(cj0+(((-1.0)*r12*x3621))+((r11*x3623))+(((-1.0)*x3615*x3624)));
evalcond[2]=(((r01*x3623))+(((-1.0)*x3619))+(((-1.0)*x3616*x3624))+(((-1.0)*r02*x3621)));
evalcond[3]=(((r21*x3622))+((r22*x3613))+((sj1*sj2))+(((-1.0)*x3618*x3621))+(((-1.0)*cj1*x3617)));
evalcond[4]=(((r02*x3613))+((r01*x3622))+(((-1.0)*cj0*x3620))+(((-1.0)*cj0*sj1*x3617))+(((-1.0)*x3616*x3621)));
evalcond[5]=(((r11*x3622))+(((-1.0)*x3619*x3620))+(((-1.0)*sj0*sj1*x3617))+((r12*x3613))+(((-1.0)*x3615*x3621)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3625=((1.0)*sj0);
IkReal x3626=((1.0)*gconst106);
CheckValue<IkReal> x3627 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x3625)))),IkReal(((((-1.0)*gconst106*r11*x3625))+((gconst107*r10*sj0))+((cj0*gconst107*r00))+(((-1.0)*cj0*r01*x3626)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3627.valid){
continue;
}
CheckValue<IkReal> x3628=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x3626))+(((-1.0)*gconst107*r21)))),-1);
if(!x3628.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3627.value)+(((1.5707963267949)*(x3628.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3629=IKsin(j4);
IkReal x3630=IKcos(j4);
IkReal x3631=(gconst107*r10);
IkReal x3632=(gconst107*r00);
IkReal x3633=((1.0)*cj2);
IkReal x3634=(gconst107*r20);
IkReal x3635=((1.0)*sj0);
IkReal x3636=(cj1*sj2);
IkReal x3637=((1.0)*x3630);
IkReal x3638=(gconst106*x3630);
IkReal x3639=(gconst106*x3629);
IkReal x3640=((1.0)*x3629);
evalcond[0]=((((-1.0)*x3634*x3640))+(((-1.0)*r22*x3637))+((r21*x3639)));
evalcond[1]=(((r11*x3639))+cj0+(((-1.0)*r12*x3637))+(((-1.0)*x3631*x3640)));
evalcond[2]=((((-1.0)*x3635))+(((-1.0)*r02*x3637))+((r01*x3639))+(((-1.0)*x3632*x3640)));
evalcond[3]=((((-1.0)*cj1*x3633))+(((-1.0)*x3634*x3637))+((sj1*sj2))+((r21*x3638))+((r22*x3629)));
evalcond[4]=(((r02*x3629))+(((-1.0)*cj0*sj1*x3633))+((r01*x3638))+(((-1.0)*cj0*x3636))+(((-1.0)*x3632*x3637)));
evalcond[5]=(((r11*x3638))+(((-1.0)*x3631*x3637))+(((-1.0)*sj0*sj1*x3633))+((r12*x3629))+(((-1.0)*x3635*x3636)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3641=((1.0)*gconst107);
CheckValue<IkReal> x3642=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst106*r00))+(((-1.0)*r01*x3641)))),-1);
if(!x3642.valid){
continue;
}
CheckValue<IkReal> x3643 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst106*r21))+(((-1.0)*cj0*r20*x3641)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3643.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3642.value)))+(x3643.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3644=IKsin(j4);
IkReal x3645=IKcos(j4);
IkReal x3646=(gconst107*r10);
IkReal x3647=(gconst107*r00);
IkReal x3648=((1.0)*cj2);
IkReal x3649=(gconst107*r20);
IkReal x3650=((1.0)*sj0);
IkReal x3651=(cj1*sj2);
IkReal x3652=((1.0)*x3645);
IkReal x3653=(gconst106*x3645);
IkReal x3654=(gconst106*x3644);
IkReal x3655=((1.0)*x3644);
evalcond[0]=(((r21*x3654))+(((-1.0)*x3649*x3655))+(((-1.0)*r22*x3652)));
evalcond[1]=((((-1.0)*x3646*x3655))+cj0+((r11*x3654))+(((-1.0)*r12*x3652)));
evalcond[2]=((((-1.0)*r02*x3652))+(((-1.0)*x3647*x3655))+((r01*x3654))+(((-1.0)*x3650)));
evalcond[3]=(((sj1*sj2))+((r21*x3653))+(((-1.0)*x3649*x3652))+(((-1.0)*cj1*x3648))+((r22*x3644)));
evalcond[4]=((((-1.0)*cj0*x3651))+((r02*x3644))+(((-1.0)*x3647*x3652))+(((-1.0)*cj0*sj1*x3648))+((r01*x3653)));
evalcond[5]=((((-1.0)*x3646*x3652))+((r12*x3644))+((r11*x3653))+(((-1.0)*x3650*x3651))+(((-1.0)*sj0*sj1*x3648)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3656=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x3656;
j4eval[1]=IKsign(x3656);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3657=((1.0)*cj5);
IkReal x3658=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3657)));
j4eval[0]=x3658;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x3657))))));
j4eval[2]=IKsign(x3658);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3659=(sj1*sj2);
IkReal x3660=(cj5*r10);
IkReal x3661=(r11*sj5);
IkReal x3662=(cj1*cj2);
IkReal x3663=((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)));
j4eval[0]=x3663;
j4eval[1]=((IKabs((((x3659*x3661))+(((-1.0)*x3661*x3662))+(((-1.0)*x3659*x3660))+((x3660*x3662)))))+(IKabs(((((-1.0)*r12*x3659))+((r12*x3662))))));
j4eval[2]=IKsign(x3663);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3664=(sj1*sj2);
IkReal x3665=(cj5*r10);
IkReal x3666=(r11*sj5);
IkReal x3667=(cj1*cj2);
CheckValue<IkReal> x3668=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)))),-1);
if(!x3668.valid){
continue;
}
CheckValue<IkReal> x3669 = IKatan2WithCheck(IkReal(((((-1.0)*x3664*x3665))+((x3664*x3666))+(((-1.0)*x3666*x3667))+((x3665*x3667)))),IkReal((((r12*x3667))+(((-1.0)*r12*x3664)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3669.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3668.value)))+(x3669.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3670=IKcos(j4);
IkReal x3671=IKsin(j4);
IkReal x3672=(cj5*r00);
IkReal x3673=(cj5*r10);
IkReal x3674=(r21*sj5);
IkReal x3675=((1.0)*cj2);
IkReal x3676=(cj5*r20);
IkReal x3677=((1.0)*x3670);
IkReal x3678=((1.0)*x3671);
IkReal x3679=(sj5*x3671);
IkReal x3680=(sj5*x3670);
evalcond[0]=(((r12*x3671))+(((-1.0)*x3673*x3677))+((r11*x3680)));
evalcond[1]=((((-1.0)*x3676*x3678))+(((-1.0)*r22*x3677))+((x3671*x3674)));
evalcond[2]=(((r01*x3679))+(((-1.0)*x3672*x3678))+(((-1.0)*r02*x3677)));
evalcond[3]=((1.0)+((r11*x3679))+(((-1.0)*x3673*x3678))+(((-1.0)*r12*x3677)));
evalcond[4]=((((-1.0)*x3676*x3677))+((sj1*sj2))+((x3670*x3674))+((r22*x3671))+(((-1.0)*cj1*x3675)));
evalcond[5]=(((r01*x3680))+(((-1.0)*cj1*sj2))+(((-1.0)*x3672*x3677))+((r02*x3671))+(((-1.0)*sj1*x3675)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3681=((1.0)*cj5);
CheckValue<IkReal> x3682 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x3681))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3682.valid){
continue;
}
CheckValue<IkReal> x3683=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3681)))),-1);
if(!x3683.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3682.value)+(((1.5707963267949)*(x3683.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3684=IKcos(j4);
IkReal x3685=IKsin(j4);
IkReal x3686=(cj5*r00);
IkReal x3687=(cj5*r10);
IkReal x3688=(r21*sj5);
IkReal x3689=((1.0)*cj2);
IkReal x3690=(cj5*r20);
IkReal x3691=((1.0)*x3684);
IkReal x3692=((1.0)*x3685);
IkReal x3693=(sj5*x3685);
IkReal x3694=(sj5*x3684);
evalcond[0]=((((-1.0)*x3687*x3691))+((r12*x3685))+((r11*x3694)));
evalcond[1]=((((-1.0)*r22*x3691))+((x3685*x3688))+(((-1.0)*x3690*x3692)));
evalcond[2]=(((r01*x3693))+(((-1.0)*x3686*x3692))+(((-1.0)*r02*x3691)));
evalcond[3]=((1.0)+(((-1.0)*r12*x3691))+(((-1.0)*x3687*x3692))+((r11*x3693)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*cj1*x3689))+((x3684*x3688))+((r22*x3685))+(((-1.0)*x3690*x3691)));
evalcond[5]=(((r01*x3694))+(((-1.0)*x3686*x3691))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x3689))+((r02*x3685)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3695=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x3695.valid){
continue;
}
CheckValue<IkReal> x3696 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3696.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3695.value)))+(x3696.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3697=IKcos(j4);
IkReal x3698=IKsin(j4);
IkReal x3699=(cj5*r00);
IkReal x3700=(cj5*r10);
IkReal x3701=(r21*sj5);
IkReal x3702=((1.0)*cj2);
IkReal x3703=(cj5*r20);
IkReal x3704=((1.0)*x3697);
IkReal x3705=((1.0)*x3698);
IkReal x3706=(sj5*x3698);
IkReal x3707=(sj5*x3697);
evalcond[0]=(((r11*x3707))+(((-1.0)*x3700*x3704))+((r12*x3698)));
evalcond[1]=(((x3698*x3701))+(((-1.0)*x3703*x3705))+(((-1.0)*r22*x3704)));
evalcond[2]=((((-1.0)*x3699*x3705))+(((-1.0)*r02*x3704))+((r01*x3706)));
evalcond[3]=((1.0)+((r11*x3706))+(((-1.0)*x3700*x3705))+(((-1.0)*r12*x3704)));
evalcond[4]=((((-1.0)*cj1*x3702))+((x3697*x3701))+(((-1.0)*x3703*x3704))+((sj1*sj2))+((r22*x3698)));
evalcond[5]=((((-1.0)*x3699*x3704))+((r01*x3707))+((r02*x3698))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x3702)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3708=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3708;
j4eval[1]=IKsign(x3708);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3709=((1.0)*cj5);
IkReal x3710=((((-1.0)*r21*x3709))+(((-1.0)*r20*sj5)));
j4eval[0]=x3710;
j4eval[1]=((IKabs(((((-1.0)*r00*x3709))+((r01*sj5)))))+(IKabs(r02)));
j4eval[2]=IKsign(x3710);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3711=cj5*cj5;
IkReal x3712=r11*r11;
IkReal x3713=(r11*sj5);
IkReal x3714=(cj5*r10);
IkReal x3715=((r12*r12)+(((-1.0)*x3711*x3712))+x3712+((x3711*(r10*r10)))+(((-2.0)*x3713*x3714)));
j4eval[0]=x3715;
j4eval[1]=IKsign(x3715);
j4eval[2]=((IKabs(r12))+(IKabs((x3713+(((-1.0)*x3714))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3716=cj5*cj5;
IkReal x3717=r11*r11;
IkReal x3718=(cj5*r10);
IkReal x3719=(r11*sj5);
CheckValue<IkReal> x3720=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-1.0)*x3716*x3717))+((x3716*(r10*r10)))+(((-2.0)*x3718*x3719))+x3717)),-1);
if(!x3720.valid){
continue;
}
CheckValue<IkReal> x3721 = IKatan2WithCheck(IkReal((x3719+(((-1.0)*x3718)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x3721.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3720.value)))+(x3721.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3722=IKcos(j4);
IkReal x3723=IKsin(j4);
IkReal x3724=(cj5*r00);
IkReal x3725=(cj5*r10);
IkReal x3726=(r21*sj5);
IkReal x3727=(cj5*r20);
IkReal x3728=((1.0)*x3722);
IkReal x3729=((1.0)*x3723);
IkReal x3730=(sj5*x3723);
IkReal x3731=(sj5*x3722);
evalcond[0]=(((r11*x3731))+(((-1.0)*x3725*x3728))+((r12*x3723)));
evalcond[1]=((((-1.0)*r22*x3728))+(((-1.0)*x3727*x3729))+((x3723*x3726)));
evalcond[2]=(((r01*x3730))+(((-1.0)*x3724*x3729))+(((-1.0)*r02*x3728)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x3728))+((r11*x3730))+(((-1.0)*x3725*x3729)));
evalcond[4]=(((cj2*sj1))+((r01*x3731))+(((-1.0)*x3724*x3728))+((cj1*sj2))+((r02*x3723)));
evalcond[5]=((((-1.0)*x3727*x3728))+((r22*x3723))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x3722*x3726)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3732=((1.0)*cj5);
CheckValue<IkReal> x3733=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x3732))+(((-1.0)*r20*sj5)))),-1);
if(!x3733.valid){
continue;
}
CheckValue<IkReal> x3734 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x3732)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3734.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3733.value)))+(x3734.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3735=IKcos(j4);
IkReal x3736=IKsin(j4);
IkReal x3737=(cj5*r00);
IkReal x3738=(cj5*r10);
IkReal x3739=(r21*sj5);
IkReal x3740=(cj5*r20);
IkReal x3741=((1.0)*x3735);
IkReal x3742=((1.0)*x3736);
IkReal x3743=(sj5*x3736);
IkReal x3744=(sj5*x3735);
evalcond[0]=(((r12*x3736))+((r11*x3744))+(((-1.0)*x3738*x3741)));
evalcond[1]=((((-1.0)*r22*x3741))+(((-1.0)*x3740*x3742))+((x3736*x3739)));
evalcond[2]=(((r01*x3743))+(((-1.0)*x3737*x3742))+(((-1.0)*r02*x3741)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x3741))+((r11*x3743))+(((-1.0)*x3738*x3742)));
evalcond[4]=(((cj2*sj1))+((r01*x3744))+((cj1*sj2))+(((-1.0)*x3737*x3741))+((r02*x3736)));
evalcond[5]=((((-1.0)*x3740*x3741))+((x3735*x3739))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x3736)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3745 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3745.valid){
continue;
}
CheckValue<IkReal> x3746=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3746.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3745.value)+(((1.5707963267949)*(x3746.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3747=IKcos(j4);
IkReal x3748=IKsin(j4);
IkReal x3749=(cj5*r00);
IkReal x3750=(cj5*r10);
IkReal x3751=(r21*sj5);
IkReal x3752=(cj5*r20);
IkReal x3753=((1.0)*x3747);
IkReal x3754=((1.0)*x3748);
IkReal x3755=(sj5*x3748);
IkReal x3756=(sj5*x3747);
evalcond[0]=((((-1.0)*x3750*x3753))+((r12*x3748))+((r11*x3756)));
evalcond[1]=((((-1.0)*x3752*x3754))+(((-1.0)*r22*x3753))+((x3748*x3751)));
evalcond[2]=(((r01*x3755))+(((-1.0)*x3749*x3754))+(((-1.0)*r02*x3753)));
evalcond[3]=((-1.0)+(((-1.0)*x3750*x3754))+(((-1.0)*r12*x3753))+((r11*x3755)));
evalcond[4]=(((cj2*sj1))+((r01*x3756))+(((-1.0)*x3749*x3753))+((cj1*sj2))+((r02*x3748)));
evalcond[5]=((((-1.0)*x3752*x3753))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x3748))+((x3747*x3751)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3757=((-1.0)*r00);
IkReal x3759 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x3759)==0){
continue;
}
IkReal x3758=pow(x3759,-0.5);
CheckValue<IkReal> x3760 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x3757),IKFAST_ATAN2_MAGTHRESH);
if(!x3760.valid){
continue;
}
IkReal gconst108=((-1.0)*(x3760.value));
IkReal gconst109=(r01*x3758);
IkReal gconst110=(x3757*x3758);
CheckValue<IkReal> x3761 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3761.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x3761.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x3762=((-1.0)*r00);
IkReal x3763=x3758;
CheckValue<IkReal> x3765 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x3762),IKFAST_ATAN2_MAGTHRESH);
if(!x3765.valid){
continue;
}
IkReal x3764=((-1.0)*(x3765.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst109;
cj5=gconst110;
j5=x3764;
IkReal gconst108=x3764;
IkReal gconst109=(r01*x3763);
IkReal gconst110=(x3762*x3763);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3766=((1.0)*sj0);
IkReal x3767=((1.0)*gconst109);
CheckValue<IkReal> x3768 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x3766)))),IkReal((((cj0*gconst110*r00))+((gconst110*r10*sj0))+(((-1.0)*cj0*r01*x3767))+(((-1.0)*gconst109*r11*x3766)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3768.valid){
continue;
}
CheckValue<IkReal> x3769=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x3767))+(((-1.0)*gconst110*r21)))),-1);
if(!x3769.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3768.value)+(((1.5707963267949)*(x3769.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3770=IKsin(j4);
IkReal x3771=IKcos(j4);
IkReal x3772=(gconst109*r21);
IkReal x3773=((1.0)*cj2);
IkReal x3774=((1.0)*sj0);
IkReal x3775=(cj1*sj2);
IkReal x3776=((1.0)*x3771);
IkReal x3777=(gconst109*x3770);
IkReal x3778=(gconst109*x3771);
IkReal x3779=((1.0)*gconst110*x3770);
evalcond[0]=((((-1.0)*r20*x3779))+(((-1.0)*r22*x3776))+((x3770*x3772)));
evalcond[1]=(cj0+((r11*x3777))+(((-1.0)*r12*x3776))+(((-1.0)*r10*x3779)));
evalcond[2]=((((-1.0)*r02*x3776))+(((-1.0)*r00*x3779))+(((-1.0)*x3774))+((r01*x3777)));
evalcond[3]=(((r22*x3770))+((sj1*sj2))+((x3771*x3772))+(((-1.0)*gconst110*r20*x3776))+(((-1.0)*cj1*x3773)));
evalcond[4]=(((r02*x3770))+(((-1.0)*cj0*sj1*x3773))+(((-1.0)*gconst110*r00*x3776))+(((-1.0)*cj0*x3775))+((r01*x3778)));
evalcond[5]=((((-1.0)*gconst110*r10*x3776))+(((-1.0)*x3774*x3775))+((r11*x3778))+((r12*x3770))+(((-1.0)*sj0*sj1*x3773)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3780=((1.0)*gconst110);
CheckValue<IkReal> x3781 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst109*r21*sj0))+(((-1.0)*r20*sj0*x3780)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3781.valid){
continue;
}
CheckValue<IkReal> x3782=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x3780))+(((-1.0)*gconst109*r10)))),-1);
if(!x3782.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3781.value)+(((1.5707963267949)*(x3782.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3783=IKsin(j4);
IkReal x3784=IKcos(j4);
IkReal x3785=(gconst109*r21);
IkReal x3786=((1.0)*cj2);
IkReal x3787=((1.0)*sj0);
IkReal x3788=(cj1*sj2);
IkReal x3789=((1.0)*x3784);
IkReal x3790=(gconst109*x3783);
IkReal x3791=(gconst109*x3784);
IkReal x3792=((1.0)*gconst110*x3783);
evalcond[0]=((((-1.0)*r22*x3789))+(((-1.0)*r20*x3792))+((x3783*x3785)));
evalcond[1]=(cj0+(((-1.0)*r12*x3789))+((r11*x3790))+(((-1.0)*r10*x3792)));
evalcond[2]=((((-1.0)*r02*x3789))+(((-1.0)*x3787))+(((-1.0)*r00*x3792))+((r01*x3790)));
evalcond[3]=(((x3784*x3785))+((r22*x3783))+((sj1*sj2))+(((-1.0)*cj1*x3786))+(((-1.0)*gconst110*r20*x3789)));
evalcond[4]=((((-1.0)*gconst110*r00*x3789))+((r02*x3783))+(((-1.0)*cj0*x3788))+((r01*x3791))+(((-1.0)*cj0*sj1*x3786)));
evalcond[5]=(((r12*x3783))+(((-1.0)*sj0*sj1*x3786))+(((-1.0)*gconst110*r10*x3789))+((r11*x3791))+(((-1.0)*x3787*x3788)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3793=((-1.0)*r01);
IkReal x3795 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x3795)==0){
continue;
}
IkReal x3794=pow(x3795,-0.5);
CheckValue<IkReal> x3796 = IKatan2WithCheck(IkReal(x3793),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3796.valid){
continue;
}
IkReal gconst111=((3.14159265358979)+(((-1.0)*(x3796.value))));
IkReal gconst112=(x3793*x3794);
IkReal gconst113=((1.0)*r00*x3794);
CheckValue<IkReal> x3797 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3797.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x3797.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x3798=((-1.0)*r01);
CheckValue<IkReal> x3801 = IKatan2WithCheck(IkReal(x3798),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3801.valid){
continue;
}
IkReal x3799=((1.0)*(x3801.value));
IkReal x3800=x3794;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x3799)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x3799)));
IkReal gconst112=(x3798*x3800);
IkReal gconst113=((1.0)*r00*x3800);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x3802=((-1.0)*r01);
CheckValue<IkReal> x3805 = IKatan2WithCheck(IkReal(x3802),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3805.valid){
continue;
}
IkReal x3803=((1.0)*(x3805.value));
IkReal x3804=x3794;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x3803)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x3803)));
IkReal gconst112=(x3802*x3804);
IkReal gconst113=((1.0)*r00*x3804);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3806=((-1.0)*r01);
CheckValue<IkReal> x3809 = IKatan2WithCheck(IkReal(x3806),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3809.valid){
continue;
}
IkReal x3807=((1.0)*(x3809.value));
IkReal x3808=x3794;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x3807)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x3807)));
IkReal gconst112=(x3806*x3808);
IkReal gconst113=((1.0)*r00*x3808);
IkReal x3810=r02*r02;
IkReal x3811=(r12*sj0);
IkReal x3812=((1.0)*cj0);
IkReal x3813=x3794;
j4eval[0]=((IKabs((((cj0*x3810*x3813))+(((-1.0)*x3812*x3813))+((r02*x3811*x3813)))))+(IKabs(((((-1.0)*r02*x3812))+(((-1.0)*x3811))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3814=((1.0)*sj0);
IkReal x3815=((1.0)*gconst112);
CheckValue<IkReal> x3816 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x3814))+(((-1.0)*cj0*r02)))),IkReal((((gconst113*r10*sj0))+((cj0*gconst113*r00))+(((-1.0)*cj0*r01*x3815))+(((-1.0)*gconst112*r11*x3814)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3816.valid){
continue;
}
CheckValue<IkReal> x3817=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst113*r21))+(((-1.0)*r20*x3815)))),-1);
if(!x3817.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3816.value)+(((1.5707963267949)*(x3817.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3818=IKsin(j4);
IkReal x3819=IKcos(j4);
IkReal x3820=(gconst113*r20);
IkReal x3821=(gconst112*r21);
IkReal x3822=((1.0)*cj2);
IkReal x3823=(gconst113*r00);
IkReal x3824=(gconst113*r10);
IkReal x3825=((1.0)*sj0);
IkReal x3826=(cj1*sj2);
IkReal x3827=((1.0)*x3819);
IkReal x3828=((1.0)*x3818);
IkReal x3829=(gconst112*x3819);
IkReal x3830=(gconst112*x3818);
evalcond[0]=((((-1.0)*r22*x3827))+((x3818*x3821))+(((-1.0)*x3820*x3828)));
evalcond[1]=((((-1.0)*r12*x3827))+cj0+(((-1.0)*x3824*x3828))+((r11*x3830)));
evalcond[2]=((((-1.0)*r02*x3827))+((r01*x3830))+(((-1.0)*x3825))+(((-1.0)*x3823*x3828)));
evalcond[3]=(((x3819*x3821))+((sj1*sj2))+(((-1.0)*cj1*x3822))+((r22*x3818))+(((-1.0)*x3820*x3827)));
evalcond[4]=((((-1.0)*cj0*x3826))+(((-1.0)*x3823*x3827))+((r02*x3818))+(((-1.0)*cj0*sj1*x3822))+((r01*x3829)));
evalcond[5]=(((r12*x3818))+(((-1.0)*sj0*sj1*x3822))+(((-1.0)*x3824*x3827))+((r11*x3829))+(((-1.0)*x3825*x3826)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3831=((1.0)*gconst113);
CheckValue<IkReal> x3832 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst112*r21*sj0))+(((-1.0)*r20*sj0*x3831)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3832.valid){
continue;
}
CheckValue<IkReal> x3833=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x3831))+(((-1.0)*gconst112*r10)))),-1);
if(!x3833.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3832.value)+(((1.5707963267949)*(x3833.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3834=IKsin(j4);
IkReal x3835=IKcos(j4);
IkReal x3836=(gconst113*r20);
IkReal x3837=(gconst112*r21);
IkReal x3838=((1.0)*cj2);
IkReal x3839=(gconst113*r00);
IkReal x3840=(gconst113*r10);
IkReal x3841=((1.0)*sj0);
IkReal x3842=(cj1*sj2);
IkReal x3843=((1.0)*x3835);
IkReal x3844=((1.0)*x3834);
IkReal x3845=(gconst112*x3835);
IkReal x3846=(gconst112*x3834);
evalcond[0]=(((x3834*x3837))+(((-1.0)*r22*x3843))+(((-1.0)*x3836*x3844)));
evalcond[1]=(cj0+(((-1.0)*x3840*x3844))+(((-1.0)*r12*x3843))+((r11*x3846)));
evalcond[2]=((((-1.0)*r02*x3843))+(((-1.0)*x3839*x3844))+((r01*x3846))+(((-1.0)*x3841)));
evalcond[3]=(((x3835*x3837))+((sj1*sj2))+(((-1.0)*cj1*x3838))+(((-1.0)*x3836*x3843))+((r22*x3834)));
evalcond[4]=(((r02*x3834))+(((-1.0)*cj0*sj1*x3838))+(((-1.0)*x3839*x3843))+((r01*x3845))+(((-1.0)*cj0*x3842)));
evalcond[5]=((((-1.0)*x3840*x3843))+(((-1.0)*x3841*x3842))+((r12*x3834))+(((-1.0)*sj0*sj1*x3838))+((r11*x3845)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3847=((1.0)*gconst113);
CheckValue<IkReal> x3848=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x3847))+(((-1.0)*gconst112*r00)))),-1);
if(!x3848.valid){
continue;
}
CheckValue<IkReal> x3849 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst112*r21))+(((-1.0)*cj0*r20*x3847)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3849.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3848.value)))+(x3849.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3850=IKsin(j4);
IkReal x3851=IKcos(j4);
IkReal x3852=(gconst113*r20);
IkReal x3853=(gconst112*r21);
IkReal x3854=((1.0)*cj2);
IkReal x3855=(gconst113*r00);
IkReal x3856=(gconst113*r10);
IkReal x3857=((1.0)*sj0);
IkReal x3858=(cj1*sj2);
IkReal x3859=((1.0)*x3851);
IkReal x3860=((1.0)*x3850);
IkReal x3861=(gconst112*x3851);
IkReal x3862=(gconst112*x3850);
evalcond[0]=(((x3850*x3853))+(((-1.0)*x3852*x3860))+(((-1.0)*r22*x3859)));
evalcond[1]=(((r11*x3862))+cj0+(((-1.0)*x3856*x3860))+(((-1.0)*r12*x3859)));
evalcond[2]=((((-1.0)*x3857))+((r01*x3862))+(((-1.0)*x3855*x3860))+(((-1.0)*r02*x3859)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*cj1*x3854))+((x3851*x3853))+(((-1.0)*x3852*x3859))+((r22*x3850)));
evalcond[4]=(((r02*x3850))+(((-1.0)*cj0*sj1*x3854))+((r01*x3861))+(((-1.0)*x3855*x3859))+(((-1.0)*cj0*x3858)));
evalcond[5]=(((r11*x3861))+(((-1.0)*x3857*x3858))+(((-1.0)*x3856*x3859))+(((-1.0)*sj0*sj1*x3854))+((r12*x3850)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x3863=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x3863;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x3863);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x3864=((1.0)*cj5);
IkReal x3865=((((-1.0)*r10*sj5))+(((-1.0)*r11*x3864)));
j4eval[0]=x3865;
j4eval[1]=((IKabs(((((-1.0)*r20*x3864))+((r21*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x3865);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x3866=cj5*cj5;
IkReal x3867=r01*r01;
IkReal x3868=(cj5*r00);
IkReal x3869=(r01*sj5);
IkReal x3870=((((-1.0)*x3866*x3867))+(((-2.0)*x3868*x3869))+x3867+((x3866*(r00*r00)))+(r02*r02));
j4eval[0]=x3870;
j4eval[1]=IKsign(x3870);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x3868))+x3869))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3871=cj5*cj5;
IkReal x3872=r01*r01;
IkReal x3873=(r01*sj5);
IkReal x3874=(cj5*r00);
CheckValue<IkReal> x3875=IKPowWithIntegerCheck(IKsign((((x3871*(r00*r00)))+x3872+(((-1.0)*x3871*x3872))+(r02*r02)+(((-2.0)*x3873*x3874)))),-1);
if(!x3875.valid){
continue;
}
CheckValue<IkReal> x3876 = IKatan2WithCheck(IkReal((x3873+(((-1.0)*x3874)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x3876.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3875.value)))+(x3876.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3877=IKcos(j4);
IkReal x3878=IKsin(j4);
IkReal x3879=(cj5*r00);
IkReal x3880=(cj5*r10);
IkReal x3881=(r21*sj5);
IkReal x3882=((1.0)*cj2);
IkReal x3883=(cj5*r20);
IkReal x3884=((1.0)*x3877);
IkReal x3885=((1.0)*x3878);
IkReal x3886=(sj5*x3878);
IkReal x3887=(sj5*x3877);
evalcond[0]=((((-1.0)*x3879*x3884))+((r01*x3887))+((r02*x3878)));
evalcond[1]=(((x3878*x3881))+(((-1.0)*x3883*x3885))+(((-1.0)*r22*x3884)));
evalcond[2]=((((-1.0)*x3880*x3885))+((r11*x3886))+(((-1.0)*r12*x3884)));
evalcond[3]=((-1.0)+(((-1.0)*x3879*x3885))+(((-1.0)*r02*x3884))+((r01*x3886)));
evalcond[4]=((((-1.0)*cj1*x3882))+((x3877*x3881))+(((-1.0)*x3883*x3884))+((sj1*sj2))+((r22*x3878)));
evalcond[5]=((((-1.0)*sj1*x3882))+(((-1.0)*x3880*x3884))+((r11*x3887))+(((-1.0)*cj1*sj2))+((r12*x3878)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3888=((1.0)*cj5);
CheckValue<IkReal> x3889=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3888)))),-1);
if(!x3889.valid){
continue;
}
CheckValue<IkReal> x3890 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x3888)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3890.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3889.value)))+(x3890.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3891=IKcos(j4);
IkReal x3892=IKsin(j4);
IkReal x3893=(cj5*r00);
IkReal x3894=(cj5*r10);
IkReal x3895=(r21*sj5);
IkReal x3896=((1.0)*cj2);
IkReal x3897=(cj5*r20);
IkReal x3898=((1.0)*x3891);
IkReal x3899=((1.0)*x3892);
IkReal x3900=(sj5*x3892);
IkReal x3901=(sj5*x3891);
evalcond[0]=(((r01*x3901))+(((-1.0)*x3893*x3898))+((r02*x3892)));
evalcond[1]=((((-1.0)*r22*x3898))+((x3892*x3895))+(((-1.0)*x3897*x3899)));
evalcond[2]=((((-1.0)*r12*x3898))+(((-1.0)*x3894*x3899))+((r11*x3900)));
evalcond[3]=((-1.0)+((r01*x3900))+(((-1.0)*x3893*x3899))+(((-1.0)*r02*x3898)));
evalcond[4]=(((sj1*sj2))+((x3891*x3895))+(((-1.0)*x3897*x3898))+((r22*x3892))+(((-1.0)*cj1*x3896)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*sj1*x3896))+(((-1.0)*x3894*x3898))+((r12*x3892))+((r11*x3901)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3902=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x3902.valid){
continue;
}
CheckValue<IkReal> x3903 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3903.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3902.value)))+(x3903.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3904=IKcos(j4);
IkReal x3905=IKsin(j4);
IkReal x3906=(cj5*r00);
IkReal x3907=(cj5*r10);
IkReal x3908=(r21*sj5);
IkReal x3909=((1.0)*cj2);
IkReal x3910=(cj5*r20);
IkReal x3911=((1.0)*x3904);
IkReal x3912=((1.0)*x3905);
IkReal x3913=(sj5*x3905);
IkReal x3914=(sj5*x3904);
evalcond[0]=((((-1.0)*x3906*x3911))+((r01*x3914))+((r02*x3905)));
evalcond[1]=((((-1.0)*r22*x3911))+((x3905*x3908))+(((-1.0)*x3910*x3912)));
evalcond[2]=((((-1.0)*x3907*x3912))+((r11*x3913))+(((-1.0)*r12*x3911)));
evalcond[3]=((-1.0)+(((-1.0)*x3906*x3912))+(((-1.0)*r02*x3911))+((r01*x3913)));
evalcond[4]=(((r22*x3905))+((x3904*x3908))+((sj1*sj2))+(((-1.0)*x3910*x3911))+(((-1.0)*cj1*x3909)));
evalcond[5]=((((-1.0)*sj1*x3909))+(((-1.0)*cj1*sj2))+(((-1.0)*x3907*x3911))+((r12*x3905))+((r11*x3914)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x3915=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3915;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x3915);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x3916=((1.0)*cj5);
IkReal x3917=((((-1.0)*r21*x3916))+(((-1.0)*r20*sj5)));
j4eval[0]=x3917;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x3916))))));
j4eval[2]=IKsign(x3917);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x3918=cj5*cj5;
IkReal x3919=r01*r01;
IkReal x3920=(r01*sj5);
IkReal x3921=(cj5*r00);
IkReal x3922=((((-1.0)*(r02*r02)))+(((-1.0)*x3918*(r00*r00)))+(((-1.0)*x3919))+((x3918*x3919))+(((2.0)*x3920*x3921)));
j4eval[0]=x3922;
j4eval[1]=IKsign(x3922);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x3921))+x3920))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3923=cj5*cj5;
IkReal x3924=r01*r01;
IkReal x3925=(r01*sj5);
IkReal x3926=(cj5*r00);
CheckValue<IkReal> x3927=IKPowWithIntegerCheck(IKsign(((((-1.0)*x3924))+(((2.0)*x3925*x3926))+(((-1.0)*(r02*r02)))+(((-1.0)*x3923*(r00*r00)))+((x3923*x3924)))),-1);
if(!x3927.valid){
continue;
}
CheckValue<IkReal> x3928 = IKatan2WithCheck(IkReal(((((-1.0)*x3926))+x3925)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x3928.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3927.value)))+(x3928.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3929=IKcos(j4);
IkReal x3930=IKsin(j4);
IkReal x3931=(cj5*r00);
IkReal x3932=(cj5*r10);
IkReal x3933=(r21*sj5);
IkReal x3934=(cj5*r20);
IkReal x3935=((1.0)*x3929);
IkReal x3936=((1.0)*x3930);
IkReal x3937=(sj5*x3930);
IkReal x3938=(sj5*x3929);
evalcond[0]=(((r01*x3938))+(((-1.0)*x3931*x3935))+((r02*x3930)));
evalcond[1]=((((-1.0)*x3934*x3936))+(((-1.0)*r22*x3935))+((x3930*x3933)));
evalcond[2]=((((-1.0)*x3932*x3936))+(((-1.0)*r12*x3935))+((r11*x3937)));
evalcond[3]=((1.0)+((r01*x3937))+(((-1.0)*x3931*x3936))+(((-1.0)*r02*x3935)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x3932*x3935))+((r12*x3930))+((r11*x3938)));
evalcond[5]=(((r22*x3930))+(((-1.0)*x3934*x3935))+((x3929*x3933))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3939=((1.0)*cj5);
CheckValue<IkReal> x3940=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x3939))+(((-1.0)*r20*sj5)))),-1);
if(!x3940.valid){
continue;
}
CheckValue<IkReal> x3941 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x3939)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3941.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3940.value)))+(x3941.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3942=IKcos(j4);
IkReal x3943=IKsin(j4);
IkReal x3944=(cj5*r00);
IkReal x3945=(cj5*r10);
IkReal x3946=(r21*sj5);
IkReal x3947=(cj5*r20);
IkReal x3948=((1.0)*x3942);
IkReal x3949=((1.0)*x3943);
IkReal x3950=(sj5*x3943);
IkReal x3951=(sj5*x3942);
evalcond[0]=(((r01*x3951))+(((-1.0)*x3944*x3948))+((r02*x3943)));
evalcond[1]=((((-1.0)*r22*x3948))+((x3943*x3946))+(((-1.0)*x3947*x3949)));
evalcond[2]=((((-1.0)*x3945*x3949))+(((-1.0)*r12*x3948))+((r11*x3950)));
evalcond[3]=((1.0)+((r01*x3950))+(((-1.0)*r02*x3948))+(((-1.0)*x3944*x3949)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x3945*x3948))+((r11*x3951))+((r12*x3943)));
evalcond[5]=(((r22*x3943))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x3942*x3946))+(((-1.0)*x3947*x3948)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3952 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3952.valid){
continue;
}
CheckValue<IkReal> x3953=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3953.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3952.value)+(((1.5707963267949)*(x3953.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3954=IKcos(j4);
IkReal x3955=IKsin(j4);
IkReal x3956=(cj5*r00);
IkReal x3957=(cj5*r10);
IkReal x3958=(r21*sj5);
IkReal x3959=(cj5*r20);
IkReal x3960=((1.0)*x3954);
IkReal x3961=((1.0)*x3955);
IkReal x3962=(sj5*x3955);
IkReal x3963=(sj5*x3954);
evalcond[0]=((((-1.0)*x3956*x3960))+((r02*x3955))+((r01*x3963)));
evalcond[1]=((((-1.0)*x3959*x3961))+(((-1.0)*r22*x3960))+((x3955*x3958)));
evalcond[2]=(((r11*x3962))+(((-1.0)*x3957*x3961))+(((-1.0)*r12*x3960)));
evalcond[3]=((1.0)+(((-1.0)*r02*x3960))+(((-1.0)*x3956*x3961))+((r01*x3962)));
evalcond[4]=(((cj2*sj1))+((r11*x3963))+((cj1*sj2))+(((-1.0)*x3957*x3960))+((r12*x3955)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x3959*x3960))+((r22*x3955))+((x3954*x3958)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x3964=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x3964);
rxp1_1=(px*r21);
rxp1_2=(r11*x3964);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3965=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x3965);
rxp1_1=(px*r21);
rxp1_2=(r11*x3965);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3966=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x3966);
rxp1_1=(px*r21);
rxp1_2=(r11*x3966);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x3969=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x3969.valid){
continue;
}
IkReal x3967=x3969.value;
IkReal x3968=(sj0*x3967);
cj4array[0]=(((cj1*sj2*x3968))+((cj2*sj1*x3968)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x3970=IKsin(j4);
IkReal x3971=IKcos(j4);
IkReal x3972=(r21*sj5);
IkReal x3973=((1.0)*cj5*r20);
evalcond[0]=(r02*x3970);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x3971)));
evalcond[2]=(((x3970*x3972))+(((-1.0)*x3970*x3973)));
evalcond[3]=((((-1.0)*cj5*r10*x3970))+((r11*sj5*x3970)));
evalcond[4]=(((x3971*x3972))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x3971*x3973)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x3975=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x3975.valid){
continue;
}
IkReal x3974=x3975.value;
cj4array[0]=((((-1.0)*sj1*sj2*x3974))+((cj1*cj2*x3974)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x3976=IKsin(j4);
IkReal x3977=IKcos(j4);
IkReal x3978=((1.0)*sj0);
IkReal x3979=((1.0)*cj5);
IkReal x3980=(sj5*x3976);
evalcond[0]=(r02*x3976);
evalcond[1]=((((-1.0)*x3978))+(((-1.0)*r02*x3977)));
evalcond[2]=(((r21*x3980))+(((-1.0)*r20*x3976*x3979)));
evalcond[3]=(((r11*x3980))+(((-1.0)*r10*x3976*x3979)));
evalcond[4]=((((-1.0)*cj2*sj1*x3978))+((r11*sj5*x3977))+(((-1.0)*cj1*sj2*x3978))+(((-1.0)*r10*x3977*x3979)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x3981=IKPowWithIntegerCheck(r02,-1);
if(!x3981.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x3981.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x3982=IKsin(j4);
IkReal x3983=IKcos(j4);
IkReal x3984=((1.0)*cj1);
IkReal x3985=(r21*sj5);
IkReal x3986=((1.0)*cj5);
IkReal x3987=(r11*sj5);
evalcond[0]=(r02*x3982);
evalcond[1]=((((-1.0)*r20*x3982*x3986))+((x3982*x3985)));
evalcond[2]=((((-1.0)*r10*x3982*x3986))+((x3982*x3987)));
evalcond[3]=((((-1.0)*cj2*x3984))+((x3983*x3985))+(((-1.0)*r20*x3983*x3986))+((sj1*sj2)));
evalcond[4]=(((x3983*x3987))+(((-1.0)*cj2*sj0*sj1))+(((-1.0)*sj0*sj2*x3984))+(((-1.0)*r10*x3983*x3986)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3988=((1.0)*sj0);
IkReal x3989=((1.0)*cj0);
CheckValue<IkReal> x3990 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x3988))+(((-1.0)*r02*x3989)))),IkReal((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x3988))+(((-1.0)*r01*sj5*x3989)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3990.valid){
continue;
}
CheckValue<IkReal> x3991=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x3991.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3990.value)+(((1.5707963267949)*(x3991.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3992=IKsin(j4);
IkReal x3993=IKcos(j4);
IkReal x3994=(cj5*r00);
IkReal x3995=(cj5*r10);
IkReal x3996=(r21*sj5);
IkReal x3997=((1.0)*cj2);
IkReal x3998=((1.0)*sj0);
IkReal x3999=(cj1*sj2);
IkReal x4000=(cj5*r20);
IkReal x4001=((1.0)*x3993);
IkReal x4002=((1.0)*x3992);
IkReal x4003=(sj5*x3992);
IkReal x4004=(sj5*x3993);
evalcond[0]=((((-1.0)*r22*x4001))+(((-1.0)*x4000*x4002))+((x3992*x3996)));
evalcond[1]=(cj0+(((-1.0)*x3995*x4002))+(((-1.0)*r12*x4001))+((r11*x4003)));
evalcond[2]=((((-1.0)*r02*x4001))+(((-1.0)*x3998))+((r01*x4003))+(((-1.0)*x3994*x4002)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*x4000*x4001))+((r22*x3992))+((x3993*x3996))+(((-1.0)*cj1*x3997)));
evalcond[4]=(((r01*x4004))+(((-1.0)*x3994*x4001))+(((-1.0)*cj0*sj1*x3997))+((r02*x3992))+(((-1.0)*cj0*x3999)));
evalcond[5]=((((-1.0)*x3998*x3999))+(((-1.0)*x3995*x4001))+((r12*x3992))+(((-1.0)*sj0*sj1*x3997))+((r11*x4004)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4005=((1.0)*cj5);
CheckValue<IkReal> x4006 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x4005)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4006.valid){
continue;
}
CheckValue<IkReal> x4007=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x4005)))),-1);
if(!x4007.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4006.value)+(((1.5707963267949)*(x4007.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4008=IKsin(j4);
IkReal x4009=IKcos(j4);
IkReal x4010=(cj5*r00);
IkReal x4011=(cj5*r10);
IkReal x4012=(r21*sj5);
IkReal x4013=((1.0)*cj2);
IkReal x4014=((1.0)*sj0);
IkReal x4015=(cj1*sj2);
IkReal x4016=(cj5*r20);
IkReal x4017=((1.0)*x4009);
IkReal x4018=((1.0)*x4008);
IkReal x4019=(sj5*x4008);
IkReal x4020=(sj5*x4009);
evalcond[0]=((((-1.0)*r22*x4017))+((x4008*x4012))+(((-1.0)*x4016*x4018)));
evalcond[1]=((((-1.0)*r12*x4017))+cj0+(((-1.0)*x4011*x4018))+((r11*x4019)));
evalcond[2]=((((-1.0)*r02*x4017))+((r01*x4019))+(((-1.0)*x4014))+(((-1.0)*x4010*x4018)));
evalcond[3]=((((-1.0)*cj1*x4013))+((sj1*sj2))+((r22*x4008))+((x4009*x4012))+(((-1.0)*x4016*x4017)));
evalcond[4]=((((-1.0)*cj0*x4015))+(((-1.0)*cj0*sj1*x4013))+((r01*x4020))+((r02*x4008))+(((-1.0)*x4010*x4017)));
evalcond[5]=(((r12*x4008))+(((-1.0)*sj0*sj1*x4013))+(((-1.0)*x4011*x4017))+(((-1.0)*x4014*x4015))+((r11*x4020)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4021=((1.0)*cj5);
CheckValue<IkReal> x4022 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4021)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4022.valid){
continue;
}
CheckValue<IkReal> x4023=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x4021)))),-1);
if(!x4023.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4022.value)+(((1.5707963267949)*(x4023.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4024=IKsin(j4);
IkReal x4025=IKcos(j4);
IkReal x4026=(cj5*r00);
IkReal x4027=(cj5*r10);
IkReal x4028=(r21*sj5);
IkReal x4029=((1.0)*cj2);
IkReal x4030=((1.0)*sj0);
IkReal x4031=(cj1*sj2);
IkReal x4032=(cj5*r20);
IkReal x4033=((1.0)*x4025);
IkReal x4034=((1.0)*x4024);
IkReal x4035=(sj5*x4024);
IkReal x4036=(sj5*x4025);
evalcond[0]=((((-1.0)*r22*x4033))+((x4024*x4028))+(((-1.0)*x4032*x4034)));
evalcond[1]=(cj0+(((-1.0)*x4027*x4034))+(((-1.0)*r12*x4033))+((r11*x4035)));
evalcond[2]=((((-1.0)*x4026*x4034))+((r01*x4035))+(((-1.0)*x4030))+(((-1.0)*r02*x4033)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*cj1*x4029))+((x4025*x4028))+((r22*x4024))+(((-1.0)*x4032*x4033)));
evalcond[4]=((((-1.0)*cj0*x4031))+(((-1.0)*cj0*sj1*x4029))+(((-1.0)*x4026*x4033))+((r01*x4036))+((r02*x4024)));
evalcond[5]=((((-1.0)*sj0*sj1*x4029))+(((-1.0)*x4030*x4031))+(((-1.0)*x4027*x4033))+((r12*x4024))+((r11*x4036)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4037=r21*r21;
IkReal x4038=cj5*cj5;
IkReal x4039=(sj1*sj2);
IkReal x4040=(r21*sj5);
IkReal x4041=(cj1*cj2);
IkReal x4042=(cj5*r20);
CheckValue<IkReal> x4043=IKPowWithIntegerCheck(IKsign((((x4037*x4038))+(((-1.0)*x4038*(r20*r20)))+(((-1.0)*(r22*r22)))+(((-1.0)*x4037))+(((2.0)*x4040*x4042)))),-1);
if(!x4043.valid){
continue;
}
CheckValue<IkReal> x4044 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x4041))+((r22*x4039)))),IkReal((((x4041*x4042))+((x4039*x4040))+(((-1.0)*x4040*x4041))+(((-1.0)*x4039*x4042)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4044.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4043.value)))+(x4044.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x4045=IKsin(j4);
IkReal x4046=IKcos(j4);
IkReal x4047=(r21*sj5);
IkReal x4048=(cj5*r20);
IkReal x4049=((1.0)*x4046);
evalcond[0]=(((x4045*x4047))+(((-1.0)*x4045*x4048))+(((-1.0)*r22*x4049)));
evalcond[1]=(((r22*x4045))+((x4046*x4047))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x4048*x4049)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x4050=(cj5*sj4);
IkReal x4051=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+(((-1.0)*r00*x4050))+((r01*x4051)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x4050))+((cj4*r12))+(((-1.0)*r11*x4051)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+(((-1.0)*r00*x4050))+((r01*x4051))))+IKsqr((((r10*x4050))+((cj4*r12))+(((-1.0)*r11*x4051))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+(((-1.0)*r00*x4050))+((r01*x4051))), (((r10*x4050))+((cj4*r12))+(((-1.0)*r11*x4051))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x4052=IKcos(j0);
IkReal x4053=IKsin(j0);
IkReal x4054=((0.1)*sj5);
IkReal x4055=((0.392)*sj2);
IkReal x4056=(cj5*r11);
IkReal x4057=((1.0)*sj2);
IkReal x4058=(r11*sj5);
IkReal x4059=((1.0)*sj5);
IkReal x4060=((0.392)*cj2);
IkReal x4061=((1.0)*cj2);
IkReal x4062=((1.0)*cj5);
IkReal x4063=((1.0)*cj4);
IkReal x4064=(r01*sj5);
IkReal x4065=(sj1*x4053);
IkReal x4066=(cj1*x4053);
IkReal x4067=(cj1*x4052);
IkReal x4068=(cj4*x4062);
IkReal x4069=(sj1*x4052);
evalcond[0]=((((-1.0)*r12*x4063))+x4052+((sj4*x4058))+(((-1.0)*r10*sj4*x4062)));
evalcond[1]=(((sj4*x4064))+(((-1.0)*x4053))+(((-1.0)*r02*x4063))+(((-1.0)*r00*sj4*x4062)));
evalcond[2]=(((sj2*x4069))+(((-1.0)*x4061*x4067))+(((-1.0)*r00*x4059))+(((-1.0)*r01*x4062)));
evalcond[3]=(((sj2*x4065))+(((-1.0)*x4061*x4066))+(((-1.0)*r10*x4059))+(((-1.0)*x4056)));
evalcond[4]=((((-1.0)*x4061*x4069))+((r02*sj4))+((cj4*x4064))+(((-1.0)*r00*x4068))+(((-1.0)*x4057*x4067)));
evalcond[5]=((((-1.0)*x4061*x4065))+(((-1.0)*r10*x4068))+((cj4*x4058))+((r12*sj4))+(((-1.0)*x4057*x4066)));
evalcond[6]=((((-1.0)*x4055*x4069))+((x4060*x4067))+(((0.425)*x4067))+(((-0.1)*cj5*r01))+(((1.4e-7)*x4069))+(((-0.134)*x4053))+(((-1.0)*px))+(((-1.0)*r00*x4054)));
evalcond[7]=((((-1.0)*x4055*x4065))+((x4060*x4066))+(((0.425)*x4066))+(((1.4e-7)*x4065))+(((-1.0)*py))+(((-1.0)*r10*x4054))+(((0.134)*x4052))+(((-0.1)*x4056)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x4070 = IKatan2WithCheck(IkReal((((cj5*r11))+((r10*sj5)))),IkReal((((r00*sj5))+((cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4070.valid){
continue;
}
CheckValue<IkReal> x4071=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj1*cj2))+((sj1*sj2)))),-1);
if(!x4071.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x4070.value)+(((1.5707963267949)*(x4071.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x4072=IKcos(j0);
IkReal x4073=IKsin(j0);
IkReal x4074=((0.1)*sj5);
IkReal x4075=(sj1*sj2);
IkReal x4076=(cj5*r11);
IkReal x4077=((1.4e-7)*sj1);
IkReal x4078=(cj1*cj2);
IkReal x4079=((1.0)*sj5);
IkReal x4080=((0.425)*cj1);
IkReal x4081=(cj5*r01);
IkReal x4082=((0.392)*x4073);
IkReal x4083=((0.392)*x4072);
evalcond[0]=((((-1.0)*r00*x4079))+((x4072*x4075))+(((-1.0)*x4081))+(((-1.0)*x4072*x4078)));
evalcond[1]=((((-1.0)*r10*x4079))+(((-1.0)*x4076))+((x4073*x4075))+(((-1.0)*x4073*x4078)));
evalcond[2]=((((-1.0)*r00*x4074))+(((-0.134)*x4073))+(((-0.1)*x4081))+((x4072*x4080))+((x4072*x4077))+(((-1.0)*x4075*x4083))+(((-1.0)*px))+((x4078*x4083)));
evalcond[3]=((((-1.0)*r10*x4074))+(((-0.1)*x4076))+(((0.134)*x4072))+(((-1.0)*x4075*x4082))+(((-1.0)*py))+((x4073*x4077))+((x4073*x4080))+((x4078*x4082)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x4084=((1.0)*cj5);
IkReal x4085=((((-1.0)*r00*sj5))+(((-1.0)*r01*x4084)));
j4eval[0]=x4085;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4084))))));
j4eval[2]=IKsign(x4085);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x4086=((1.0)*cj5);
IkReal x4087=((((-1.0)*r11*x4086))+(((-1.0)*r10*sj5)));
j4eval[0]=x4087;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x4086))))));
j4eval[2]=IKsign(x4087);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x4088=((1.0)*sj0);
IkReal x4089=((1.0)*cj0);
IkReal x4090=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x4090;
j4eval[1]=((IKabs(((((-1.0)*r12*x4088))+(((-1.0)*r02*x4089)))))+(IKabs((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x4089))+(((-1.0)*r11*sj5*x4088))))));
j4eval[2]=IKsign(x4090);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x4091=((-1.0)*r20);
IkReal x4093 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x4093)==0){
continue;
}
IkReal x4092=pow(x4093,-0.5);
CheckValue<IkReal> x4094 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x4091),IKFAST_ATAN2_MAGTHRESH);
if(!x4094.valid){
continue;
}
IkReal gconst96=((-1.0)*(x4094.value));
IkReal gconst97=(r21*x4092);
IkReal gconst98=(x4091*x4092);
CheckValue<IkReal> x4095 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4095.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x4095.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x4096=((-1.0)*r20);
IkReal x4097=x4092;
CheckValue<IkReal> x4099 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x4096),IKFAST_ATAN2_MAGTHRESH);
if(!x4099.valid){
continue;
}
IkReal x4098=((-1.0)*(x4099.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x4098;
IkReal gconst96=x4098;
IkReal gconst97=(r21*x4097);
IkReal gconst98=(x4096*x4097);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4100=((-1.0)*r20);
IkReal x4101=x4092;
CheckValue<IkReal> x4103 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x4100),IKFAST_ATAN2_MAGTHRESH);
if(!x4103.valid){
continue;
}
IkReal x4102=((-1.0)*(x4103.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x4102;
IkReal gconst96=x4102;
IkReal gconst97=(r21*x4101);
IkReal gconst98=(x4100*x4101);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x4104=((-1.0)*r20);
IkReal x4105=x4092;
CheckValue<IkReal> x4107 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x4104),IKFAST_ATAN2_MAGTHRESH);
if(!x4107.valid){
continue;
}
IkReal x4106=((-1.0)*(x4107.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x4106;
IkReal gconst96=x4106;
IkReal gconst97=(r21*x4105);
IkReal gconst98=(x4104*x4105);
IkReal x4108=((1.0)*(r22*r22));
CheckValue<IkReal> x4112=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x4108))),-1);
if(!x4112.valid){
continue;
}
IkReal x4109=x4112.value;
IkReal x4110=((1.0)*x4109);
IkReal x4111=((((-1.0)*x4110*(r20*r20*r20*r20)))+(((-2.0)*x4109*(r20*r20)*(r21*r21)))+(((-1.0)*x4110*(r21*r21*r21*r21)))+(((-1.0)*x4108)));
j4eval[0]=x4111;
j4eval[1]=IKsign(x4111);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4113=(cj1*cj2);
IkReal x4114=(gconst98*r20);
IkReal x4115=(sj1*sj2);
IkReal x4116=(gconst97*r21);
CheckValue<IkReal> x4117=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x4114*x4114)))+(((-1.0)*(r22*r22)))+(((-1.0)*(x4116*x4116)))+(((2.0)*x4114*x4116)))),-1);
if(!x4117.valid){
continue;
}
CheckValue<IkReal> x4118 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x4113))+((r22*x4115)))),IkReal(((((-1.0)*x4113*x4116))+(((-1.0)*x4114*x4115))+((x4115*x4116))+((x4113*x4114)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4118.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4117.value)))+(x4118.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4119=IKsin(j4);
IkReal x4120=IKcos(j4);
IkReal x4121=(gconst98*r10);
IkReal x4122=(gconst97*r21);
IkReal x4123=(gconst98*r20);
IkReal x4124=((1.0)*cj2);
IkReal x4125=((1.0)*sj0);
IkReal x4126=(gconst98*r00);
IkReal x4127=(cj1*sj2);
IkReal x4128=((1.0)*x4120);
IkReal x4129=((1.0)*x4119);
IkReal x4130=(gconst97*x4119);
IkReal x4131=(gconst97*x4120);
evalcond[0]=((((-1.0)*r22*x4128))+(((-1.0)*x4123*x4129))+((x4119*x4122)));
evalcond[1]=((((-1.0)*r12*x4128))+cj0+((r11*x4130))+(((-1.0)*x4121*x4129)));
evalcond[2]=((((-1.0)*x4125))+((r01*x4130))+(((-1.0)*x4126*x4129))+(((-1.0)*r02*x4128)));
evalcond[3]=(((x4120*x4122))+(((-1.0)*cj1*x4124))+((sj1*sj2))+(((-1.0)*x4123*x4128))+((r22*x4119)));
evalcond[4]=((((-1.0)*cj0*sj1*x4124))+((r02*x4119))+((r01*x4131))+(((-1.0)*cj0*x4127))+(((-1.0)*x4126*x4128)));
evalcond[5]=(((r12*x4119))+((r11*x4131))+(((-1.0)*x4121*x4128))+(((-1.0)*sj0*sj1*x4124))+(((-1.0)*x4125*x4127)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4132=((1.0)*gconst98);
CheckValue<IkReal> x4133=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4132))+(((-1.0)*gconst97*r10)))),-1);
if(!x4133.valid){
continue;
}
CheckValue<IkReal> x4134 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst97*r21*sj0))+(((-1.0)*r20*sj0*x4132)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4134.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4133.value)))+(x4134.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4135=IKsin(j4);
IkReal x4136=IKcos(j4);
IkReal x4137=(gconst98*r10);
IkReal x4138=(gconst97*r21);
IkReal x4139=(gconst98*r20);
IkReal x4140=((1.0)*cj2);
IkReal x4141=((1.0)*sj0);
IkReal x4142=(gconst98*r00);
IkReal x4143=(cj1*sj2);
IkReal x4144=((1.0)*x4136);
IkReal x4145=((1.0)*x4135);
IkReal x4146=(gconst97*x4135);
IkReal x4147=(gconst97*x4136);
evalcond[0]=((((-1.0)*x4139*x4145))+((x4135*x4138))+(((-1.0)*r22*x4144)));
evalcond[1]=(cj0+((r11*x4146))+(((-1.0)*r12*x4144))+(((-1.0)*x4137*x4145)));
evalcond[2]=(((r01*x4146))+(((-1.0)*r02*x4144))+(((-1.0)*x4142*x4145))+(((-1.0)*x4141)));
evalcond[3]=(((x4136*x4138))+((r22*x4135))+((sj1*sj2))+(((-1.0)*cj1*x4140))+(((-1.0)*x4139*x4144)));
evalcond[4]=(((r01*x4147))+(((-1.0)*x4142*x4144))+(((-1.0)*cj0*x4143))+(((-1.0)*cj0*sj1*x4140))+((r02*x4135)));
evalcond[5]=((((-1.0)*x4141*x4143))+(((-1.0)*sj0*sj1*x4140))+((r11*x4147))+((r12*x4135))+(((-1.0)*x4137*x4144)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4148=((1.0)*gconst98);
CheckValue<IkReal> x4149=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4148))+(((-1.0)*gconst97*r00)))),-1);
if(!x4149.valid){
continue;
}
CheckValue<IkReal> x4150 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst97*r21))+(((-1.0)*cj0*r20*x4148)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4150.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4149.value)))+(x4150.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4151=IKsin(j4);
IkReal x4152=IKcos(j4);
IkReal x4153=(gconst98*r10);
IkReal x4154=(gconst97*r21);
IkReal x4155=(gconst98*r20);
IkReal x4156=((1.0)*cj2);
IkReal x4157=((1.0)*sj0);
IkReal x4158=(gconst98*r00);
IkReal x4159=(cj1*sj2);
IkReal x4160=((1.0)*x4152);
IkReal x4161=((1.0)*x4151);
IkReal x4162=(gconst97*x4151);
IkReal x4163=(gconst97*x4152);
evalcond[0]=((((-1.0)*x4155*x4161))+((x4151*x4154))+(((-1.0)*r22*x4160)));
evalcond[1]=(cj0+(((-1.0)*x4153*x4161))+(((-1.0)*r12*x4160))+((r11*x4162)));
evalcond[2]=(((r01*x4162))+(((-1.0)*r02*x4160))+(((-1.0)*x4158*x4161))+(((-1.0)*x4157)));
evalcond[3]=(((x4152*x4154))+((r22*x4151))+((sj1*sj2))+(((-1.0)*x4155*x4160))+(((-1.0)*cj1*x4156)));
evalcond[4]=(((r01*x4163))+((r02*x4151))+(((-1.0)*x4158*x4160))+(((-1.0)*cj0*sj1*x4156))+(((-1.0)*cj0*x4159)));
evalcond[5]=((((-1.0)*x4153*x4160))+((r12*x4151))+(((-1.0)*x4157*x4159))+(((-1.0)*sj0*sj1*x4156))+((r11*x4163)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4164=((-1.0)*r21);
IkReal x4166 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x4166)==0){
continue;
}
IkReal x4165=pow(x4166,-0.5);
CheckValue<IkReal> x4167 = IKatan2WithCheck(IkReal(x4164),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4167.valid){
continue;
}
IkReal gconst99=((3.14159265358979)+(((-1.0)*(x4167.value))));
IkReal gconst100=(x4164*x4165);
IkReal gconst101=((1.0)*r20*x4165);
CheckValue<IkReal> x4168 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4168.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x4168.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x4169=((-1.0)*r21);
CheckValue<IkReal> x4172 = IKatan2WithCheck(IkReal(x4169),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4172.valid){
continue;
}
IkReal x4170=((1.0)*(x4172.value));
IkReal x4171=x4165;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x4170)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x4170)));
IkReal gconst100=(x4169*x4171);
IkReal gconst101=((1.0)*r20*x4171);
IkReal x4173=r22*r22;
IkReal x4174=((1.0)*x4173);
CheckValue<IkReal> x4178=IKPowWithIntegerCheck(((-1.0)+x4173),-1);
if(!x4178.valid){
continue;
}
IkReal x4175=x4178.value;
if((((1.0)+(((-1.0)*x4174)))) < -0.00001)
continue;
IkReal x4176=IKsqrt(((1.0)+(((-1.0)*x4174))));
IkReal x4177=(cj0*x4175*x4176);
j4eval[0]=((IKabs(((((-1.0)*x4174*x4177))+x4177)))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4179=((-1.0)*r21);
CheckValue<IkReal> x4182 = IKatan2WithCheck(IkReal(x4179),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4182.valid){
continue;
}
IkReal x4180=((1.0)*(x4182.value));
IkReal x4181=x4165;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x4180)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x4180)));
IkReal gconst100=(x4179*x4181);
IkReal gconst101=((1.0)*r20*x4181);
IkReal x4183=r22*r22;
IkReal x4184=((1.0)*x4183);
CheckValue<IkReal> x4188=IKPowWithIntegerCheck(((-1.0)+x4183),-1);
if(!x4188.valid){
continue;
}
IkReal x4185=x4188.value;
if((((1.0)+(((-1.0)*x4184)))) < -0.00001)
continue;
IkReal x4186=IKsqrt(((1.0)+(((-1.0)*x4184))));
IkReal x4187=(sj0*x4185*x4186);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x4187+(((-1.0)*x4184*x4187))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x4189=((-1.0)*r21);
CheckValue<IkReal> x4192 = IKatan2WithCheck(IkReal(x4189),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4192.valid){
continue;
}
IkReal x4190=((1.0)*(x4192.value));
IkReal x4191=x4165;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x4190)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x4190)));
IkReal gconst100=(x4189*x4191);
IkReal gconst101=((1.0)*r20*x4191);
IkReal x4193=r22*r22;
IkReal x4194=(r12*sj0);
IkReal x4195=(cj0*r02);
CheckValue<IkReal> x4199=IKPowWithIntegerCheck(((-1.0)+x4193),-1);
if(!x4199.valid){
continue;
}
IkReal x4196=x4199.value;
if((((1.0)+(((-1.0)*x4193)))) < -0.00001)
continue;
IkReal x4197=IKsqrt(((1.0)+(((-1.0)*x4193))));
IkReal x4198=(r22*x4196*x4197);
j4eval[0]=0;
j4eval[1]=((IKabs(((((-1.0)*x4194))+(((-1.0)*x4195)))))+(IKabs((((x4194*x4198))+((x4195*x4198))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4200=((1.0)*sj0);
IkReal x4201=((1.0)*gconst100);
CheckValue<IkReal> x4202=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x4201))+(((-1.0)*gconst101*r21)))),-1);
if(!x4202.valid){
continue;
}
CheckValue<IkReal> x4203 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x4200))+(((-1.0)*cj0*r02)))),IkReal((((gconst101*r10*sj0))+((cj0*gconst101*r00))+(((-1.0)*cj0*r01*x4201))+(((-1.0)*gconst100*r11*x4200)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4203.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4202.value)))+(x4203.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4204=IKsin(j4);
IkReal x4205=IKcos(j4);
IkReal x4206=(gconst101*r20);
IkReal x4207=(gconst101*r10);
IkReal x4208=((1.0)*cj2);
IkReal x4209=(gconst101*r00);
IkReal x4210=((1.0)*sj0);
IkReal x4211=(cj1*sj2);
IkReal x4212=((1.0)*x4205);
IkReal x4213=((1.0)*x4204);
IkReal x4214=(gconst100*x4204);
IkReal x4215=(gconst100*x4205);
evalcond[0]=((((-1.0)*r22*x4212))+(((-1.0)*x4206*x4213))+((r21*x4214)));
evalcond[1]=(cj0+((r11*x4214))+(((-1.0)*r12*x4212))+(((-1.0)*x4207*x4213)));
evalcond[2]=((((-1.0)*r02*x4212))+((r01*x4214))+(((-1.0)*x4210))+(((-1.0)*x4209*x4213)));
evalcond[3]=(((r22*x4204))+((sj1*sj2))+(((-1.0)*cj1*x4208))+(((-1.0)*x4206*x4212))+((r21*x4215)));
evalcond[4]=((((-1.0)*cj0*x4211))+((r02*x4204))+(((-1.0)*cj0*sj1*x4208))+((r01*x4215))+(((-1.0)*x4209*x4212)));
evalcond[5]=((((-1.0)*x4210*x4211))+((r11*x4215))+(((-1.0)*x4207*x4212))+(((-1.0)*sj0*sj1*x4208))+((r12*x4204)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4216=((1.0)*gconst101);
CheckValue<IkReal> x4217 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x4216))+((gconst100*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4217.valid){
continue;
}
CheckValue<IkReal> x4218=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4216))+(((-1.0)*gconst100*r10)))),-1);
if(!x4218.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4217.value)+(((1.5707963267949)*(x4218.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4219=IKsin(j4);
IkReal x4220=IKcos(j4);
IkReal x4221=(gconst101*r20);
IkReal x4222=(gconst101*r10);
IkReal x4223=((1.0)*cj2);
IkReal x4224=(gconst101*r00);
IkReal x4225=((1.0)*sj0);
IkReal x4226=(cj1*sj2);
IkReal x4227=((1.0)*x4220);
IkReal x4228=((1.0)*x4219);
IkReal x4229=(gconst100*x4219);
IkReal x4230=(gconst100*x4220);
evalcond[0]=((((-1.0)*x4221*x4228))+(((-1.0)*r22*x4227))+((r21*x4229)));
evalcond[1]=(cj0+(((-1.0)*r12*x4227))+(((-1.0)*x4222*x4228))+((r11*x4229)));
evalcond[2]=((((-1.0)*x4225))+(((-1.0)*x4224*x4228))+((r01*x4229))+(((-1.0)*r02*x4227)));
evalcond[3]=(((r22*x4219))+((sj1*sj2))+(((-1.0)*x4221*x4227))+((r21*x4230))+(((-1.0)*cj1*x4223)));
evalcond[4]=((((-1.0)*x4224*x4227))+((r01*x4230))+((r02*x4219))+(((-1.0)*cj0*x4226))+(((-1.0)*cj0*sj1*x4223)));
evalcond[5]=(((r12*x4219))+(((-1.0)*sj0*sj1*x4223))+(((-1.0)*x4222*x4227))+(((-1.0)*x4225*x4226))+((r11*x4230)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4231=((1.0)*gconst101);
CheckValue<IkReal> x4232=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst100*r00))+(((-1.0)*r01*x4231)))),-1);
if(!x4232.valid){
continue;
}
CheckValue<IkReal> x4233 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst100*r21))+(((-1.0)*cj0*r20*x4231)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4233.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4232.value)))+(x4233.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4234=IKsin(j4);
IkReal x4235=IKcos(j4);
IkReal x4236=(gconst101*r20);
IkReal x4237=(gconst101*r10);
IkReal x4238=((1.0)*cj2);
IkReal x4239=(gconst101*r00);
IkReal x4240=((1.0)*sj0);
IkReal x4241=(cj1*sj2);
IkReal x4242=((1.0)*x4235);
IkReal x4243=((1.0)*x4234);
IkReal x4244=(gconst100*x4234);
IkReal x4245=(gconst100*x4235);
evalcond[0]=((((-1.0)*r22*x4242))+(((-1.0)*x4236*x4243))+((r21*x4244)));
evalcond[1]=(cj0+(((-1.0)*r12*x4242))+(((-1.0)*x4237*x4243))+((r11*x4244)));
evalcond[2]=(((r01*x4244))+(((-1.0)*x4240))+(((-1.0)*x4239*x4243))+(((-1.0)*r02*x4242)));
evalcond[3]=(((sj1*sj2))+((r22*x4234))+(((-1.0)*x4236*x4242))+((r21*x4245))+(((-1.0)*cj1*x4238)));
evalcond[4]=(((r01*x4245))+((r02*x4234))+(((-1.0)*cj0*x4241))+(((-1.0)*x4239*x4242))+(((-1.0)*cj0*sj1*x4238)));
evalcond[5]=(((r12*x4234))+(((-1.0)*x4240*x4241))+(((-1.0)*sj0*sj1*x4238))+(((-1.0)*x4237*x4242))+((r11*x4245)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4246=((-1.0)*r10);
IkReal x4248 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x4248)==0){
continue;
}
IkReal x4247=pow(x4248,-0.5);
CheckValue<IkReal> x4249 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x4246),IKFAST_ATAN2_MAGTHRESH);
if(!x4249.valid){
continue;
}
IkReal gconst102=((-1.0)*(x4249.value));
IkReal gconst103=(r11*x4247);
IkReal gconst104=(x4246*x4247);
CheckValue<IkReal> x4250 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4250.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x4250.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x4251=((-1.0)*r10);
IkReal x4252=x4247;
CheckValue<IkReal> x4254 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x4251),IKFAST_ATAN2_MAGTHRESH);
if(!x4254.valid){
continue;
}
IkReal x4253=((-1.0)*(x4254.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst103;
cj5=gconst104;
j5=x4253;
IkReal gconst102=x4253;
IkReal gconst103=(r11*x4252);
IkReal gconst104=(x4251*x4252);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4255=((1.0)*sj0);
IkReal x4256=((1.0)*gconst103);
CheckValue<IkReal> x4257 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x4255)))),IkReal((((gconst104*r10*sj0))+(((-1.0)*gconst103*r11*x4255))+(((-1.0)*cj0*r01*x4256))+((cj0*gconst104*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4257.valid){
continue;
}
CheckValue<IkReal> x4258=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst104*r21))+(((-1.0)*r20*x4256)))),-1);
if(!x4258.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4257.value)+(((1.5707963267949)*(x4258.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4259=IKsin(j4);
IkReal x4260=IKcos(j4);
IkReal x4261=(gconst103*r11);
IkReal x4262=((1.0)*cj2);
IkReal x4263=((1.0)*sj0);
IkReal x4264=(cj1*sj2);
IkReal x4265=((1.0)*x4260);
IkReal x4266=(gconst103*x4260);
IkReal x4267=(gconst103*x4259);
IkReal x4268=((1.0)*gconst104*x4259);
evalcond[0]=(((r21*x4267))+(((-1.0)*r20*x4268))+(((-1.0)*r22*x4265)));
evalcond[1]=((((-1.0)*r12*x4265))+(((-1.0)*r10*x4268))+cj0+((x4259*x4261)));
evalcond[2]=(((r01*x4267))+(((-1.0)*r00*x4268))+(((-1.0)*r02*x4265))+(((-1.0)*x4263)));
evalcond[3]=((((-1.0)*gconst104*r20*x4265))+((r21*x4266))+((r22*x4259))+((sj1*sj2))+(((-1.0)*cj1*x4262)));
evalcond[4]=(((r01*x4266))+(((-1.0)*gconst104*r00*x4265))+((r02*x4259))+(((-1.0)*cj0*x4264))+(((-1.0)*cj0*sj1*x4262)));
evalcond[5]=((((-1.0)*x4263*x4264))+(((-1.0)*gconst104*r10*x4265))+(((-1.0)*sj0*sj1*x4262))+((r12*x4259))+((x4260*x4261)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4269=((1.0)*gconst104);
CheckValue<IkReal> x4270=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst103*r00))+(((-1.0)*r01*x4269)))),-1);
if(!x4270.valid){
continue;
}
CheckValue<IkReal> x4271 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x4269))+((cj0*gconst103*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4271.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4270.value)))+(x4271.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4272=IKsin(j4);
IkReal x4273=IKcos(j4);
IkReal x4274=(gconst103*r11);
IkReal x4275=((1.0)*cj2);
IkReal x4276=((1.0)*sj0);
IkReal x4277=(cj1*sj2);
IkReal x4278=((1.0)*x4273);
IkReal x4279=(gconst103*x4273);
IkReal x4280=(gconst103*x4272);
IkReal x4281=((1.0)*gconst104*x4272);
evalcond[0]=((((-1.0)*r20*x4281))+(((-1.0)*r22*x4278))+((r21*x4280)));
evalcond[1]=((((-1.0)*r10*x4281))+(((-1.0)*r12*x4278))+cj0+((x4272*x4274)));
evalcond[2]=((((-1.0)*r00*x4281))+(((-1.0)*r02*x4278))+(((-1.0)*x4276))+((r01*x4280)));
evalcond[3]=((((-1.0)*cj1*x4275))+((r21*x4279))+(((-1.0)*gconst104*r20*x4278))+((sj1*sj2))+((r22*x4272)));
evalcond[4]=((((-1.0)*gconst104*r00*x4278))+((r02*x4272))+(((-1.0)*cj0*x4277))+(((-1.0)*cj0*sj1*x4275))+((r01*x4279)));
evalcond[5]=((((-1.0)*gconst104*r10*x4278))+((r12*x4272))+(((-1.0)*sj0*sj1*x4275))+(((-1.0)*x4276*x4277))+((x4273*x4274)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4282=((-1.0)*r11);
IkReal x4284 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x4284)==0){
continue;
}
IkReal x4283=pow(x4284,-0.5);
CheckValue<IkReal> x4285 = IKatan2WithCheck(IkReal(x4282),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4285.valid){
continue;
}
IkReal gconst105=((3.14159265358979)+(((-1.0)*(x4285.value))));
IkReal gconst106=(x4282*x4283);
IkReal gconst107=((1.0)*r10*x4283);
CheckValue<IkReal> x4286 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4286.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x4286.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x4287=((-1.0)*r11);
CheckValue<IkReal> x4290 = IKatan2WithCheck(IkReal(x4287),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4290.valid){
continue;
}
IkReal x4288=((1.0)*(x4290.value));
IkReal x4289=x4283;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x4288)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x4288)));
IkReal gconst106=(x4287*x4289);
IkReal gconst107=((1.0)*r10*x4289);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4291=((-1.0)*r11);
CheckValue<IkReal> x4294 = IKatan2WithCheck(IkReal(x4291),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4294.valid){
continue;
}
IkReal x4292=((1.0)*(x4294.value));
IkReal x4293=x4283;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x4292)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x4292)));
IkReal gconst106=(x4291*x4293);
IkReal gconst107=((1.0)*r10*x4293);
IkReal x4295=r12*r12;
IkReal x4296=((1.0)*sj0);
IkReal x4297=(cj0*r02);
IkReal x4298=x4283;
j4eval[0]=((IKabs(((((-1.0)*x4297))+(((-1.0)*r12*x4296)))))+(IKabs(((((-1.0)*x4296*x4298))+((r12*x4297*x4298))+((sj0*x4295*x4298))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x4299=((-1.0)*r11);
CheckValue<IkReal> x4302 = IKatan2WithCheck(IkReal(x4299),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4302.valid){
continue;
}
IkReal x4300=((1.0)*(x4302.value));
IkReal x4301=x4283;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x4300)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x4300)));
IkReal gconst106=(x4299*x4301);
IkReal gconst107=((1.0)*r10*x4301);
IkReal x4303=r12*r12;
IkReal x4304=((1.0)+(((-1.0)*x4303)));
IkReal x4305=(r22*sj1*sj2);
IkReal x4306=(cj1*cj2*r22);
CheckValue<IkReal> x4313=IKPowWithIntegerCheck(x4304,-1);
if(!x4313.valid){
continue;
}
IkReal x4307=x4313.value;
CheckValue<IkReal> x4314=IKPowWithIntegerCheck(((-1.0)+x4303),-1);
if(!x4314.valid){
continue;
}
IkReal x4308=x4314.value;
IkReal x4309=((1.0)*x4307);
if((x4304) < -0.00001)
continue;
IkReal x4310=IKsqrt(x4304);
IkReal x4311=(r12*x4308*x4310);
IkReal x4312=((((-2.0)*r10*r11*r20*r21*x4307))+(((-1.0)*x4309*(r10*r10)*(r20*r20)))+(((-1.0)*(r22*r22)))+(((-1.0)*x4309*(r11*r11)*(r21*r21))));
j4eval[0]=x4312;
j4eval[1]=((IKabs((((x4306*x4311))+(((-1.0)*x4305*x4311)))))+(IKabs(((((-1.0)*x4306))+x4305))));
j4eval[2]=IKsign(x4312);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4315=(sj1*sj2);
IkReal x4316=(gconst106*r21);
IkReal x4317=(gconst107*r20);
IkReal x4318=(cj1*cj2);
CheckValue<IkReal> x4319=IKPowWithIntegerCheck(IKsign(((((2.0)*x4316*x4317))+(((-1.0)*(r22*r22)))+(((-1.0)*(x4316*x4316)))+(((-1.0)*(x4317*x4317))))),-1);
if(!x4319.valid){
continue;
}
CheckValue<IkReal> x4320 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x4318))+((r22*x4315)))),IkReal((((x4317*x4318))+((x4315*x4316))+(((-1.0)*x4315*x4317))+(((-1.0)*x4316*x4318)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4320.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4319.value)))+(x4320.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4321=IKsin(j4);
IkReal x4322=IKcos(j4);
IkReal x4323=(gconst107*r10);
IkReal x4324=(gconst107*r00);
IkReal x4325=((1.0)*cj2);
IkReal x4326=(gconst107*r20);
IkReal x4327=((1.0)*sj0);
IkReal x4328=(cj1*sj2);
IkReal x4329=((1.0)*x4322);
IkReal x4330=(gconst106*x4322);
IkReal x4331=(gconst106*x4321);
IkReal x4332=((1.0)*x4321);
evalcond[0]=(((r21*x4331))+(((-1.0)*x4326*x4332))+(((-1.0)*r22*x4329)));
evalcond[1]=(cj0+(((-1.0)*x4323*x4332))+(((-1.0)*r12*x4329))+((r11*x4331)));
evalcond[2]=(((r01*x4331))+(((-1.0)*r02*x4329))+(((-1.0)*x4327))+(((-1.0)*x4324*x4332)));
evalcond[3]=(((r21*x4330))+((sj1*sj2))+(((-1.0)*x4326*x4329))+(((-1.0)*cj1*x4325))+((r22*x4321)));
evalcond[4]=(((r01*x4330))+(((-1.0)*x4324*x4329))+(((-1.0)*cj0*sj1*x4325))+((r02*x4321))+(((-1.0)*cj0*x4328)));
evalcond[5]=((((-1.0)*sj0*sj1*x4325))+(((-1.0)*x4327*x4328))+((r12*x4321))+(((-1.0)*x4323*x4329))+((r11*x4330)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4333=((1.0)*sj0);
IkReal x4334=((1.0)*gconst106);
CheckValue<IkReal> x4335=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x4334))+(((-1.0)*gconst107*r21)))),-1);
if(!x4335.valid){
continue;
}
CheckValue<IkReal> x4336 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x4333)))),IkReal(((((-1.0)*gconst106*r11*x4333))+((gconst107*r10*sj0))+((cj0*gconst107*r00))+(((-1.0)*cj0*r01*x4334)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4336.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4335.value)))+(x4336.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4337=IKsin(j4);
IkReal x4338=IKcos(j4);
IkReal x4339=(gconst107*r10);
IkReal x4340=(gconst107*r00);
IkReal x4341=((1.0)*cj2);
IkReal x4342=(gconst107*r20);
IkReal x4343=((1.0)*sj0);
IkReal x4344=(cj1*sj2);
IkReal x4345=((1.0)*x4338);
IkReal x4346=(gconst106*x4338);
IkReal x4347=(gconst106*x4337);
IkReal x4348=((1.0)*x4337);
evalcond[0]=((((-1.0)*x4342*x4348))+((r21*x4347))+(((-1.0)*r22*x4345)));
evalcond[1]=(cj0+(((-1.0)*x4339*x4348))+(((-1.0)*r12*x4345))+((r11*x4347)));
evalcond[2]=((((-1.0)*r02*x4345))+(((-1.0)*x4343))+(((-1.0)*x4340*x4348))+((r01*x4347)));
evalcond[3]=((((-1.0)*x4342*x4345))+((sj1*sj2))+((r21*x4346))+((r22*x4337))+(((-1.0)*cj1*x4341)));
evalcond[4]=((((-1.0)*x4340*x4345))+(((-1.0)*cj0*sj1*x4341))+((r02*x4337))+(((-1.0)*cj0*x4344))+((r01*x4346)));
evalcond[5]=((((-1.0)*x4339*x4345))+(((-1.0)*x4343*x4344))+(((-1.0)*sj0*sj1*x4341))+((r12*x4337))+((r11*x4346)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4349=((1.0)*gconst107);
CheckValue<IkReal> x4350=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst106*r00))+(((-1.0)*r01*x4349)))),-1);
if(!x4350.valid){
continue;
}
CheckValue<IkReal> x4351 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x4349))+((cj0*gconst106*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4351.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4350.value)))+(x4351.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4352=IKsin(j4);
IkReal x4353=IKcos(j4);
IkReal x4354=(gconst107*r10);
IkReal x4355=(gconst107*r00);
IkReal x4356=((1.0)*cj2);
IkReal x4357=(gconst107*r20);
IkReal x4358=((1.0)*sj0);
IkReal x4359=(cj1*sj2);
IkReal x4360=((1.0)*x4353);
IkReal x4361=(gconst106*x4353);
IkReal x4362=(gconst106*x4352);
IkReal x4363=((1.0)*x4352);
evalcond[0]=((((-1.0)*x4357*x4363))+(((-1.0)*r22*x4360))+((r21*x4362)));
evalcond[1]=(cj0+((r11*x4362))+(((-1.0)*x4354*x4363))+(((-1.0)*r12*x4360)));
evalcond[2]=((((-1.0)*x4355*x4363))+(((-1.0)*x4358))+((r01*x4362))+(((-1.0)*r02*x4360)));
evalcond[3]=((((-1.0)*x4357*x4360))+((r21*x4361))+((r22*x4352))+((sj1*sj2))+(((-1.0)*cj1*x4356)));
evalcond[4]=((((-1.0)*x4355*x4360))+((r01*x4361))+((r02*x4352))+(((-1.0)*cj0*sj1*x4356))+(((-1.0)*cj0*x4359)));
evalcond[5]=(((r11*x4361))+(((-1.0)*x4354*x4360))+(((-1.0)*sj0*sj1*x4356))+((r12*x4352))+(((-1.0)*x4358*x4359)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4364=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x4364;
j4eval[1]=IKsign(x4364);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4365=((1.0)*cj5);
IkReal x4366=((((-1.0)*r00*sj5))+(((-1.0)*r01*x4365)));
j4eval[0]=x4366;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x4365)))))+(IKabs(r22)));
j4eval[2]=IKsign(x4366);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4367=(sj1*sj2);
IkReal x4368=(cj5*r10);
IkReal x4369=(r11*sj5);
IkReal x4370=(cj1*cj2);
IkReal x4371=((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)));
j4eval[0]=x4371;
j4eval[1]=((IKabs((((x4368*x4370))+(((-1.0)*x4367*x4368))+(((-1.0)*x4369*x4370))+((x4367*x4369)))))+(IKabs((((r12*x4370))+(((-1.0)*r12*x4367))))));
j4eval[2]=IKsign(x4371);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4372=(sj1*sj2);
IkReal x4373=(cj5*r10);
IkReal x4374=(r11*sj5);
IkReal x4375=(cj1*cj2);
CheckValue<IkReal> x4376=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)))),-1);
if(!x4376.valid){
continue;
}
CheckValue<IkReal> x4377 = IKatan2WithCheck(IkReal(((((-1.0)*x4374*x4375))+(((-1.0)*x4372*x4373))+((x4372*x4374))+((x4373*x4375)))),IkReal((((r12*x4375))+(((-1.0)*r12*x4372)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4377.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4376.value)))+(x4377.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4378=IKcos(j4);
IkReal x4379=IKsin(j4);
IkReal x4380=(cj5*r00);
IkReal x4381=(cj5*r10);
IkReal x4382=(r21*sj5);
IkReal x4383=((1.0)*cj2);
IkReal x4384=(cj5*r20);
IkReal x4385=((1.0)*x4378);
IkReal x4386=((1.0)*x4379);
IkReal x4387=(sj5*x4379);
IkReal x4388=(sj5*x4378);
evalcond[0]=((((-1.0)*x4381*x4385))+((r12*x4379))+((r11*x4388)));
evalcond[1]=((((-1.0)*r22*x4385))+((x4379*x4382))+(((-1.0)*x4384*x4386)));
evalcond[2]=((((-1.0)*r02*x4385))+(((-1.0)*x4380*x4386))+((r01*x4387)));
evalcond[3]=((1.0)+(((-1.0)*r12*x4385))+(((-1.0)*x4381*x4386))+((r11*x4387)));
evalcond[4]=(((r22*x4379))+((x4378*x4382))+((sj1*sj2))+(((-1.0)*x4384*x4385))+(((-1.0)*cj1*x4383)));
evalcond[5]=(((r02*x4379))+(((-1.0)*x4380*x4385))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x4383))+((r01*x4388)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4389=((1.0)*cj5);
CheckValue<IkReal> x4390 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x4389)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4390.valid){
continue;
}
CheckValue<IkReal> x4391=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4389))+(((-1.0)*r00*sj5)))),-1);
if(!x4391.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4390.value)+(((1.5707963267949)*(x4391.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4392=IKcos(j4);
IkReal x4393=IKsin(j4);
IkReal x4394=(cj5*r00);
IkReal x4395=(cj5*r10);
IkReal x4396=(r21*sj5);
IkReal x4397=((1.0)*cj2);
IkReal x4398=(cj5*r20);
IkReal x4399=((1.0)*x4392);
IkReal x4400=((1.0)*x4393);
IkReal x4401=(sj5*x4393);
IkReal x4402=(sj5*x4392);
evalcond[0]=(((r11*x4402))+(((-1.0)*x4395*x4399))+((r12*x4393)));
evalcond[1]=((((-1.0)*x4398*x4400))+(((-1.0)*r22*x4399))+((x4393*x4396)));
evalcond[2]=((((-1.0)*r02*x4399))+((r01*x4401))+(((-1.0)*x4394*x4400)));
evalcond[3]=((1.0)+(((-1.0)*r12*x4399))+((r11*x4401))+(((-1.0)*x4395*x4400)));
evalcond[4]=(((x4392*x4396))+((r22*x4393))+((sj1*sj2))+(((-1.0)*cj1*x4397))+(((-1.0)*x4398*x4399)));
evalcond[5]=((((-1.0)*cj1*sj2))+((r02*x4393))+((r01*x4402))+(((-1.0)*x4394*x4399))+(((-1.0)*sj1*x4397)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4403=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x4403.valid){
continue;
}
CheckValue<IkReal> x4404 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4404.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4403.value)))+(x4404.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4405=IKcos(j4);
IkReal x4406=IKsin(j4);
IkReal x4407=(cj5*r00);
IkReal x4408=(cj5*r10);
IkReal x4409=(r21*sj5);
IkReal x4410=((1.0)*cj2);
IkReal x4411=(cj5*r20);
IkReal x4412=((1.0)*x4405);
IkReal x4413=((1.0)*x4406);
IkReal x4414=(sj5*x4406);
IkReal x4415=(sj5*x4405);
evalcond[0]=(((r11*x4415))+(((-1.0)*x4408*x4412))+((r12*x4406)));
evalcond[1]=((((-1.0)*x4411*x4413))+(((-1.0)*r22*x4412))+((x4406*x4409)));
evalcond[2]=(((r01*x4414))+(((-1.0)*x4407*x4413))+(((-1.0)*r02*x4412)));
evalcond[3]=((1.0)+((r11*x4414))+(((-1.0)*x4408*x4413))+(((-1.0)*r12*x4412)));
evalcond[4]=(((r22*x4406))+((sj1*sj2))+(((-1.0)*x4411*x4412))+((x4405*x4409))+(((-1.0)*cj1*x4410)));
evalcond[5]=((((-1.0)*sj1*x4410))+(((-1.0)*cj1*sj2))+((r01*x4415))+(((-1.0)*x4407*x4412))+((r02*x4406)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4416=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x4416;
j4eval[1]=IKsign(x4416);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4417=((1.0)*cj5);
IkReal x4418=((((-1.0)*r21*x4417))+(((-1.0)*r20*sj5)));
j4eval[0]=x4418;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x4417))))));
j4eval[2]=IKsign(x4418);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4419=cj5*cj5;
IkReal x4420=r11*r11;
IkReal x4421=(r11*sj5);
IkReal x4422=(cj5*r10);
IkReal x4423=((r12*r12)+x4420+((x4419*(r10*r10)))+(((-2.0)*x4421*x4422))+(((-1.0)*x4419*x4420)));
j4eval[0]=x4423;
j4eval[1]=IKsign(x4423);
j4eval[2]=((IKabs((x4421+(((-1.0)*x4422)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4424=cj5*cj5;
IkReal x4425=r11*r11;
IkReal x4426=(cj5*r10);
IkReal x4427=(r11*sj5);
CheckValue<IkReal> x4428=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x4426*x4427))+x4425+((x4424*(r10*r10)))+(((-1.0)*x4424*x4425)))),-1);
if(!x4428.valid){
continue;
}
CheckValue<IkReal> x4429 = IKatan2WithCheck(IkReal((x4427+(((-1.0)*x4426)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x4429.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4428.value)))+(x4429.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4430=IKcos(j4);
IkReal x4431=IKsin(j4);
IkReal x4432=(cj5*r00);
IkReal x4433=(cj5*r10);
IkReal x4434=(r21*sj5);
IkReal x4435=(cj5*r20);
IkReal x4436=((1.0)*x4430);
IkReal x4437=((1.0)*x4431);
IkReal x4438=(sj5*x4431);
IkReal x4439=(sj5*x4430);
evalcond[0]=((((-1.0)*x4433*x4436))+((r12*x4431))+((r11*x4439)));
evalcond[1]=((((-1.0)*r22*x4436))+(((-1.0)*x4435*x4437))+((x4431*x4434)));
evalcond[2]=((((-1.0)*r02*x4436))+(((-1.0)*x4432*x4437))+((r01*x4438)));
evalcond[3]=((-1.0)+(((-1.0)*x4433*x4437))+(((-1.0)*r12*x4436))+((r11*x4438)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x4432*x4436))+((r02*x4431))+((r01*x4439)));
evalcond[5]=(((r22*x4431))+((x4430*x4434))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x4435*x4436)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4440=((1.0)*cj5);
CheckValue<IkReal> x4441 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x4440)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4441.valid){
continue;
}
CheckValue<IkReal> x4442=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x4440))+(((-1.0)*r20*sj5)))),-1);
if(!x4442.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4441.value)+(((1.5707963267949)*(x4442.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4443=IKcos(j4);
IkReal x4444=IKsin(j4);
IkReal x4445=(cj5*r00);
IkReal x4446=(cj5*r10);
IkReal x4447=(r21*sj5);
IkReal x4448=(cj5*r20);
IkReal x4449=((1.0)*x4443);
IkReal x4450=((1.0)*x4444);
IkReal x4451=(sj5*x4444);
IkReal x4452=(sj5*x4443);
evalcond[0]=((((-1.0)*x4446*x4449))+((r11*x4452))+((r12*x4444)));
evalcond[1]=((((-1.0)*r22*x4449))+(((-1.0)*x4448*x4450))+((x4444*x4447)));
evalcond[2]=(((r01*x4451))+(((-1.0)*r02*x4449))+(((-1.0)*x4445*x4450)));
evalcond[3]=((-1.0)+(((-1.0)*x4446*x4450))+(((-1.0)*r12*x4449))+((r11*x4451)));
evalcond[4]=(((cj2*sj1))+((r01*x4452))+((cj1*sj2))+((r02*x4444))+(((-1.0)*x4445*x4449)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x4443*x4447))+(((-1.0)*x4448*x4449))+((r22*x4444)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4453 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4453.valid){
continue;
}
CheckValue<IkReal> x4454=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x4454.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4453.value)+(((1.5707963267949)*(x4454.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4455=IKcos(j4);
IkReal x4456=IKsin(j4);
IkReal x4457=(cj5*r00);
IkReal x4458=(cj5*r10);
IkReal x4459=(r21*sj5);
IkReal x4460=(cj5*r20);
IkReal x4461=((1.0)*x4455);
IkReal x4462=((1.0)*x4456);
IkReal x4463=(sj5*x4456);
IkReal x4464=(sj5*x4455);
evalcond[0]=((((-1.0)*x4458*x4461))+((r11*x4464))+((r12*x4456)));
evalcond[1]=((((-1.0)*r22*x4461))+((x4456*x4459))+(((-1.0)*x4460*x4462)));
evalcond[2]=(((r01*x4463))+(((-1.0)*r02*x4461))+(((-1.0)*x4457*x4462)));
evalcond[3]=((-1.0)+(((-1.0)*x4458*x4462))+((r11*x4463))+(((-1.0)*r12*x4461)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r01*x4464))+((r02*x4456))+(((-1.0)*x4457*x4461)));
evalcond[5]=(((x4455*x4459))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x4460*x4461))+((r22*x4456)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4465=((-1.0)*r00);
IkReal x4467 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x4467)==0){
continue;
}
IkReal x4466=pow(x4467,-0.5);
CheckValue<IkReal> x4468 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x4465),IKFAST_ATAN2_MAGTHRESH);
if(!x4468.valid){
continue;
}
IkReal gconst108=((-1.0)*(x4468.value));
IkReal gconst109=(r01*x4466);
IkReal gconst110=(x4465*x4466);
CheckValue<IkReal> x4469 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4469.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x4469.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x4470=((-1.0)*r00);
IkReal x4471=x4466;
CheckValue<IkReal> x4473 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x4470),IKFAST_ATAN2_MAGTHRESH);
if(!x4473.valid){
continue;
}
IkReal x4472=((-1.0)*(x4473.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst109;
cj5=gconst110;
j5=x4472;
IkReal gconst108=x4472;
IkReal gconst109=(r01*x4471);
IkReal gconst110=(x4470*x4471);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4474=((1.0)*sj0);
IkReal x4475=((1.0)*gconst109);
CheckValue<IkReal> x4476=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x4475))+(((-1.0)*gconst110*r21)))),-1);
if(!x4476.valid){
continue;
}
CheckValue<IkReal> x4477 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x4474))+(((-1.0)*cj0*r02)))),IkReal((((cj0*gconst110*r00))+((gconst110*r10*sj0))+(((-1.0)*gconst109*r11*x4474))+(((-1.0)*cj0*r01*x4475)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4477.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4476.value)))+(x4477.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4478=IKsin(j4);
IkReal x4479=IKcos(j4);
IkReal x4480=(gconst109*r21);
IkReal x4481=((1.0)*cj2);
IkReal x4482=((1.0)*sj0);
IkReal x4483=(cj1*sj2);
IkReal x4484=((1.0)*x4479);
IkReal x4485=(gconst109*x4478);
IkReal x4486=(gconst109*x4479);
IkReal x4487=((1.0)*gconst110*x4478);
evalcond[0]=(((x4478*x4480))+(((-1.0)*r20*x4487))+(((-1.0)*r22*x4484)));
evalcond[1]=(((r11*x4485))+(((-1.0)*r12*x4484))+cj0+(((-1.0)*r10*x4487)));
evalcond[2]=(((r01*x4485))+(((-1.0)*r00*x4487))+(((-1.0)*r02*x4484))+(((-1.0)*x4482)));
evalcond[3]=((((-1.0)*cj1*x4481))+((sj1*sj2))+((x4479*x4480))+(((-1.0)*gconst110*r20*x4484))+((r22*x4478)));
evalcond[4]=((((-1.0)*cj0*x4483))+(((-1.0)*cj0*sj1*x4481))+(((-1.0)*gconst110*r00*x4484))+((r02*x4478))+((r01*x4486)));
evalcond[5]=(((r11*x4486))+(((-1.0)*sj0*sj1*x4481))+((r12*x4478))+(((-1.0)*x4482*x4483))+(((-1.0)*gconst110*r10*x4484)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4488=((1.0)*gconst110);
CheckValue<IkReal> x4489 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x4488))+((gconst109*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4489.valid){
continue;
}
CheckValue<IkReal> x4490=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4488))+(((-1.0)*gconst109*r10)))),-1);
if(!x4490.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4489.value)+(((1.5707963267949)*(x4490.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4491=IKsin(j4);
IkReal x4492=IKcos(j4);
IkReal x4493=(gconst109*r21);
IkReal x4494=((1.0)*cj2);
IkReal x4495=((1.0)*sj0);
IkReal x4496=(cj1*sj2);
IkReal x4497=((1.0)*x4492);
IkReal x4498=(gconst109*x4491);
IkReal x4499=(gconst109*x4492);
IkReal x4500=((1.0)*gconst110*x4491);
evalcond[0]=(((x4491*x4493))+(((-1.0)*r22*x4497))+(((-1.0)*r20*x4500)));
evalcond[1]=(cj0+((r11*x4498))+(((-1.0)*r10*x4500))+(((-1.0)*r12*x4497)));
evalcond[2]=((((-1.0)*r00*x4500))+(((-1.0)*r02*x4497))+(((-1.0)*x4495))+((r01*x4498)));
evalcond[3]=((((-1.0)*cj1*x4494))+((x4492*x4493))+((sj1*sj2))+((r22*x4491))+(((-1.0)*gconst110*r20*x4497)));
evalcond[4]=((((-1.0)*cj0*x4496))+(((-1.0)*gconst110*r00*x4497))+((r02*x4491))+(((-1.0)*cj0*sj1*x4494))+((r01*x4499)));
evalcond[5]=(((r12*x4491))+(((-1.0)*x4495*x4496))+(((-1.0)*sj0*sj1*x4494))+((r11*x4499))+(((-1.0)*gconst110*r10*x4497)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4501=((-1.0)*r01);
IkReal x4503 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x4503)==0){
continue;
}
IkReal x4502=pow(x4503,-0.5);
CheckValue<IkReal> x4504 = IKatan2WithCheck(IkReal(x4501),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4504.valid){
continue;
}
IkReal gconst111=((3.14159265358979)+(((-1.0)*(x4504.value))));
IkReal gconst112=(x4501*x4502);
IkReal gconst113=((1.0)*r00*x4502);
CheckValue<IkReal> x4505 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4505.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x4505.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x4506=((-1.0)*r01);
CheckValue<IkReal> x4509 = IKatan2WithCheck(IkReal(x4506),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4509.valid){
continue;
}
IkReal x4507=((1.0)*(x4509.value));
IkReal x4508=x4502;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x4507)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x4507)));
IkReal gconst112=(x4506*x4508);
IkReal gconst113=((1.0)*r00*x4508);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x4510=((-1.0)*r01);
CheckValue<IkReal> x4513 = IKatan2WithCheck(IkReal(x4510),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4513.valid){
continue;
}
IkReal x4511=((1.0)*(x4513.value));
IkReal x4512=x4502;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x4511)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x4511)));
IkReal gconst112=(x4510*x4512);
IkReal gconst113=((1.0)*r00*x4512);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4514=((-1.0)*r01);
CheckValue<IkReal> x4517 = IKatan2WithCheck(IkReal(x4514),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4517.valid){
continue;
}
IkReal x4515=((1.0)*(x4517.value));
IkReal x4516=x4502;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x4515)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x4515)));
IkReal gconst112=(x4514*x4516);
IkReal gconst113=((1.0)*r00*x4516);
IkReal x4518=r02*r02;
IkReal x4519=(r12*sj0);
IkReal x4520=((1.0)*cj0);
IkReal x4521=x4502;
j4eval[0]=((IKabs(((((-1.0)*x4519))+(((-1.0)*r02*x4520)))))+(IKabs(((((-1.0)*x4520*x4521))+((r02*x4519*x4521))+((cj0*x4518*x4521))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4522=((1.0)*sj0);
IkReal x4523=((1.0)*gconst112);
CheckValue<IkReal> x4524 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x4522))+(((-1.0)*cj0*r02)))),IkReal((((gconst113*r10*sj0))+((cj0*gconst113*r00))+(((-1.0)*gconst112*r11*x4522))+(((-1.0)*cj0*r01*x4523)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4524.valid){
continue;
}
CheckValue<IkReal> x4525=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x4523))+(((-1.0)*gconst113*r21)))),-1);
if(!x4525.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4524.value)+(((1.5707963267949)*(x4525.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4526=IKsin(j4);
IkReal x4527=IKcos(j4);
IkReal x4528=(gconst113*r20);
IkReal x4529=(gconst112*r21);
IkReal x4530=((1.0)*cj2);
IkReal x4531=(gconst113*r00);
IkReal x4532=(gconst113*r10);
IkReal x4533=((1.0)*sj0);
IkReal x4534=(cj1*sj2);
IkReal x4535=((1.0)*x4527);
IkReal x4536=((1.0)*x4526);
IkReal x4537=(gconst112*x4527);
IkReal x4538=(gconst112*x4526);
evalcond[0]=(((x4526*x4529))+(((-1.0)*x4528*x4536))+(((-1.0)*r22*x4535)));
evalcond[1]=(cj0+(((-1.0)*x4532*x4536))+(((-1.0)*r12*x4535))+((r11*x4538)));
evalcond[2]=(((r01*x4538))+(((-1.0)*x4533))+(((-1.0)*x4531*x4536))+(((-1.0)*r02*x4535)));
evalcond[3]=(((x4527*x4529))+(((-1.0)*cj1*x4530))+((sj1*sj2))+((r22*x4526))+(((-1.0)*x4528*x4535)));
evalcond[4]=(((r01*x4537))+(((-1.0)*x4531*x4535))+((r02*x4526))+(((-1.0)*cj0*x4534))+(((-1.0)*cj0*sj1*x4530)));
evalcond[5]=(((r12*x4526))+(((-1.0)*x4533*x4534))+(((-1.0)*x4532*x4535))+((r11*x4537))+(((-1.0)*sj0*sj1*x4530)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4539=((1.0)*gconst113);
CheckValue<IkReal> x4540=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4539))+(((-1.0)*gconst112*r10)))),-1);
if(!x4540.valid){
continue;
}
CheckValue<IkReal> x4541 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst112*r21*sj0))+(((-1.0)*r20*sj0*x4539)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4541.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4540.value)))+(x4541.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4542=IKsin(j4);
IkReal x4543=IKcos(j4);
IkReal x4544=(gconst113*r20);
IkReal x4545=(gconst112*r21);
IkReal x4546=((1.0)*cj2);
IkReal x4547=(gconst113*r00);
IkReal x4548=(gconst113*r10);
IkReal x4549=((1.0)*sj0);
IkReal x4550=(cj1*sj2);
IkReal x4551=((1.0)*x4543);
IkReal x4552=((1.0)*x4542);
IkReal x4553=(gconst112*x4543);
IkReal x4554=(gconst112*x4542);
evalcond[0]=(((x4542*x4545))+(((-1.0)*x4544*x4552))+(((-1.0)*r22*x4551)));
evalcond[1]=((((-1.0)*r12*x4551))+cj0+((r11*x4554))+(((-1.0)*x4548*x4552)));
evalcond[2]=(((r01*x4554))+(((-1.0)*x4547*x4552))+(((-1.0)*r02*x4551))+(((-1.0)*x4549)));
evalcond[3]=(((r22*x4542))+((sj1*sj2))+(((-1.0)*x4544*x4551))+(((-1.0)*cj1*x4546))+((x4543*x4545)));
evalcond[4]=(((r01*x4553))+((r02*x4542))+(((-1.0)*x4547*x4551))+(((-1.0)*cj0*sj1*x4546))+(((-1.0)*cj0*x4550)));
evalcond[5]=(((r11*x4553))+(((-1.0)*x4548*x4551))+(((-1.0)*sj0*sj1*x4546))+(((-1.0)*x4549*x4550))+((r12*x4542)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4555=((1.0)*gconst113);
CheckValue<IkReal> x4556=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4555))+(((-1.0)*gconst112*r00)))),-1);
if(!x4556.valid){
continue;
}
CheckValue<IkReal> x4557 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst112*r21))+(((-1.0)*cj0*r20*x4555)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4557.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4556.value)))+(x4557.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4558=IKsin(j4);
IkReal x4559=IKcos(j4);
IkReal x4560=(gconst113*r20);
IkReal x4561=(gconst112*r21);
IkReal x4562=((1.0)*cj2);
IkReal x4563=(gconst113*r00);
IkReal x4564=(gconst113*r10);
IkReal x4565=((1.0)*sj0);
IkReal x4566=(cj1*sj2);
IkReal x4567=((1.0)*x4559);
IkReal x4568=((1.0)*x4558);
IkReal x4569=(gconst112*x4559);
IkReal x4570=(gconst112*x4558);
evalcond[0]=((((-1.0)*r22*x4567))+(((-1.0)*x4560*x4568))+((x4558*x4561)));
evalcond[1]=(cj0+((r11*x4570))+(((-1.0)*x4564*x4568))+(((-1.0)*r12*x4567)));
evalcond[2]=((((-1.0)*r02*x4567))+((r01*x4570))+(((-1.0)*x4563*x4568))+(((-1.0)*x4565)));
evalcond[3]=((((-1.0)*cj1*x4562))+((sj1*sj2))+((r22*x4558))+(((-1.0)*x4560*x4567))+((x4559*x4561)));
evalcond[4]=(((r02*x4558))+(((-1.0)*cj0*x4566))+(((-1.0)*cj0*sj1*x4562))+(((-1.0)*x4563*x4567))+((r01*x4569)));
evalcond[5]=(((r11*x4569))+(((-1.0)*x4564*x4567))+((r12*x4558))+(((-1.0)*sj0*sj1*x4562))+(((-1.0)*x4565*x4566)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4571=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x4571;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x4571);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4572=((1.0)*cj5);
IkReal x4573=((((-1.0)*r10*sj5))+(((-1.0)*r11*x4572)));
j4eval[0]=x4573;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x4572))))));
j4eval[2]=IKsign(x4573);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4574=cj5*cj5;
IkReal x4575=r01*r01;
IkReal x4576=(cj5*r00);
IkReal x4577=(r01*sj5);
IkReal x4578=((((-2.0)*x4576*x4577))+(((-1.0)*x4574*x4575))+x4575+((x4574*(r00*r00)))+(r02*r02));
j4eval[0]=x4578;
j4eval[1]=IKsign(x4578);
j4eval[2]=((IKabs(r02))+(IKabs((x4577+(((-1.0)*x4576))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4579=cj5*cj5;
IkReal x4580=r01*r01;
IkReal x4581=(r01*sj5);
IkReal x4582=(cj5*r00);
CheckValue<IkReal> x4583 = IKatan2WithCheck(IkReal((x4581+(((-1.0)*x4582)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x4583.valid){
continue;
}
CheckValue<IkReal> x4584=IKPowWithIntegerCheck(IKsign((x4580+((x4579*(r00*r00)))+(((-1.0)*x4579*x4580))+(r02*r02)+(((-2.0)*x4581*x4582)))),-1);
if(!x4584.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4583.value)+(((1.5707963267949)*(x4584.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4585=IKcos(j4);
IkReal x4586=IKsin(j4);
IkReal x4587=(cj5*r00);
IkReal x4588=(cj5*r10);
IkReal x4589=(r21*sj5);
IkReal x4590=((1.0)*cj2);
IkReal x4591=(cj5*r20);
IkReal x4592=((1.0)*x4585);
IkReal x4593=((1.0)*x4586);
IkReal x4594=(sj5*x4586);
IkReal x4595=(sj5*x4585);
evalcond[0]=(((r02*x4586))+(((-1.0)*x4587*x4592))+((r01*x4595)));
evalcond[1]=((((-1.0)*r22*x4592))+(((-1.0)*x4591*x4593))+((x4586*x4589)));
evalcond[2]=(((r11*x4594))+(((-1.0)*x4588*x4593))+(((-1.0)*r12*x4592)));
evalcond[3]=((-1.0)+(((-1.0)*x4587*x4593))+(((-1.0)*r02*x4592))+((r01*x4594)));
evalcond[4]=(((r22*x4586))+((sj1*sj2))+(((-1.0)*x4591*x4592))+((x4585*x4589))+(((-1.0)*cj1*x4590)));
evalcond[5]=((((-1.0)*cj1*sj2))+((r11*x4595))+(((-1.0)*sj1*x4590))+(((-1.0)*x4588*x4592))+((r12*x4586)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4596=((1.0)*cj5);
CheckValue<IkReal> x4597 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x4596)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4597.valid){
continue;
}
CheckValue<IkReal> x4598=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x4596)))),-1);
if(!x4598.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4597.value)+(((1.5707963267949)*(x4598.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4599=IKcos(j4);
IkReal x4600=IKsin(j4);
IkReal x4601=(cj5*r00);
IkReal x4602=(cj5*r10);
IkReal x4603=(r21*sj5);
IkReal x4604=((1.0)*cj2);
IkReal x4605=(cj5*r20);
IkReal x4606=((1.0)*x4599);
IkReal x4607=((1.0)*x4600);
IkReal x4608=(sj5*x4600);
IkReal x4609=(sj5*x4599);
evalcond[0]=(((r01*x4609))+(((-1.0)*x4601*x4606))+((r02*x4600)));
evalcond[1]=(((x4600*x4603))+(((-1.0)*x4605*x4607))+(((-1.0)*r22*x4606)));
evalcond[2]=(((r11*x4608))+(((-1.0)*x4602*x4607))+(((-1.0)*r12*x4606)));
evalcond[3]=((-1.0)+((r01*x4608))+(((-1.0)*r02*x4606))+(((-1.0)*x4601*x4607)));
evalcond[4]=(((x4599*x4603))+(((-1.0)*cj1*x4604))+((sj1*sj2))+((r22*x4600))+(((-1.0)*x4605*x4606)));
evalcond[5]=(((r11*x4609))+((r12*x4600))+(((-1.0)*cj1*sj2))+(((-1.0)*x4602*x4606))+(((-1.0)*sj1*x4604)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4610=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x4610.valid){
continue;
}
CheckValue<IkReal> x4611 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4611.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4610.value)))+(x4611.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4612=IKcos(j4);
IkReal x4613=IKsin(j4);
IkReal x4614=(cj5*r00);
IkReal x4615=(cj5*r10);
IkReal x4616=(r21*sj5);
IkReal x4617=((1.0)*cj2);
IkReal x4618=(cj5*r20);
IkReal x4619=((1.0)*x4612);
IkReal x4620=((1.0)*x4613);
IkReal x4621=(sj5*x4613);
IkReal x4622=(sj5*x4612);
evalcond[0]=(((r02*x4613))+(((-1.0)*x4614*x4619))+((r01*x4622)));
evalcond[1]=((((-1.0)*x4618*x4620))+(((-1.0)*r22*x4619))+((x4613*x4616)));
evalcond[2]=(((r11*x4621))+(((-1.0)*r12*x4619))+(((-1.0)*x4615*x4620)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x4619))+(((-1.0)*x4614*x4620))+((r01*x4621)));
evalcond[4]=(((sj1*sj2))+((r22*x4613))+(((-1.0)*cj1*x4617))+((x4612*x4616))+(((-1.0)*x4618*x4619)));
evalcond[5]=((((-1.0)*sj1*x4617))+((r11*x4622))+((r12*x4613))+(((-1.0)*cj1*sj2))+(((-1.0)*x4615*x4619)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4623=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4623;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x4623);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4624=((1.0)*cj5);
IkReal x4625=((((-1.0)*r21*x4624))+(((-1.0)*r20*sj5)));
j4eval[0]=x4625;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x4624))))));
j4eval[2]=IKsign(x4625);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4626=cj5*cj5;
IkReal x4627=r01*r01;
IkReal x4628=(r01*sj5);
IkReal x4629=(cj5*r00);
IkReal x4630=((((-1.0)*(r02*r02)))+(((-1.0)*x4627))+(((-1.0)*x4626*(r00*r00)))+((x4626*x4627))+(((2.0)*x4628*x4629)));
j4eval[0]=x4630;
j4eval[1]=IKsign(x4630);
j4eval[2]=((IKabs((x4628+(((-1.0)*x4629)))))+(IKabs(r02)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4631=cj5*cj5;
IkReal x4632=r01*r01;
IkReal x4633=(r01*sj5);
IkReal x4634=(cj5*r00);
CheckValue<IkReal> x4635=IKPowWithIntegerCheck(IKsign((((x4631*x4632))+(((-1.0)*x4631*(r00*r00)))+(((-1.0)*x4632))+(((-1.0)*(r02*r02)))+(((2.0)*x4633*x4634)))),-1);
if(!x4635.valid){
continue;
}
CheckValue<IkReal> x4636 = IKatan2WithCheck(IkReal(((((-1.0)*x4634))+x4633)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x4636.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4635.value)))+(x4636.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4637=IKcos(j4);
IkReal x4638=IKsin(j4);
IkReal x4639=(cj5*r00);
IkReal x4640=(cj5*r10);
IkReal x4641=(r21*sj5);
IkReal x4642=(cj5*r20);
IkReal x4643=((1.0)*x4637);
IkReal x4644=((1.0)*x4638);
IkReal x4645=(sj5*x4638);
IkReal x4646=(sj5*x4637);
evalcond[0]=(((r01*x4646))+((r02*x4638))+(((-1.0)*x4639*x4643)));
evalcond[1]=(((x4638*x4641))+(((-1.0)*r22*x4643))+(((-1.0)*x4642*x4644)));
evalcond[2]=(((r11*x4645))+(((-1.0)*x4640*x4644))+(((-1.0)*r12*x4643)));
evalcond[3]=((1.0)+(((-1.0)*r02*x4643))+((r01*x4645))+(((-1.0)*x4639*x4644)));
evalcond[4]=(((r12*x4638))+((cj2*sj1))+((cj1*sj2))+((r11*x4646))+(((-1.0)*x4640*x4643)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x4637*x4641))+((r22*x4638))+(((-1.0)*x4642*x4643)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4647=((1.0)*cj5);
CheckValue<IkReal> x4648=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x4647))+(((-1.0)*r20*sj5)))),-1);
if(!x4648.valid){
continue;
}
CheckValue<IkReal> x4649 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x4647))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4649.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4648.value)))+(x4649.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4650=IKcos(j4);
IkReal x4651=IKsin(j4);
IkReal x4652=(cj5*r00);
IkReal x4653=(cj5*r10);
IkReal x4654=(r21*sj5);
IkReal x4655=(cj5*r20);
IkReal x4656=((1.0)*x4650);
IkReal x4657=((1.0)*x4651);
IkReal x4658=(sj5*x4651);
IkReal x4659=(sj5*x4650);
evalcond[0]=(((r02*x4651))+((r01*x4659))+(((-1.0)*x4652*x4656)));
evalcond[1]=((((-1.0)*x4655*x4657))+(((-1.0)*r22*x4656))+((x4651*x4654)));
evalcond[2]=(((r11*x4658))+(((-1.0)*x4653*x4657))+(((-1.0)*r12*x4656)));
evalcond[3]=((1.0)+(((-1.0)*r02*x4656))+((r01*x4658))+(((-1.0)*x4652*x4657)));
evalcond[4]=(((cj2*sj1))+((r12*x4651))+((r11*x4659))+((cj1*sj2))+(((-1.0)*x4653*x4656)));
evalcond[5]=(((x4650*x4654))+(((-1.0)*x4655*x4656))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x4651)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4660 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4660.valid){
continue;
}
CheckValue<IkReal> x4661=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4661.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4660.value)+(((1.5707963267949)*(x4661.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4662=IKcos(j4);
IkReal x4663=IKsin(j4);
IkReal x4664=(cj5*r00);
IkReal x4665=(cj5*r10);
IkReal x4666=(r21*sj5);
IkReal x4667=(cj5*r20);
IkReal x4668=((1.0)*x4662);
IkReal x4669=((1.0)*x4663);
IkReal x4670=(sj5*x4663);
IkReal x4671=(sj5*x4662);
evalcond[0]=(((r02*x4663))+(((-1.0)*x4664*x4668))+((r01*x4671)));
evalcond[1]=((((-1.0)*x4667*x4669))+((x4663*x4666))+(((-1.0)*r22*x4668)));
evalcond[2]=(((r11*x4670))+(((-1.0)*r12*x4668))+(((-1.0)*x4665*x4669)));
evalcond[3]=((1.0)+(((-1.0)*x4664*x4669))+((r01*x4670))+(((-1.0)*r02*x4668)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r12*x4663))+((r11*x4671))+(((-1.0)*x4665*x4668)));
evalcond[5]=((((-1.0)*x4667*x4668))+((x4662*x4666))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x4663)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x4672=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4672);
rxp1_1=(px*r21);
rxp1_2=(r11*x4672);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4673=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4673);
rxp1_1=(px*r21);
rxp1_2=(r11*x4673);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4674=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4674);
rxp1_1=(px*r21);
rxp1_2=(r11*x4674);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4677=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x4677.valid){
continue;
}
IkReal x4675=x4677.value;
IkReal x4676=(sj0*x4675);
cj4array[0]=(((cj2*sj1*x4676))+((cj1*sj2*x4676)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4678=IKsin(j4);
IkReal x4679=IKcos(j4);
IkReal x4680=(r21*sj5);
IkReal x4681=((1.0)*cj5*r20);
evalcond[0]=(r02*x4678);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x4679)));
evalcond[2]=(((x4678*x4680))+(((-1.0)*x4678*x4681)));
evalcond[3]=(((r11*sj5*x4678))+(((-1.0)*cj5*r10*x4678)));
evalcond[4]=((((-1.0)*x4679*x4681))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x4679*x4680)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4683=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x4683.valid){
continue;
}
IkReal x4682=x4683.value;
cj4array[0]=(((cj1*cj2*x4682))+(((-1.0)*sj1*sj2*x4682)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4684=IKsin(j4);
IkReal x4685=IKcos(j4);
IkReal x4686=((1.0)*sj0);
IkReal x4687=((1.0)*cj5);
IkReal x4688=(sj5*x4684);
evalcond[0]=(r02*x4684);
evalcond[1]=((((-1.0)*r02*x4685))+(((-1.0)*x4686)));
evalcond[2]=((((-1.0)*r20*x4684*x4687))+((r21*x4688)));
evalcond[3]=((((-1.0)*r10*x4684*x4687))+((r11*x4688)));
evalcond[4]=((((-1.0)*r10*x4685*x4687))+(((-1.0)*cj2*sj1*x4686))+(((-1.0)*cj1*sj2*x4686))+((r11*sj5*x4685)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4689=IKPowWithIntegerCheck(r02,-1);
if(!x4689.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x4689.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4690=IKsin(j4);
IkReal x4691=IKcos(j4);
IkReal x4692=((1.0)*cj1);
IkReal x4693=(r21*sj5);
IkReal x4694=((1.0)*cj5);
IkReal x4695=(r11*sj5);
evalcond[0]=(r02*x4690);
evalcond[1]=((((-1.0)*r20*x4690*x4694))+((x4690*x4693)));
evalcond[2]=(((x4690*x4695))+(((-1.0)*r10*x4690*x4694)));
evalcond[3]=(((sj1*sj2))+((x4691*x4693))+(((-1.0)*cj2*x4692))+(((-1.0)*r20*x4691*x4694)));
evalcond[4]=((((-1.0)*cj2*sj0*sj1))+(((-1.0)*sj0*sj2*x4692))+(((-1.0)*r10*x4691*x4694))+((x4691*x4695)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4696=((1.0)*sj0);
IkReal x4697=((1.0)*cj0);
CheckValue<IkReal> x4698=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x4698.valid){
continue;
}
CheckValue<IkReal> x4699 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x4696))+(((-1.0)*r02*x4697)))),IkReal((((cj0*cj5*r00))+(((-1.0)*r01*sj5*x4697))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x4696)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4699.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4698.value)))+(x4699.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4700=IKsin(j4);
IkReal x4701=IKcos(j4);
IkReal x4702=(cj5*r00);
IkReal x4703=(cj5*r10);
IkReal x4704=(r21*sj5);
IkReal x4705=((1.0)*cj2);
IkReal x4706=((1.0)*sj0);
IkReal x4707=(cj1*sj2);
IkReal x4708=(cj5*r20);
IkReal x4709=((1.0)*x4701);
IkReal x4710=((1.0)*x4700);
IkReal x4711=(sj5*x4700);
IkReal x4712=(sj5*x4701);
evalcond[0]=((((-1.0)*r22*x4709))+((x4700*x4704))+(((-1.0)*x4708*x4710)));
evalcond[1]=(cj0+(((-1.0)*x4703*x4710))+(((-1.0)*r12*x4709))+((r11*x4711)));
evalcond[2]=((((-1.0)*r02*x4709))+((r01*x4711))+(((-1.0)*x4706))+(((-1.0)*x4702*x4710)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*x4708*x4709))+(((-1.0)*cj1*x4705))+((x4701*x4704))+((r22*x4700)));
evalcond[4]=((((-1.0)*x4702*x4709))+(((-1.0)*cj0*sj1*x4705))+((r01*x4712))+(((-1.0)*cj0*x4707))+((r02*x4700)));
evalcond[5]=((((-1.0)*sj0*sj1*x4705))+(((-1.0)*x4703*x4709))+(((-1.0)*x4706*x4707))+((r11*x4712))+((r12*x4700)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4713=((1.0)*cj5);
CheckValue<IkReal> x4714 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x4713))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4714.valid){
continue;
}
CheckValue<IkReal> x4715=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x4713)))),-1);
if(!x4715.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4714.value)+(((1.5707963267949)*(x4715.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4716=IKsin(j4);
IkReal x4717=IKcos(j4);
IkReal x4718=(cj5*r00);
IkReal x4719=(cj5*r10);
IkReal x4720=(r21*sj5);
IkReal x4721=((1.0)*cj2);
IkReal x4722=((1.0)*sj0);
IkReal x4723=(cj1*sj2);
IkReal x4724=(cj5*r20);
IkReal x4725=((1.0)*x4717);
IkReal x4726=((1.0)*x4716);
IkReal x4727=(sj5*x4716);
IkReal x4728=(sj5*x4717);
evalcond[0]=((((-1.0)*x4724*x4726))+((x4716*x4720))+(((-1.0)*r22*x4725)));
evalcond[1]=(((r11*x4727))+cj0+(((-1.0)*r12*x4725))+(((-1.0)*x4719*x4726)));
evalcond[2]=((((-1.0)*x4722))+(((-1.0)*x4718*x4726))+((r01*x4727))+(((-1.0)*r02*x4725)));
evalcond[3]=(((r22*x4716))+(((-1.0)*cj1*x4721))+((sj1*sj2))+(((-1.0)*x4724*x4725))+((x4717*x4720)));
evalcond[4]=((((-1.0)*cj0*sj1*x4721))+(((-1.0)*x4718*x4725))+(((-1.0)*cj0*x4723))+((r01*x4728))+((r02*x4716)));
evalcond[5]=(((r11*x4728))+(((-1.0)*x4722*x4723))+(((-1.0)*sj0*sj1*x4721))+(((-1.0)*x4719*x4725))+((r12*x4716)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4729=((1.0)*cj5);
CheckValue<IkReal> x4730 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4729)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4730.valid){
continue;
}
CheckValue<IkReal> x4731=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x4729)))),-1);
if(!x4731.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4730.value)+(((1.5707963267949)*(x4731.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4732=IKsin(j4);
IkReal x4733=IKcos(j4);
IkReal x4734=(cj5*r00);
IkReal x4735=(cj5*r10);
IkReal x4736=(r21*sj5);
IkReal x4737=((1.0)*cj2);
IkReal x4738=((1.0)*sj0);
IkReal x4739=(cj1*sj2);
IkReal x4740=(cj5*r20);
IkReal x4741=((1.0)*x4733);
IkReal x4742=((1.0)*x4732);
IkReal x4743=(sj5*x4732);
IkReal x4744=(sj5*x4733);
evalcond[0]=((((-1.0)*r22*x4741))+((x4732*x4736))+(((-1.0)*x4740*x4742)));
evalcond[1]=(((r11*x4743))+(((-1.0)*r12*x4741))+cj0+(((-1.0)*x4735*x4742)));
evalcond[2]=(((r01*x4743))+(((-1.0)*x4738))+(((-1.0)*x4734*x4742))+(((-1.0)*r02*x4741)));
evalcond[3]=((((-1.0)*cj1*x4737))+((sj1*sj2))+((x4733*x4736))+(((-1.0)*x4740*x4741))+((r22*x4732)));
evalcond[4]=(((r01*x4744))+(((-1.0)*cj0*sj1*x4737))+((r02*x4732))+(((-1.0)*cj0*x4739))+(((-1.0)*x4734*x4741)));
evalcond[5]=(((r11*x4744))+(((-1.0)*sj0*sj1*x4737))+(((-1.0)*x4738*x4739))+(((-1.0)*x4735*x4741))+((r12*x4732)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x4745=((1.0)*cj5);
IkReal x4746=((1.0)*sj5);
IkReal x4747=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)));
j0eval[0]=x4747;
j0eval[1]=((IKabs(((((-1.0)*r10*x4746))+(((-1.0)*r11*x4745)))))+(IKabs(((((-1.0)*r00*x4746))+(((-1.0)*r01*x4745))))));
j0eval[2]=IKsign(x4747);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x4748=r21*r21;
IkReal x4749=cj5*cj5;
IkReal x4750=(cj2*sj1);
IkReal x4751=(cj1*sj2);
IkReal x4752=(r21*sj5);
IkReal x4753=((1.0)*cj5*r20);
IkReal x4754=((((-1.0)*x4749*(r20*r20)))+((x4748*x4749))+(((-1.0)*(r22*r22)))+(((2.0)*cj5*r20*x4752))+(((-1.0)*x4748)));
j4eval[0]=x4754;
j4eval[1]=((IKabs(((((-1.0)*x4750*x4753))+((x4750*x4752))+((x4751*x4752))+(((-1.0)*x4751*x4753)))))+(IKabs((((r22*x4750))+((r22*x4751))))));
j4eval[2]=IKsign(x4754);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=0;
cj3=1.0;
j3=0;
j0eval[0]=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((1.19192641276835)*py))+(((-0.195493438569105)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.19192641276835)*px))+(((0.195493438569105)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.19192641276835)*py))+(((-0.195493438569105)*px))))+IKsqr(((((1.19192641276835)*px))+(((0.195493438569105)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((1.19192641276835)*py))+(((-0.195493438569105)*px))), ((((1.19192641276835)*px))+(((0.195493438569105)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x4755=IKcos(j0);
IkReal x4756=IKsin(j0);
evalcond[0]=((((-0.134)*x4756))+(((-1.0)*px))+(((0.817)*x4755)));
evalcond[1]=((((0.134)*x4755))+(((-1.0)*py))+(((0.817)*x4756)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4757=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4757;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4757);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4758=((1.0)*cj5);
IkReal x4759=((((-1.0)*r01*x4758))+(((-1.0)*r00*sj5)));
j4eval[0]=x4759;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4758))))));
j4eval[2]=IKsign(x4759);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4760=((1.0)*cj5);
IkReal x4761=((((-1.0)*r00*sj5))+(((-1.0)*r01*x4760)));
j4eval[0]=x4761;
j4eval[1]=IKsign(x4761);
j4eval[2]=((IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x4760)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4762=((1.0)*cj5);
CheckValue<IkReal> x4763 = IKatan2WithCheck(IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x4762)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x4763.valid){
continue;
}
CheckValue<IkReal> x4764=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x4762)))),-1);
if(!x4764.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4763.value)+(((1.5707963267949)*(x4764.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4765=IKcos(j4);
IkReal x4766=IKsin(j4);
IkReal x4767=((1.0)*sj0);
IkReal x4768=(cj5*r00);
IkReal x4769=(cj5*r10);
IkReal x4770=(cj5*r20);
IkReal x4771=((1.0)*x4765);
IkReal x4772=((1.0)*x4766);
IkReal x4773=(sj5*x4765);
IkReal x4774=(sj5*x4766);
evalcond[0]=(((r22*x4766))+(((-1.0)*x4770*x4771))+((r21*x4773)));
evalcond[1]=((((-1.0)*r22*x4771))+(((-1.0)*x4770*x4772))+((r21*x4774)));
evalcond[2]=((((-1.0)*x4769*x4772))+((r11*x4774))+cj0+(((-1.0)*r12*x4771)));
evalcond[3]=(((r02*x4766))+((r01*x4773))+(((-1.0)*x4768*x4771))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x4767))+(((-1.0)*x4769*x4771))+((r11*x4773))+((r12*x4766)));
evalcond[5]=((((-1.0)*x4767))+((r01*x4774))+(((-1.0)*x4768*x4772))+(((-1.0)*r02*x4771)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4775=((1.0)*cj5);
CheckValue<IkReal> x4776 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4775)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4776.valid){
continue;
}
CheckValue<IkReal> x4777=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4775))+(((-1.0)*r00*sj5)))),-1);
if(!x4777.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4776.value)+(((1.5707963267949)*(x4777.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4778=IKcos(j4);
IkReal x4779=IKsin(j4);
IkReal x4780=((1.0)*sj0);
IkReal x4781=(cj5*r00);
IkReal x4782=(cj5*r10);
IkReal x4783=(cj5*r20);
IkReal x4784=((1.0)*x4778);
IkReal x4785=((1.0)*x4779);
IkReal x4786=(sj5*x4778);
IkReal x4787=(sj5*x4779);
evalcond[0]=((((-1.0)*x4783*x4784))+((r22*x4779))+((r21*x4786)));
evalcond[1]=((((-1.0)*x4783*x4785))+(((-1.0)*r22*x4784))+((r21*x4787)));
evalcond[2]=(cj0+((r11*x4787))+(((-1.0)*x4782*x4785))+(((-1.0)*r12*x4784)));
evalcond[3]=(((r01*x4786))+(((-1.0)*x4781*x4784))+((r02*x4779))+(((-1.0)*cj0)));
evalcond[4]=(((r12*x4779))+((r11*x4786))+(((-1.0)*x4782*x4784))+(((-1.0)*x4780)));
evalcond[5]=(((r01*x4787))+(((-1.0)*x4781*x4785))+(((-1.0)*r02*x4784))+(((-1.0)*x4780)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4788 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4788.valid){
continue;
}
CheckValue<IkReal> x4789=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4789.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4788.value)+(((1.5707963267949)*(x4789.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4790=IKcos(j4);
IkReal x4791=IKsin(j4);
IkReal x4792=((1.0)*sj0);
IkReal x4793=(cj5*r00);
IkReal x4794=(cj5*r10);
IkReal x4795=(cj5*r20);
IkReal x4796=((1.0)*x4790);
IkReal x4797=((1.0)*x4791);
IkReal x4798=(sj5*x4790);
IkReal x4799=(sj5*x4791);
evalcond[0]=(((r21*x4798))+(((-1.0)*x4795*x4796))+((r22*x4791)));
evalcond[1]=(((r21*x4799))+(((-1.0)*r22*x4796))+(((-1.0)*x4795*x4797)));
evalcond[2]=(cj0+(((-1.0)*x4794*x4797))+(((-1.0)*r12*x4796))+((r11*x4799)));
evalcond[3]=(((r01*x4798))+((r02*x4791))+(((-1.0)*x4793*x4796))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x4794*x4796))+(((-1.0)*x4792))+((r11*x4798))+((r12*x4791)));
evalcond[5]=(((r01*x4799))+(((-1.0)*r02*x4796))+(((-1.0)*x4792))+(((-1.0)*x4793*x4797)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((1.73273825150958)*py))+(((-7.03596744552376)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.73273825150958)*px))+(((7.03596744552376)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.73273825150958)*py))+(((-7.03596744552376)*px))))+IKsqr(((((1.73273825150958)*px))+(((7.03596744552376)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((1.73273825150958)*py))+(((-7.03596744552376)*px))), ((((1.73273825150958)*px))+(((7.03596744552376)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x4800=IKcos(j0);
IkReal x4801=IKsin(j0);
evalcond[0]=((((-0.134)*x4801))+(((-1.0)*px))+(((0.033)*x4800)));
evalcond[1]=((((0.134)*x4800))+(((-1.0)*py))+(((0.033)*x4801)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4802=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x4802;
j4eval[1]=IKsign(x4802);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4803=((1.0)*cj5);
IkReal x4804=((((-1.0)*r10*sj5))+(((-1.0)*r11*x4803)));
j4eval[0]=x4804;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4803)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4804);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4805=cj5*cj5;
IkReal x4806=((1.0)*r20);
IkReal x4807=(r01*r21);
IkReal x4808=(r21*sj5);
IkReal x4809=(((cj5*r01*r20*sj5))+((cj5*r00*x4808))+(((-1.0)*r02*r22))+(((-1.0)*r00*x4805*x4806))+((x4805*x4807))+(((-1.0)*x4807)));
j4eval[0]=x4809;
j4eval[1]=((IKabs((((cj0*x4808))+(((-1.0)*cj0*cj5*x4806)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4809);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4810=cj5*cj5;
IkReal x4811=((1.0)*r20);
IkReal x4812=(r01*r21);
IkReal x4813=(r21*sj5);
CheckValue<IkReal> x4814=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*r00*x4810*x4811))+(((-1.0)*x4812))+((cj5*r00*x4813))+((x4810*x4812)))),-1);
if(!x4814.valid){
continue;
}
CheckValue<IkReal> x4815 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x4813))+(((-1.0)*cj0*cj5*x4811)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4815.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4814.value)))+(x4815.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4816=IKcos(j4);
IkReal x4817=IKsin(j4);
IkReal x4818=(cj5*r00);
IkReal x4819=(cj5*r10);
IkReal x4820=(cj5*r20);
IkReal x4821=((1.0)*x4816);
IkReal x4822=((1.0)*x4817);
IkReal x4823=(sj5*x4816);
IkReal x4824=(sj5*x4817);
evalcond[0]=(((r21*x4823))+(((-1.0)*x4820*x4821))+((r22*x4817)));
evalcond[1]=(((r21*x4824))+(((-1.0)*r22*x4821))+(((-1.0)*x4820*x4822)));
evalcond[2]=(cj0+((r02*x4817))+(((-1.0)*x4818*x4821))+((r01*x4823)));
evalcond[3]=(sj0+((r11*x4823))+(((-1.0)*x4819*x4821))+((r12*x4817)));
evalcond[4]=(cj0+((r11*x4824))+(((-1.0)*x4819*x4822))+(((-1.0)*r12*x4821)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x4821))+(((-1.0)*x4818*x4822))+((r01*x4824)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4825=((1.0)*cj5);
CheckValue<IkReal> x4826=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x4825)))),-1);
if(!x4826.valid){
continue;
}
CheckValue<IkReal> x4827 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4825)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4827.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4826.value)))+(x4827.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4828=IKcos(j4);
IkReal x4829=IKsin(j4);
IkReal x4830=(cj5*r00);
IkReal x4831=(cj5*r10);
IkReal x4832=(cj5*r20);
IkReal x4833=((1.0)*x4828);
IkReal x4834=((1.0)*x4829);
IkReal x4835=(sj5*x4828);
IkReal x4836=(sj5*x4829);
evalcond[0]=(((r22*x4829))+(((-1.0)*x4832*x4833))+((r21*x4835)));
evalcond[1]=((((-1.0)*x4832*x4834))+(((-1.0)*r22*x4833))+((r21*x4836)));
evalcond[2]=(((r01*x4835))+cj0+(((-1.0)*x4830*x4833))+((r02*x4829)));
evalcond[3]=(((r11*x4835))+sj0+(((-1.0)*x4831*x4833))+((r12*x4829)));
evalcond[4]=(((r11*x4836))+(((-1.0)*x4831*x4834))+cj0+(((-1.0)*r12*x4833)));
evalcond[5]=(((r01*x4836))+(((-1.0)*sj0))+(((-1.0)*x4830*x4834))+(((-1.0)*r02*x4833)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4837 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x4837.valid){
continue;
}
CheckValue<IkReal> x4838=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x4838.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4837.value)+(((1.5707963267949)*(x4838.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4839=IKcos(j4);
IkReal x4840=IKsin(j4);
IkReal x4841=(cj5*r00);
IkReal x4842=(cj5*r10);
IkReal x4843=(cj5*r20);
IkReal x4844=((1.0)*x4839);
IkReal x4845=((1.0)*x4840);
IkReal x4846=(sj5*x4839);
IkReal x4847=(sj5*x4840);
evalcond[0]=(((r22*x4840))+((r21*x4846))+(((-1.0)*x4843*x4844)));
evalcond[1]=(((r21*x4847))+(((-1.0)*r22*x4844))+(((-1.0)*x4843*x4845)));
evalcond[2]=(((r02*x4840))+(((-1.0)*x4841*x4844))+cj0+((r01*x4846)));
evalcond[3]=(sj0+(((-1.0)*x4842*x4844))+((r11*x4846))+((r12*x4840)));
evalcond[4]=((((-1.0)*x4842*x4845))+cj0+((r11*x4847))+(((-1.0)*r12*x4844)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x4841*x4845))+(((-1.0)*r02*x4844))+((r01*x4847)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.780795278522751)*px))+(((-2.28411671544462)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.780795278522751)*py))+(((-2.28411671544462)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.780795278522751)*px))+(((-2.28411671544462)*py))))+IKsqr(((((0.780795278522751)*py))+(((-2.28411671544462)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.780795278522751)*px))+(((-2.28411671544462)*py))), ((((0.780795278522751)*py))+(((-2.28411671544462)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x4848=IKcos(j0);
IkReal x4849=IKsin(j0);
evalcond[0]=((((-0.134)*x4849))+(((-1.0)*px))+(((-0.39199986)*x4848)));
evalcond[1]=((((0.134)*x4848))+(((-1.0)*py))+(((-0.39199986)*x4849)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x4850=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x4850;
j4eval[1]=IKsign(x4850);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x4851=((1.0)*cj5);
IkReal x4852=((((-1.0)*r10*sj5))+(((-1.0)*r11*x4851)));
j4eval[0]=x4852;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4851)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4852);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x4853=cj5*cj5;
IkReal x4854=((1.0)*r20);
IkReal x4855=(r01*r21);
IkReal x4856=(r21*sj5);
IkReal x4857=(((cj5*r01*r20*sj5))+(((-1.0)*r00*x4853*x4854))+((x4853*x4855))+(((-1.0)*r02*r22))+(((-1.0)*x4855))+((cj5*r00*x4856)));
j4eval[0]=x4857;
j4eval[1]=((IKabs(((((-1.0)*cj0*cj5*x4854))+((cj0*x4856)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4857);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4858=cj5*cj5;
IkReal x4859=((1.0)*r20);
IkReal x4860=(r01*r21);
IkReal x4861=(r21*sj5);
CheckValue<IkReal> x4862 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x4861))+(((-1.0)*cj0*cj5*x4859)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4862.valid){
continue;
}
CheckValue<IkReal> x4863=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*r00*x4858*x4859))+(((-1.0)*x4860))+((cj5*r00*x4861))+((x4858*x4860)))),-1);
if(!x4863.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4862.value)+(((1.5707963267949)*(x4863.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4864=IKcos(j4);
IkReal x4865=IKsin(j4);
IkReal x4866=(cj5*r00);
IkReal x4867=(cj5*r10);
IkReal x4868=(cj5*r20);
IkReal x4869=((1.0)*x4864);
IkReal x4870=((1.0)*x4865);
IkReal x4871=(sj5*x4864);
IkReal x4872=(sj5*x4865);
evalcond[0]=(((r22*x4865))+(((-1.0)*x4868*x4869))+((r21*x4871)));
evalcond[1]=((((-1.0)*x4868*x4870))+(((-1.0)*r22*x4869))+((r21*x4872)));
evalcond[2]=(cj0+((r01*x4871))+(((-1.0)*x4866*x4869))+((r02*x4865)));
evalcond[3]=(((r12*x4865))+sj0+(((-1.0)*x4867*x4869))+((r11*x4871)));
evalcond[4]=(cj0+(((-1.0)*r12*x4869))+((r11*x4872))+(((-1.0)*x4867*x4870)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x4866*x4870))+((r01*x4872))+(((-1.0)*r02*x4869)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4873=((1.0)*cj5);
CheckValue<IkReal> x4874 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4873)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4874.valid){
continue;
}
CheckValue<IkReal> x4875=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x4873)))),-1);
if(!x4875.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4874.value)+(((1.5707963267949)*(x4875.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4876=IKcos(j4);
IkReal x4877=IKsin(j4);
IkReal x4878=(cj5*r00);
IkReal x4879=(cj5*r10);
IkReal x4880=(cj5*r20);
IkReal x4881=((1.0)*x4876);
IkReal x4882=((1.0)*x4877);
IkReal x4883=(sj5*x4876);
IkReal x4884=(sj5*x4877);
evalcond[0]=((((-1.0)*x4880*x4881))+((r22*x4877))+((r21*x4883)));
evalcond[1]=((((-1.0)*x4880*x4882))+(((-1.0)*r22*x4881))+((r21*x4884)));
evalcond[2]=(((r02*x4877))+cj0+((r01*x4883))+(((-1.0)*x4878*x4881)));
evalcond[3]=(sj0+((r11*x4883))+(((-1.0)*x4879*x4881))+((r12*x4877)));
evalcond[4]=(((r11*x4884))+cj0+(((-1.0)*r12*x4881))+(((-1.0)*x4879*x4882)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x4881))+((r01*x4884))+(((-1.0)*x4878*x4882)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4885 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x4885.valid){
continue;
}
CheckValue<IkReal> x4886=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x4886.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4885.value)+(((1.5707963267949)*(x4886.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4887=IKcos(j4);
IkReal x4888=IKsin(j4);
IkReal x4889=(cj5*r00);
IkReal x4890=(cj5*r10);
IkReal x4891=(cj5*r20);
IkReal x4892=((1.0)*x4887);
IkReal x4893=((1.0)*x4888);
IkReal x4894=(sj5*x4887);
IkReal x4895=(sj5*x4888);
evalcond[0]=(((r21*x4894))+(((-1.0)*x4891*x4892))+((r22*x4888)));
evalcond[1]=(((r21*x4895))+(((-1.0)*x4891*x4893))+(((-1.0)*r22*x4892)));
evalcond[2]=(cj0+((r02*x4888))+(((-1.0)*x4889*x4892))+((r01*x4894)));
evalcond[3]=(((r11*x4894))+((r12*x4888))+sj0+(((-1.0)*x4890*x4892)));
evalcond[4]=(((r11*x4895))+(((-1.0)*r12*x4892))+cj0+(((-1.0)*x4890*x4893)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x4892))+(((-1.0)*x4889*x4893))+((r01*x4895)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.28411542533182)*py))+(((-0.780794279804245)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.28411542533182)*px))+(((0.780794279804245)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.28411542533182)*py))+(((-0.780794279804245)*px))))+IKsqr(((((2.28411542533182)*px))+(((0.780794279804245)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.28411542533182)*py))+(((-0.780794279804245)*px))), ((((2.28411542533182)*px))+(((0.780794279804245)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x4896=IKsin(j0);
IkReal x4897=IKcos(j0);
evalcond[0]=((((-0.134)*x4896))+(((0.39200014)*x4897))+(((-1.0)*px)));
evalcond[1]=((((0.134)*x4897))+(((0.39200014)*x4896))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x4898=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4898;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4898);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x4899=((1.0)*cj5);
IkReal x4900=((((-1.0)*r01*x4899))+(((-1.0)*r00*sj5)));
j4eval[0]=x4900;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4899)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4900);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x4901=((1.0)*cj5);
IkReal x4902=((((-1.0)*r01*x4901))+(((-1.0)*r00*sj5)));
j4eval[0]=x4902;
j4eval[1]=IKsign(x4902);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x4901))+((r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4903=((1.0)*cj5);
CheckValue<IkReal> x4904=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4903))+(((-1.0)*r00*sj5)))),-1);
if(!x4904.valid){
continue;
}
CheckValue<IkReal> x4905 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj0*x4903))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x4905.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4904.value)))+(x4905.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4906=IKcos(j4);
IkReal x4907=IKsin(j4);
IkReal x4908=((1.0)*sj0);
IkReal x4909=(cj5*r00);
IkReal x4910=(cj5*r10);
IkReal x4911=(cj5*r20);
IkReal x4912=((1.0)*x4906);
IkReal x4913=((1.0)*x4907);
IkReal x4914=(sj5*x4906);
IkReal x4915=(sj5*x4907);
evalcond[0]=(((r21*x4914))+(((-1.0)*x4911*x4912))+((r22*x4907)));
evalcond[1]=(((r21*x4915))+(((-1.0)*x4911*x4913))+(((-1.0)*r22*x4912)));
evalcond[2]=(cj0+(((-1.0)*r12*x4912))+(((-1.0)*x4910*x4913))+((r11*x4915)));
evalcond[3]=((((-1.0)*x4909*x4912))+((r02*x4907))+((r01*x4914))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x4908))+(((-1.0)*x4910*x4912))+((r11*x4914))+((r12*x4907)));
evalcond[5]=((((-1.0)*x4909*x4913))+(((-1.0)*x4908))+(((-1.0)*r02*x4912))+((r01*x4915)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4916=((1.0)*cj5);
CheckValue<IkReal> x4917 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x4916))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4917.valid){
continue;
}
CheckValue<IkReal> x4918=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x4916)))),-1);
if(!x4918.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4917.value)+(((1.5707963267949)*(x4918.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4919=IKcos(j4);
IkReal x4920=IKsin(j4);
IkReal x4921=((1.0)*sj0);
IkReal x4922=(cj5*r00);
IkReal x4923=(cj5*r10);
IkReal x4924=(cj5*r20);
IkReal x4925=((1.0)*x4919);
IkReal x4926=((1.0)*x4920);
IkReal x4927=(sj5*x4919);
IkReal x4928=(sj5*x4920);
evalcond[0]=((((-1.0)*x4924*x4925))+((r22*x4920))+((r21*x4927)));
evalcond[1]=((((-1.0)*x4924*x4926))+((r21*x4928))+(((-1.0)*r22*x4925)));
evalcond[2]=(cj0+(((-1.0)*r12*x4925))+(((-1.0)*x4923*x4926))+((r11*x4928)));
evalcond[3]=(((r01*x4927))+(((-1.0)*x4922*x4925))+((r02*x4920))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x4923*x4925))+(((-1.0)*x4921))+((r11*x4927))+((r12*x4920)));
evalcond[5]=((((-1.0)*r02*x4925))+((r01*x4928))+(((-1.0)*x4922*x4926))+(((-1.0)*x4921)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4929 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4929.valid){
continue;
}
CheckValue<IkReal> x4930=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4930.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4929.value)+(((1.5707963267949)*(x4930.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4931=IKcos(j4);
IkReal x4932=IKsin(j4);
IkReal x4933=((1.0)*sj0);
IkReal x4934=(cj5*r00);
IkReal x4935=(cj5*r10);
IkReal x4936=(cj5*r20);
IkReal x4937=((1.0)*x4931);
IkReal x4938=((1.0)*x4932);
IkReal x4939=(sj5*x4931);
IkReal x4940=(sj5*x4932);
evalcond[0]=(((r22*x4932))+((r21*x4939))+(((-1.0)*x4936*x4937)));
evalcond[1]=(((r21*x4940))+(((-1.0)*r22*x4937))+(((-1.0)*x4936*x4938)));
evalcond[2]=(cj0+(((-1.0)*x4935*x4938))+((r11*x4940))+(((-1.0)*r12*x4937)));
evalcond[3]=((((-1.0)*x4934*x4937))+((r01*x4939))+((r02*x4932))+(((-1.0)*cj0)));
evalcond[4]=(((r12*x4932))+(((-1.0)*x4935*x4937))+((r11*x4939))+(((-1.0)*x4933)));
evalcond[5]=(((r01*x4940))+(((-1.0)*r02*x4937))+(((-1.0)*x4934*x4938))+(((-1.0)*x4933)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.195493438569105)*px))+(((-1.19192641276835)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.195493438569105)*py))+(((-1.19192641276835)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.195493438569105)*px))+(((-1.19192641276835)*py))))+IKsqr(((((0.195493438569105)*py))+(((-1.19192641276835)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.195493438569105)*px))+(((-1.19192641276835)*py))), ((((0.195493438569105)*py))+(((-1.19192641276835)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x4941=IKcos(j0);
IkReal x4942=IKsin(j0);
evalcond[0]=((((-0.817)*x4941))+(((-0.134)*x4942))+(((-1.0)*px)));
evalcond[1]=((((-0.817)*x4942))+(((-1.0)*py))+(((0.134)*x4941)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4943=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x4943;
j4eval[1]=IKsign(x4943);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4944=((1.0)*cj5);
IkReal x4945=((((-1.0)*r10*sj5))+(((-1.0)*r11*x4944)));
j4eval[0]=x4945;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x4944))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4945);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4946=cj5*cj5;
IkReal x4947=((1.0)*r20);
IkReal x4948=(r01*r21);
IkReal x4949=(r21*sj5);
IkReal x4950=(((cj5*r01*r20*sj5))+((cj5*r00*x4949))+(((-1.0)*r02*r22))+(((-1.0)*r00*x4946*x4947))+((x4946*x4948))+(((-1.0)*x4948)));
j4eval[0]=x4950;
j4eval[1]=((IKabs((((cj0*x4949))+(((-1.0)*cj0*cj5*x4947)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4950);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4951=cj5*cj5;
IkReal x4952=((1.0)*r20);
IkReal x4953=(r01*r21);
IkReal x4954=(r21*sj5);
CheckValue<IkReal> x4955 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*cj5*x4952))+((cj0*x4954)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4955.valid){
continue;
}
CheckValue<IkReal> x4956=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((cj5*r00*x4954))+(((-1.0)*x4953))+(((-1.0)*r00*x4951*x4952))+((x4951*x4953)))),-1);
if(!x4956.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4955.value)+(((1.5707963267949)*(x4956.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4957=IKcos(j4);
IkReal x4958=IKsin(j4);
IkReal x4959=(cj5*r00);
IkReal x4960=(cj5*r10);
IkReal x4961=(cj5*r20);
IkReal x4962=((1.0)*x4957);
IkReal x4963=((1.0)*x4958);
IkReal x4964=(sj5*x4957);
IkReal x4965=(sj5*x4958);
evalcond[0]=(((r22*x4958))+(((-1.0)*x4961*x4962))+((r21*x4964)));
evalcond[1]=((((-1.0)*x4961*x4963))+(((-1.0)*r22*x4962))+((r21*x4965)));
evalcond[2]=(cj0+(((-1.0)*x4959*x4962))+((r02*x4958))+((r01*x4964)));
evalcond[3]=((((-1.0)*x4960*x4962))+sj0+((r12*x4958))+((r11*x4964)));
evalcond[4]=((((-1.0)*x4960*x4963))+cj0+((r11*x4965))+(((-1.0)*r12*x4962)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x4959*x4963))+(((-1.0)*r02*x4962))+((r01*x4965)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4966=((1.0)*cj5);
CheckValue<IkReal> x4967=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x4966)))),-1);
if(!x4967.valid){
continue;
}
CheckValue<IkReal> x4968 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4966)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4968.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4967.value)))+(x4968.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4969=IKcos(j4);
IkReal x4970=IKsin(j4);
IkReal x4971=(cj5*r00);
IkReal x4972=(cj5*r10);
IkReal x4973=(cj5*r20);
IkReal x4974=((1.0)*x4969);
IkReal x4975=((1.0)*x4970);
IkReal x4976=(sj5*x4969);
IkReal x4977=(sj5*x4970);
evalcond[0]=(((r22*x4970))+(((-1.0)*x4973*x4974))+((r21*x4976)));
evalcond[1]=((((-1.0)*r22*x4974))+(((-1.0)*x4973*x4975))+((r21*x4977)));
evalcond[2]=(cj0+(((-1.0)*x4971*x4974))+((r02*x4970))+((r01*x4976)));
evalcond[3]=(sj0+((r12*x4970))+((r11*x4976))+(((-1.0)*x4972*x4974)));
evalcond[4]=(cj0+((r11*x4977))+(((-1.0)*r12*x4974))+(((-1.0)*x4972*x4975)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x4974))+(((-1.0)*x4971*x4975))+((r01*x4977)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4978 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x4978.valid){
continue;
}
CheckValue<IkReal> x4979=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x4979.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4978.value)+(((1.5707963267949)*(x4979.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4980=IKcos(j4);
IkReal x4981=IKsin(j4);
IkReal x4982=(cj5*r00);
IkReal x4983=(cj5*r10);
IkReal x4984=(cj5*r20);
IkReal x4985=((1.0)*x4980);
IkReal x4986=((1.0)*x4981);
IkReal x4987=(sj5*x4980);
IkReal x4988=(sj5*x4981);
evalcond[0]=(((r22*x4981))+((r21*x4987))+(((-1.0)*x4984*x4985)));
evalcond[1]=((((-1.0)*r22*x4985))+((r21*x4988))+(((-1.0)*x4984*x4986)));
evalcond[2]=(((r01*x4987))+(((-1.0)*x4982*x4985))+cj0+((r02*x4981)));
evalcond[3]=(sj0+((r12*x4981))+((r11*x4987))+(((-1.0)*x4983*x4985)));
evalcond[4]=(cj0+((r11*x4988))+(((-1.0)*r12*x4985))+(((-1.0)*x4983*x4986)));
evalcond[5]=((((-1.0)*sj0))+((r01*x4988))+(((-1.0)*x4982*x4986))+(((-1.0)*r02*x4985)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-1.73273825150958)*py))+(((-7.03596744552376)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((7.03596744552376)*py))+(((-1.73273825150958)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.73273825150958)*py))+(((-7.03596744552376)*px))))+IKsqr(((((7.03596744552376)*py))+(((-1.73273825150958)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.73273825150958)*py))+(((-7.03596744552376)*px))), ((((7.03596744552376)*py))+(((-1.73273825150958)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x4989=IKcos(j0);
IkReal x4990=IKsin(j0);
evalcond[0]=((((-0.033)*x4989))+(((-0.134)*x4990))+(((-1.0)*px)));
evalcond[1]=((((-0.033)*x4990))+(((-1.0)*py))+(((0.134)*x4989)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4991=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4991;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4991);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4992=((1.0)*cj5);
IkReal x4993=((((-1.0)*r01*x4992))+(((-1.0)*r00*sj5)));
j4eval[0]=x4993;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4992)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4993);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4994=((1.0)*cj5);
IkReal x4995=((((-1.0)*r01*x4994))+(((-1.0)*r00*sj5)));
j4eval[0]=x4995;
j4eval[1]=IKsign(x4995);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x4994))+((r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4996=((1.0)*cj5);
CheckValue<IkReal> x4997=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4996))+(((-1.0)*r00*sj5)))),-1);
if(!x4997.valid){
continue;
}
CheckValue<IkReal> x4998 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj0*x4996))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x4998.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4997.value)))+(x4998.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4999=IKcos(j4);
IkReal x5000=IKsin(j4);
IkReal x5001=((1.0)*sj0);
IkReal x5002=(cj5*r00);
IkReal x5003=(cj5*r10);
IkReal x5004=(cj5*r20);
IkReal x5005=((1.0)*x4999);
IkReal x5006=((1.0)*x5000);
IkReal x5007=(sj5*x4999);
IkReal x5008=(sj5*x5000);
evalcond[0]=((((-1.0)*x5004*x5005))+((r22*x5000))+((r21*x5007)));
evalcond[1]=((((-1.0)*x5004*x5006))+((r21*x5008))+(((-1.0)*r22*x5005)));
evalcond[2]=((((-1.0)*x5003*x5006))+((r11*x5008))+cj0+(((-1.0)*r12*x5005)));
evalcond[3]=((((-1.0)*x5002*x5005))+((r02*x5000))+((r01*x5007))+(((-1.0)*cj0)));
evalcond[4]=(((r12*x5000))+(((-1.0)*x5003*x5005))+((r11*x5007))+(((-1.0)*x5001)));
evalcond[5]=((((-1.0)*x5002*x5006))+((r01*x5008))+(((-1.0)*r02*x5005))+(((-1.0)*x5001)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5009=((1.0)*cj5);
CheckValue<IkReal> x5010 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5009)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5010.valid){
continue;
}
CheckValue<IkReal> x5011=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5009)))),-1);
if(!x5011.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5010.value)+(((1.5707963267949)*(x5011.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5012=IKcos(j4);
IkReal x5013=IKsin(j4);
IkReal x5014=((1.0)*sj0);
IkReal x5015=(cj5*r00);
IkReal x5016=(cj5*r10);
IkReal x5017=(cj5*r20);
IkReal x5018=((1.0)*x5012);
IkReal x5019=((1.0)*x5013);
IkReal x5020=(sj5*x5012);
IkReal x5021=(sj5*x5013);
evalcond[0]=((((-1.0)*x5017*x5018))+((r22*x5013))+((r21*x5020)));
evalcond[1]=((((-1.0)*x5017*x5019))+(((-1.0)*r22*x5018))+((r21*x5021)));
evalcond[2]=(((r11*x5021))+cj0+(((-1.0)*x5016*x5019))+(((-1.0)*r12*x5018)));
evalcond[3]=(((r02*x5013))+((r01*x5020))+(((-1.0)*cj0))+(((-1.0)*x5015*x5018)));
evalcond[4]=(((r11*x5020))+(((-1.0)*x5016*x5018))+((r12*x5013))+(((-1.0)*x5014)));
evalcond[5]=((((-1.0)*r02*x5018))+((r01*x5021))+(((-1.0)*x5015*x5019))+(((-1.0)*x5014)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5022 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5022.valid){
continue;
}
CheckValue<IkReal> x5023=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5023.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5022.value)+(((1.5707963267949)*(x5023.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5024=IKcos(j4);
IkReal x5025=IKsin(j4);
IkReal x5026=((1.0)*sj0);
IkReal x5027=(cj5*r00);
IkReal x5028=(cj5*r10);
IkReal x5029=(cj5*r20);
IkReal x5030=((1.0)*x5024);
IkReal x5031=((1.0)*x5025);
IkReal x5032=(sj5*x5024);
IkReal x5033=(sj5*x5025);
evalcond[0]=((((-1.0)*x5029*x5030))+((r22*x5025))+((r21*x5032)));
evalcond[1]=((((-1.0)*x5029*x5031))+((r21*x5033))+(((-1.0)*r22*x5030)));
evalcond[2]=((((-1.0)*x5028*x5031))+cj0+((r11*x5033))+(((-1.0)*r12*x5030)));
evalcond[3]=((((-1.0)*x5027*x5030))+((r02*x5025))+((r01*x5032))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x5028*x5030))+((r12*x5025))+((r11*x5032))+(((-1.0)*x5026)));
evalcond[5]=((((-1.0)*x5027*x5031))+((r01*x5033))+(((-1.0)*r02*x5030))+(((-1.0)*x5026)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.780795278522751)*px))+(((2.28411671544462)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.780795278522751)*py))+(((2.28411671544462)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.780795278522751)*px))+(((2.28411671544462)*py))))+IKsqr(((((0.780795278522751)*py))+(((2.28411671544462)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.780795278522751)*px))+(((2.28411671544462)*py))), ((((0.780795278522751)*py))+(((2.28411671544462)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5034=IKsin(j0);
IkReal x5035=IKcos(j0);
evalcond[0]=((((-1.0)*px))+(((0.39199986)*x5035))+(((-0.134)*x5034)));
evalcond[1]=((((0.134)*x5035))+(((-1.0)*py))+(((0.39199986)*x5034)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5036=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5036;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5036);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5037=((1.0)*cj5);
IkReal x5038=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5037)));
j4eval[0]=x5038;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5037))))));
j4eval[2]=IKsign(x5038);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5039=((1.0)*cj5);
IkReal x5040=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5039)));
j4eval[0]=x5040;
j4eval[1]=IKsign(x5040);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x5039))+((r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5041=((1.0)*cj5);
CheckValue<IkReal> x5042 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj0*x5041))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5042.valid){
continue;
}
CheckValue<IkReal> x5043=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5041)))),-1);
if(!x5043.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5042.value)+(((1.5707963267949)*(x5043.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5044=IKcos(j4);
IkReal x5045=IKsin(j4);
IkReal x5046=((1.0)*sj0);
IkReal x5047=(cj5*r00);
IkReal x5048=(cj5*r10);
IkReal x5049=(cj5*r20);
IkReal x5050=((1.0)*x5044);
IkReal x5051=((1.0)*x5045);
IkReal x5052=(sj5*x5044);
IkReal x5053=(sj5*x5045);
evalcond[0]=(((r21*x5052))+(((-1.0)*x5049*x5050))+((r22*x5045)));
evalcond[1]=(((r21*x5053))+(((-1.0)*r22*x5050))+(((-1.0)*x5049*x5051)));
evalcond[2]=(cj0+(((-1.0)*r12*x5050))+((r11*x5053))+(((-1.0)*x5048*x5051)));
evalcond[3]=(((r01*x5052))+((r02*x5045))+(((-1.0)*x5047*x5050))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x5046))+((r11*x5052))+((r12*x5045))+(((-1.0)*x5048*x5050)));
evalcond[5]=((((-1.0)*x5046))+((r01*x5053))+(((-1.0)*r02*x5050))+(((-1.0)*x5047*x5051)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5054=((1.0)*cj5);
CheckValue<IkReal> x5055=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5054))+(((-1.0)*r00*sj5)))),-1);
if(!x5055.valid){
continue;
}
CheckValue<IkReal> x5056 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5054)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5056.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5055.value)))+(x5056.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5057=IKcos(j4);
IkReal x5058=IKsin(j4);
IkReal x5059=((1.0)*sj0);
IkReal x5060=(cj5*r00);
IkReal x5061=(cj5*r10);
IkReal x5062=(cj5*r20);
IkReal x5063=((1.0)*x5057);
IkReal x5064=((1.0)*x5058);
IkReal x5065=(sj5*x5057);
IkReal x5066=(sj5*x5058);
evalcond[0]=(((r22*x5058))+((r21*x5065))+(((-1.0)*x5062*x5063)));
evalcond[1]=((((-1.0)*r22*x5063))+((r21*x5066))+(((-1.0)*x5062*x5064)));
evalcond[2]=(cj0+(((-1.0)*x5061*x5064))+(((-1.0)*r12*x5063))+((r11*x5066)));
evalcond[3]=((((-1.0)*x5060*x5063))+((r01*x5065))+((r02*x5058))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x5061*x5063))+((r12*x5058))+((r11*x5065))+(((-1.0)*x5059)));
evalcond[5]=((((-1.0)*r02*x5063))+(((-1.0)*x5060*x5064))+(((-1.0)*x5059))+((r01*x5066)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5067 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5067.valid){
continue;
}
CheckValue<IkReal> x5068=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5068.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5067.value)+(((1.5707963267949)*(x5068.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5069=IKcos(j4);
IkReal x5070=IKsin(j4);
IkReal x5071=((1.0)*sj0);
IkReal x5072=(cj5*r00);
IkReal x5073=(cj5*r10);
IkReal x5074=(cj5*r20);
IkReal x5075=((1.0)*x5069);
IkReal x5076=((1.0)*x5070);
IkReal x5077=(sj5*x5069);
IkReal x5078=(sj5*x5070);
evalcond[0]=(((r21*x5077))+(((-1.0)*x5074*x5075))+((r22*x5070)));
evalcond[1]=(((r21*x5078))+(((-1.0)*r22*x5075))+(((-1.0)*x5074*x5076)));
evalcond[2]=(cj0+(((-1.0)*x5073*x5076))+(((-1.0)*r12*x5075))+((r11*x5078)));
evalcond[3]=((((-1.0)*x5072*x5075))+((r02*x5070))+((r01*x5077))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x5071))+(((-1.0)*x5073*x5075))+((r12*x5070))+((r11*x5077)));
evalcond[5]=((((-1.0)*x5071))+(((-1.0)*r02*x5075))+(((-1.0)*x5072*x5076))+((r01*x5078)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.28411542533182)*py))+(((-0.780794279804245)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.28411542533182)*px))+(((0.780794279804245)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.28411542533182)*py))+(((-0.780794279804245)*px))))+IKsqr(((((-2.28411542533182)*px))+(((0.780794279804245)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.28411542533182)*py))+(((-0.780794279804245)*px))), ((((-2.28411542533182)*px))+(((0.780794279804245)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5079=IKcos(j0);
IkReal x5080=IKsin(j0);
evalcond[0]=((((-0.39200014)*x5079))+(((-0.134)*x5080))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((-0.39200014)*x5080))+(((0.134)*x5079)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5081=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5081;
j4eval[1]=IKsign(x5081);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5082=((1.0)*cj5);
IkReal x5083=((((-1.0)*r11*x5082))+(((-1.0)*r10*sj5)));
j4eval[0]=x5083;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5082)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5083);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5084=cj5*cj5;
IkReal x5085=((1.0)*r20);
IkReal x5086=(r01*r21);
IkReal x5087=(r21*sj5);
IkReal x5088=(((cj5*r01*r20*sj5))+((x5084*x5086))+(((-1.0)*r02*r22))+(((-1.0)*x5086))+(((-1.0)*r00*x5084*x5085))+((cj5*r00*x5087)));
j4eval[0]=x5088;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*x5087))+(((-1.0)*cj0*cj5*x5085))))));
j4eval[2]=IKsign(x5088);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5089=cj5*cj5;
IkReal x5090=((1.0)*r20);
IkReal x5091=(r01*r21);
IkReal x5092=(r21*sj5);
CheckValue<IkReal> x5093=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*x5091))+(((-1.0)*r00*x5089*x5090))+((x5089*x5091))+((cj5*r00*x5092)))),-1);
if(!x5093.valid){
continue;
}
CheckValue<IkReal> x5094 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x5092))+(((-1.0)*cj0*cj5*x5090)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5094.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5093.value)))+(x5094.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5095=IKcos(j4);
IkReal x5096=IKsin(j4);
IkReal x5097=(cj5*r00);
IkReal x5098=(cj5*r10);
IkReal x5099=(cj5*r20);
IkReal x5100=((1.0)*x5095);
IkReal x5101=((1.0)*x5096);
IkReal x5102=(sj5*x5095);
IkReal x5103=(sj5*x5096);
evalcond[0]=(((r22*x5096))+((r21*x5102))+(((-1.0)*x5099*x5100)));
evalcond[1]=((((-1.0)*r22*x5100))+((r21*x5103))+(((-1.0)*x5099*x5101)));
evalcond[2]=((((-1.0)*x5097*x5100))+((r01*x5102))+cj0+((r02*x5096)));
evalcond[3]=(sj0+((r12*x5096))+(((-1.0)*x5098*x5100))+((r11*x5102)));
evalcond[4]=(cj0+(((-1.0)*x5098*x5101))+((r11*x5103))+(((-1.0)*r12*x5100)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x5097*x5101))+((r01*x5103))+(((-1.0)*r02*x5100)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5104=((1.0)*cj5);
CheckValue<IkReal> x5105=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x5104)))),-1);
if(!x5105.valid){
continue;
}
CheckValue<IkReal> x5106 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5104)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5106.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5105.value)))+(x5106.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5107=IKcos(j4);
IkReal x5108=IKsin(j4);
IkReal x5109=(cj5*r00);
IkReal x5110=(cj5*r10);
IkReal x5111=(cj5*r20);
IkReal x5112=((1.0)*x5107);
IkReal x5113=((1.0)*x5108);
IkReal x5114=(sj5*x5107);
IkReal x5115=(sj5*x5108);
evalcond[0]=((((-1.0)*x5111*x5112))+((r22*x5108))+((r21*x5114)));
evalcond[1]=((((-1.0)*r22*x5112))+(((-1.0)*x5111*x5113))+((r21*x5115)));
evalcond[2]=(((r01*x5114))+cj0+((r02*x5108))+(((-1.0)*x5109*x5112)));
evalcond[3]=(((r12*x5108))+sj0+(((-1.0)*x5110*x5112))+((r11*x5114)));
evalcond[4]=(cj0+(((-1.0)*x5110*x5113))+((r11*x5115))+(((-1.0)*r12*x5112)));
evalcond[5]=(((r01*x5115))+(((-1.0)*sj0))+(((-1.0)*r02*x5112))+(((-1.0)*x5109*x5113)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5116 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5116.valid){
continue;
}
CheckValue<IkReal> x5117=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5117.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5116.value)+(((1.5707963267949)*(x5117.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5118=IKcos(j4);
IkReal x5119=IKsin(j4);
IkReal x5120=(cj5*r00);
IkReal x5121=(cj5*r10);
IkReal x5122=(cj5*r20);
IkReal x5123=((1.0)*x5118);
IkReal x5124=((1.0)*x5119);
IkReal x5125=(sj5*x5118);
IkReal x5126=(sj5*x5119);
evalcond[0]=(((r22*x5119))+(((-1.0)*x5122*x5123))+((r21*x5125)));
evalcond[1]=((((-1.0)*x5122*x5124))+((r21*x5126))+(((-1.0)*r22*x5123)));
evalcond[2]=(cj0+((r02*x5119))+((r01*x5125))+(((-1.0)*x5120*x5123)));
evalcond[3]=(sj0+((r11*x5125))+(((-1.0)*x5121*x5123))+((r12*x5119)));
evalcond[4]=(cj0+((r11*x5126))+(((-1.0)*x5121*x5124))+(((-1.0)*r12*x5123)));
evalcond[5]=((((-1.0)*sj0))+((r01*x5126))+(((-1.0)*r02*x5123))+(((-1.0)*x5120*x5124)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x5127=((7.0e-5)*sj1);
IkReal x5128=(r00*sj5);
IkReal x5129=(cj5*r01);
IkReal x5130=(cj1*sj2);
IkReal x5131=((500.0)*px);
IkReal x5132=(cj2*sj1);
IkReal x5133=((212.5)*cj1);
IkReal x5134=((196.0)*cj1*cj2);
IkReal x5135=((196.0)*sj1*sj2);
CheckValue<IkReal> x5136=IKPowWithIntegerCheck(((((-67.0)*x5132))+(((-67.0)*x5130))),-1);
if(!x5136.valid){
continue;
}
CheckValue<IkReal> x5137=IKPowWithIntegerCheck(((((-1.0)*x5130))+(((-1.0)*x5132))),-1);
if(!x5137.valid){
continue;
}
if( IKabs(((x5136.value)*(((((-1.0)*x5128*x5133))+(((-1.0)*x5128*x5134))+((x5128*x5135))+((x5129*x5135))+(((-1.0)*x5129*x5133))+(((-1.0)*x5129*x5134))+((x5131*x5132))+((x5130*x5131))+(((-1.0)*x5127*x5129))+(((-1.0)*x5127*x5128))+(((50.0)*x5128*x5130))+(((50.0)*x5128*x5132))+(((50.0)*x5129*x5130))+(((50.0)*x5129*x5132)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x5137.value)*(((((-1.0)*x5128))+(((-1.0)*x5129)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x5136.value)*(((((-1.0)*x5128*x5133))+(((-1.0)*x5128*x5134))+((x5128*x5135))+((x5129*x5135))+(((-1.0)*x5129*x5133))+(((-1.0)*x5129*x5134))+((x5131*x5132))+((x5130*x5131))+(((-1.0)*x5127*x5129))+(((-1.0)*x5127*x5128))+(((50.0)*x5128*x5130))+(((50.0)*x5128*x5132))+(((50.0)*x5129*x5130))+(((50.0)*x5129*x5132))))))+IKsqr(((x5137.value)*(((((-1.0)*x5128))+(((-1.0)*x5129))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x5136.value)*(((((-1.0)*x5128*x5133))+(((-1.0)*x5128*x5134))+((x5128*x5135))+((x5129*x5135))+(((-1.0)*x5129*x5133))+(((-1.0)*x5129*x5134))+((x5131*x5132))+((x5130*x5131))+(((-1.0)*x5127*x5129))+(((-1.0)*x5127*x5128))+(((50.0)*x5128*x5130))+(((50.0)*x5128*x5132))+(((50.0)*x5129*x5130))+(((50.0)*x5129*x5132))))), ((x5137.value)*(((((-1.0)*x5128))+(((-1.0)*x5129))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5138=IKcos(j0);
IkReal x5139=IKsin(j0);
IkReal x5140=((0.1)*sj5);
IkReal x5141=((0.392)*sj1);
IkReal x5142=(cj5*r11);
IkReal x5143=(cj5*r01);
IkReal x5144=((1.0)*cj1);
IkReal x5145=((0.392)*cj2);
IkReal x5146=((1.0)*cj2);
IkReal x5147=(sj2*x5139);
IkReal x5148=(sj1*x5138);
IkReal x5149=(sj2*x5138);
IkReal x5150=(cj1*x5138);
IkReal x5151=(cj1*x5139);
IkReal x5152=(sj1*x5139);
evalcond[0]=(((r00*sj5))+x5143+(((-1.0)*x5146*x5148))+(((-1.0)*x5144*x5149)));
evalcond[1]=(((r10*sj5))+x5142+(((-1.0)*x5146*x5152))+(((-1.0)*x5144*x5147)));
evalcond[2]=((((-1.0)*x5141*x5149))+(((-1.0)*r00*x5140))+(((-1.0)*px))+(((-0.1)*x5143))+(((1.4e-7)*x5148))+(((-0.134)*x5139))+((x5145*x5150))+(((0.425)*x5150)));
evalcond[3]=((((1.4e-7)*x5152))+(((-1.0)*x5141*x5147))+(((-1.0)*r10*x5140))+(((-1.0)*py))+(((0.134)*x5138))+(((-0.1)*x5142))+((x5145*x5151))+(((0.425)*x5151)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x5153=((1.0)*cj5);
IkReal x5154=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5153)));
j4eval[0]=x5154;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x5153))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5154);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x5155=((1.0)*cj5);
IkReal x5156=((((-1.0)*r10*sj5))+(((-1.0)*r11*x5155)));
j4eval[0]=x5156;
j4eval[1]=((IKabs(((((-1.0)*r20*sj0*x5155))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x5156);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x5157=((1.0)*sj0);
IkReal x5158=((1.0)*cj0);
IkReal x5159=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x5159;
j4eval[1]=((IKabs((((cj0*cj5*r00))+(((-1.0)*r01*sj5*x5158))+(((-1.0)*r11*sj5*x5157))+((cj5*r10*sj0)))))+(IKabs(((((-1.0)*r12*x5157))+(((-1.0)*r02*x5158))))));
j4eval[2]=IKsign(x5159);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x5160=((-1.0)*r20);
IkReal x5162 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x5162)==0){
continue;
}
IkReal x5161=pow(x5162,-0.5);
CheckValue<IkReal> x5163 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5160),IKFAST_ATAN2_MAGTHRESH);
if(!x5163.valid){
continue;
}
IkReal gconst114=((-1.0)*(x5163.value));
IkReal gconst115=(r21*x5161);
IkReal gconst116=(x5160*x5161);
CheckValue<IkReal> x5164 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5164.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5164.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x5165=((-1.0)*r20);
IkReal x5166=x5161;
CheckValue<IkReal> x5168 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5165),IKFAST_ATAN2_MAGTHRESH);
if(!x5168.valid){
continue;
}
IkReal x5167=((-1.0)*(x5168.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x5167;
IkReal gconst114=x5167;
IkReal gconst115=(r21*x5166);
IkReal gconst116=(x5165*x5166);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5169=((-1.0)*r20);
IkReal x5170=x5161;
CheckValue<IkReal> x5172 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5169),IKFAST_ATAN2_MAGTHRESH);
if(!x5172.valid){
continue;
}
IkReal x5171=((-1.0)*(x5172.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x5171;
IkReal gconst114=x5171;
IkReal gconst115=(r21*x5170);
IkReal gconst116=(x5169*x5170);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x5173=((-1.0)*r20);
IkReal x5174=x5161;
CheckValue<IkReal> x5176 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5173),IKFAST_ATAN2_MAGTHRESH);
if(!x5176.valid){
continue;
}
IkReal x5175=((-1.0)*(x5176.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x5175;
IkReal gconst114=x5175;
IkReal gconst115=(r21*x5174);
IkReal gconst116=(x5173*x5174);
IkReal x5177=((1.0)*(r22*r22));
CheckValue<IkReal> x5181=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x5177))),-1);
if(!x5181.valid){
continue;
}
IkReal x5178=x5181.value;
IkReal x5179=((1.0)*x5178);
IkReal x5180=((((-1.0)*x5179*(r21*r21*r21*r21)))+(((-2.0)*x5178*(r20*r20)*(r21*r21)))+(((-1.0)*x5177))+(((-1.0)*x5179*(r20*r20*r20*r20))));
j4eval[0]=x5180;
j4eval[1]=IKsign(x5180);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5182=(cj2*sj1);
IkReal x5183=(gconst115*r21);
IkReal x5184=(cj1*sj2);
IkReal x5185=((1.0)*gconst116*r20);
CheckValue<IkReal> x5186=IKPowWithIntegerCheck(IKsign(((((2.0)*gconst116*r20*x5183))+(((-1.0)*gconst116*r20*x5185))+(((-1.0)*(r22*r22)))+(((-1.0)*(x5183*x5183))))),-1);
if(!x5186.valid){
continue;
}
CheckValue<IkReal> x5187 = IKatan2WithCheck(IkReal((((r22*x5182))+((r22*x5184)))),IkReal(((((-1.0)*x5182*x5185))+((x5182*x5183))+(((-1.0)*x5184*x5185))+((x5183*x5184)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5187.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5186.value)))+(x5187.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5188=IKsin(j4);
IkReal x5189=IKcos(j4);
IkReal x5190=(sj1*sj2);
IkReal x5191=((1.0)*x5189);
IkReal x5192=((1.0)*cj1*cj2);
IkReal x5193=(gconst115*x5188);
IkReal x5194=(gconst115*x5189);
IkReal x5195=((1.0)*gconst116*x5188);
evalcond[0]=((((-1.0)*r20*x5195))+((r21*x5193))+(((-1.0)*r22*x5191)));
evalcond[1]=((((-1.0)*r12*x5191))+cj0+(((-1.0)*r10*x5195))+((r11*x5193)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r00*x5195))+(((-1.0)*r02*x5191))+((r01*x5193)));
evalcond[3]=(((r22*x5188))+((cj2*sj1))+((cj1*sj2))+((r21*x5194))+(((-1.0)*gconst116*r20*x5191)));
evalcond[4]=(((cj0*x5190))+(((-1.0)*cj0*x5192))+((r02*x5188))+((r01*x5194))+(((-1.0)*gconst116*r00*x5191)));
evalcond[5]=((((-1.0)*gconst116*r10*x5191))+((sj0*x5190))+((r11*x5194))+(((-1.0)*sj0*x5192))+((r12*x5188)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5196=((1.0)*gconst116);
CheckValue<IkReal> x5197 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst115*r21*sj0))+(((-1.0)*r20*sj0*x5196)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5197.valid){
continue;
}
CheckValue<IkReal> x5198=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x5196))+(((-1.0)*gconst115*r10)))),-1);
if(!x5198.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5197.value)+(((1.5707963267949)*(x5198.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5199=IKsin(j4);
IkReal x5200=IKcos(j4);
IkReal x5201=(sj1*sj2);
IkReal x5202=((1.0)*x5200);
IkReal x5203=((1.0)*cj1*cj2);
IkReal x5204=(gconst115*x5199);
IkReal x5205=(gconst115*x5200);
IkReal x5206=((1.0)*gconst116*x5199);
evalcond[0]=((((-1.0)*r22*x5202))+(((-1.0)*r20*x5206))+((r21*x5204)));
evalcond[1]=(cj0+(((-1.0)*r10*x5206))+((r11*x5204))+(((-1.0)*r12*x5202)));
evalcond[2]=((((-1.0)*r02*x5202))+(((-1.0)*sj0))+((r01*x5204))+(((-1.0)*r00*x5206)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x5199))+(((-1.0)*gconst116*r20*x5202))+((r21*x5205)));
evalcond[4]=(((r01*x5205))+((r02*x5199))+(((-1.0)*cj0*x5203))+(((-1.0)*gconst116*r00*x5202))+((cj0*x5201)));
evalcond[5]=(((r11*x5205))+((r12*x5199))+((sj0*x5201))+(((-1.0)*gconst116*r10*x5202))+(((-1.0)*sj0*x5203)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5207=((1.0)*gconst116);
CheckValue<IkReal> x5208=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst115*r00))+(((-1.0)*r01*x5207)))),-1);
if(!x5208.valid){
continue;
}
CheckValue<IkReal> x5209 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst115*r21))+(((-1.0)*cj0*r20*x5207)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5209.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5208.value)))+(x5209.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5210=IKsin(j4);
IkReal x5211=IKcos(j4);
IkReal x5212=(sj1*sj2);
IkReal x5213=((1.0)*x5211);
IkReal x5214=((1.0)*cj1*cj2);
IkReal x5215=(gconst115*x5210);
IkReal x5216=(gconst115*x5211);
IkReal x5217=((1.0)*gconst116*x5210);
evalcond[0]=((((-1.0)*r22*x5213))+(((-1.0)*r20*x5217))+((r21*x5215)));
evalcond[1]=(cj0+(((-1.0)*r10*x5217))+((r11*x5215))+(((-1.0)*r12*x5213)));
evalcond[2]=(((r01*x5215))+(((-1.0)*sj0))+(((-1.0)*r00*x5217))+(((-1.0)*r02*x5213)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst116*r20*x5213))+((r22*x5210))+((r21*x5216)));
evalcond[4]=(((r01*x5216))+(((-1.0)*cj0*x5214))+(((-1.0)*gconst116*r00*x5213))+((r02*x5210))+((cj0*x5212)));
evalcond[5]=(((r12*x5210))+((sj0*x5212))+((r11*x5216))+(((-1.0)*gconst116*r10*x5213))+(((-1.0)*sj0*x5214)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5218=((-1.0)*r21);
IkReal x5220 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x5220)==0){
continue;
}
IkReal x5219=pow(x5220,-0.5);
CheckValue<IkReal> x5221 = IKatan2WithCheck(IkReal(x5218),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5221.valid){
continue;
}
IkReal gconst117=((3.14159265358979)+(((-1.0)*(x5221.value))));
IkReal gconst118=(x5218*x5219);
IkReal gconst119=((1.0)*r20*x5219);
CheckValue<IkReal> x5222 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5222.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5222.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x5223=((-1.0)*r21);
CheckValue<IkReal> x5226 = IKatan2WithCheck(IkReal(x5223),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5226.valid){
continue;
}
IkReal x5224=((1.0)*(x5226.value));
IkReal x5225=x5219;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x5224)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5224)));
IkReal gconst118=(x5223*x5225);
IkReal gconst119=((1.0)*r20*x5225);
IkReal x5227=r22*r22;
IkReal x5228=((1.0)*x5227);
CheckValue<IkReal> x5232=IKPowWithIntegerCheck(((-1.0)+x5227),-1);
if(!x5232.valid){
continue;
}
IkReal x5229=x5232.value;
if((((1.0)+(((-1.0)*x5228)))) < -0.00001)
continue;
IkReal x5230=IKsqrt(((1.0)+(((-1.0)*x5228))));
IkReal x5231=(cj0*x5229*x5230);
j4eval[0]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*x5228*x5231))+x5231))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5233=((-1.0)*r21);
CheckValue<IkReal> x5236 = IKatan2WithCheck(IkReal(x5233),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5236.valid){
continue;
}
IkReal x5234=((1.0)*(x5236.value));
IkReal x5235=x5219;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x5234)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5234)));
IkReal gconst118=(x5233*x5235);
IkReal gconst119=((1.0)*r20*x5235);
IkReal x5237=r22*r22;
IkReal x5238=((1.0)*x5237);
CheckValue<IkReal> x5242=IKPowWithIntegerCheck(((-1.0)+x5237),-1);
if(!x5242.valid){
continue;
}
IkReal x5239=x5242.value;
if((((1.0)+(((-1.0)*x5238)))) < -0.00001)
continue;
IkReal x5240=IKsqrt(((1.0)+(((-1.0)*x5238))));
IkReal x5241=(sj0*x5239*x5240);
j4eval[0]=((IKabs((x5241+(((-1.0)*x5238*x5241)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x5243=((-1.0)*r21);
CheckValue<IkReal> x5246 = IKatan2WithCheck(IkReal(x5243),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5246.valid){
continue;
}
IkReal x5244=((1.0)*(x5246.value));
IkReal x5245=x5219;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x5244)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5244)));
IkReal gconst118=(x5243*x5245);
IkReal gconst119=((1.0)*r20*x5245);
IkReal x5247=r22*r22;
IkReal x5248=(r12*sj0);
IkReal x5249=(cj0*r02);
CheckValue<IkReal> x5253=IKPowWithIntegerCheck(((-1.0)+x5247),-1);
if(!x5253.valid){
continue;
}
IkReal x5250=x5253.value;
if((((1.0)+(((-1.0)*x5247)))) < -0.00001)
continue;
IkReal x5251=IKsqrt(((1.0)+(((-1.0)*x5247))));
IkReal x5252=(r22*x5250*x5251);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs((((x5248*x5252))+((x5249*x5252)))))+(IKabs(((((-1.0)*x5249))+(((-1.0)*x5248))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5254=((1.0)*sj0);
IkReal x5255=((1.0)*gconst118);
CheckValue<IkReal> x5256 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x5254))+(((-1.0)*cj0*r02)))),IkReal((((gconst119*r10*sj0))+(((-1.0)*cj0*r01*x5255))+(((-1.0)*gconst118*r11*x5254))+((cj0*gconst119*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5256.valid){
continue;
}
CheckValue<IkReal> x5257=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x5255))+(((-1.0)*gconst119*r21)))),-1);
if(!x5257.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5256.value)+(((1.5707963267949)*(x5257.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5258=IKsin(j4);
IkReal x5259=IKcos(j4);
IkReal x5260=(gconst118*r01);
IkReal x5261=(sj1*sj2);
IkReal x5262=(gconst119*r20);
IkReal x5263=(gconst119*r10);
IkReal x5264=(gconst119*r00);
IkReal x5265=(gconst118*r21);
IkReal x5266=(gconst118*r11);
IkReal x5267=((1.0)*x5259);
IkReal x5268=((1.0)*cj1*cj2);
IkReal x5269=((1.0)*x5258);
evalcond[0]=((((-1.0)*r22*x5267))+(((-1.0)*x5262*x5269))+((x5258*x5265)));
evalcond[1]=((((-1.0)*x5263*x5269))+cj0+(((-1.0)*r12*x5267))+((x5258*x5266)));
evalcond[2]=((((-1.0)*x5264*x5269))+(((-1.0)*sj0))+(((-1.0)*r02*x5267))+((x5258*x5260)));
evalcond[3]=(((r22*x5258))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x5262*x5267))+((x5259*x5265)));
evalcond[4]=((((-1.0)*x5264*x5267))+(((-1.0)*cj0*x5268))+((x5259*x5260))+((r02*x5258))+((cj0*x5261)));
evalcond[5]=((((-1.0)*x5263*x5267))+((r12*x5258))+((sj0*x5261))+(((-1.0)*sj0*x5268))+((x5259*x5266)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5270=((1.0)*gconst119);
CheckValue<IkReal> x5271=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst118*r10))+(((-1.0)*r11*x5270)))),-1);
if(!x5271.valid){
continue;
}
CheckValue<IkReal> x5272 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst118*r21*sj0))+(((-1.0)*r20*sj0*x5270)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5272.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5271.value)))+(x5272.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5273=IKsin(j4);
IkReal x5274=IKcos(j4);
IkReal x5275=(gconst118*r01);
IkReal x5276=(sj1*sj2);
IkReal x5277=(gconst119*r20);
IkReal x5278=(gconst119*r10);
IkReal x5279=(gconst119*r00);
IkReal x5280=(gconst118*r21);
IkReal x5281=(gconst118*r11);
IkReal x5282=((1.0)*x5274);
IkReal x5283=((1.0)*cj1*cj2);
IkReal x5284=((1.0)*x5273);
evalcond[0]=((((-1.0)*r22*x5282))+((x5273*x5280))+(((-1.0)*x5277*x5284)));
evalcond[1]=(((x5273*x5281))+cj0+(((-1.0)*x5278*x5284))+(((-1.0)*r12*x5282)));
evalcond[2]=(((x5273*x5275))+(((-1.0)*sj0))+(((-1.0)*x5279*x5284))+(((-1.0)*r02*x5282)));
evalcond[3]=(((cj2*sj1))+((r22*x5273))+((cj1*sj2))+((x5274*x5280))+(((-1.0)*x5277*x5282)));
evalcond[4]=(((r02*x5273))+(((-1.0)*x5279*x5282))+((cj0*x5276))+((x5274*x5275))+(((-1.0)*cj0*x5283)));
evalcond[5]=(((sj0*x5276))+(((-1.0)*sj0*x5283))+(((-1.0)*x5278*x5282))+((x5274*x5281))+((r12*x5273)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5285=((1.0)*gconst119);
CheckValue<IkReal> x5286=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5285))+(((-1.0)*gconst118*r00)))),-1);
if(!x5286.valid){
continue;
}
CheckValue<IkReal> x5287 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst118*r21))+(((-1.0)*cj0*r20*x5285)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5287.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5286.value)))+(x5287.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5288=IKsin(j4);
IkReal x5289=IKcos(j4);
IkReal x5290=(gconst118*r01);
IkReal x5291=(sj1*sj2);
IkReal x5292=(gconst119*r20);
IkReal x5293=(gconst119*r10);
IkReal x5294=(gconst119*r00);
IkReal x5295=(gconst118*r21);
IkReal x5296=(gconst118*r11);
IkReal x5297=((1.0)*x5289);
IkReal x5298=((1.0)*cj1*cj2);
IkReal x5299=((1.0)*x5288);
evalcond[0]=((((-1.0)*r22*x5297))+(((-1.0)*x5292*x5299))+((x5288*x5295)));
evalcond[1]=(cj0+(((-1.0)*r12*x5297))+((x5288*x5296))+(((-1.0)*x5293*x5299)));
evalcond[2]=((((-1.0)*sj0))+((x5288*x5290))+(((-1.0)*x5294*x5299))+(((-1.0)*r02*x5297)));
evalcond[3]=(((cj2*sj1))+((r22*x5288))+((cj1*sj2))+((x5289*x5295))+(((-1.0)*x5292*x5297)));
evalcond[4]=(((r02*x5288))+((x5289*x5290))+((cj0*x5291))+(((-1.0)*x5294*x5297))+(((-1.0)*cj0*x5298)));
evalcond[5]=(((r12*x5288))+((sj0*x5291))+(((-1.0)*sj0*x5298))+((x5289*x5296))+(((-1.0)*x5293*x5297)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5300=((-1.0)*r10);
IkReal x5302 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x5302)==0){
continue;
}
IkReal x5301=pow(x5302,-0.5);
CheckValue<IkReal> x5303 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x5300),IKFAST_ATAN2_MAGTHRESH);
if(!x5303.valid){
continue;
}
IkReal gconst120=((-1.0)*(x5303.value));
IkReal gconst121=(r11*x5301);
IkReal gconst122=(x5300*x5301);
CheckValue<IkReal> x5304 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5304.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5304.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x5305=((-1.0)*r10);
IkReal x5306=x5301;
CheckValue<IkReal> x5308 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x5305),IKFAST_ATAN2_MAGTHRESH);
if(!x5308.valid){
continue;
}
IkReal x5307=((-1.0)*(x5308.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst121;
cj5=gconst122;
j5=x5307;
IkReal gconst120=x5307;
IkReal gconst121=(r11*x5306);
IkReal gconst122=(x5305*x5306);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5309=((1.0)*sj0);
IkReal x5310=((1.0)*gconst121);
CheckValue<IkReal> x5311=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst122*r21))+(((-1.0)*r20*x5310)))),-1);
if(!x5311.valid){
continue;
}
CheckValue<IkReal> x5312 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x5309))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*gconst121*r11*x5309))+(((-1.0)*cj0*r01*x5310))+((cj0*gconst122*r00))+((gconst122*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5312.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5311.value)))+(x5312.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5313=IKsin(j4);
IkReal x5314=IKcos(j4);
IkReal x5315=(gconst121*r11);
IkReal x5316=(sj1*sj2);
IkReal x5317=(gconst122*r00);
IkReal x5318=(gconst122*r10);
IkReal x5319=(gconst122*r20);
IkReal x5320=((1.0)*x5314);
IkReal x5321=((1.0)*cj1*cj2);
IkReal x5322=((1.0)*x5313);
IkReal x5323=(gconst121*x5313);
IkReal x5324=(gconst121*x5314);
evalcond[0]=((((-1.0)*r22*x5320))+((r21*x5323))+(((-1.0)*x5319*x5322)));
evalcond[1]=((((-1.0)*x5318*x5322))+cj0+((x5313*x5315))+(((-1.0)*r12*x5320)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x5320))+(((-1.0)*x5317*x5322))+((r01*x5323)));
evalcond[3]=(((cj2*sj1))+((r22*x5313))+((cj1*sj2))+((r21*x5324))+(((-1.0)*x5319*x5320)));
evalcond[4]=(((cj0*x5316))+((r02*x5313))+(((-1.0)*x5317*x5320))+((r01*x5324))+(((-1.0)*cj0*x5321)));
evalcond[5]=((((-1.0)*x5318*x5320))+((sj0*x5316))+((x5314*x5315))+((r12*x5313))+(((-1.0)*sj0*x5321)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5325=((1.0)*gconst122);
CheckValue<IkReal> x5326=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst121*r00))+(((-1.0)*r01*x5325)))),-1);
if(!x5326.valid){
continue;
}
CheckValue<IkReal> x5327 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x5325))+((cj0*gconst121*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5327.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5326.value)))+(x5327.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5328=IKsin(j4);
IkReal x5329=IKcos(j4);
IkReal x5330=(gconst121*r11);
IkReal x5331=(sj1*sj2);
IkReal x5332=(gconst122*r00);
IkReal x5333=(gconst122*r10);
IkReal x5334=(gconst122*r20);
IkReal x5335=((1.0)*x5329);
IkReal x5336=((1.0)*cj1*cj2);
IkReal x5337=((1.0)*x5328);
IkReal x5338=(gconst121*x5328);
IkReal x5339=(gconst121*x5329);
evalcond[0]=((((-1.0)*r22*x5335))+((r21*x5338))+(((-1.0)*x5334*x5337)));
evalcond[1]=(((x5328*x5330))+cj0+(((-1.0)*r12*x5335))+(((-1.0)*x5333*x5337)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x5335))+(((-1.0)*x5332*x5337))+((r01*x5338)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x5328))+((r21*x5339))+(((-1.0)*x5334*x5335)));
evalcond[4]=((((-1.0)*x5332*x5335))+((r01*x5339))+(((-1.0)*cj0*x5336))+((cj0*x5331))+((r02*x5328)));
evalcond[5]=(((r12*x5328))+(((-1.0)*x5333*x5335))+(((-1.0)*sj0*x5336))+((sj0*x5331))+((x5329*x5330)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5340=((-1.0)*r11);
IkReal x5342 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x5342)==0){
continue;
}
IkReal x5341=pow(x5342,-0.5);
CheckValue<IkReal> x5343 = IKatan2WithCheck(IkReal(x5340),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5343.valid){
continue;
}
IkReal gconst123=((3.14159265358979)+(((-1.0)*(x5343.value))));
IkReal gconst124=(x5340*x5341);
IkReal gconst125=((1.0)*r10*x5341);
CheckValue<IkReal> x5344 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5344.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5344.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x5345=((-1.0)*r11);
CheckValue<IkReal> x5348 = IKatan2WithCheck(IkReal(x5345),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5348.valid){
continue;
}
IkReal x5346=((1.0)*(x5348.value));
IkReal x5347=x5341;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x5346)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5346)));
IkReal gconst124=(x5345*x5347);
IkReal gconst125=((1.0)*r10*x5347);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5349=((-1.0)*r11);
CheckValue<IkReal> x5352 = IKatan2WithCheck(IkReal(x5349),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5352.valid){
continue;
}
IkReal x5350=((1.0)*(x5352.value));
IkReal x5351=x5341;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x5350)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5350)));
IkReal gconst124=(x5349*x5351);
IkReal gconst125=((1.0)*r10*x5351);
IkReal x5353=r12*r12;
IkReal x5354=((1.0)*sj0);
IkReal x5355=(cj0*r02);
IkReal x5356=x5341;
j4eval[0]=((IKabs((((r12*x5355*x5356))+((sj0*x5353*x5356))+(((-1.0)*x5354*x5356)))))+(IKabs(((((-1.0)*r12*x5354))+(((-1.0)*x5355))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x5357=((-1.0)*r11);
CheckValue<IkReal> x5360 = IKatan2WithCheck(IkReal(x5357),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5360.valid){
continue;
}
IkReal x5358=((1.0)*(x5360.value));
IkReal x5359=x5341;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x5358)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5358)));
IkReal gconst124=(x5357*x5359);
IkReal gconst125=((1.0)*r10*x5359);
IkReal x5361=r12*r12;
IkReal x5362=((1.0)+(((-1.0)*x5361)));
IkReal x5363=(cj2*r22*sj1);
IkReal x5364=(cj1*r22*sj2);
CheckValue<IkReal> x5371=IKPowWithIntegerCheck(x5362,-1);
if(!x5371.valid){
continue;
}
IkReal x5365=x5371.value;
CheckValue<IkReal> x5372=IKPowWithIntegerCheck(((-1.0)+x5361),-1);
if(!x5372.valid){
continue;
}
IkReal x5366=x5372.value;
IkReal x5367=((1.0)*x5365);
if((x5362) < -0.00001)
continue;
IkReal x5368=IKsqrt(x5362);
IkReal x5369=((1.0)*r12*x5366*x5368);
IkReal x5370=((((-1.0)*x5367*(r10*r10)*(r20*r20)))+(((-1.0)*x5367*(r11*r11)*(r21*r21)))+(((-1.0)*(r22*r22)))+(((-2.0)*r10*r11*r20*r21*x5365)));
j4eval[0]=x5370;
j4eval[1]=IKsign(x5370);
j4eval[2]=((IKabs(((((-1.0)*x5364*x5369))+(((-1.0)*x5363*x5369)))))+(IKabs((x5363+x5364))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5373=(gconst124*r21);
IkReal x5374=(cj1*sj2);
IkReal x5375=(cj2*sj1);
IkReal x5376=(gconst125*r20);
CheckValue<IkReal> x5377 = IKatan2WithCheck(IkReal((((r22*x5375))+((r22*x5374)))),IkReal(((((-1.0)*x5374*x5376))+((x5373*x5374))+((x5373*x5375))+(((-1.0)*x5375*x5376)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5377.valid){
continue;
}
CheckValue<IkReal> x5378=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x5376*x5376)))+(((-1.0)*(x5373*x5373)))+(((-1.0)*(r22*r22)))+(((2.0)*x5373*x5376)))),-1);
if(!x5378.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5377.value)+(((1.5707963267949)*(x5378.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5379=IKsin(j4);
IkReal x5380=IKcos(j4);
IkReal x5381=(sj1*sj2);
IkReal x5382=(gconst125*r20);
IkReal x5383=(gconst124*r01);
IkReal x5384=(gconst125*r00);
IkReal x5385=(gconst125*r10);
IkReal x5386=((1.0)*x5380);
IkReal x5387=((1.0)*cj1*cj2);
IkReal x5388=((1.0)*x5379);
IkReal x5389=(gconst124*x5379);
IkReal x5390=(gconst124*x5380);
evalcond[0]=((((-1.0)*x5382*x5388))+(((-1.0)*r22*x5386))+((r21*x5389)));
evalcond[1]=(cj0+(((-1.0)*x5385*x5388))+((r11*x5389))+(((-1.0)*r12*x5386)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x5384*x5388))+((x5379*x5383))+(((-1.0)*r02*x5386)));
evalcond[3]=((((-1.0)*x5382*x5386))+((cj2*sj1))+((cj1*sj2))+((r22*x5379))+((r21*x5390)));
evalcond[4]=((((-1.0)*x5384*x5386))+(((-1.0)*cj0*x5387))+((cj0*x5381))+((r02*x5379))+((x5380*x5383)));
evalcond[5]=(((sj0*x5381))+(((-1.0)*x5385*x5386))+(((-1.0)*sj0*x5387))+((r11*x5390))+((r12*x5379)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5391=((1.0)*sj0);
IkReal x5392=((1.0)*cj0);
CheckValue<IkReal> x5393 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x5392))+(((-1.0)*r12*x5391)))),IkReal((((gconst125*r10*sj0))+(((-1.0)*gconst124*r01*x5392))+((cj0*gconst125*r00))+(((-1.0)*gconst124*r11*x5391)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5393.valid){
continue;
}
CheckValue<IkReal> x5394=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst124*r20))+(((-1.0)*gconst125*r21)))),-1);
if(!x5394.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5393.value)+(((1.5707963267949)*(x5394.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5395=IKsin(j4);
IkReal x5396=IKcos(j4);
IkReal x5397=(sj1*sj2);
IkReal x5398=(gconst125*r20);
IkReal x5399=(gconst124*r01);
IkReal x5400=(gconst125*r00);
IkReal x5401=(gconst125*r10);
IkReal x5402=((1.0)*x5396);
IkReal x5403=((1.0)*cj1*cj2);
IkReal x5404=((1.0)*x5395);
IkReal x5405=(gconst124*x5395);
IkReal x5406=(gconst124*x5396);
evalcond[0]=(((r21*x5405))+(((-1.0)*x5398*x5404))+(((-1.0)*r22*x5402)));
evalcond[1]=(cj0+(((-1.0)*r12*x5402))+((r11*x5405))+(((-1.0)*x5401*x5404)));
evalcond[2]=((((-1.0)*x5400*x5404))+(((-1.0)*sj0))+(((-1.0)*r02*x5402))+((x5395*x5399)));
evalcond[3]=(((r21*x5406))+((cj2*sj1))+((r22*x5395))+(((-1.0)*x5398*x5402))+((cj1*sj2)));
evalcond[4]=((((-1.0)*x5400*x5402))+((r02*x5395))+((cj0*x5397))+(((-1.0)*cj0*x5403))+((x5396*x5399)));
evalcond[5]=(((r12*x5395))+(((-1.0)*sj0*x5403))+((r11*x5406))+(((-1.0)*x5401*x5402))+((sj0*x5397)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5407=((1.0)*gconst125);
CheckValue<IkReal> x5408 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x5407))+((cj0*gconst124*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5408.valid){
continue;
}
CheckValue<IkReal> x5409=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst124*r00))+(((-1.0)*r01*x5407)))),-1);
if(!x5409.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5408.value)+(((1.5707963267949)*(x5409.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5410=IKsin(j4);
IkReal x5411=IKcos(j4);
IkReal x5412=(sj1*sj2);
IkReal x5413=(gconst125*r20);
IkReal x5414=(gconst124*r01);
IkReal x5415=(gconst125*r00);
IkReal x5416=(gconst125*r10);
IkReal x5417=((1.0)*x5411);
IkReal x5418=((1.0)*cj1*cj2);
IkReal x5419=((1.0)*x5410);
IkReal x5420=(gconst124*x5410);
IkReal x5421=(gconst124*x5411);
evalcond[0]=(((r21*x5420))+(((-1.0)*r22*x5417))+(((-1.0)*x5413*x5419)));
evalcond[1]=((((-1.0)*x5416*x5419))+cj0+(((-1.0)*r12*x5417))+((r11*x5420)));
evalcond[2]=(((x5410*x5414))+(((-1.0)*r02*x5417))+(((-1.0)*sj0))+(((-1.0)*x5415*x5419)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x5410))+((r21*x5421))+(((-1.0)*x5413*x5417)));
evalcond[4]=((((-1.0)*x5415*x5417))+(((-1.0)*cj0*x5418))+((r02*x5410))+((x5411*x5414))+((cj0*x5412)));
evalcond[5]=((((-1.0)*x5416*x5417))+((sj0*x5412))+(((-1.0)*sj0*x5418))+((r12*x5410))+((r11*x5421)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5422=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x5422;
j4eval[1]=IKsign(x5422);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5423=((1.0)*cj5);
IkReal x5424=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5423)));
j4eval[0]=x5424;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x5423)))))+(IKabs(r22)));
j4eval[2]=IKsign(x5424);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5425=cj5*cj5;
IkReal x5426=r11*r11;
IkReal x5427=(cj5*r10);
IkReal x5428=(r11*sj5);
IkReal x5429=((((-1.0)*x5425*(r10*r10)))+(((2.0)*x5427*x5428))+(((-1.0)*(r12*r12)))+((x5425*x5426))+(((-1.0)*x5426)));
j4eval[0]=x5429;
j4eval[1]=IKsign(x5429);
j4eval[2]=((IKabs(r12))+(IKabs((x5428+(((-1.0)*x5427))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5430=cj5*cj5;
IkReal x5431=r11*r11;
IkReal x5432=(cj5*r10);
IkReal x5433=(r11*sj5);
CheckValue<IkReal> x5434=IKPowWithIntegerCheck(IKsign(((((-1.0)*x5431))+(((-1.0)*(r12*r12)))+(((2.0)*x5432*x5433))+((x5430*x5431))+(((-1.0)*x5430*(r10*r10))))),-1);
if(!x5434.valid){
continue;
}
CheckValue<IkReal> x5435 = IKatan2WithCheck(IkReal((x5433+(((-1.0)*x5432)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5435.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5434.value)))+(x5435.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5436=IKcos(j4);
IkReal x5437=IKsin(j4);
IkReal x5438=(cj5*r00);
IkReal x5439=(cj5*r10);
IkReal x5440=(r21*sj5);
IkReal x5441=(cj5*r20);
IkReal x5442=((1.0)*x5436);
IkReal x5443=((1.0)*x5437);
IkReal x5444=(sj5*x5437);
IkReal x5445=(sj5*x5436);
evalcond[0]=((((-1.0)*x5439*x5442))+((r11*x5445))+((r12*x5437)));
evalcond[1]=(((x5437*x5440))+(((-1.0)*r22*x5442))+(((-1.0)*x5441*x5443)));
evalcond[2]=(((r01*x5444))+(((-1.0)*x5438*x5443))+(((-1.0)*r02*x5442)));
evalcond[3]=((1.0)+(((-1.0)*r12*x5442))+(((-1.0)*x5439*x5443))+((r11*x5444)));
evalcond[4]=(((cj2*sj1))+((r22*x5437))+((cj1*sj2))+((x5436*x5440))+(((-1.0)*x5441*x5442)));
evalcond[5]=(((r02*x5437))+((r01*x5445))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x5438*x5442)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5446=((1.0)*cj5);
CheckValue<IkReal> x5447=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5446)))),-1);
if(!x5447.valid){
continue;
}
CheckValue<IkReal> x5448 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x5446)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5448.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5447.value)))+(x5448.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5449=IKcos(j4);
IkReal x5450=IKsin(j4);
IkReal x5451=(cj5*r00);
IkReal x5452=(cj5*r10);
IkReal x5453=(r21*sj5);
IkReal x5454=(cj5*r20);
IkReal x5455=((1.0)*x5449);
IkReal x5456=((1.0)*x5450);
IkReal x5457=(sj5*x5450);
IkReal x5458=(sj5*x5449);
evalcond[0]=(((r12*x5450))+(((-1.0)*x5452*x5455))+((r11*x5458)));
evalcond[1]=((((-1.0)*x5454*x5456))+((x5450*x5453))+(((-1.0)*r22*x5455)));
evalcond[2]=((((-1.0)*x5451*x5456))+((r01*x5457))+(((-1.0)*r02*x5455)));
evalcond[3]=((1.0)+(((-1.0)*r12*x5455))+(((-1.0)*x5452*x5456))+((r11*x5457)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x5454*x5455))+((cj1*sj2))+((r22*x5450))+((x5449*x5453)));
evalcond[5]=((((-1.0)*x5451*x5455))+((r01*x5458))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r02*x5450)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5459=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x5459.valid){
continue;
}
CheckValue<IkReal> x5460 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5460.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5459.value)))+(x5460.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5461=IKcos(j4);
IkReal x5462=IKsin(j4);
IkReal x5463=(cj5*r00);
IkReal x5464=(cj5*r10);
IkReal x5465=(r21*sj5);
IkReal x5466=(cj5*r20);
IkReal x5467=((1.0)*x5461);
IkReal x5468=((1.0)*x5462);
IkReal x5469=(sj5*x5462);
IkReal x5470=(sj5*x5461);
evalcond[0]=((((-1.0)*x5464*x5467))+((r12*x5462))+((r11*x5470)));
evalcond[1]=((((-1.0)*x5466*x5468))+((x5462*x5465))+(((-1.0)*r22*x5467)));
evalcond[2]=((((-1.0)*x5463*x5468))+((r01*x5469))+(((-1.0)*r02*x5467)));
evalcond[3]=((1.0)+(((-1.0)*x5464*x5468))+((r11*x5469))+(((-1.0)*r12*x5467)));
evalcond[4]=((((-1.0)*x5466*x5467))+((cj2*sj1))+((r22*x5462))+((x5461*x5465))+((cj1*sj2)));
evalcond[5]=((((-1.0)*x5463*x5467))+((r02*x5462))+((r01*x5470))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5471=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5471;
j4eval[1]=IKsign(x5471);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5472=((1.0)*cj5);
IkReal x5473=((((-1.0)*r21*x5472))+(((-1.0)*r20*sj5)));
j4eval[0]=x5473;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x5472))))));
j4eval[2]=IKsign(x5473);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5474=cj5*cj5;
IkReal x5475=r11*r11;
IkReal x5476=(r11*sj5);
IkReal x5477=(cj5*r10);
IkReal x5478=((((-1.0)*x5474*x5475))+(r12*r12)+x5475+(((-2.0)*x5476*x5477))+((x5474*(r10*r10))));
j4eval[0]=x5478;
j4eval[1]=IKsign(x5478);
j4eval[2]=((IKabs(((((-1.0)*x5477))+x5476)))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5479=cj5*cj5;
IkReal x5480=r11*r11;
IkReal x5481=(cj5*r10);
IkReal x5482=(r11*sj5);
CheckValue<IkReal> x5483=IKPowWithIntegerCheck(IKsign(((r12*r12)+x5480+(((-1.0)*x5479*x5480))+(((-2.0)*x5481*x5482))+((x5479*(r10*r10))))),-1);
if(!x5483.valid){
continue;
}
CheckValue<IkReal> x5484 = IKatan2WithCheck(IkReal((x5482+(((-1.0)*x5481)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5484.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5483.value)))+(x5484.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5485=IKcos(j4);
IkReal x5486=IKsin(j4);
IkReal x5487=(cj5*r00);
IkReal x5488=(cj5*r10);
IkReal x5489=(r21*sj5);
IkReal x5490=(cj5*r20);
IkReal x5491=((1.0)*x5485);
IkReal x5492=((1.0)*x5486);
IkReal x5493=(sj5*x5486);
IkReal x5494=(sj5*x5485);
evalcond[0]=((((-1.0)*x5488*x5491))+((r12*x5486))+((r11*x5494)));
evalcond[1]=((((-1.0)*r22*x5491))+((x5486*x5489))+(((-1.0)*x5490*x5492)));
evalcond[2]=(((r01*x5493))+(((-1.0)*x5487*x5492))+(((-1.0)*r02*x5491)));
evalcond[3]=((-1.0)+(((-1.0)*x5488*x5492))+(((-1.0)*r12*x5491))+((r11*x5493)));
evalcond[4]=(((cj2*sj1))+((x5485*x5489))+((cj1*sj2))+((r22*x5486))+(((-1.0)*x5490*x5491)));
evalcond[5]=(((r01*x5494))+(((-1.0)*sj1*sj2))+(((-1.0)*x5487*x5491))+((cj1*cj2))+((r02*x5486)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5495=((1.0)*cj5);
CheckValue<IkReal> x5496 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x5495)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5496.valid){
continue;
}
CheckValue<IkReal> x5497=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x5495))+(((-1.0)*r20*sj5)))),-1);
if(!x5497.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5496.value)+(((1.5707963267949)*(x5497.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5498=IKcos(j4);
IkReal x5499=IKsin(j4);
IkReal x5500=(cj5*r00);
IkReal x5501=(cj5*r10);
IkReal x5502=(r21*sj5);
IkReal x5503=(cj5*r20);
IkReal x5504=((1.0)*x5498);
IkReal x5505=((1.0)*x5499);
IkReal x5506=(sj5*x5499);
IkReal x5507=(sj5*x5498);
evalcond[0]=((((-1.0)*x5501*x5504))+((r12*x5499))+((r11*x5507)));
evalcond[1]=((((-1.0)*x5503*x5505))+(((-1.0)*r22*x5504))+((x5499*x5502)));
evalcond[2]=((((-1.0)*x5500*x5505))+(((-1.0)*r02*x5504))+((r01*x5506)));
evalcond[3]=((-1.0)+(((-1.0)*x5501*x5505))+(((-1.0)*r12*x5504))+((r11*x5506)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x5503*x5504))+((cj1*sj2))+((x5498*x5502))+((r22*x5499)));
evalcond[5]=((((-1.0)*x5500*x5504))+(((-1.0)*sj1*sj2))+((r01*x5507))+((cj1*cj2))+((r02*x5499)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5508 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5508.valid){
continue;
}
CheckValue<IkReal> x5509=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5509.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5508.value)+(((1.5707963267949)*(x5509.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5510=IKcos(j4);
IkReal x5511=IKsin(j4);
IkReal x5512=(cj5*r00);
IkReal x5513=(cj5*r10);
IkReal x5514=(r21*sj5);
IkReal x5515=(cj5*r20);
IkReal x5516=((1.0)*x5510);
IkReal x5517=((1.0)*x5511);
IkReal x5518=(sj5*x5511);
IkReal x5519=(sj5*x5510);
evalcond[0]=((((-1.0)*x5513*x5516))+((r12*x5511))+((r11*x5519)));
evalcond[1]=((((-1.0)*r22*x5516))+(((-1.0)*x5515*x5517))+((x5511*x5514)));
evalcond[2]=((((-1.0)*x5512*x5517))+(((-1.0)*r02*x5516))+((r01*x5518)));
evalcond[3]=((-1.0)+(((-1.0)*x5513*x5517))+(((-1.0)*r12*x5516))+((r11*x5518)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x5515*x5516))+((r22*x5511))+((x5510*x5514)));
evalcond[5]=((((-1.0)*x5512*x5516))+((r02*x5511))+(((-1.0)*sj1*sj2))+((r01*x5519))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5520=((-1.0)*r00);
IkReal x5522 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x5522)==0){
continue;
}
IkReal x5521=pow(x5522,-0.5);
CheckValue<IkReal> x5523 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x5520),IKFAST_ATAN2_MAGTHRESH);
if(!x5523.valid){
continue;
}
IkReal gconst126=((-1.0)*(x5523.value));
IkReal gconst127=(r01*x5521);
IkReal gconst128=(x5520*x5521);
CheckValue<IkReal> x5524 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5524.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5524.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x5525=((-1.0)*r00);
IkReal x5526=x5521;
CheckValue<IkReal> x5528 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x5525),IKFAST_ATAN2_MAGTHRESH);
if(!x5528.valid){
continue;
}
IkReal x5527=((-1.0)*(x5528.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst127;
cj5=gconst128;
j5=x5527;
IkReal gconst126=x5527;
IkReal gconst127=(r01*x5526);
IkReal gconst128=(x5525*x5526);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5529=((1.0)*sj0);
IkReal x5530=((1.0)*gconst127);
CheckValue<IkReal> x5531 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x5529)))),IkReal((((gconst128*r10*sj0))+(((-1.0)*cj0*r01*x5530))+((cj0*gconst128*r00))+(((-1.0)*gconst127*r11*x5529)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5531.valid){
continue;
}
CheckValue<IkReal> x5532=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst128*r21))+(((-1.0)*r20*x5530)))),-1);
if(!x5532.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5531.value)+(((1.5707963267949)*(x5532.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5533=IKsin(j4);
IkReal x5534=IKcos(j4);
IkReal x5535=(gconst127*r01);
IkReal x5536=(sj1*sj2);
IkReal x5537=(gconst128*r10);
IkReal x5538=(gconst128*r00);
IkReal x5539=(gconst128*r20);
IkReal x5540=((1.0)*x5534);
IkReal x5541=((1.0)*cj1*cj2);
IkReal x5542=((1.0)*x5533);
IkReal x5543=(gconst127*x5534);
IkReal x5544=(gconst127*x5533);
evalcond[0]=((((-1.0)*x5539*x5542))+(((-1.0)*r22*x5540))+((r21*x5544)));
evalcond[1]=(cj0+((r11*x5544))+(((-1.0)*x5537*x5542))+(((-1.0)*r12*x5540)));
evalcond[2]=((((-1.0)*x5538*x5542))+(((-1.0)*sj0))+(((-1.0)*r02*x5540))+((x5533*x5535)));
evalcond[3]=((((-1.0)*x5539*x5540))+((cj2*sj1))+((cj1*sj2))+((r22*x5533))+((r21*x5543)));
evalcond[4]=((((-1.0)*x5538*x5540))+((x5534*x5535))+(((-1.0)*cj0*x5541))+((cj0*x5536))+((r02*x5533)));
evalcond[5]=(((r11*x5543))+(((-1.0)*x5537*x5540))+((sj0*x5536))+(((-1.0)*sj0*x5541))+((r12*x5533)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5545=((1.0)*gconst128);
CheckValue<IkReal> x5546=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x5545))+(((-1.0)*gconst127*r10)))),-1);
if(!x5546.valid){
continue;
}
CheckValue<IkReal> x5547 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst127*r21*sj0))+(((-1.0)*r20*sj0*x5545)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5547.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5546.value)))+(x5547.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5548=IKsin(j4);
IkReal x5549=IKcos(j4);
IkReal x5550=(gconst127*r01);
IkReal x5551=(sj1*sj2);
IkReal x5552=(gconst128*r10);
IkReal x5553=(gconst128*r00);
IkReal x5554=(gconst128*r20);
IkReal x5555=((1.0)*x5549);
IkReal x5556=((1.0)*cj1*cj2);
IkReal x5557=((1.0)*x5548);
IkReal x5558=(gconst127*x5549);
IkReal x5559=(gconst127*x5548);
evalcond[0]=(((r21*x5559))+(((-1.0)*r22*x5555))+(((-1.0)*x5554*x5557)));
evalcond[1]=(cj0+((r11*x5559))+(((-1.0)*x5552*x5557))+(((-1.0)*r12*x5555)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x5553*x5557))+((x5548*x5550))+(((-1.0)*r02*x5555)));
evalcond[3]=(((cj2*sj1))+((r21*x5558))+((cj1*sj2))+((r22*x5548))+(((-1.0)*x5554*x5555)));
evalcond[4]=((((-1.0)*x5553*x5555))+((x5549*x5550))+((r02*x5548))+((cj0*x5551))+(((-1.0)*cj0*x5556)));
evalcond[5]=((((-1.0)*sj0*x5556))+((r12*x5548))+((r11*x5558))+(((-1.0)*x5552*x5555))+((sj0*x5551)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5560=((-1.0)*r01);
IkReal x5562 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x5562)==0){
continue;
}
IkReal x5561=pow(x5562,-0.5);
CheckValue<IkReal> x5563 = IKatan2WithCheck(IkReal(x5560),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5563.valid){
continue;
}
IkReal gconst129=((3.14159265358979)+(((-1.0)*(x5563.value))));
IkReal gconst130=(x5560*x5561);
IkReal gconst131=((1.0)*r00*x5561);
CheckValue<IkReal> x5564 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5564.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5564.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x5565=((-1.0)*r01);
CheckValue<IkReal> x5568 = IKatan2WithCheck(IkReal(x5565),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5568.valid){
continue;
}
IkReal x5566=((1.0)*(x5568.value));
IkReal x5567=x5561;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x5566)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x5566)));
IkReal gconst130=(x5565*x5567);
IkReal gconst131=((1.0)*r00*x5567);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x5569=((-1.0)*r01);
CheckValue<IkReal> x5572 = IKatan2WithCheck(IkReal(x5569),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5572.valid){
continue;
}
IkReal x5570=((1.0)*(x5572.value));
IkReal x5571=x5561;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x5570)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x5570)));
IkReal gconst130=(x5569*x5571);
IkReal gconst131=((1.0)*r00*x5571);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5573=((-1.0)*r01);
CheckValue<IkReal> x5576 = IKatan2WithCheck(IkReal(x5573),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5576.valid){
continue;
}
IkReal x5574=((1.0)*(x5576.value));
IkReal x5575=x5561;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x5574)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x5574)));
IkReal gconst130=(x5573*x5575);
IkReal gconst131=((1.0)*r00*x5575);
IkReal x5577=r02*r02;
IkReal x5578=(r12*sj0);
IkReal x5579=((1.0)*cj0);
IkReal x5580=x5561;
j4eval[0]=((IKabs((((cj0*x5577*x5580))+(((-1.0)*x5579*x5580))+((r02*x5578*x5580)))))+(IKabs(((((-1.0)*r02*x5579))+(((-1.0)*x5578))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5581=((1.0)*sj0);
IkReal x5582=((1.0)*gconst130);
CheckValue<IkReal> x5583=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x5582))+(((-1.0)*gconst131*r21)))),-1);
if(!x5583.valid){
continue;
}
CheckValue<IkReal> x5584 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x5581))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x5582))+(((-1.0)*gconst130*r11*x5581))+((gconst131*r10*sj0))+((cj0*gconst131*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5584.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5583.value)))+(x5584.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5585=IKsin(j4);
IkReal x5586=IKcos(j4);
IkReal x5587=(gconst131*r10);
IkReal x5588=(sj1*sj2);
IkReal x5589=(gconst131*r20);
IkReal x5590=(gconst131*r00);
IkReal x5591=((1.0)*x5586);
IkReal x5592=((1.0)*cj1*cj2);
IkReal x5593=(gconst130*x5585);
IkReal x5594=((1.0)*x5585);
IkReal x5595=(gconst130*x5586);
evalcond[0]=(((r21*x5593))+(((-1.0)*r22*x5591))+(((-1.0)*x5589*x5594)));
evalcond[1]=((((-1.0)*r12*x5591))+cj0+((r11*x5593))+(((-1.0)*x5587*x5594)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x5590*x5594))+(((-1.0)*r02*x5591))+((r01*x5593)));
evalcond[3]=(((r21*x5595))+((cj2*sj1))+((cj1*sj2))+((r22*x5585))+(((-1.0)*x5589*x5591)));
evalcond[4]=((((-1.0)*cj0*x5592))+(((-1.0)*x5590*x5591))+((cj0*x5588))+((r02*x5585))+((r01*x5595)));
evalcond[5]=(((sj0*x5588))+((r11*x5595))+((r12*x5585))+(((-1.0)*x5587*x5591))+(((-1.0)*sj0*x5592)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5596=((1.0)*gconst131);
CheckValue<IkReal> x5597=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x5596))+(((-1.0)*gconst130*r10)))),-1);
if(!x5597.valid){
continue;
}
CheckValue<IkReal> x5598 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst130*r21*sj0))+(((-1.0)*r20*sj0*x5596)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5598.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5597.value)))+(x5598.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5599=IKsin(j4);
IkReal x5600=IKcos(j4);
IkReal x5601=(gconst131*r10);
IkReal x5602=(sj1*sj2);
IkReal x5603=(gconst131*r20);
IkReal x5604=(gconst131*r00);
IkReal x5605=((1.0)*x5600);
IkReal x5606=((1.0)*cj1*cj2);
IkReal x5607=(gconst130*x5599);
IkReal x5608=((1.0)*x5599);
IkReal x5609=(gconst130*x5600);
evalcond[0]=((((-1.0)*r22*x5605))+(((-1.0)*x5603*x5608))+((r21*x5607)));
evalcond[1]=(cj0+(((-1.0)*r12*x5605))+(((-1.0)*x5601*x5608))+((r11*x5607)));
evalcond[2]=((((-1.0)*sj0))+((r01*x5607))+(((-1.0)*r02*x5605))+(((-1.0)*x5604*x5608)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x5603*x5605))+((r21*x5609))+((r22*x5599)));
evalcond[4]=((((-1.0)*cj0*x5606))+((r02*x5599))+((r01*x5609))+((cj0*x5602))+(((-1.0)*x5604*x5605)));
evalcond[5]=(((sj0*x5602))+((r12*x5599))+(((-1.0)*x5601*x5605))+(((-1.0)*sj0*x5606))+((r11*x5609)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5610=((1.0)*gconst131);
CheckValue<IkReal> x5611=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5610))+(((-1.0)*gconst130*r00)))),-1);
if(!x5611.valid){
continue;
}
CheckValue<IkReal> x5612 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst130*r21))+(((-1.0)*cj0*r20*x5610)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5612.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5611.value)))+(x5612.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5613=IKsin(j4);
IkReal x5614=IKcos(j4);
IkReal x5615=(gconst131*r10);
IkReal x5616=(sj1*sj2);
IkReal x5617=(gconst131*r20);
IkReal x5618=(gconst131*r00);
IkReal x5619=((1.0)*x5614);
IkReal x5620=((1.0)*cj1*cj2);
IkReal x5621=(gconst130*x5613);
IkReal x5622=((1.0)*x5613);
IkReal x5623=(gconst130*x5614);
evalcond[0]=((((-1.0)*r22*x5619))+((r21*x5621))+(((-1.0)*x5617*x5622)));
evalcond[1]=(cj0+(((-1.0)*r12*x5619))+((r11*x5621))+(((-1.0)*x5615*x5622)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x5618*x5622))+((r01*x5621))+(((-1.0)*r02*x5619)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x5617*x5619))+((r21*x5623))+((r22*x5613)));
evalcond[4]=(((cj0*x5616))+((r02*x5613))+(((-1.0)*cj0*x5620))+(((-1.0)*x5618*x5619))+((r01*x5623)));
evalcond[5]=(((sj0*x5616))+((r12*x5613))+((r11*x5623))+(((-1.0)*sj0*x5620))+(((-1.0)*x5615*x5619)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x5624=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x5624;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x5624);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x5625=((1.0)*cj5);
IkReal x5626=((((-1.0)*r10*sj5))+(((-1.0)*r11*x5625)));
j4eval[0]=x5626;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x5625)))))+(IKabs(r22)));
j4eval[2]=IKsign(x5626);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x5627=cj5*cj5;
IkReal x5628=r01*r01;
IkReal x5629=(cj5*r00);
IkReal x5630=(r01*sj5);
IkReal x5631=(x5628+(((-2.0)*x5629*x5630))+((x5627*(r00*r00)))+(r02*r02)+(((-1.0)*x5627*x5628)));
j4eval[0]=x5631;
j4eval[1]=IKsign(x5631);
j4eval[2]=((IKabs(r02))+(IKabs((x5630+(((-1.0)*x5629))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5632=cj5*cj5;
IkReal x5633=r01*r01;
IkReal x5634=(r01*sj5);
IkReal x5635=(cj5*r00);
CheckValue<IkReal> x5636=IKPowWithIntegerCheck(IKsign((x5633+(((-1.0)*x5632*x5633))+((x5632*(r00*r00)))+(((-2.0)*x5634*x5635))+(r02*r02))),-1);
if(!x5636.valid){
continue;
}
CheckValue<IkReal> x5637 = IKatan2WithCheck(IkReal((x5634+(((-1.0)*x5635)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5637.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5636.value)))+(x5637.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5638=IKcos(j4);
IkReal x5639=IKsin(j4);
IkReal x5640=(cj5*r00);
IkReal x5641=(cj5*r10);
IkReal x5642=(r21*sj5);
IkReal x5643=(cj5*r20);
IkReal x5644=((1.0)*x5638);
IkReal x5645=((1.0)*x5639);
IkReal x5646=(sj5*x5639);
IkReal x5647=(sj5*x5638);
evalcond[0]=(((r01*x5647))+(((-1.0)*x5640*x5644))+((r02*x5639)));
evalcond[1]=((((-1.0)*r22*x5644))+((x5639*x5642))+(((-1.0)*x5643*x5645)));
evalcond[2]=((((-1.0)*r12*x5644))+((r11*x5646))+(((-1.0)*x5641*x5645)));
evalcond[3]=((-1.0)+((r01*x5646))+(((-1.0)*r02*x5644))+(((-1.0)*x5640*x5645)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x5639))+((x5638*x5642))+(((-1.0)*x5643*x5644)));
evalcond[5]=(((r12*x5639))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r11*x5647))+(((-1.0)*x5641*x5644)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5648=((1.0)*cj5);
CheckValue<IkReal> x5649 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x5648)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5649.valid){
continue;
}
CheckValue<IkReal> x5650=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x5648))+(((-1.0)*r10*sj5)))),-1);
if(!x5650.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5649.value)+(((1.5707963267949)*(x5650.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5651=IKcos(j4);
IkReal x5652=IKsin(j4);
IkReal x5653=(cj5*r00);
IkReal x5654=(cj5*r10);
IkReal x5655=(r21*sj5);
IkReal x5656=(cj5*r20);
IkReal x5657=((1.0)*x5651);
IkReal x5658=((1.0)*x5652);
IkReal x5659=(sj5*x5652);
IkReal x5660=(sj5*x5651);
evalcond[0]=(((r01*x5660))+(((-1.0)*x5653*x5657))+((r02*x5652)));
evalcond[1]=((((-1.0)*r22*x5657))+((x5652*x5655))+(((-1.0)*x5656*x5658)));
evalcond[2]=((((-1.0)*r12*x5657))+(((-1.0)*x5654*x5658))+((r11*x5659)));
evalcond[3]=((-1.0)+((r01*x5659))+(((-1.0)*x5653*x5658))+(((-1.0)*r02*x5657)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x5652))+((x5651*x5655))+(((-1.0)*x5656*x5657)));
evalcond[5]=((((-1.0)*x5654*x5657))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r12*x5652))+((r11*x5660)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5661=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x5661.valid){
continue;
}
CheckValue<IkReal> x5662 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5662.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5661.value)))+(x5662.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5663=IKcos(j4);
IkReal x5664=IKsin(j4);
IkReal x5665=(cj5*r00);
IkReal x5666=(cj5*r10);
IkReal x5667=(r21*sj5);
IkReal x5668=(cj5*r20);
IkReal x5669=((1.0)*x5663);
IkReal x5670=((1.0)*x5664);
IkReal x5671=(sj5*x5664);
IkReal x5672=(sj5*x5663);
evalcond[0]=(((r02*x5664))+(((-1.0)*x5665*x5669))+((r01*x5672)));
evalcond[1]=(((x5664*x5667))+(((-1.0)*r22*x5669))+(((-1.0)*x5668*x5670)));
evalcond[2]=((((-1.0)*x5666*x5670))+((r11*x5671))+(((-1.0)*r12*x5669)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x5669))+(((-1.0)*x5665*x5670))+((r01*x5671)));
evalcond[4]=(((cj2*sj1))+((r22*x5664))+((cj1*sj2))+(((-1.0)*x5668*x5669))+((x5663*x5667)));
evalcond[5]=((((-1.0)*x5666*x5669))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r11*x5672))+((r12*x5664)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x5673=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5673;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x5673);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x5674=((1.0)*cj5);
IkReal x5675=((((-1.0)*r21*x5674))+(((-1.0)*r20*sj5)));
j4eval[0]=x5675;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x5674))+((r11*sj5))))));
j4eval[2]=IKsign(x5675);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x5676=(r01*sj5);
IkReal x5677=(cj1*sj2);
IkReal x5678=(cj2*sj1);
IkReal x5679=((1.0)*r02);
IkReal x5680=((1.0)*cj5*r00);
IkReal x5681=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5681;
j4eval[1]=((IKabs(((((-1.0)*x5678*x5679))+(((-1.0)*x5677*x5679)))))+(IKabs((((x5676*x5677))+((x5676*x5678))+(((-1.0)*x5678*x5680))+(((-1.0)*x5677*x5680))))));
j4eval[2]=IKsign(x5681);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5682=(r01*sj5);
IkReal x5683=(cj1*sj2);
IkReal x5684=(cj2*sj1);
IkReal x5685=((1.0)*r02);
IkReal x5686=((1.0)*cj5*r00);
CheckValue<IkReal> x5687=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5687.valid){
continue;
}
CheckValue<IkReal> x5688 = IKatan2WithCheck(IkReal(((((-1.0)*x5684*x5686))+(((-1.0)*x5683*x5686))+((x5682*x5683))+((x5682*x5684)))),IkReal(((((-1.0)*x5684*x5685))+(((-1.0)*x5683*x5685)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5688.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5687.value)))+(x5688.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5689=IKcos(j4);
IkReal x5690=IKsin(j4);
IkReal x5691=(cj5*r00);
IkReal x5692=(cj5*r10);
IkReal x5693=(r21*sj5);
IkReal x5694=(cj5*r20);
IkReal x5695=((1.0)*x5689);
IkReal x5696=((1.0)*x5690);
IkReal x5697=(sj5*x5690);
IkReal x5698=(sj5*x5689);
evalcond[0]=((((-1.0)*x5691*x5695))+((r02*x5690))+((r01*x5698)));
evalcond[1]=(((x5690*x5693))+(((-1.0)*r22*x5695))+(((-1.0)*x5694*x5696)));
evalcond[2]=((((-1.0)*x5692*x5696))+((r11*x5697))+(((-1.0)*r12*x5695)));
evalcond[3]=((1.0)+(((-1.0)*x5691*x5696))+(((-1.0)*r02*x5695))+((r01*x5697)));
evalcond[4]=(((cj2*sj1))+((r22*x5690))+((cj1*sj2))+((x5689*x5693))+(((-1.0)*x5694*x5695)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*x5692*x5695))+((r12*x5690))+((cj1*cj2))+((r11*x5698)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5699=((1.0)*cj5);
CheckValue<IkReal> x5700 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x5699)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5700.valid){
continue;
}
CheckValue<IkReal> x5701=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x5699))+(((-1.0)*r20*sj5)))),-1);
if(!x5701.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5700.value)+(((1.5707963267949)*(x5701.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5702=IKcos(j4);
IkReal x5703=IKsin(j4);
IkReal x5704=(cj5*r00);
IkReal x5705=(cj5*r10);
IkReal x5706=(r21*sj5);
IkReal x5707=(cj5*r20);
IkReal x5708=((1.0)*x5702);
IkReal x5709=((1.0)*x5703);
IkReal x5710=(sj5*x5703);
IkReal x5711=(sj5*x5702);
evalcond[0]=(((r02*x5703))+(((-1.0)*x5704*x5708))+((r01*x5711)));
evalcond[1]=((((-1.0)*r22*x5708))+((x5703*x5706))+(((-1.0)*x5707*x5709)));
evalcond[2]=((((-1.0)*r12*x5708))+((r11*x5710))+(((-1.0)*x5705*x5709)));
evalcond[3]=((1.0)+(((-1.0)*x5704*x5709))+(((-1.0)*r02*x5708))+((r01*x5710)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x5703))+(((-1.0)*x5707*x5708))+((x5702*x5706)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r12*x5703))+((r11*x5711))+((cj1*cj2))+(((-1.0)*x5705*x5708)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5712 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5712.valid){
continue;
}
CheckValue<IkReal> x5713=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5713.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5712.value)+(((1.5707963267949)*(x5713.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5714=IKcos(j4);
IkReal x5715=IKsin(j4);
IkReal x5716=(cj5*r00);
IkReal x5717=(cj5*r10);
IkReal x5718=(r21*sj5);
IkReal x5719=(cj5*r20);
IkReal x5720=((1.0)*x5714);
IkReal x5721=((1.0)*x5715);
IkReal x5722=(sj5*x5715);
IkReal x5723=(sj5*x5714);
evalcond[0]=(((r02*x5715))+((r01*x5723))+(((-1.0)*x5716*x5720)));
evalcond[1]=(((x5715*x5718))+(((-1.0)*x5719*x5721))+(((-1.0)*r22*x5720)));
evalcond[2]=(((r11*x5722))+(((-1.0)*r12*x5720))+(((-1.0)*x5717*x5721)));
evalcond[3]=((1.0)+((r01*x5722))+(((-1.0)*r02*x5720))+(((-1.0)*x5716*x5721)));
evalcond[4]=(((cj2*sj1))+((r22*x5715))+((cj1*sj2))+(((-1.0)*x5719*x5720))+((x5714*x5718)));
evalcond[5]=(((r11*x5723))+(((-1.0)*x5717*x5720))+(((-1.0)*sj1*sj2))+((r12*x5715))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x5724=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x5724);
rxp1_1=(px*r21);
rxp1_2=(r11*x5724);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5725=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x5725);
rxp1_1=(px*r21);
rxp1_2=(r11*x5725);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5726=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x5726);
rxp1_1=(px*r21);
rxp1_2=(r11*x5726);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x5729=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x5729.valid){
continue;
}
IkReal x5727=x5729.value;
IkReal x5728=(sj0*x5727);
cj4array[0]=((((-1.0)*sj1*sj2*x5728))+((cj1*cj2*x5728)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x5730=IKsin(j4);
IkReal x5731=IKcos(j4);
IkReal x5732=(r21*sj5);
IkReal x5733=((1.0)*cj5*r20);
evalcond[0]=(r02*x5730);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x5731)));
evalcond[2]=(((x5730*x5732))+(((-1.0)*x5730*x5733)));
evalcond[3]=(((r11*sj5*x5730))+(((-1.0)*cj5*r10*x5730)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x5731*x5732))+(((-1.0)*x5731*x5733)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x5736=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x5736.valid){
continue;
}
IkReal x5734=x5736.value;
IkReal x5735=((1.0)*x5734);
cj4array[0]=((((-1.0)*cj1*sj2*x5735))+(((-1.0)*cj2*sj1*x5735)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x5737=IKsin(j4);
IkReal x5738=IKcos(j4);
IkReal x5739=((1.0)*sj0);
IkReal x5740=((1.0)*cj5);
IkReal x5741=(sj5*x5737);
evalcond[0]=(r02*x5737);
evalcond[1]=((((-1.0)*x5739))+(((-1.0)*r02*x5738)));
evalcond[2]=((((-1.0)*r20*x5737*x5740))+((r21*x5741)));
evalcond[3]=(((r11*x5741))+(((-1.0)*r10*x5737*x5740)));
evalcond[4]=((((-1.0)*cj1*cj2*x5739))+((r11*sj5*x5738))+((sj0*sj1*sj2))+(((-1.0)*r10*x5738*x5740)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x5742=IKPowWithIntegerCheck(r02,-1);
if(!x5742.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x5742.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x5743=IKsin(j4);
IkReal x5744=IKcos(j4);
IkReal x5745=(r21*sj5);
IkReal x5746=((1.0)*cj5);
IkReal x5747=(r11*sj5);
evalcond[0]=(r02*x5743);
evalcond[1]=((((-1.0)*r20*x5743*x5746))+((x5743*x5745)));
evalcond[2]=((((-1.0)*r10*x5743*x5746))+((x5743*x5747)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((x5744*x5745))+(((-1.0)*r20*x5744*x5746)));
evalcond[4]=((((-1.0)*cj1*cj2*sj0))+((x5744*x5747))+((sj0*sj1*sj2))+(((-1.0)*r10*x5744*x5746)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5748=((1.0)*sj0);
IkReal x5749=((1.0)*cj0);
CheckValue<IkReal> x5750 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x5749))+(((-1.0)*r12*x5748)))),IkReal((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x5749))+(((-1.0)*r11*sj5*x5748)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5750.valid){
continue;
}
CheckValue<IkReal> x5751=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x5751.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5750.value)+(((1.5707963267949)*(x5751.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5752=IKsin(j4);
IkReal x5753=IKcos(j4);
IkReal x5754=(cj5*r00);
IkReal x5755=(cj5*r10);
IkReal x5756=(r21*sj5);
IkReal x5757=(sj1*sj2);
IkReal x5758=(cj5*r20);
IkReal x5759=((1.0)*x5753);
IkReal x5760=((1.0)*cj1*cj2);
IkReal x5761=((1.0)*x5752);
IkReal x5762=(sj5*x5752);
IkReal x5763=(sj5*x5753);
evalcond[0]=((((-1.0)*x5758*x5761))+(((-1.0)*r22*x5759))+((x5752*x5756)));
evalcond[1]=(cj0+(((-1.0)*r12*x5759))+((r11*x5762))+(((-1.0)*x5755*x5761)));
evalcond[2]=((((-1.0)*sj0))+((r01*x5762))+(((-1.0)*r02*x5759))+(((-1.0)*x5754*x5761)));
evalcond[3]=((((-1.0)*x5758*x5759))+((cj2*sj1))+((cj1*sj2))+((x5753*x5756))+((r22*x5752)));
evalcond[4]=(((r01*x5763))+(((-1.0)*cj0*x5760))+((r02*x5752))+(((-1.0)*x5754*x5759))+((cj0*x5757)));
evalcond[5]=((((-1.0)*sj0*x5760))+((r11*x5763))+((sj0*x5757))+(((-1.0)*x5755*x5759))+((r12*x5752)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5764=((1.0)*cj5);
CheckValue<IkReal> x5765=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x5764)))),-1);
if(!x5765.valid){
continue;
}
CheckValue<IkReal> x5766 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x5764))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5766.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5765.value)))+(x5766.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5767=IKsin(j4);
IkReal x5768=IKcos(j4);
IkReal x5769=(cj5*r00);
IkReal x5770=(cj5*r10);
IkReal x5771=(r21*sj5);
IkReal x5772=(sj1*sj2);
IkReal x5773=(cj5*r20);
IkReal x5774=((1.0)*x5768);
IkReal x5775=((1.0)*cj1*cj2);
IkReal x5776=((1.0)*x5767);
IkReal x5777=(sj5*x5767);
IkReal x5778=(sj5*x5768);
evalcond[0]=(((x5767*x5771))+(((-1.0)*r22*x5774))+(((-1.0)*x5773*x5776)));
evalcond[1]=(cj0+(((-1.0)*r12*x5774))+(((-1.0)*x5770*x5776))+((r11*x5777)));
evalcond[2]=((((-1.0)*sj0))+((r01*x5777))+(((-1.0)*x5769*x5776))+(((-1.0)*r02*x5774)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x5767))+((x5768*x5771))+(((-1.0)*x5773*x5774)));
evalcond[4]=(((r01*x5778))+(((-1.0)*x5769*x5774))+(((-1.0)*cj0*x5775))+((cj0*x5772))+((r02*x5767)));
evalcond[5]=((((-1.0)*sj0*x5775))+(((-1.0)*x5770*x5774))+((r11*x5778))+((r12*x5767))+((sj0*x5772)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5779=((1.0)*cj5);
CheckValue<IkReal> x5780 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x5779))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5780.valid){
continue;
}
CheckValue<IkReal> x5781=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5779)))),-1);
if(!x5781.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5780.value)+(((1.5707963267949)*(x5781.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5782=IKsin(j4);
IkReal x5783=IKcos(j4);
IkReal x5784=(cj5*r00);
IkReal x5785=(cj5*r10);
IkReal x5786=(r21*sj5);
IkReal x5787=(sj1*sj2);
IkReal x5788=(cj5*r20);
IkReal x5789=((1.0)*x5783);
IkReal x5790=((1.0)*cj1*cj2);
IkReal x5791=((1.0)*x5782);
IkReal x5792=(sj5*x5782);
IkReal x5793=(sj5*x5783);
evalcond[0]=(((x5782*x5786))+(((-1.0)*x5788*x5791))+(((-1.0)*r22*x5789)));
evalcond[1]=((((-1.0)*x5785*x5791))+cj0+((r11*x5792))+(((-1.0)*r12*x5789)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x5784*x5791))+((r01*x5792))+(((-1.0)*r02*x5789)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x5782))+((x5783*x5786))+(((-1.0)*x5788*x5789)));
evalcond[4]=((((-1.0)*x5784*x5789))+((r01*x5793))+(((-1.0)*cj0*x5790))+((r02*x5782))+((cj0*x5787)));
evalcond[5]=((((-1.0)*x5785*x5789))+((r12*x5782))+((r11*x5793))+((sj0*x5787))+(((-1.0)*sj0*x5790)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5794=r21*r21;
IkReal x5795=cj5*cj5;
IkReal x5796=(cj2*sj1);
IkReal x5797=(cj1*sj2);
IkReal x5798=(r21*sj5);
IkReal x5799=((1.0)*cj5*r20);
CheckValue<IkReal> x5800=IKPowWithIntegerCheck(IKsign(((((2.0)*cj5*r20*x5798))+((x5794*x5795))+(((-1.0)*x5795*(r20*r20)))+(((-1.0)*(r22*r22)))+(((-1.0)*x5794)))),-1);
if(!x5800.valid){
continue;
}
CheckValue<IkReal> x5801 = IKatan2WithCheck(IkReal((((r22*x5797))+((r22*x5796)))),IkReal((((x5797*x5798))+((x5796*x5798))+(((-1.0)*x5797*x5799))+(((-1.0)*x5796*x5799)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5801.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5800.value)))+(x5801.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x5802=IKsin(j4);
IkReal x5803=IKcos(j4);
IkReal x5804=(r21*sj5);
IkReal x5805=(cj5*r20);
IkReal x5806=((1.0)*x5803);
evalcond[0]=((((-1.0)*r22*x5806))+(((-1.0)*x5802*x5805))+((x5802*x5804)));
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x5805*x5806))+((r22*x5802))+((x5803*x5804)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x5807=(cj5*sj4);
IkReal x5808=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+((r01*x5808))+(((-1.0)*r00*x5807)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x5808))+((r10*x5807))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+((r01*x5808))+(((-1.0)*r00*x5807))))+IKsqr(((((-1.0)*r11*x5808))+((r10*x5807))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+((r01*x5808))+(((-1.0)*r00*x5807))), ((((-1.0)*r11*x5808))+((r10*x5807))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x5809=IKcos(j0);
IkReal x5810=IKsin(j0);
IkReal x5811=((0.1)*sj5);
IkReal x5812=((0.392)*sj1);
IkReal x5813=(cj5*r11);
IkReal x5814=(cj5*r01);
IkReal x5815=((0.425)*cj1);
IkReal x5816=((1.0)*cj1);
IkReal x5817=(r11*sj5);
IkReal x5818=((1.0)*sj1);
IkReal x5819=((1.4e-7)*sj1);
IkReal x5820=((1.0)*cj4);
IkReal x5821=(r01*sj5);
IkReal x5822=(sj2*x5810);
IkReal x5823=(sj2*x5809);
IkReal x5824=(cj5*x5820);
IkReal x5825=((0.392)*cj1*cj2);
IkReal x5826=(cj2*x5809);
IkReal x5827=((1.0)*cj5*sj4);
IkReal x5828=(cj2*x5810);
evalcond[0]=(((sj4*x5817))+(((-1.0)*r12*x5820))+(((-1.0)*r10*x5827))+x5809);
evalcond[1]=((((-1.0)*r02*x5820))+(((-1.0)*r00*x5827))+((sj4*x5821))+(((-1.0)*x5810)));
evalcond[2]=(((r00*sj5))+(((-1.0)*x5818*x5826))+(((-1.0)*x5816*x5823))+x5814);
evalcond[3]=(((r10*sj5))+(((-1.0)*x5818*x5828))+(((-1.0)*x5816*x5822))+x5813);
evalcond[4]=((((-1.0)*r00*x5824))+((sj1*x5823))+((r02*sj4))+(((-1.0)*x5816*x5826))+((cj4*x5821)));
evalcond[5]=(((cj4*x5817))+((sj1*x5822))+((r12*sj4))+(((-1.0)*x5816*x5828))+(((-1.0)*r10*x5824)));
evalcond[6]=((((-0.1)*x5814))+((x5809*x5815))+((x5809*x5819))+(((-1.0)*px))+(((-0.134)*x5810))+((x5809*x5825))+(((-1.0)*r00*x5811))+(((-1.0)*x5812*x5823)));
evalcond[7]=((((-1.0)*r10*x5811))+((x5810*x5819))+((x5810*x5815))+(((-0.1)*x5813))+((x5810*x5825))+(((-1.0)*py))+(((0.134)*x5809))+(((-1.0)*x5812*x5822)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x5829=((1.0)*cj5);
IkReal x5830=((1.0)*sj5);
CheckValue<IkReal> x5831 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x5830))+(((-1.0)*r11*x5829)))),IkReal(((((-1.0)*r00*x5830))+(((-1.0)*r01*x5829)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5831.valid){
continue;
}
CheckValue<IkReal> x5832=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))),-1);
if(!x5832.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x5831.value)+(((1.5707963267949)*(x5832.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5833=IKcos(j0);
IkReal x5834=IKsin(j0);
IkReal x5835=((0.1)*sj5);
IkReal x5836=((0.392)*sj1);
IkReal x5837=(cj5*r11);
IkReal x5838=(cj5*r01);
IkReal x5839=((1.0)*cj1);
IkReal x5840=((0.392)*cj2);
IkReal x5841=((1.0)*cj2);
IkReal x5842=(sj2*x5834);
IkReal x5843=(sj1*x5833);
IkReal x5844=(sj2*x5833);
IkReal x5845=(cj1*x5833);
IkReal x5846=(cj1*x5834);
IkReal x5847=(sj1*x5834);
evalcond[0]=(((r00*sj5))+(((-1.0)*x5839*x5844))+(((-1.0)*x5841*x5843))+x5838);
evalcond[1]=(((r10*sj5))+(((-1.0)*x5839*x5842))+(((-1.0)*x5841*x5847))+x5837);
evalcond[2]=((((1.4e-7)*x5843))+(((-1.0)*r00*x5835))+(((-0.134)*x5834))+((x5840*x5845))+(((-0.1)*x5838))+(((-1.0)*px))+(((0.425)*x5845))+(((-1.0)*x5836*x5844)));
evalcond[3]=((((1.4e-7)*x5847))+((x5840*x5846))+(((-0.1)*x5837))+(((-1.0)*py))+(((0.425)*x5846))+(((-1.0)*x5836*x5842))+(((0.134)*x5833))+(((-1.0)*r10*x5835)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x5848=((1.0)*cj5);
IkReal x5849=((((-1.0)*r01*x5848))+(((-1.0)*r00*sj5)));
j4eval[0]=x5849;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5848)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5849);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x5850=((1.0)*cj5);
IkReal x5851=((((-1.0)*r10*sj5))+(((-1.0)*r11*x5850)));
j4eval[0]=x5851;
j4eval[1]=((IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x5850)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x5851);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x5852=((1.0)*sj0);
IkReal x5853=((1.0)*cj0);
IkReal x5854=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x5854;
j4eval[1]=((IKabs(((((-1.0)*r12*x5852))+(((-1.0)*r02*x5853)))))+(IKabs((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x5852))+(((-1.0)*r01*sj5*x5853))))));
j4eval[2]=IKsign(x5854);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x5855=((-1.0)*r20);
IkReal x5857 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x5857)==0){
continue;
}
IkReal x5856=pow(x5857,-0.5);
CheckValue<IkReal> x5858 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5855),IKFAST_ATAN2_MAGTHRESH);
if(!x5858.valid){
continue;
}
IkReal gconst114=((-1.0)*(x5858.value));
IkReal gconst115=(r21*x5856);
IkReal gconst116=(x5855*x5856);
CheckValue<IkReal> x5859 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5859.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5859.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x5860=((-1.0)*r20);
IkReal x5861=x5856;
CheckValue<IkReal> x5863 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5860),IKFAST_ATAN2_MAGTHRESH);
if(!x5863.valid){
continue;
}
IkReal x5862=((-1.0)*(x5863.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x5862;
IkReal gconst114=x5862;
IkReal gconst115=(r21*x5861);
IkReal gconst116=(x5860*x5861);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5864=((-1.0)*r20);
IkReal x5865=x5856;
CheckValue<IkReal> x5867 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5864),IKFAST_ATAN2_MAGTHRESH);
if(!x5867.valid){
continue;
}
IkReal x5866=((-1.0)*(x5867.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x5866;
IkReal gconst114=x5866;
IkReal gconst115=(r21*x5865);
IkReal gconst116=(x5864*x5865);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x5868=((-1.0)*r20);
IkReal x5869=x5856;
CheckValue<IkReal> x5871 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5868),IKFAST_ATAN2_MAGTHRESH);
if(!x5871.valid){
continue;
}
IkReal x5870=((-1.0)*(x5871.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x5870;
IkReal gconst114=x5870;
IkReal gconst115=(r21*x5869);
IkReal gconst116=(x5868*x5869);
IkReal x5872=((1.0)*(r22*r22));
CheckValue<IkReal> x5876=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x5872))),-1);
if(!x5876.valid){
continue;
}
IkReal x5873=x5876.value;
IkReal x5874=((1.0)*x5873);
IkReal x5875=((((-1.0)*x5874*(r20*r20*r20*r20)))+(((-2.0)*x5873*(r20*r20)*(r21*r21)))+(((-1.0)*x5874*(r21*r21*r21*r21)))+(((-1.0)*x5872)));
j4eval[0]=x5875;
j4eval[1]=IKsign(x5875);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5877=(cj2*sj1);
IkReal x5878=(gconst115*r21);
IkReal x5879=(cj1*sj2);
IkReal x5880=((1.0)*gconst116*r20);
CheckValue<IkReal> x5881=IKPowWithIntegerCheck(IKsign(((((2.0)*gconst116*r20*x5878))+(((-1.0)*(x5878*x5878)))+(((-1.0)*(r22*r22)))+(((-1.0)*gconst116*r20*x5880)))),-1);
if(!x5881.valid){
continue;
}
CheckValue<IkReal> x5882 = IKatan2WithCheck(IkReal((((r22*x5877))+((r22*x5879)))),IkReal((((x5878*x5879))+((x5877*x5878))+(((-1.0)*x5879*x5880))+(((-1.0)*x5877*x5880)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5882.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5881.value)))+(x5882.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5883=IKsin(j4);
IkReal x5884=IKcos(j4);
IkReal x5885=(sj1*sj2);
IkReal x5886=((1.0)*x5884);
IkReal x5887=((1.0)*cj1*cj2);
IkReal x5888=(gconst115*x5883);
IkReal x5889=(gconst115*x5884);
IkReal x5890=((1.0)*gconst116*x5883);
evalcond[0]=((((-1.0)*r20*x5890))+((r21*x5888))+(((-1.0)*r22*x5886)));
evalcond[1]=(cj0+((r11*x5888))+(((-1.0)*r10*x5890))+(((-1.0)*r12*x5886)));
evalcond[2]=((((-1.0)*sj0))+((r01*x5888))+(((-1.0)*r00*x5890))+(((-1.0)*r02*x5886)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x5883))+((r21*x5889))+(((-1.0)*gconst116*r20*x5886)));
evalcond[4]=(((r01*x5889))+(((-1.0)*gconst116*r00*x5886))+(((-1.0)*cj0*x5887))+((cj0*x5885))+((r02*x5883)));
evalcond[5]=(((r12*x5883))+(((-1.0)*gconst116*r10*x5886))+((r11*x5889))+(((-1.0)*sj0*x5887))+((sj0*x5885)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5891=((1.0)*gconst116);
CheckValue<IkReal> x5892=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x5891))+(((-1.0)*gconst115*r10)))),-1);
if(!x5892.valid){
continue;
}
CheckValue<IkReal> x5893 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x5891))+((gconst115*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5893.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5892.value)))+(x5893.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5894=IKsin(j4);
IkReal x5895=IKcos(j4);
IkReal x5896=(sj1*sj2);
IkReal x5897=((1.0)*x5895);
IkReal x5898=((1.0)*cj1*cj2);
IkReal x5899=(gconst115*x5894);
IkReal x5900=(gconst115*x5895);
IkReal x5901=((1.0)*gconst116*x5894);
evalcond[0]=(((r21*x5899))+(((-1.0)*r22*x5897))+(((-1.0)*r20*x5901)));
evalcond[1]=((((-1.0)*r12*x5897))+cj0+(((-1.0)*r10*x5901))+((r11*x5899)));
evalcond[2]=((((-1.0)*r00*x5901))+(((-1.0)*sj0))+(((-1.0)*r02*x5897))+((r01*x5899)));
evalcond[3]=(((r22*x5894))+((cj2*sj1))+(((-1.0)*gconst116*r20*x5897))+((cj1*sj2))+((r21*x5900)));
evalcond[4]=(((cj0*x5896))+(((-1.0)*gconst116*r00*x5897))+((r02*x5894))+(((-1.0)*cj0*x5898))+((r01*x5900)));
evalcond[5]=((((-1.0)*gconst116*r10*x5897))+((sj0*x5896))+(((-1.0)*sj0*x5898))+((r12*x5894))+((r11*x5900)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5902=((1.0)*gconst116);
CheckValue<IkReal> x5903 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x5902))+((cj0*gconst115*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5903.valid){
continue;
}
CheckValue<IkReal> x5904=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5902))+(((-1.0)*gconst115*r00)))),-1);
if(!x5904.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5903.value)+(((1.5707963267949)*(x5904.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5905=IKsin(j4);
IkReal x5906=IKcos(j4);
IkReal x5907=(sj1*sj2);
IkReal x5908=((1.0)*x5906);
IkReal x5909=((1.0)*cj1*cj2);
IkReal x5910=(gconst115*x5905);
IkReal x5911=(gconst115*x5906);
IkReal x5912=((1.0)*gconst116*x5905);
evalcond[0]=((((-1.0)*r20*x5912))+(((-1.0)*r22*x5908))+((r21*x5910)));
evalcond[1]=((((-1.0)*r12*x5908))+cj0+(((-1.0)*r10*x5912))+((r11*x5910)));
evalcond[2]=(((r01*x5910))+(((-1.0)*r00*x5912))+(((-1.0)*sj0))+(((-1.0)*r02*x5908)));
evalcond[3]=(((cj2*sj1))+((r22*x5905))+((cj1*sj2))+(((-1.0)*gconst116*r20*x5908))+((r21*x5911)));
evalcond[4]=(((r01*x5911))+(((-1.0)*cj0*x5909))+((r02*x5905))+(((-1.0)*gconst116*r00*x5908))+((cj0*x5907)));
evalcond[5]=(((r12*x5905))+((sj0*x5907))+(((-1.0)*gconst116*r10*x5908))+(((-1.0)*sj0*x5909))+((r11*x5911)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5913=((-1.0)*r21);
IkReal x5915 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x5915)==0){
continue;
}
IkReal x5914=pow(x5915,-0.5);
CheckValue<IkReal> x5916 = IKatan2WithCheck(IkReal(x5913),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5916.valid){
continue;
}
IkReal gconst117=((3.14159265358979)+(((-1.0)*(x5916.value))));
IkReal gconst118=(x5913*x5914);
IkReal gconst119=((1.0)*r20*x5914);
CheckValue<IkReal> x5917 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5917.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5917.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x5918=((-1.0)*r21);
CheckValue<IkReal> x5921 = IKatan2WithCheck(IkReal(x5918),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5921.valid){
continue;
}
IkReal x5919=((1.0)*(x5921.value));
IkReal x5920=x5914;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x5919)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5919)));
IkReal gconst118=(x5918*x5920);
IkReal gconst119=((1.0)*r20*x5920);
IkReal x5922=r22*r22;
IkReal x5923=((1.0)*x5922);
CheckValue<IkReal> x5927=IKPowWithIntegerCheck(((-1.0)+x5922),-1);
if(!x5927.valid){
continue;
}
IkReal x5924=x5927.value;
if((((1.0)+(((-1.0)*x5923)))) < -0.00001)
continue;
IkReal x5925=IKsqrt(((1.0)+(((-1.0)*x5923))));
IkReal x5926=(cj0*x5924*x5925);
j4eval[0]=((IKabs(((((-1.0)*x5923*x5926))+x5926)))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5928=((-1.0)*r21);
CheckValue<IkReal> x5931 = IKatan2WithCheck(IkReal(x5928),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5931.valid){
continue;
}
IkReal x5929=((1.0)*(x5931.value));
IkReal x5930=x5914;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x5929)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5929)));
IkReal gconst118=(x5928*x5930);
IkReal gconst119=((1.0)*r20*x5930);
IkReal x5932=r22*r22;
IkReal x5933=((1.0)*x5932);
CheckValue<IkReal> x5937=IKPowWithIntegerCheck(((-1.0)+x5932),-1);
if(!x5937.valid){
continue;
}
IkReal x5934=x5937.value;
if((((1.0)+(((-1.0)*x5933)))) < -0.00001)
continue;
IkReal x5935=IKsqrt(((1.0)+(((-1.0)*x5933))));
IkReal x5936=(sj0*x5934*x5935);
j4eval[0]=((IKabs(((((-1.0)*x5933*x5936))+x5936)))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x5938=((-1.0)*r21);
CheckValue<IkReal> x5941 = IKatan2WithCheck(IkReal(x5938),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5941.valid){
continue;
}
IkReal x5939=((1.0)*(x5941.value));
IkReal x5940=x5914;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x5939)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5939)));
IkReal gconst118=(x5938*x5940);
IkReal gconst119=((1.0)*r20*x5940);
IkReal x5942=r22*r22;
IkReal x5943=(r12*sj0);
IkReal x5944=(cj0*r02);
CheckValue<IkReal> x5948=IKPowWithIntegerCheck(((-1.0)+x5942),-1);
if(!x5948.valid){
continue;
}
IkReal x5945=x5948.value;
if((((1.0)+(((-1.0)*x5942)))) < -0.00001)
continue;
IkReal x5946=IKsqrt(((1.0)+(((-1.0)*x5942))));
IkReal x5947=(r22*x5945*x5946);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs(((((-1.0)*x5944))+(((-1.0)*x5943)))))+(IKabs((((x5943*x5947))+((x5944*x5947))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5949=((1.0)*sj0);
IkReal x5950=((1.0)*gconst118);
CheckValue<IkReal> x5951=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst119*r21))+(((-1.0)*r20*x5950)))),-1);
if(!x5951.valid){
continue;
}
CheckValue<IkReal> x5952 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x5949))+(((-1.0)*cj0*r02)))),IkReal((((gconst119*r10*sj0))+(((-1.0)*cj0*r01*x5950))+(((-1.0)*gconst118*r11*x5949))+((cj0*gconst119*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5952.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5951.value)))+(x5952.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5953=IKsin(j4);
IkReal x5954=IKcos(j4);
IkReal x5955=(gconst118*r01);
IkReal x5956=(sj1*sj2);
IkReal x5957=(gconst119*r20);
IkReal x5958=(gconst119*r10);
IkReal x5959=(gconst119*r00);
IkReal x5960=(gconst118*r21);
IkReal x5961=(gconst118*r11);
IkReal x5962=((1.0)*x5954);
IkReal x5963=((1.0)*cj1*cj2);
IkReal x5964=((1.0)*x5953);
evalcond[0]=((((-1.0)*x5957*x5964))+(((-1.0)*r22*x5962))+((x5953*x5960)));
evalcond[1]=(cj0+(((-1.0)*r12*x5962))+((x5953*x5961))+(((-1.0)*x5958*x5964)));
evalcond[2]=((((-1.0)*sj0))+((x5953*x5955))+(((-1.0)*r02*x5962))+(((-1.0)*x5959*x5964)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x5957*x5962))+((cj1*sj2))+((x5954*x5960))+((r22*x5953)));
evalcond[4]=(((r02*x5953))+((x5954*x5955))+(((-1.0)*cj0*x5963))+((cj0*x5956))+(((-1.0)*x5959*x5962)));
evalcond[5]=(((sj0*x5956))+(((-1.0)*sj0*x5963))+((r12*x5953))+(((-1.0)*x5958*x5962))+((x5954*x5961)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5965=((1.0)*gconst119);
CheckValue<IkReal> x5966=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst118*r10))+(((-1.0)*r11*x5965)))),-1);
if(!x5966.valid){
continue;
}
CheckValue<IkReal> x5967 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst118*r21*sj0))+(((-1.0)*r20*sj0*x5965)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5967.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5966.value)))+(x5967.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5968=IKsin(j4);
IkReal x5969=IKcos(j4);
IkReal x5970=(gconst118*r01);
IkReal x5971=(sj1*sj2);
IkReal x5972=(gconst119*r20);
IkReal x5973=(gconst119*r10);
IkReal x5974=(gconst119*r00);
IkReal x5975=(gconst118*r21);
IkReal x5976=(gconst118*r11);
IkReal x5977=((1.0)*x5969);
IkReal x5978=((1.0)*cj1*cj2);
IkReal x5979=((1.0)*x5968);
evalcond[0]=((((-1.0)*r22*x5977))+((x5968*x5975))+(((-1.0)*x5972*x5979)));
evalcond[1]=(cj0+(((-1.0)*r12*x5977))+((x5968*x5976))+(((-1.0)*x5973*x5979)));
evalcond[2]=((((-1.0)*r02*x5977))+(((-1.0)*sj0))+((x5968*x5970))+(((-1.0)*x5974*x5979)));
evalcond[3]=(((cj2*sj1))+((x5969*x5975))+((cj1*sj2))+((r22*x5968))+(((-1.0)*x5972*x5977)));
evalcond[4]=(((r02*x5968))+((x5969*x5970))+((cj0*x5971))+(((-1.0)*cj0*x5978))+(((-1.0)*x5974*x5977)));
evalcond[5]=(((x5969*x5976))+(((-1.0)*sj0*x5978))+((r12*x5968))+((sj0*x5971))+(((-1.0)*x5973*x5977)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5980=((1.0)*gconst119);
CheckValue<IkReal> x5981 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst118*r21))+(((-1.0)*cj0*r20*x5980)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5981.valid){
continue;
}
CheckValue<IkReal> x5982=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst118*r00))+(((-1.0)*r01*x5980)))),-1);
if(!x5982.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5981.value)+(((1.5707963267949)*(x5982.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5983=IKsin(j4);
IkReal x5984=IKcos(j4);
IkReal x5985=(gconst118*r01);
IkReal x5986=(sj1*sj2);
IkReal x5987=(gconst119*r20);
IkReal x5988=(gconst119*r10);
IkReal x5989=(gconst119*r00);
IkReal x5990=(gconst118*r21);
IkReal x5991=(gconst118*r11);
IkReal x5992=((1.0)*x5984);
IkReal x5993=((1.0)*cj1*cj2);
IkReal x5994=((1.0)*x5983);
evalcond[0]=((((-1.0)*x5987*x5994))+((x5983*x5990))+(((-1.0)*r22*x5992)));
evalcond[1]=((((-1.0)*r12*x5992))+cj0+(((-1.0)*x5988*x5994))+((x5983*x5991)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x5992))+((x5983*x5985))+(((-1.0)*x5989*x5994)));
evalcond[3]=(((cj2*sj1))+((x5984*x5990))+(((-1.0)*x5987*x5992))+((cj1*sj2))+((r22*x5983)));
evalcond[4]=(((r02*x5983))+(((-1.0)*cj0*x5993))+((cj0*x5986))+(((-1.0)*x5989*x5992))+((x5984*x5985)));
evalcond[5]=(((x5984*x5991))+((r12*x5983))+((sj0*x5986))+(((-1.0)*sj0*x5993))+(((-1.0)*x5988*x5992)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5995=((-1.0)*r10);
IkReal x5997 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x5997)==0){
continue;
}
IkReal x5996=pow(x5997,-0.5);
CheckValue<IkReal> x5998 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x5995),IKFAST_ATAN2_MAGTHRESH);
if(!x5998.valid){
continue;
}
IkReal gconst120=((-1.0)*(x5998.value));
IkReal gconst121=(r11*x5996);
IkReal gconst122=(x5995*x5996);
CheckValue<IkReal> x5999 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5999.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5999.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x6000=((-1.0)*r10);
IkReal x6001=x5996;
CheckValue<IkReal> x6003 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x6000),IKFAST_ATAN2_MAGTHRESH);
if(!x6003.valid){
continue;
}
IkReal x6002=((-1.0)*(x6003.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst121;
cj5=gconst122;
j5=x6002;
IkReal gconst120=x6002;
IkReal gconst121=(r11*x6001);
IkReal gconst122=(x6000*x6001);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6004=((1.0)*sj0);
IkReal x6005=((1.0)*gconst121);
CheckValue<IkReal> x6006 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x6004))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x6005))+(((-1.0)*gconst121*r11*x6004))+((cj0*gconst122*r00))+((gconst122*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6006.valid){
continue;
}
CheckValue<IkReal> x6007=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst122*r21))+(((-1.0)*r20*x6005)))),-1);
if(!x6007.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6006.value)+(((1.5707963267949)*(x6007.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6008=IKsin(j4);
IkReal x6009=IKcos(j4);
IkReal x6010=(gconst121*r11);
IkReal x6011=(sj1*sj2);
IkReal x6012=(gconst122*r00);
IkReal x6013=(gconst122*r10);
IkReal x6014=(gconst122*r20);
IkReal x6015=((1.0)*x6009);
IkReal x6016=((1.0)*cj1*cj2);
IkReal x6017=((1.0)*x6008);
IkReal x6018=(gconst121*x6008);
IkReal x6019=(gconst121*x6009);
evalcond[0]=(((r21*x6018))+(((-1.0)*r22*x6015))+(((-1.0)*x6014*x6017)));
evalcond[1]=(((x6008*x6010))+cj0+(((-1.0)*r12*x6015))+(((-1.0)*x6013*x6017)));
evalcond[2]=(((r01*x6018))+(((-1.0)*sj0))+(((-1.0)*r02*x6015))+(((-1.0)*x6012*x6017)));
evalcond[3]=(((cj2*sj1))+((r22*x6008))+((r21*x6019))+((cj1*sj2))+(((-1.0)*x6014*x6015)));
evalcond[4]=(((r01*x6019))+((cj0*x6011))+((r02*x6008))+(((-1.0)*x6012*x6015))+(((-1.0)*cj0*x6016)));
evalcond[5]=(((r12*x6008))+((x6009*x6010))+(((-1.0)*sj0*x6016))+(((-1.0)*x6013*x6015))+((sj0*x6011)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6020=((1.0)*gconst122);
CheckValue<IkReal> x6021 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x6020))+((cj0*gconst121*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6021.valid){
continue;
}
CheckValue<IkReal> x6022=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x6020))+(((-1.0)*gconst121*r00)))),-1);
if(!x6022.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6021.value)+(((1.5707963267949)*(x6022.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6023=IKsin(j4);
IkReal x6024=IKcos(j4);
IkReal x6025=(gconst121*r11);
IkReal x6026=(sj1*sj2);
IkReal x6027=(gconst122*r00);
IkReal x6028=(gconst122*r10);
IkReal x6029=(gconst122*r20);
IkReal x6030=((1.0)*x6024);
IkReal x6031=((1.0)*cj1*cj2);
IkReal x6032=((1.0)*x6023);
IkReal x6033=(gconst121*x6023);
IkReal x6034=(gconst121*x6024);
evalcond[0]=((((-1.0)*x6029*x6032))+((r21*x6033))+(((-1.0)*r22*x6030)));
evalcond[1]=(cj0+(((-1.0)*r12*x6030))+((x6023*x6025))+(((-1.0)*x6028*x6032)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x6027*x6032))+((r01*x6033))+(((-1.0)*r02*x6030)));
evalcond[3]=((((-1.0)*x6029*x6030))+((cj2*sj1))+((r21*x6034))+((cj1*sj2))+((r22*x6023)));
evalcond[4]=(((r02*x6023))+(((-1.0)*cj0*x6031))+((cj0*x6026))+(((-1.0)*x6027*x6030))+((r01*x6034)));
evalcond[5]=(((sj0*x6026))+(((-1.0)*sj0*x6031))+((x6024*x6025))+((r12*x6023))+(((-1.0)*x6028*x6030)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6035=((-1.0)*r11);
IkReal x6037 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x6037)==0){
continue;
}
IkReal x6036=pow(x6037,-0.5);
CheckValue<IkReal> x6038 = IKatan2WithCheck(IkReal(x6035),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6038.valid){
continue;
}
IkReal gconst123=((3.14159265358979)+(((-1.0)*(x6038.value))));
IkReal gconst124=(x6035*x6036);
IkReal gconst125=((1.0)*r10*x6036);
CheckValue<IkReal> x6039 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6039.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x6039.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x6040=((-1.0)*r11);
CheckValue<IkReal> x6043 = IKatan2WithCheck(IkReal(x6040),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6043.valid){
continue;
}
IkReal x6041=((1.0)*(x6043.value));
IkReal x6042=x6036;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x6041)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x6041)));
IkReal gconst124=(x6040*x6042);
IkReal gconst125=((1.0)*r10*x6042);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6044=((-1.0)*r11);
CheckValue<IkReal> x6047 = IKatan2WithCheck(IkReal(x6044),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6047.valid){
continue;
}
IkReal x6045=((1.0)*(x6047.value));
IkReal x6046=x6036;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x6045)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x6045)));
IkReal gconst124=(x6044*x6046);
IkReal gconst125=((1.0)*r10*x6046);
IkReal x6048=r12*r12;
IkReal x6049=((1.0)*sj0);
IkReal x6050=(cj0*r02);
IkReal x6051=x6036;
j4eval[0]=((IKabs(((((-1.0)*x6050))+(((-1.0)*r12*x6049)))))+(IKabs((((r12*x6050*x6051))+((sj0*x6048*x6051))+(((-1.0)*x6049*x6051))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x6052=((-1.0)*r11);
CheckValue<IkReal> x6055 = IKatan2WithCheck(IkReal(x6052),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6055.valid){
continue;
}
IkReal x6053=((1.0)*(x6055.value));
IkReal x6054=x6036;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x6053)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x6053)));
IkReal gconst124=(x6052*x6054);
IkReal gconst125=((1.0)*r10*x6054);
IkReal x6056=r12*r12;
IkReal x6057=((1.0)+(((-1.0)*x6056)));
IkReal x6058=(cj2*r22*sj1);
IkReal x6059=(cj1*r22*sj2);
CheckValue<IkReal> x6066=IKPowWithIntegerCheck(x6057,-1);
if(!x6066.valid){
continue;
}
IkReal x6060=x6066.value;
CheckValue<IkReal> x6067=IKPowWithIntegerCheck(((-1.0)+x6056),-1);
if(!x6067.valid){
continue;
}
IkReal x6061=x6067.value;
IkReal x6062=((1.0)*x6060);
if((x6057) < -0.00001)
continue;
IkReal x6063=IKsqrt(x6057);
IkReal x6064=((1.0)*r12*x6061*x6063);
IkReal x6065=((((-2.0)*r10*r11*r20*r21*x6060))+(((-1.0)*(r22*r22)))+(((-1.0)*x6062*(r10*r10)*(r20*r20)))+(((-1.0)*x6062*(r11*r11)*(r21*r21))));
j4eval[0]=x6065;
j4eval[1]=IKsign(x6065);
j4eval[2]=((IKabs((x6059+x6058)))+(IKabs(((((-1.0)*x6059*x6064))+(((-1.0)*x6058*x6064))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6068=(gconst124*r21);
IkReal x6069=(cj1*sj2);
IkReal x6070=(cj2*sj1);
IkReal x6071=(gconst125*r20);
CheckValue<IkReal> x6072=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x6071*x6071)))+(((-1.0)*(r22*r22)))+(((2.0)*x6068*x6071))+(((-1.0)*(x6068*x6068))))),-1);
if(!x6072.valid){
continue;
}
CheckValue<IkReal> x6073 = IKatan2WithCheck(IkReal((((r22*x6070))+((r22*x6069)))),IkReal((((x6068*x6070))+(((-1.0)*x6069*x6071))+(((-1.0)*x6070*x6071))+((x6068*x6069)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6073.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6072.value)))+(x6073.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6074=IKsin(j4);
IkReal x6075=IKcos(j4);
IkReal x6076=(sj1*sj2);
IkReal x6077=(gconst125*r20);
IkReal x6078=(gconst124*r01);
IkReal x6079=(gconst125*r00);
IkReal x6080=(gconst125*r10);
IkReal x6081=((1.0)*x6075);
IkReal x6082=((1.0)*cj1*cj2);
IkReal x6083=((1.0)*x6074);
IkReal x6084=(gconst124*x6074);
IkReal x6085=(gconst124*x6075);
evalcond[0]=((((-1.0)*r22*x6081))+((r21*x6084))+(((-1.0)*x6077*x6083)));
evalcond[1]=((((-1.0)*r12*x6081))+(((-1.0)*x6080*x6083))+cj0+((r11*x6084)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6081))+((x6074*x6078))+(((-1.0)*x6079*x6083)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x6074))+((r21*x6085))+(((-1.0)*x6077*x6081)));
evalcond[4]=(((x6075*x6078))+(((-1.0)*cj0*x6082))+((cj0*x6076))+(((-1.0)*x6079*x6081))+((r02*x6074)));
evalcond[5]=((((-1.0)*x6080*x6081))+((sj0*x6076))+(((-1.0)*sj0*x6082))+((r11*x6085))+((r12*x6074)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6086=((1.0)*sj0);
IkReal x6087=((1.0)*cj0);
CheckValue<IkReal> x6088 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x6086))+(((-1.0)*r02*x6087)))),IkReal(((((-1.0)*gconst124*r11*x6086))+((gconst125*r10*sj0))+((cj0*gconst125*r00))+(((-1.0)*gconst124*r01*x6087)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6088.valid){
continue;
}
CheckValue<IkReal> x6089=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst124*r20))+(((-1.0)*gconst125*r21)))),-1);
if(!x6089.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6088.value)+(((1.5707963267949)*(x6089.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6090=IKsin(j4);
IkReal x6091=IKcos(j4);
IkReal x6092=(sj1*sj2);
IkReal x6093=(gconst125*r20);
IkReal x6094=(gconst124*r01);
IkReal x6095=(gconst125*r00);
IkReal x6096=(gconst125*r10);
IkReal x6097=((1.0)*x6091);
IkReal x6098=((1.0)*cj1*cj2);
IkReal x6099=((1.0)*x6090);
IkReal x6100=(gconst124*x6090);
IkReal x6101=(gconst124*x6091);
evalcond[0]=(((r21*x6100))+(((-1.0)*r22*x6097))+(((-1.0)*x6093*x6099)));
evalcond[1]=(((r11*x6100))+cj0+(((-1.0)*x6096*x6099))+(((-1.0)*r12*x6097)));
evalcond[2]=((((-1.0)*sj0))+((x6090*x6094))+(((-1.0)*x6095*x6099))+(((-1.0)*r02*x6097)));
evalcond[3]=(((cj2*sj1))+((r21*x6101))+((cj1*sj2))+(((-1.0)*x6093*x6097))+((r22*x6090)));
evalcond[4]=((((-1.0)*cj0*x6098))+(((-1.0)*x6095*x6097))+((cj0*x6092))+((x6091*x6094))+((r02*x6090)));
evalcond[5]=(((r11*x6101))+((sj0*x6092))+(((-1.0)*x6096*x6097))+(((-1.0)*sj0*x6098))+((r12*x6090)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6102=((1.0)*gconst125);
CheckValue<IkReal> x6103=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst124*r00))+(((-1.0)*r01*x6102)))),-1);
if(!x6103.valid){
continue;
}
CheckValue<IkReal> x6104 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x6102))+((cj0*gconst124*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6104.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6103.value)))+(x6104.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6105=IKsin(j4);
IkReal x6106=IKcos(j4);
IkReal x6107=(sj1*sj2);
IkReal x6108=(gconst125*r20);
IkReal x6109=(gconst124*r01);
IkReal x6110=(gconst125*r00);
IkReal x6111=(gconst125*r10);
IkReal x6112=((1.0)*x6106);
IkReal x6113=((1.0)*cj1*cj2);
IkReal x6114=((1.0)*x6105);
IkReal x6115=(gconst124*x6105);
IkReal x6116=(gconst124*x6106);
evalcond[0]=((((-1.0)*r22*x6112))+(((-1.0)*x6108*x6114))+((r21*x6115)));
evalcond[1]=(cj0+(((-1.0)*r12*x6112))+(((-1.0)*x6111*x6114))+((r11*x6115)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6112))+(((-1.0)*x6110*x6114))+((x6105*x6109)));
evalcond[3]=(((cj2*sj1))+((r22*x6105))+((cj1*sj2))+(((-1.0)*x6108*x6112))+((r21*x6116)));
evalcond[4]=(((x6106*x6109))+((cj0*x6107))+(((-1.0)*cj0*x6113))+((r02*x6105))+(((-1.0)*x6110*x6112)));
evalcond[5]=(((sj0*x6107))+(((-1.0)*sj0*x6113))+(((-1.0)*x6111*x6112))+((r11*x6116))+((r12*x6105)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x6117=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x6117;
j4eval[1]=IKsign(x6117);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x6118=((1.0)*cj5);
IkReal x6119=((((-1.0)*r00*sj5))+(((-1.0)*r01*x6118)));
j4eval[0]=x6119;
j4eval[1]=((IKabs(((((-1.0)*r20*x6118))+((r21*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x6119);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x6120=cj5*cj5;
IkReal x6121=r11*r11;
IkReal x6122=(cj5*r10);
IkReal x6123=(r11*sj5);
IkReal x6124=(((x6120*x6121))+(((-1.0)*(r12*r12)))+(((-1.0)*x6120*(r10*r10)))+(((-1.0)*x6121))+(((2.0)*x6122*x6123)));
j4eval[0]=x6124;
j4eval[1]=IKsign(x6124);
j4eval[2]=((IKabs(r12))+(IKabs((x6123+(((-1.0)*x6122))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6125=cj5*cj5;
IkReal x6126=r11*r11;
IkReal x6127=(cj5*r10);
IkReal x6128=(r11*sj5);
CheckValue<IkReal> x6129=IKPowWithIntegerCheck(IKsign((((x6125*x6126))+(((-1.0)*(r12*r12)))+(((2.0)*x6127*x6128))+(((-1.0)*x6125*(r10*r10)))+(((-1.0)*x6126)))),-1);
if(!x6129.valid){
continue;
}
CheckValue<IkReal> x6130 = IKatan2WithCheck(IkReal((x6128+(((-1.0)*x6127)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x6130.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6129.value)))+(x6130.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6131=IKcos(j4);
IkReal x6132=IKsin(j4);
IkReal x6133=(cj5*r00);
IkReal x6134=(cj5*r10);
IkReal x6135=(r21*sj5);
IkReal x6136=(cj5*r20);
IkReal x6137=((1.0)*x6131);
IkReal x6138=((1.0)*x6132);
IkReal x6139=(sj5*x6132);
IkReal x6140=(sj5*x6131);
evalcond[0]=((((-1.0)*x6134*x6137))+((r11*x6140))+((r12*x6132)));
evalcond[1]=((((-1.0)*x6136*x6138))+(((-1.0)*r22*x6137))+((x6132*x6135)));
evalcond[2]=((((-1.0)*x6133*x6138))+((r01*x6139))+(((-1.0)*r02*x6137)));
evalcond[3]=((1.0)+((r11*x6139))+(((-1.0)*x6134*x6138))+(((-1.0)*r12*x6137)));
evalcond[4]=(((cj2*sj1))+((x6131*x6135))+((r22*x6132))+(((-1.0)*x6136*x6137))+((cj1*sj2)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r01*x6140))+((r02*x6132))+(((-1.0)*x6133*x6137)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6141=((1.0)*cj5);
CheckValue<IkReal> x6142 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x6141))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6142.valid){
continue;
}
CheckValue<IkReal> x6143=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x6141))+(((-1.0)*r00*sj5)))),-1);
if(!x6143.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6142.value)+(((1.5707963267949)*(x6143.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6144=IKcos(j4);
IkReal x6145=IKsin(j4);
IkReal x6146=(cj5*r00);
IkReal x6147=(cj5*r10);
IkReal x6148=(r21*sj5);
IkReal x6149=(cj5*r20);
IkReal x6150=((1.0)*x6144);
IkReal x6151=((1.0)*x6145);
IkReal x6152=(sj5*x6145);
IkReal x6153=(sj5*x6144);
evalcond[0]=((((-1.0)*x6147*x6150))+((r12*x6145))+((r11*x6153)));
evalcond[1]=((((-1.0)*r22*x6150))+((x6145*x6148))+(((-1.0)*x6149*x6151)));
evalcond[2]=((((-1.0)*r02*x6150))+(((-1.0)*x6146*x6151))+((r01*x6152)));
evalcond[3]=((1.0)+(((-1.0)*x6147*x6151))+(((-1.0)*r12*x6150))+((r11*x6152)));
evalcond[4]=(((cj2*sj1))+((x6144*x6148))+((cj1*sj2))+((r22*x6145))+(((-1.0)*x6149*x6150)));
evalcond[5]=((((-1.0)*x6146*x6150))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r02*x6145))+((r01*x6153)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6154=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x6154.valid){
continue;
}
CheckValue<IkReal> x6155 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6155.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6154.value)))+(x6155.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6156=IKcos(j4);
IkReal x6157=IKsin(j4);
IkReal x6158=(cj5*r00);
IkReal x6159=(cj5*r10);
IkReal x6160=(r21*sj5);
IkReal x6161=(cj5*r20);
IkReal x6162=((1.0)*x6156);
IkReal x6163=((1.0)*x6157);
IkReal x6164=(sj5*x6157);
IkReal x6165=(sj5*x6156);
evalcond[0]=(((r12*x6157))+((r11*x6165))+(((-1.0)*x6159*x6162)));
evalcond[1]=(((x6157*x6160))+(((-1.0)*r22*x6162))+(((-1.0)*x6161*x6163)));
evalcond[2]=(((r01*x6164))+(((-1.0)*r02*x6162))+(((-1.0)*x6158*x6163)));
evalcond[3]=((1.0)+(((-1.0)*r12*x6162))+((r11*x6164))+(((-1.0)*x6159*x6163)));
evalcond[4]=(((r22*x6157))+((cj2*sj1))+((cj1*sj2))+((x6156*x6160))+(((-1.0)*x6161*x6162)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r02*x6157))+((r01*x6165))+(((-1.0)*x6158*x6162)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6166=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x6166;
j4eval[1]=IKsign(x6166);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6167=((1.0)*cj5);
IkReal x6168=((((-1.0)*r21*x6167))+(((-1.0)*r20*sj5)));
j4eval[0]=x6168;
j4eval[1]=((IKabs((((r01*sj5))+(((-1.0)*r00*x6167)))))+(IKabs(r02)));
j4eval[2]=IKsign(x6168);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6169=cj5*cj5;
IkReal x6170=r11*r11;
IkReal x6171=(r11*sj5);
IkReal x6172=(cj5*r10);
IkReal x6173=(((x6169*(r10*r10)))+(((-2.0)*x6171*x6172))+(r12*r12)+x6170+(((-1.0)*x6169*x6170)));
j4eval[0]=x6173;
j4eval[1]=IKsign(x6173);
j4eval[2]=((IKabs(r12))+(IKabs((x6171+(((-1.0)*x6172))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6174=cj5*cj5;
IkReal x6175=r11*r11;
IkReal x6176=(cj5*r10);
IkReal x6177=(r11*sj5);
CheckValue<IkReal> x6178 = IKatan2WithCheck(IkReal((x6177+(((-1.0)*x6176)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x6178.valid){
continue;
}
CheckValue<IkReal> x6179=IKPowWithIntegerCheck(IKsign(((((-1.0)*x6174*x6175))+(r12*r12)+x6175+(((-2.0)*x6176*x6177))+((x6174*(r10*r10))))),-1);
if(!x6179.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6178.value)+(((1.5707963267949)*(x6179.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6180=IKcos(j4);
IkReal x6181=IKsin(j4);
IkReal x6182=(cj5*r00);
IkReal x6183=(cj5*r10);
IkReal x6184=(r21*sj5);
IkReal x6185=(cj5*r20);
IkReal x6186=((1.0)*x6180);
IkReal x6187=((1.0)*x6181);
IkReal x6188=(sj5*x6181);
IkReal x6189=(sj5*x6180);
evalcond[0]=((((-1.0)*x6183*x6186))+((r11*x6189))+((r12*x6181)));
evalcond[1]=((((-1.0)*r22*x6186))+(((-1.0)*x6185*x6187))+((x6181*x6184)));
evalcond[2]=((((-1.0)*x6182*x6187))+(((-1.0)*r02*x6186))+((r01*x6188)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x6186))+(((-1.0)*x6183*x6187))+((r11*x6188)));
evalcond[4]=(((cj2*sj1))+((r22*x6181))+(((-1.0)*x6185*x6186))+((cj1*sj2))+((x6180*x6184)));
evalcond[5]=((((-1.0)*x6182*x6186))+(((-1.0)*sj1*sj2))+((r01*x6189))+((r02*x6181))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6190=((1.0)*cj5);
CheckValue<IkReal> x6191 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x6190)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6191.valid){
continue;
}
CheckValue<IkReal> x6192=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x6190))+(((-1.0)*r20*sj5)))),-1);
if(!x6192.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6191.value)+(((1.5707963267949)*(x6192.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6193=IKcos(j4);
IkReal x6194=IKsin(j4);
IkReal x6195=(cj5*r00);
IkReal x6196=(cj5*r10);
IkReal x6197=(r21*sj5);
IkReal x6198=(cj5*r20);
IkReal x6199=((1.0)*x6193);
IkReal x6200=((1.0)*x6194);
IkReal x6201=(sj5*x6194);
IkReal x6202=(sj5*x6193);
evalcond[0]=(((r12*x6194))+(((-1.0)*x6196*x6199))+((r11*x6202)));
evalcond[1]=(((x6194*x6197))+(((-1.0)*x6198*x6200))+(((-1.0)*r22*x6199)));
evalcond[2]=(((r01*x6201))+(((-1.0)*x6195*x6200))+(((-1.0)*r02*x6199)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x6199))+(((-1.0)*x6196*x6200))+((r11*x6201)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6198*x6199))+((r22*x6194))+((x6193*x6197)));
evalcond[5]=(((r01*x6202))+((r02*x6194))+(((-1.0)*sj1*sj2))+(((-1.0)*x6195*x6199))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6203 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6203.valid){
continue;
}
CheckValue<IkReal> x6204=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x6204.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6203.value)+(((1.5707963267949)*(x6204.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6205=IKcos(j4);
IkReal x6206=IKsin(j4);
IkReal x6207=(cj5*r00);
IkReal x6208=(cj5*r10);
IkReal x6209=(r21*sj5);
IkReal x6210=(cj5*r20);
IkReal x6211=((1.0)*x6205);
IkReal x6212=((1.0)*x6206);
IkReal x6213=(sj5*x6206);
IkReal x6214=(sj5*x6205);
evalcond[0]=(((r11*x6214))+(((-1.0)*x6208*x6211))+((r12*x6206)));
evalcond[1]=((((-1.0)*x6210*x6212))+((x6206*x6209))+(((-1.0)*r22*x6211)));
evalcond[2]=(((r01*x6213))+(((-1.0)*x6207*x6212))+(((-1.0)*r02*x6211)));
evalcond[3]=((-1.0)+((r11*x6213))+(((-1.0)*r12*x6211))+(((-1.0)*x6208*x6212)));
evalcond[4]=(((cj2*sj1))+((r22*x6206))+(((-1.0)*x6210*x6211))+((cj1*sj2))+((x6205*x6209)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r02*x6206))+((r01*x6214))+(((-1.0)*x6207*x6211))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6215=((-1.0)*r00);
IkReal x6217 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x6217)==0){
continue;
}
IkReal x6216=pow(x6217,-0.5);
CheckValue<IkReal> x6218 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x6215),IKFAST_ATAN2_MAGTHRESH);
if(!x6218.valid){
continue;
}
IkReal gconst126=((-1.0)*(x6218.value));
IkReal gconst127=(r01*x6216);
IkReal gconst128=(x6215*x6216);
CheckValue<IkReal> x6219 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6219.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x6219.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x6220=((-1.0)*r00);
IkReal x6221=x6216;
CheckValue<IkReal> x6223 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x6220),IKFAST_ATAN2_MAGTHRESH);
if(!x6223.valid){
continue;
}
IkReal x6222=((-1.0)*(x6223.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst127;
cj5=gconst128;
j5=x6222;
IkReal gconst126=x6222;
IkReal gconst127=(r01*x6221);
IkReal gconst128=(x6220*x6221);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6224=((1.0)*sj0);
IkReal x6225=((1.0)*gconst127);
CheckValue<IkReal> x6226=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x6225))+(((-1.0)*gconst128*r21)))),-1);
if(!x6226.valid){
continue;
}
CheckValue<IkReal> x6227 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x6224))+(((-1.0)*cj0*r02)))),IkReal((((gconst128*r10*sj0))+(((-1.0)*gconst127*r11*x6224))+(((-1.0)*cj0*r01*x6225))+((cj0*gconst128*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6227.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6226.value)))+(x6227.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6228=IKsin(j4);
IkReal x6229=IKcos(j4);
IkReal x6230=(gconst127*r01);
IkReal x6231=(sj1*sj2);
IkReal x6232=(gconst128*r10);
IkReal x6233=(gconst128*r00);
IkReal x6234=(gconst128*r20);
IkReal x6235=((1.0)*x6229);
IkReal x6236=((1.0)*cj1*cj2);
IkReal x6237=((1.0)*x6228);
IkReal x6238=(gconst127*x6229);
IkReal x6239=(gconst127*x6228);
evalcond[0]=(((r21*x6239))+(((-1.0)*r22*x6235))+(((-1.0)*x6234*x6237)));
evalcond[1]=((((-1.0)*r12*x6235))+(((-1.0)*x6232*x6237))+cj0+((r11*x6239)));
evalcond[2]=((((-1.0)*sj0))+((x6228*x6230))+(((-1.0)*r02*x6235))+(((-1.0)*x6233*x6237)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r21*x6238))+((r22*x6228))+(((-1.0)*x6234*x6235)));
evalcond[4]=(((r02*x6228))+(((-1.0)*cj0*x6236))+((x6229*x6230))+(((-1.0)*x6233*x6235))+((cj0*x6231)));
evalcond[5]=((((-1.0)*x6232*x6235))+((sj0*x6231))+(((-1.0)*sj0*x6236))+((r12*x6228))+((r11*x6238)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6240=((1.0)*gconst128);
CheckValue<IkReal> x6241 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x6240))+((gconst127*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6241.valid){
continue;
}
CheckValue<IkReal> x6242=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x6240))+(((-1.0)*gconst127*r10)))),-1);
if(!x6242.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6241.value)+(((1.5707963267949)*(x6242.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6243=IKsin(j4);
IkReal x6244=IKcos(j4);
IkReal x6245=(gconst127*r01);
IkReal x6246=(sj1*sj2);
IkReal x6247=(gconst128*r10);
IkReal x6248=(gconst128*r00);
IkReal x6249=(gconst128*r20);
IkReal x6250=((1.0)*x6244);
IkReal x6251=((1.0)*cj1*cj2);
IkReal x6252=((1.0)*x6243);
IkReal x6253=(gconst127*x6244);
IkReal x6254=(gconst127*x6243);
evalcond[0]=(((r21*x6254))+(((-1.0)*x6249*x6252))+(((-1.0)*r22*x6250)));
evalcond[1]=((((-1.0)*x6247*x6252))+cj0+(((-1.0)*r12*x6250))+((r11*x6254)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6250))+((x6243*x6245))+(((-1.0)*x6248*x6252)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r21*x6253))+(((-1.0)*x6249*x6250))+((r22*x6243)));
evalcond[4]=(((r02*x6243))+((x6244*x6245))+(((-1.0)*x6248*x6250))+(((-1.0)*cj0*x6251))+((cj0*x6246)));
evalcond[5]=((((-1.0)*x6247*x6250))+((r12*x6243))+((sj0*x6246))+(((-1.0)*sj0*x6251))+((r11*x6253)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6255=((-1.0)*r01);
IkReal x6257 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x6257)==0){
continue;
}
IkReal x6256=pow(x6257,-0.5);
CheckValue<IkReal> x6258 = IKatan2WithCheck(IkReal(x6255),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6258.valid){
continue;
}
IkReal gconst129=((3.14159265358979)+(((-1.0)*(x6258.value))));
IkReal gconst130=(x6255*x6256);
IkReal gconst131=((1.0)*r00*x6256);
CheckValue<IkReal> x6259 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6259.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x6259.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x6260=((-1.0)*r01);
CheckValue<IkReal> x6263 = IKatan2WithCheck(IkReal(x6260),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6263.valid){
continue;
}
IkReal x6261=((1.0)*(x6263.value));
IkReal x6262=x6256;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x6261)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x6261)));
IkReal gconst130=(x6260*x6262);
IkReal gconst131=((1.0)*r00*x6262);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x6264=((-1.0)*r01);
CheckValue<IkReal> x6267 = IKatan2WithCheck(IkReal(x6264),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6267.valid){
continue;
}
IkReal x6265=((1.0)*(x6267.value));
IkReal x6266=x6256;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x6265)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x6265)));
IkReal gconst130=(x6264*x6266);
IkReal gconst131=((1.0)*r00*x6266);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6268=((-1.0)*r01);
CheckValue<IkReal> x6271 = IKatan2WithCheck(IkReal(x6268),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6271.valid){
continue;
}
IkReal x6269=((1.0)*(x6271.value));
IkReal x6270=x6256;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x6269)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x6269)));
IkReal gconst130=(x6268*x6270);
IkReal gconst131=((1.0)*r00*x6270);
IkReal x6272=r02*r02;
IkReal x6273=(r12*sj0);
IkReal x6274=((1.0)*cj0);
IkReal x6275=x6256;
j4eval[0]=((IKabs((((cj0*x6272*x6275))+(((-1.0)*x6274*x6275))+((r02*x6273*x6275)))))+(IKabs(((((-1.0)*r02*x6274))+(((-1.0)*x6273))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6276=((1.0)*sj0);
IkReal x6277=((1.0)*gconst130);
CheckValue<IkReal> x6278 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x6276)))),IkReal(((((-1.0)*cj0*r01*x6277))+(((-1.0)*gconst130*r11*x6276))+((gconst131*r10*sj0))+((cj0*gconst131*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6278.valid){
continue;
}
CheckValue<IkReal> x6279=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x6277))+(((-1.0)*gconst131*r21)))),-1);
if(!x6279.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6278.value)+(((1.5707963267949)*(x6279.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6280=IKsin(j4);
IkReal x6281=IKcos(j4);
IkReal x6282=(gconst131*r10);
IkReal x6283=(sj1*sj2);
IkReal x6284=(gconst131*r20);
IkReal x6285=(gconst131*r00);
IkReal x6286=((1.0)*x6281);
IkReal x6287=((1.0)*cj1*cj2);
IkReal x6288=(gconst130*x6280);
IkReal x6289=((1.0)*x6280);
IkReal x6290=(gconst130*x6281);
evalcond[0]=((((-1.0)*x6284*x6289))+(((-1.0)*r22*x6286))+((r21*x6288)));
evalcond[1]=((((-1.0)*x6282*x6289))+cj0+((r11*x6288))+(((-1.0)*r12*x6286)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x6285*x6289))+(((-1.0)*r02*x6286))+((r01*x6288)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x6284*x6286))+((r22*x6280))+((cj1*sj2))+((r21*x6290)));
evalcond[4]=(((r01*x6290))+(((-1.0)*x6285*x6286))+((cj0*x6283))+(((-1.0)*cj0*x6287))+((r02*x6280)));
evalcond[5]=((((-1.0)*x6282*x6286))+((r11*x6290))+((r12*x6280))+((sj0*x6283))+(((-1.0)*sj0*x6287)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6291=((1.0)*gconst131);
CheckValue<IkReal> x6292 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x6291))+((gconst130*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6292.valid){
continue;
}
CheckValue<IkReal> x6293=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst130*r10))+(((-1.0)*r11*x6291)))),-1);
if(!x6293.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6292.value)+(((1.5707963267949)*(x6293.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6294=IKsin(j4);
IkReal x6295=IKcos(j4);
IkReal x6296=(gconst131*r10);
IkReal x6297=(sj1*sj2);
IkReal x6298=(gconst131*r20);
IkReal x6299=(gconst131*r00);
IkReal x6300=((1.0)*x6295);
IkReal x6301=((1.0)*cj1*cj2);
IkReal x6302=(gconst130*x6294);
IkReal x6303=((1.0)*x6294);
IkReal x6304=(gconst130*x6295);
evalcond[0]=((((-1.0)*x6298*x6303))+((r21*x6302))+(((-1.0)*r22*x6300)));
evalcond[1]=(cj0+(((-1.0)*r12*x6300))+(((-1.0)*x6296*x6303))+((r11*x6302)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6300))+((r01*x6302))+(((-1.0)*x6299*x6303)));
evalcond[3]=(((cj2*sj1))+((r22*x6294))+((cj1*sj2))+(((-1.0)*x6298*x6300))+((r21*x6304)));
evalcond[4]=(((r01*x6304))+((cj0*x6297))+(((-1.0)*x6299*x6300))+((r02*x6294))+(((-1.0)*cj0*x6301)));
evalcond[5]=((((-1.0)*x6296*x6300))+((r11*x6304))+(((-1.0)*sj0*x6301))+((r12*x6294))+((sj0*x6297)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6305=((1.0)*gconst131);
CheckValue<IkReal> x6306 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst130*r21))+(((-1.0)*cj0*r20*x6305)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6306.valid){
continue;
}
CheckValue<IkReal> x6307=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x6305))+(((-1.0)*gconst130*r00)))),-1);
if(!x6307.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6306.value)+(((1.5707963267949)*(x6307.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6308=IKsin(j4);
IkReal x6309=IKcos(j4);
IkReal x6310=(gconst131*r10);
IkReal x6311=(sj1*sj2);
IkReal x6312=(gconst131*r20);
IkReal x6313=(gconst131*r00);
IkReal x6314=((1.0)*x6309);
IkReal x6315=((1.0)*cj1*cj2);
IkReal x6316=(gconst130*x6308);
IkReal x6317=((1.0)*x6308);
IkReal x6318=(gconst130*x6309);
evalcond[0]=((((-1.0)*r22*x6314))+(((-1.0)*x6312*x6317))+((r21*x6316)));
evalcond[1]=(cj0+(((-1.0)*r12*x6314))+(((-1.0)*x6310*x6317))+((r11*x6316)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6314))+((r01*x6316))+(((-1.0)*x6313*x6317)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x6312*x6314))+((cj1*sj2))+((r22*x6308))+((r21*x6318)));
evalcond[4]=(((r01*x6318))+((r02*x6308))+((cj0*x6311))+(((-1.0)*cj0*x6315))+(((-1.0)*x6313*x6314)));
evalcond[5]=((((-1.0)*x6310*x6314))+((r11*x6318))+(((-1.0)*sj0*x6315))+((r12*x6308))+((sj0*x6311)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6319=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x6319;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x6319);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6320=((1.0)*cj5);
IkReal x6321=((((-1.0)*r10*sj5))+(((-1.0)*r11*x6320)));
j4eval[0]=x6321;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x6320)))))+(IKabs(r22)));
j4eval[2]=IKsign(x6321);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6322=cj5*cj5;
IkReal x6323=r01*r01;
IkReal x6324=(cj5*r00);
IkReal x6325=(r01*sj5);
IkReal x6326=(x6323+(((-2.0)*x6324*x6325))+(((-1.0)*x6322*x6323))+(r02*r02)+((x6322*(r00*r00))));
j4eval[0]=x6326;
j4eval[1]=IKsign(x6326);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x6324))+x6325))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6327=cj5*cj5;
IkReal x6328=r01*r01;
IkReal x6329=(r01*sj5);
IkReal x6330=(cj5*r00);
CheckValue<IkReal> x6331 = IKatan2WithCheck(IkReal((x6329+(((-1.0)*x6330)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x6331.valid){
continue;
}
CheckValue<IkReal> x6332=IKPowWithIntegerCheck(IKsign((x6328+((x6327*(r00*r00)))+(((-1.0)*x6327*x6328))+(((-2.0)*x6329*x6330))+(r02*r02))),-1);
if(!x6332.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6331.value)+(((1.5707963267949)*(x6332.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6333=IKcos(j4);
IkReal x6334=IKsin(j4);
IkReal x6335=(cj5*r00);
IkReal x6336=(cj5*r10);
IkReal x6337=(r21*sj5);
IkReal x6338=(cj5*r20);
IkReal x6339=((1.0)*x6333);
IkReal x6340=((1.0)*x6334);
IkReal x6341=(sj5*x6334);
IkReal x6342=(sj5*x6333);
evalcond[0]=(((r02*x6334))+(((-1.0)*x6335*x6339))+((r01*x6342)));
evalcond[1]=(((x6334*x6337))+(((-1.0)*x6338*x6340))+(((-1.0)*r22*x6339)));
evalcond[2]=((((-1.0)*r12*x6339))+((r11*x6341))+(((-1.0)*x6336*x6340)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x6339))+((r01*x6341))+(((-1.0)*x6335*x6340)));
evalcond[4]=(((cj2*sj1))+((r22*x6334))+((cj1*sj2))+(((-1.0)*x6338*x6339))+((x6333*x6337)));
evalcond[5]=(((r12*x6334))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x6336*x6339))+((r11*x6342)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6343=((1.0)*cj5);
CheckValue<IkReal> x6344 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x6343)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6344.valid){
continue;
}
CheckValue<IkReal> x6345=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x6343))+(((-1.0)*r10*sj5)))),-1);
if(!x6345.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6344.value)+(((1.5707963267949)*(x6345.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6346=IKcos(j4);
IkReal x6347=IKsin(j4);
IkReal x6348=(cj5*r00);
IkReal x6349=(cj5*r10);
IkReal x6350=(r21*sj5);
IkReal x6351=(cj5*r20);
IkReal x6352=((1.0)*x6346);
IkReal x6353=((1.0)*x6347);
IkReal x6354=(sj5*x6347);
IkReal x6355=(sj5*x6346);
evalcond[0]=(((r02*x6347))+((r01*x6355))+(((-1.0)*x6348*x6352)));
evalcond[1]=((((-1.0)*x6351*x6353))+((x6347*x6350))+(((-1.0)*r22*x6352)));
evalcond[2]=((((-1.0)*x6349*x6353))+((r11*x6354))+(((-1.0)*r12*x6352)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x6352))+((r01*x6354))+(((-1.0)*x6348*x6353)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x6351*x6352))+((x6346*x6350))+((r22*x6347))+((cj1*sj2)));
evalcond[5]=((((-1.0)*x6349*x6352))+((r12*x6347))+((r11*x6355))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6356=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x6356.valid){
continue;
}
CheckValue<IkReal> x6357 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6357.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6356.value)))+(x6357.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6358=IKcos(j4);
IkReal x6359=IKsin(j4);
IkReal x6360=(cj5*r00);
IkReal x6361=(cj5*r10);
IkReal x6362=(r21*sj5);
IkReal x6363=(cj5*r20);
IkReal x6364=((1.0)*x6358);
IkReal x6365=((1.0)*x6359);
IkReal x6366=(sj5*x6359);
IkReal x6367=(sj5*x6358);
evalcond[0]=(((r01*x6367))+(((-1.0)*x6360*x6364))+((r02*x6359)));
evalcond[1]=(((x6359*x6362))+(((-1.0)*x6363*x6365))+(((-1.0)*r22*x6364)));
evalcond[2]=((((-1.0)*x6361*x6365))+((r11*x6366))+(((-1.0)*r12*x6364)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x6364))+((r01*x6366))+(((-1.0)*x6360*x6365)));
evalcond[4]=(((cj2*sj1))+((x6358*x6362))+((cj1*sj2))+((r22*x6359))+(((-1.0)*x6363*x6364)));
evalcond[5]=((((-1.0)*x6361*x6364))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r11*x6367))+((r12*x6359)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6368=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6368;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x6368);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6369=((1.0)*cj5);
IkReal x6370=((((-1.0)*r21*x6369))+(((-1.0)*r20*sj5)));
j4eval[0]=x6370;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x6369))))));
j4eval[2]=IKsign(x6370);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6371=(r01*sj5);
IkReal x6372=(cj1*sj2);
IkReal x6373=(cj2*sj1);
IkReal x6374=((1.0)*r02);
IkReal x6375=((1.0)*cj5*r00);
IkReal x6376=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6376;
j4eval[1]=((IKabs(((((-1.0)*x6372*x6375))+(((-1.0)*x6373*x6375))+((x6371*x6372))+((x6371*x6373)))))+(IKabs(((((-1.0)*x6372*x6374))+(((-1.0)*x6373*x6374))))));
j4eval[2]=IKsign(x6376);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6377=(r01*sj5);
IkReal x6378=(cj1*sj2);
IkReal x6379=(cj2*sj1);
IkReal x6380=((1.0)*r02);
IkReal x6381=((1.0)*cj5*r00);
CheckValue<IkReal> x6382 = IKatan2WithCheck(IkReal((((x6377*x6379))+((x6377*x6378))+(((-1.0)*x6378*x6381))+(((-1.0)*x6379*x6381)))),IkReal(((((-1.0)*x6378*x6380))+(((-1.0)*x6379*x6380)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6382.valid){
continue;
}
CheckValue<IkReal> x6383=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6383.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6382.value)+(((1.5707963267949)*(x6383.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6384=IKcos(j4);
IkReal x6385=IKsin(j4);
IkReal x6386=(cj5*r00);
IkReal x6387=(cj5*r10);
IkReal x6388=(r21*sj5);
IkReal x6389=(cj5*r20);
IkReal x6390=((1.0)*x6384);
IkReal x6391=((1.0)*x6385);
IkReal x6392=(sj5*x6385);
IkReal x6393=(sj5*x6384);
evalcond[0]=((((-1.0)*x6386*x6390))+((r02*x6385))+((r01*x6393)));
evalcond[1]=(((x6385*x6388))+(((-1.0)*r22*x6390))+(((-1.0)*x6389*x6391)));
evalcond[2]=(((r11*x6392))+(((-1.0)*x6387*x6391))+(((-1.0)*r12*x6390)));
evalcond[3]=((1.0)+(((-1.0)*x6386*x6391))+((r01*x6392))+(((-1.0)*r02*x6390)));
evalcond[4]=(((cj2*sj1))+((r22*x6385))+((cj1*sj2))+((x6384*x6388))+(((-1.0)*x6389*x6390)));
evalcond[5]=(((r11*x6393))+(((-1.0)*sj1*sj2))+(((-1.0)*x6387*x6390))+((cj1*cj2))+((r12*x6385)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6394=((1.0)*cj5);
CheckValue<IkReal> x6395 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x6394)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6395.valid){
continue;
}
CheckValue<IkReal> x6396=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x6394))+(((-1.0)*r20*sj5)))),-1);
if(!x6396.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6395.value)+(((1.5707963267949)*(x6396.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6397=IKcos(j4);
IkReal x6398=IKsin(j4);
IkReal x6399=(cj5*r00);
IkReal x6400=(cj5*r10);
IkReal x6401=(r21*sj5);
IkReal x6402=(cj5*r20);
IkReal x6403=((1.0)*x6397);
IkReal x6404=((1.0)*x6398);
IkReal x6405=(sj5*x6398);
IkReal x6406=(sj5*x6397);
evalcond[0]=(((r01*x6406))+(((-1.0)*x6399*x6403))+((r02*x6398)));
evalcond[1]=((((-1.0)*x6402*x6404))+((x6398*x6401))+(((-1.0)*r22*x6403)));
evalcond[2]=((((-1.0)*x6400*x6404))+(((-1.0)*r12*x6403))+((r11*x6405)));
evalcond[3]=((1.0)+((r01*x6405))+(((-1.0)*r02*x6403))+(((-1.0)*x6399*x6404)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x6402*x6403))+((cj1*sj2))+((x6397*x6401))+((r22*x6398)));
evalcond[5]=((((-1.0)*x6400*x6403))+((r12*x6398))+(((-1.0)*sj1*sj2))+((cj1*cj2))+((r11*x6406)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6407 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6407.valid){
continue;
}
CheckValue<IkReal> x6408=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6408.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6407.value)+(((1.5707963267949)*(x6408.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6409=IKcos(j4);
IkReal x6410=IKsin(j4);
IkReal x6411=(cj5*r00);
IkReal x6412=(cj5*r10);
IkReal x6413=(r21*sj5);
IkReal x6414=(cj5*r20);
IkReal x6415=((1.0)*x6409);
IkReal x6416=((1.0)*x6410);
IkReal x6417=(sj5*x6410);
IkReal x6418=(sj5*x6409);
evalcond[0]=(((r02*x6410))+((r01*x6418))+(((-1.0)*x6411*x6415)));
evalcond[1]=((((-1.0)*x6414*x6416))+((x6410*x6413))+(((-1.0)*r22*x6415)));
evalcond[2]=((((-1.0)*x6412*x6416))+(((-1.0)*r12*x6415))+((r11*x6417)));
evalcond[3]=((1.0)+((r01*x6417))+(((-1.0)*r02*x6415))+(((-1.0)*x6411*x6416)));
evalcond[4]=((((-1.0)*x6414*x6415))+((cj2*sj1))+((x6409*x6413))+((cj1*sj2))+((r22*x6410)));
evalcond[5]=((((-1.0)*x6412*x6415))+(((-1.0)*sj1*sj2))+((r12*x6410))+((cj1*cj2))+((r11*x6418)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x6419=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6419);
rxp1_1=(px*r21);
rxp1_2=(r11*x6419);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6420=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6420);
rxp1_1=(px*r21);
rxp1_2=(r11*x6420);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6421=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6421);
rxp1_1=(px*r21);
rxp1_2=(r11*x6421);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6424=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x6424.valid){
continue;
}
IkReal x6422=x6424.value;
IkReal x6423=(sj0*x6422);
cj4array[0]=(((cj1*cj2*x6423))+(((-1.0)*sj1*sj2*x6423)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6425=IKsin(j4);
IkReal x6426=IKcos(j4);
IkReal x6427=(r21*sj5);
IkReal x6428=((1.0)*cj5*r20);
evalcond[0]=(r02*x6425);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x6426)));
evalcond[2]=(((x6425*x6427))+(((-1.0)*x6425*x6428)));
evalcond[3]=(((r11*sj5*x6425))+(((-1.0)*cj5*r10*x6425)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6426*x6428))+((x6426*x6427)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6431=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x6431.valid){
continue;
}
IkReal x6429=x6431.value;
IkReal x6430=((1.0)*x6429);
cj4array[0]=((((-1.0)*cj1*sj2*x6430))+(((-1.0)*cj2*sj1*x6430)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6432=IKsin(j4);
IkReal x6433=IKcos(j4);
IkReal x6434=((1.0)*sj0);
IkReal x6435=((1.0)*cj5);
IkReal x6436=(sj5*x6432);
evalcond[0]=(r02*x6432);
evalcond[1]=((((-1.0)*r02*x6433))+(((-1.0)*x6434)));
evalcond[2]=((((-1.0)*r20*x6432*x6435))+((r21*x6436)));
evalcond[3]=((((-1.0)*r10*x6432*x6435))+((r11*x6436)));
evalcond[4]=((((-1.0)*r10*x6433*x6435))+(((-1.0)*cj1*cj2*x6434))+((sj0*sj1*sj2))+((r11*sj5*x6433)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6437=IKPowWithIntegerCheck(r02,-1);
if(!x6437.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x6437.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6438=IKsin(j4);
IkReal x6439=IKcos(j4);
IkReal x6440=(r21*sj5);
IkReal x6441=((1.0)*cj5);
IkReal x6442=(r11*sj5);
evalcond[0]=(r02*x6438);
evalcond[1]=(((x6438*x6440))+(((-1.0)*r20*x6438*x6441)));
evalcond[2]=(((x6438*x6442))+(((-1.0)*r10*x6438*x6441)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r20*x6439*x6441))+((x6439*x6440)));
evalcond[4]=((((-1.0)*cj1*cj2*sj0))+((sj0*sj1*sj2))+((x6439*x6442))+(((-1.0)*r10*x6439*x6441)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6443=((1.0)*sj0);
IkReal x6444=((1.0)*cj0);
CheckValue<IkReal> x6445 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x6444))+(((-1.0)*r12*x6443)))),IkReal(((((-1.0)*r11*sj5*x6443))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x6444)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6445.valid){
continue;
}
CheckValue<IkReal> x6446=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x6446.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6445.value)+(((1.5707963267949)*(x6446.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6447=IKsin(j4);
IkReal x6448=IKcos(j4);
IkReal x6449=(cj5*r00);
IkReal x6450=(cj5*r10);
IkReal x6451=(r21*sj5);
IkReal x6452=(sj1*sj2);
IkReal x6453=(cj5*r20);
IkReal x6454=((1.0)*x6448);
IkReal x6455=((1.0)*cj1*cj2);
IkReal x6456=((1.0)*x6447);
IkReal x6457=(sj5*x6447);
IkReal x6458=(sj5*x6448);
evalcond[0]=((((-1.0)*x6453*x6456))+((x6447*x6451))+(((-1.0)*r22*x6454)));
evalcond[1]=(cj0+((r11*x6457))+(((-1.0)*r12*x6454))+(((-1.0)*x6450*x6456)));
evalcond[2]=((((-1.0)*sj0))+((r01*x6457))+(((-1.0)*r02*x6454))+(((-1.0)*x6449*x6456)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6453*x6454))+((r22*x6447))+((x6448*x6451)));
evalcond[4]=(((r01*x6458))+(((-1.0)*x6449*x6454))+((cj0*x6452))+(((-1.0)*cj0*x6455))+((r02*x6447)));
evalcond[5]=(((r12*x6447))+(((-1.0)*sj0*x6455))+((r11*x6458))+((sj0*x6452))+(((-1.0)*x6450*x6454)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6459=((1.0)*cj5);
CheckValue<IkReal> x6460 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x6459)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6460.valid){
continue;
}
CheckValue<IkReal> x6461=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x6459)))),-1);
if(!x6461.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6460.value)+(((1.5707963267949)*(x6461.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6462=IKsin(j4);
IkReal x6463=IKcos(j4);
IkReal x6464=(cj5*r00);
IkReal x6465=(cj5*r10);
IkReal x6466=(r21*sj5);
IkReal x6467=(sj1*sj2);
IkReal x6468=(cj5*r20);
IkReal x6469=((1.0)*x6463);
IkReal x6470=((1.0)*cj1*cj2);
IkReal x6471=((1.0)*x6462);
IkReal x6472=(sj5*x6462);
IkReal x6473=(sj5*x6463);
evalcond[0]=((((-1.0)*r22*x6469))+(((-1.0)*x6468*x6471))+((x6462*x6466)));
evalcond[1]=(cj0+((r11*x6472))+(((-1.0)*r12*x6469))+(((-1.0)*x6465*x6471)));
evalcond[2]=((((-1.0)*sj0))+((r01*x6472))+(((-1.0)*r02*x6469))+(((-1.0)*x6464*x6471)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x6468*x6469))+((x6463*x6466))+((cj1*sj2))+((r22*x6462)));
evalcond[4]=((((-1.0)*cj0*x6470))+(((-1.0)*x6464*x6469))+((cj0*x6467))+((r01*x6473))+((r02*x6462)));
evalcond[5]=((((-1.0)*x6465*x6469))+((sj0*x6467))+(((-1.0)*sj0*x6470))+((r11*x6473))+((r12*x6462)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6474=((1.0)*cj5);
CheckValue<IkReal> x6475=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x6474)))),-1);
if(!x6475.valid){
continue;
}
CheckValue<IkReal> x6476 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6474)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6476.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6475.value)))+(x6476.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6477=IKsin(j4);
IkReal x6478=IKcos(j4);
IkReal x6479=(cj5*r00);
IkReal x6480=(cj5*r10);
IkReal x6481=(r21*sj5);
IkReal x6482=(sj1*sj2);
IkReal x6483=(cj5*r20);
IkReal x6484=((1.0)*x6478);
IkReal x6485=((1.0)*cj1*cj2);
IkReal x6486=((1.0)*x6477);
IkReal x6487=(sj5*x6477);
IkReal x6488=(sj5*x6478);
evalcond[0]=((((-1.0)*r22*x6484))+((x6477*x6481))+(((-1.0)*x6483*x6486)));
evalcond[1]=(((r11*x6487))+cj0+(((-1.0)*r12*x6484))+(((-1.0)*x6480*x6486)));
evalcond[2]=((((-1.0)*sj0))+((r01*x6487))+(((-1.0)*r02*x6484))+(((-1.0)*x6479*x6486)));
evalcond[3]=(((r22*x6477))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6483*x6484))+((x6478*x6481)));
evalcond[4]=(((r01*x6488))+((cj0*x6482))+((r02*x6477))+(((-1.0)*cj0*x6485))+(((-1.0)*x6479*x6484)));
evalcond[5]=(((r11*x6488))+(((-1.0)*sj0*x6485))+(((-1.0)*x6480*x6484))+((r12*x6477))+((sj0*x6482)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x6489=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)));
j0eval[0]=x6489;
j0eval[1]=IKsign(x6489);
j0eval[2]=((IKabs((((r00*sj5))+((cj5*r01)))))+(IKabs((((cj5*r11))+((r10*sj5))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x6490=cj5*cj5;
IkReal x6491=r21*r21;
IkReal x6492=(cj2*sj1);
IkReal x6493=(cj1*sj2);
IkReal x6494=(r21*sj5);
IkReal x6495=((1.0)*cj5*r20);
IkReal x6496=(((x6490*(r20*r20)))+(r22*r22)+x6491+(((-2.0)*cj5*r20*x6494))+(((-1.0)*x6490*x6491)));
j4eval[0]=x6496;
j4eval[1]=IKsign(x6496);
j4eval[2]=((IKabs((((r22*x6493))+((r22*x6492)))))+(IKabs((((x6492*x6494))+((x6493*x6494))+(((-1.0)*x6492*x6495))+(((-1.0)*x6493*x6495))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j0eval[0]=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((1.19192641276835)*py))+(((-0.195493438569105)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.19192641276835)*px))+(((0.195493438569105)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.19192641276835)*py))+(((-0.195493438569105)*px))))+IKsqr(((((1.19192641276835)*px))+(((0.195493438569105)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((1.19192641276835)*py))+(((-0.195493438569105)*px))), ((((1.19192641276835)*px))+(((0.195493438569105)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6497=IKcos(j0);
IkReal x6498=IKsin(j0);
evalcond[0]=((((0.817)*x6497))+(((-1.0)*px))+(((-0.134)*x6498)));
evalcond[1]=((((0.134)*x6497))+(((0.817)*x6498))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6499=((1.0)*cj5);
IkReal x6500=((((-1.0)*r01*x6499))+(((-1.0)*r00*sj5)));
j4eval[0]=x6500;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6499))))));
j4eval[2]=IKsign(x6500);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6501=((1.0)*cj5);
IkReal x6502=((((-1.0)*r11*x6501))+(((-1.0)*r10*sj5)));
j4eval[0]=x6502;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x6501))))));
j4eval[2]=IKsign(x6502);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6503=cj5*cj5;
IkReal x6504=((1.0)*sj5);
IkReal x6505=(cj5*r20);
IkReal x6506=(r11*r21);
IkReal x6507=((((-1.0)*r11*x6504*x6505))+(((-1.0)*cj5*r10*r21*x6504))+((r12*r22))+x6506+(((-1.0)*x6503*x6506))+((r10*r20*x6503)));
j4eval[0]=x6507;
j4eval[1]=IKsign(x6507);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x6504))+((cj0*x6505)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6508=cj5*cj5;
IkReal x6509=((1.0)*sj5);
IkReal x6510=(cj5*r20);
IkReal x6511=(r11*r21);
CheckValue<IkReal> x6512 = IKatan2WithCheck(IkReal((((cj0*x6510))+(((-1.0)*cj0*r21*x6509)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6512.valid){
continue;
}
CheckValue<IkReal> x6513=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10*r21*x6509))+((r12*r22))+x6511+(((-1.0)*r11*x6509*x6510))+(((-1.0)*x6508*x6511))+((r10*r20*x6508)))),-1);
if(!x6513.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6512.value)+(((1.5707963267949)*(x6513.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6514=IKsin(j4);
IkReal x6515=IKcos(j4);
IkReal x6516=((1.0)*sj0);
IkReal x6517=(cj5*r00);
IkReal x6518=(r11*sj5);
IkReal x6519=(cj5*r10);
IkReal x6520=(r21*sj5);
IkReal x6521=(cj5*r20);
IkReal x6522=(r01*sj5);
IkReal x6523=((1.0)*x6515);
IkReal x6524=((1.0)*x6514);
evalcond[0]=((((-1.0)*x6521*x6524))+(((-1.0)*r22*x6523))+((x6514*x6520)));
evalcond[1]=((((-1.0)*r22*x6524))+((x6515*x6521))+(((-1.0)*x6520*x6523)));
evalcond[2]=(((x6514*x6518))+cj0+(((-1.0)*x6519*x6524))+(((-1.0)*r12*x6523)));
evalcond[3]=((((-1.0)*r02*x6523))+(((-1.0)*x6516))+(((-1.0)*x6517*x6524))+((x6514*x6522)));
evalcond[4]=((((-1.0)*x6522*x6523))+((x6515*x6517))+(((-1.0)*r02*x6524))+(((-1.0)*cj0)));
evalcond[5]=(((x6515*x6519))+(((-1.0)*x6518*x6523))+(((-1.0)*x6516))+(((-1.0)*r12*x6524)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6525=((1.0)*cj5);
CheckValue<IkReal> x6526 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x6525)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6526.valid){
continue;
}
CheckValue<IkReal> x6527=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x6525)))),-1);
if(!x6527.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6526.value)+(((1.5707963267949)*(x6527.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6528=IKsin(j4);
IkReal x6529=IKcos(j4);
IkReal x6530=((1.0)*sj0);
IkReal x6531=(cj5*r00);
IkReal x6532=(r11*sj5);
IkReal x6533=(cj5*r10);
IkReal x6534=(r21*sj5);
IkReal x6535=(cj5*r20);
IkReal x6536=(r01*sj5);
IkReal x6537=((1.0)*x6529);
IkReal x6538=((1.0)*x6528);
evalcond[0]=((((-1.0)*x6535*x6538))+((x6528*x6534))+(((-1.0)*r22*x6537)));
evalcond[1]=((((-1.0)*x6534*x6537))+(((-1.0)*r22*x6538))+((x6529*x6535)));
evalcond[2]=(((x6528*x6532))+cj0+(((-1.0)*r12*x6537))+(((-1.0)*x6533*x6538)));
evalcond[3]=((((-1.0)*x6530))+((x6528*x6536))+(((-1.0)*r02*x6537))+(((-1.0)*x6531*x6538)));
evalcond[4]=((((-1.0)*x6536*x6537))+(((-1.0)*r02*x6538))+((x6529*x6531))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x6530))+(((-1.0)*r12*x6538))+(((-1.0)*x6532*x6537))+((x6529*x6533)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6539=((1.0)*cj5);
CheckValue<IkReal> x6540 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6539)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6540.valid){
continue;
}
CheckValue<IkReal> x6541=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x6539))+(((-1.0)*r00*sj5)))),-1);
if(!x6541.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6540.value)+(((1.5707963267949)*(x6541.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6542=IKsin(j4);
IkReal x6543=IKcos(j4);
IkReal x6544=((1.0)*sj0);
IkReal x6545=(cj5*r00);
IkReal x6546=(r11*sj5);
IkReal x6547=(cj5*r10);
IkReal x6548=(r21*sj5);
IkReal x6549=(cj5*r20);
IkReal x6550=(r01*sj5);
IkReal x6551=((1.0)*x6543);
IkReal x6552=((1.0)*x6542);
evalcond[0]=((((-1.0)*r22*x6551))+((x6542*x6548))+(((-1.0)*x6549*x6552)));
evalcond[1]=(((x6543*x6549))+(((-1.0)*r22*x6552))+(((-1.0)*x6548*x6551)));
evalcond[2]=(cj0+(((-1.0)*r12*x6551))+((x6542*x6546))+(((-1.0)*x6547*x6552)));
evalcond[3]=((((-1.0)*x6545*x6552))+(((-1.0)*x6544))+((x6542*x6550))+(((-1.0)*r02*x6551)));
evalcond[4]=(((x6543*x6545))+(((-1.0)*x6550*x6551))+(((-1.0)*r02*x6552))+(((-1.0)*cj0)));
evalcond[5]=(((x6543*x6547))+(((-1.0)*x6544))+(((-1.0)*r12*x6552))+(((-1.0)*x6546*x6551)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((1.73273825150958)*py))+(((-7.03596744552376)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.73273825150958)*px))+(((7.03596744552376)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.73273825150958)*py))+(((-7.03596744552376)*px))))+IKsqr(((((1.73273825150958)*px))+(((7.03596744552376)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((1.73273825150958)*py))+(((-7.03596744552376)*px))), ((((1.73273825150958)*px))+(((7.03596744552376)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6553=IKcos(j0);
IkReal x6554=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((0.033)*x6553))+(((-0.134)*x6554)));
evalcond[1]=((((0.134)*x6553))+(((-1.0)*py))+(((0.033)*x6554)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6555=((1.0)*cj5);
IkReal x6556=((((-1.0)*r00*sj5))+(((-1.0)*r01*x6555)));
j4eval[0]=x6556;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6555)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x6556);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6557=cj5*cj5;
IkReal x6558=((1.0)*r21);
IkReal x6559=(cj5*sj5);
IkReal x6560=((1.0)*r20);
IkReal x6561=(((r00*r20*x6557))+(((-1.0)*r01*x6557*x6558))+((r01*r21))+(((-1.0)*r00*x6558*x6559))+((r02*r22))+(((-1.0)*r01*x6559*x6560)));
j4eval[0]=x6561;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x6560))))));
j4eval[2]=IKsign(x6561);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6562=cj5*cj5;
IkReal x6563=(r21*sj5);
IkReal x6564=(r11*r21);
IkReal x6565=((1.0)*cj5*r20);
IkReal x6566=((((-1.0)*r11*sj5*x6565))+((r10*r20*x6562))+((r12*r22))+(((-1.0)*x6562*x6564))+x6564+(((-1.0)*cj5*r10*x6563)));
j4eval[0]=x6566;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((sj0*x6563))+(((-1.0)*sj0*x6565))))));
j4eval[2]=IKsign(x6566);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6567=cj5*cj5;
IkReal x6568=(r21*sj5);
IkReal x6569=(r11*r21);
IkReal x6570=((1.0)*cj5*r20);
CheckValue<IkReal> x6571 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((sj0*x6568))+(((-1.0)*sj0*x6570)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6571.valid){
continue;
}
CheckValue<IkReal> x6572=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*sj5*x6570))+((r10*r20*x6567))+(((-1.0)*x6567*x6569))+((r12*r22))+x6569+(((-1.0)*cj5*r10*x6568)))),-1);
if(!x6572.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6571.value)+(((1.5707963267949)*(x6572.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6573=IKsin(j4);
IkReal x6574=IKcos(j4);
IkReal x6575=(r11*sj5);
IkReal x6576=(cj5*r00);
IkReal x6577=(cj5*r10);
IkReal x6578=(r21*sj5);
IkReal x6579=(cj5*r20);
IkReal x6580=(r01*sj5);
IkReal x6581=((1.0)*x6574);
IkReal x6582=((1.0)*x6573);
evalcond[0]=(((x6573*x6578))+(((-1.0)*r22*x6581))+(((-1.0)*x6579*x6582)));
evalcond[1]=((((-1.0)*x6578*x6581))+(((-1.0)*r22*x6582))+((x6574*x6579)));
evalcond[2]=(cj0+((x6573*x6575))+(((-1.0)*r12*x6581))+(((-1.0)*x6577*x6582)));
evalcond[3]=(cj0+(((-1.0)*r02*x6582))+((x6574*x6576))+(((-1.0)*x6580*x6581)));
evalcond[4]=((((-1.0)*x6575*x6581))+sj0+(((-1.0)*r12*x6582))+((x6574*x6577)));
evalcond[5]=((((-1.0)*x6576*x6582))+(((-1.0)*sj0))+(((-1.0)*r02*x6581))+((x6573*x6580)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6583=cj5*cj5;
IkReal x6584=((1.0)*r21);
IkReal x6585=(cj5*sj5);
IkReal x6586=((1.0)*r20);
CheckValue<IkReal> x6587=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x6583*x6584))+((r01*r21))+((r00*r20*x6583))+(((-1.0)*r00*x6584*x6585))+((r02*r22))+(((-1.0)*r01*x6585*x6586)))),-1);
if(!x6587.valid){
continue;
}
CheckValue<IkReal> x6588 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x6586)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6588.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6587.value)))+(x6588.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6589=IKsin(j4);
IkReal x6590=IKcos(j4);
IkReal x6591=(r11*sj5);
IkReal x6592=(cj5*r00);
IkReal x6593=(cj5*r10);
IkReal x6594=(r21*sj5);
IkReal x6595=(cj5*r20);
IkReal x6596=(r01*sj5);
IkReal x6597=((1.0)*x6590);
IkReal x6598=((1.0)*x6589);
evalcond[0]=(((x6589*x6594))+(((-1.0)*r22*x6597))+(((-1.0)*x6595*x6598)));
evalcond[1]=((((-1.0)*x6594*x6597))+((x6590*x6595))+(((-1.0)*r22*x6598)));
evalcond[2]=(cj0+(((-1.0)*r12*x6597))+(((-1.0)*x6593*x6598))+((x6589*x6591)));
evalcond[3]=(cj0+(((-1.0)*r02*x6598))+(((-1.0)*x6596*x6597))+((x6590*x6592)));
evalcond[4]=(sj0+(((-1.0)*r12*x6598))+(((-1.0)*x6591*x6597))+((x6590*x6593)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x6597))+(((-1.0)*x6592*x6598))+((x6589*x6596)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6599=((1.0)*cj5);
CheckValue<IkReal> x6600=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x6599))+(((-1.0)*r00*sj5)))),-1);
if(!x6600.valid){
continue;
}
CheckValue<IkReal> x6601 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x6599))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6601.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6600.value)))+(x6601.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6602=IKsin(j4);
IkReal x6603=IKcos(j4);
IkReal x6604=(r11*sj5);
IkReal x6605=(cj5*r00);
IkReal x6606=(cj5*r10);
IkReal x6607=(r21*sj5);
IkReal x6608=(cj5*r20);
IkReal x6609=(r01*sj5);
IkReal x6610=((1.0)*x6603);
IkReal x6611=((1.0)*x6602);
evalcond[0]=((((-1.0)*x6608*x6611))+(((-1.0)*r22*x6610))+((x6602*x6607)));
evalcond[1]=((((-1.0)*x6607*x6610))+(((-1.0)*r22*x6611))+((x6603*x6608)));
evalcond[2]=((((-1.0)*r12*x6610))+(((-1.0)*x6606*x6611))+cj0+((x6602*x6604)));
evalcond[3]=(cj0+(((-1.0)*x6609*x6610))+(((-1.0)*r02*x6611))+((x6603*x6605)));
evalcond[4]=((((-1.0)*r12*x6611))+sj0+(((-1.0)*x6604*x6610))+((x6603*x6606)));
evalcond[5]=((((-1.0)*x6605*x6611))+(((-1.0)*sj0))+(((-1.0)*r02*x6610))+((x6602*x6609)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.780795278522751)*px))+(((-2.28411671544462)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.780795278522751)*py))+(((-2.28411671544462)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.780795278522751)*px))+(((-2.28411671544462)*py))))+IKsqr(((((0.780795278522751)*py))+(((-2.28411671544462)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.780795278522751)*px))+(((-2.28411671544462)*py))), ((((0.780795278522751)*py))+(((-2.28411671544462)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6612=IKcos(j0);
IkReal x6613=IKsin(j0);
evalcond[0]=((((-0.134)*x6613))+(((-1.0)*px))+(((-0.39199986)*x6612)));
evalcond[1]=((((-1.0)*py))+(((0.134)*x6612))+(((-0.39199986)*x6613)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x6614=((1.0)*cj5);
IkReal x6615=((((-1.0)*r00*sj5))+(((-1.0)*r01*x6614)));
j4eval[0]=x6615;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6614))))));
j4eval[2]=IKsign(x6615);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x6616=cj5*cj5;
IkReal x6617=((1.0)*r21);
IkReal x6618=(cj5*sj5);
IkReal x6619=((1.0)*r20);
IkReal x6620=(((r00*r20*x6616))+(((-1.0)*r01*x6618*x6619))+((r01*r21))+(((-1.0)*r01*x6616*x6617))+(((-1.0)*r00*x6617*x6618))+((r02*r22)));
j4eval[0]=x6620;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x6619)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x6620);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x6621=cj5*cj5;
IkReal x6622=(r21*sj5);
IkReal x6623=(r11*r21);
IkReal x6624=((1.0)*cj5*r20);
IkReal x6625=(((r10*r20*x6621))+(((-1.0)*x6621*x6623))+(((-1.0)*cj5*r10*x6622))+x6623+((r12*r22))+(((-1.0)*r11*sj5*x6624)));
j4eval[0]=x6625;
j4eval[1]=((IKabs(((((-1.0)*sj0*x6624))+((sj0*x6622)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x6625);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6626=cj5*cj5;
IkReal x6627=(r21*sj5);
IkReal x6628=(r11*r21);
IkReal x6629=((1.0)*cj5*r20);
CheckValue<IkReal> x6630 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*sj0*x6629))+((sj0*x6627)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6630.valid){
continue;
}
CheckValue<IkReal> x6631=IKPowWithIntegerCheck(IKsign((((r10*r20*x6626))+(((-1.0)*cj5*r10*x6627))+x6628+((r12*r22))+(((-1.0)*x6626*x6628))+(((-1.0)*r11*sj5*x6629)))),-1);
if(!x6631.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6630.value)+(((1.5707963267949)*(x6631.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6632=IKsin(j4);
IkReal x6633=IKcos(j4);
IkReal x6634=(r11*sj5);
IkReal x6635=(cj5*r00);
IkReal x6636=(cj5*r10);
IkReal x6637=(r21*sj5);
IkReal x6638=(cj5*r20);
IkReal x6639=(r01*sj5);
IkReal x6640=((1.0)*x6633);
IkReal x6641=((1.0)*x6632);
evalcond[0]=((((-1.0)*x6638*x6641))+(((-1.0)*r22*x6640))+((x6632*x6637)));
evalcond[1]=((((-1.0)*r22*x6641))+(((-1.0)*x6637*x6640))+((x6633*x6638)));
evalcond[2]=(cj0+(((-1.0)*x6636*x6641))+((x6632*x6634))+(((-1.0)*r12*x6640)));
evalcond[3]=((((-1.0)*x6639*x6640))+cj0+((x6633*x6635))+(((-1.0)*r02*x6641)));
evalcond[4]=(sj0+(((-1.0)*x6634*x6640))+((x6633*x6636))+(((-1.0)*r12*x6641)));
evalcond[5]=((((-1.0)*sj0))+((x6632*x6639))+(((-1.0)*r02*x6640))+(((-1.0)*x6635*x6641)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6642=cj5*cj5;
IkReal x6643=((1.0)*r21);
IkReal x6644=(cj5*sj5);
IkReal x6645=((1.0)*r20);
CheckValue<IkReal> x6646 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x6645)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6646.valid){
continue;
}
CheckValue<IkReal> x6647=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x6642*x6643))+((r01*r21))+(((-1.0)*r00*x6643*x6644))+(((-1.0)*r01*x6644*x6645))+((r02*r22))+((r00*r20*x6642)))),-1);
if(!x6647.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6646.value)+(((1.5707963267949)*(x6647.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6648=IKsin(j4);
IkReal x6649=IKcos(j4);
IkReal x6650=(r11*sj5);
IkReal x6651=(cj5*r00);
IkReal x6652=(cj5*r10);
IkReal x6653=(r21*sj5);
IkReal x6654=(cj5*r20);
IkReal x6655=(r01*sj5);
IkReal x6656=((1.0)*x6649);
IkReal x6657=((1.0)*x6648);
evalcond[0]=((((-1.0)*r22*x6656))+(((-1.0)*x6654*x6657))+((x6648*x6653)));
evalcond[1]=((((-1.0)*r22*x6657))+(((-1.0)*x6653*x6656))+((x6649*x6654)));
evalcond[2]=((((-1.0)*x6652*x6657))+cj0+(((-1.0)*r12*x6656))+((x6648*x6650)));
evalcond[3]=(cj0+(((-1.0)*x6655*x6656))+(((-1.0)*r02*x6657))+((x6649*x6651)));
evalcond[4]=(sj0+(((-1.0)*r12*x6657))+(((-1.0)*x6650*x6656))+((x6649*x6652)));
evalcond[5]=((((-1.0)*x6651*x6657))+(((-1.0)*sj0))+(((-1.0)*r02*x6656))+((x6648*x6655)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6658=((1.0)*cj5);
CheckValue<IkReal> x6659=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x6658)))),-1);
if(!x6659.valid){
continue;
}
CheckValue<IkReal> x6660 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6658)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6660.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6659.value)))+(x6660.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6661=IKsin(j4);
IkReal x6662=IKcos(j4);
IkReal x6663=(r11*sj5);
IkReal x6664=(cj5*r00);
IkReal x6665=(cj5*r10);
IkReal x6666=(r21*sj5);
IkReal x6667=(cj5*r20);
IkReal x6668=(r01*sj5);
IkReal x6669=((1.0)*x6662);
IkReal x6670=((1.0)*x6661);
evalcond[0]=((((-1.0)*x6667*x6670))+(((-1.0)*r22*x6669))+((x6661*x6666)));
evalcond[1]=((((-1.0)*r22*x6670))+((x6662*x6667))+(((-1.0)*x6666*x6669)));
evalcond[2]=(cj0+(((-1.0)*r12*x6669))+(((-1.0)*x6665*x6670))+((x6661*x6663)));
evalcond[3]=((((-1.0)*r02*x6670))+cj0+(((-1.0)*x6668*x6669))+((x6662*x6664)));
evalcond[4]=(sj0+(((-1.0)*r12*x6670))+(((-1.0)*x6663*x6669))+((x6662*x6665)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x6669))+(((-1.0)*x6664*x6670))+((x6661*x6668)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.28411542533182)*py))+(((-0.780794279804245)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.28411542533182)*px))+(((0.780794279804245)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.28411542533182)*py))+(((-0.780794279804245)*px))))+IKsqr(((((2.28411542533182)*px))+(((0.780794279804245)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.28411542533182)*py))+(((-0.780794279804245)*px))), ((((2.28411542533182)*px))+(((0.780794279804245)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6671=IKsin(j0);
IkReal x6672=IKcos(j0);
evalcond[0]=((((-0.134)*x6671))+(((0.39200014)*x6672))+(((-1.0)*px)));
evalcond[1]=((((0.134)*x6672))+(((0.39200014)*x6671))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x6673=((1.0)*cj5);
IkReal x6674=((((-1.0)*r00*sj5))+(((-1.0)*r01*x6673)));
j4eval[0]=x6674;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6673))))));
j4eval[2]=IKsign(x6674);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x6675=((1.0)*cj5);
IkReal x6676=((((-1.0)*r10*sj5))+(((-1.0)*r11*x6675)));
j4eval[0]=x6676;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x6675))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x6676);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x6677=cj5*cj5;
IkReal x6678=((1.0)*sj5);
IkReal x6679=(cj5*r20);
IkReal x6680=(r11*r21);
IkReal x6681=(x6680+(((-1.0)*cj5*r10*r21*x6678))+((r12*r22))+((r10*r20*x6677))+(((-1.0)*r11*x6678*x6679))+(((-1.0)*x6677*x6680)));
j4eval[0]=x6681;
j4eval[1]=IKsign(x6681);
j4eval[2]=((IKabs((((cj0*x6679))+(((-1.0)*cj0*r21*x6678)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6682=cj5*cj5;
IkReal x6683=((1.0)*sj5);
IkReal x6684=(cj5*r20);
IkReal x6685=(r11*r21);
CheckValue<IkReal> x6686=IKPowWithIntegerCheck(IKsign((x6685+((r12*r22))+((r10*r20*x6682))+(((-1.0)*r11*x6683*x6684))+(((-1.0)*cj5*r10*r21*x6683))+(((-1.0)*x6682*x6685)))),-1);
if(!x6686.valid){
continue;
}
CheckValue<IkReal> x6687 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x6683))+((cj0*x6684)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6687.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6686.value)))+(x6687.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6688=IKsin(j4);
IkReal x6689=IKcos(j4);
IkReal x6690=((1.0)*sj0);
IkReal x6691=(cj5*r00);
IkReal x6692=(r11*sj5);
IkReal x6693=(cj5*r10);
IkReal x6694=(r21*sj5);
IkReal x6695=(cj5*r20);
IkReal x6696=(r01*sj5);
IkReal x6697=((1.0)*x6689);
IkReal x6698=((1.0)*x6688);
evalcond[0]=(((x6688*x6694))+(((-1.0)*r22*x6697))+(((-1.0)*x6695*x6698)));
evalcond[1]=((((-1.0)*x6694*x6697))+((x6689*x6695))+(((-1.0)*r22*x6698)));
evalcond[2]=(cj0+(((-1.0)*x6693*x6698))+((x6688*x6692))+(((-1.0)*r12*x6697)));
evalcond[3]=((((-1.0)*r02*x6697))+(((-1.0)*x6690))+((x6688*x6696))+(((-1.0)*x6691*x6698)));
evalcond[4]=((((-1.0)*x6696*x6697))+(((-1.0)*r02*x6698))+((x6689*x6691))+(((-1.0)*cj0)));
evalcond[5]=(((x6689*x6693))+(((-1.0)*x6690))+(((-1.0)*r12*x6698))+(((-1.0)*x6692*x6697)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6699=((1.0)*cj5);
CheckValue<IkReal> x6700 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x6699))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6700.valid){
continue;
}
CheckValue<IkReal> x6701=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x6699)))),-1);
if(!x6701.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6700.value)+(((1.5707963267949)*(x6701.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6702=IKsin(j4);
IkReal x6703=IKcos(j4);
IkReal x6704=((1.0)*sj0);
IkReal x6705=(cj5*r00);
IkReal x6706=(r11*sj5);
IkReal x6707=(cj5*r10);
IkReal x6708=(r21*sj5);
IkReal x6709=(cj5*r20);
IkReal x6710=(r01*sj5);
IkReal x6711=((1.0)*x6703);
IkReal x6712=((1.0)*x6702);
evalcond[0]=(((x6702*x6708))+(((-1.0)*x6709*x6712))+(((-1.0)*r22*x6711)));
evalcond[1]=(((x6703*x6709))+(((-1.0)*x6708*x6711))+(((-1.0)*r22*x6712)));
evalcond[2]=(cj0+(((-1.0)*x6707*x6712))+((x6702*x6706))+(((-1.0)*r12*x6711)));
evalcond[3]=(((x6702*x6710))+(((-1.0)*x6704))+(((-1.0)*x6705*x6712))+(((-1.0)*r02*x6711)));
evalcond[4]=((((-1.0)*x6710*x6711))+((x6703*x6705))+(((-1.0)*r02*x6712))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x6704))+((x6703*x6707))+(((-1.0)*r12*x6712))+(((-1.0)*x6706*x6711)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6713=((1.0)*cj5);
CheckValue<IkReal> x6714 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x6713))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6714.valid){
continue;
}
CheckValue<IkReal> x6715=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x6713)))),-1);
if(!x6715.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6714.value)+(((1.5707963267949)*(x6715.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6716=IKsin(j4);
IkReal x6717=IKcos(j4);
IkReal x6718=((1.0)*sj0);
IkReal x6719=(cj5*r00);
IkReal x6720=(r11*sj5);
IkReal x6721=(cj5*r10);
IkReal x6722=(r21*sj5);
IkReal x6723=(cj5*r20);
IkReal x6724=(r01*sj5);
IkReal x6725=((1.0)*x6717);
IkReal x6726=((1.0)*x6716);
evalcond[0]=((((-1.0)*r22*x6725))+(((-1.0)*x6723*x6726))+((x6716*x6722)));
evalcond[1]=((((-1.0)*r22*x6726))+((x6717*x6723))+(((-1.0)*x6722*x6725)));
evalcond[2]=(cj0+((x6716*x6720))+(((-1.0)*r12*x6725))+(((-1.0)*x6721*x6726)));
evalcond[3]=((((-1.0)*x6718))+(((-1.0)*x6719*x6726))+((x6716*x6724))+(((-1.0)*r02*x6725)));
evalcond[4]=((((-1.0)*x6724*x6725))+((x6717*x6719))+(((-1.0)*r02*x6726))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x6718))+((x6717*x6721))+(((-1.0)*r12*x6726))+(((-1.0)*x6720*x6725)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.195493438569105)*px))+(((-1.19192641276835)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.195493438569105)*py))+(((-1.19192641276835)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.195493438569105)*px))+(((-1.19192641276835)*py))))+IKsqr(((((0.195493438569105)*py))+(((-1.19192641276835)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.195493438569105)*px))+(((-1.19192641276835)*py))), ((((0.195493438569105)*py))+(((-1.19192641276835)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6727=IKcos(j0);
IkReal x6728=IKsin(j0);
evalcond[0]=((((-0.817)*x6727))+(((-1.0)*px))+(((-0.134)*x6728)));
evalcond[1]=((((-0.817)*x6728))+(((-1.0)*py))+(((0.134)*x6727)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6729=((1.0)*cj5);
IkReal x6730=((((-1.0)*r00*sj5))+(((-1.0)*r01*x6729)));
j4eval[0]=x6730;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6729))))));
j4eval[2]=IKsign(x6730);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6731=cj5*cj5;
IkReal x6732=((1.0)*r21);
IkReal x6733=(cj5*sj5);
IkReal x6734=((1.0)*r20);
IkReal x6735=((((-1.0)*r00*x6732*x6733))+(((-1.0)*r01*x6733*x6734))+(((-1.0)*r01*x6731*x6732))+((r01*r21))+((r00*r20*x6731))+((r02*r22)));
j4eval[0]=x6735;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x6734)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x6735);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6736=cj5*cj5;
IkReal x6737=(r21*sj5);
IkReal x6738=(r11*r21);
IkReal x6739=((1.0)*cj5*r20);
IkReal x6740=(x6738+((r12*r22))+(((-1.0)*r11*sj5*x6739))+(((-1.0)*x6736*x6738))+(((-1.0)*cj5*r10*x6737))+((r10*r20*x6736)));
j4eval[0]=x6740;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((sj0*x6737))+(((-1.0)*sj0*x6739))))));
j4eval[2]=IKsign(x6740);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6741=cj5*cj5;
IkReal x6742=(r21*sj5);
IkReal x6743=(r11*r21);
IkReal x6744=((1.0)*cj5*r20);
CheckValue<IkReal> x6745 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((sj0*x6742))+(((-1.0)*sj0*x6744)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6745.valid){
continue;
}
CheckValue<IkReal> x6746=IKPowWithIntegerCheck(IKsign(((((-1.0)*x6741*x6743))+x6743+(((-1.0)*r11*sj5*x6744))+((r12*r22))+(((-1.0)*cj5*r10*x6742))+((r10*r20*x6741)))),-1);
if(!x6746.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6745.value)+(((1.5707963267949)*(x6746.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6747=IKsin(j4);
IkReal x6748=IKcos(j4);
IkReal x6749=(r11*sj5);
IkReal x6750=(cj5*r00);
IkReal x6751=(cj5*r10);
IkReal x6752=(r21*sj5);
IkReal x6753=(cj5*r20);
IkReal x6754=(r01*sj5);
IkReal x6755=((1.0)*x6748);
IkReal x6756=((1.0)*x6747);
evalcond[0]=((((-1.0)*r22*x6755))+((x6747*x6752))+(((-1.0)*x6753*x6756)));
evalcond[1]=((((-1.0)*r22*x6756))+((x6748*x6753))+(((-1.0)*x6752*x6755)));
evalcond[2]=(cj0+((x6747*x6749))+(((-1.0)*x6751*x6756))+(((-1.0)*r12*x6755)));
evalcond[3]=(cj0+(((-1.0)*r02*x6756))+((x6748*x6750))+(((-1.0)*x6754*x6755)));
evalcond[4]=(sj0+(((-1.0)*x6749*x6755))+(((-1.0)*r12*x6756))+((x6748*x6751)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x6750*x6756))+(((-1.0)*r02*x6755))+((x6747*x6754)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6757=cj5*cj5;
IkReal x6758=((1.0)*r21);
IkReal x6759=(cj5*sj5);
IkReal x6760=((1.0)*r20);
CheckValue<IkReal> x6761 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x6760)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6761.valid){
continue;
}
CheckValue<IkReal> x6762=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x6757*x6758))+((r01*r21))+(((-1.0)*r01*x6759*x6760))+(((-1.0)*r00*x6758*x6759))+((r00*r20*x6757))+((r02*r22)))),-1);
if(!x6762.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6761.value)+(((1.5707963267949)*(x6762.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6763=IKsin(j4);
IkReal x6764=IKcos(j4);
IkReal x6765=(r11*sj5);
IkReal x6766=(cj5*r00);
IkReal x6767=(cj5*r10);
IkReal x6768=(r21*sj5);
IkReal x6769=(cj5*r20);
IkReal x6770=(r01*sj5);
IkReal x6771=((1.0)*x6764);
IkReal x6772=((1.0)*x6763);
evalcond[0]=((((-1.0)*r22*x6771))+(((-1.0)*x6769*x6772))+((x6763*x6768)));
evalcond[1]=((((-1.0)*x6768*x6771))+(((-1.0)*r22*x6772))+((x6764*x6769)));
evalcond[2]=(cj0+(((-1.0)*r12*x6771))+((x6763*x6765))+(((-1.0)*x6767*x6772)));
evalcond[3]=(cj0+(((-1.0)*x6770*x6771))+(((-1.0)*r02*x6772))+((x6764*x6766)));
evalcond[4]=(sj0+(((-1.0)*r12*x6772))+(((-1.0)*x6765*x6771))+((x6764*x6767)));
evalcond[5]=(((x6763*x6770))+(((-1.0)*sj0))+(((-1.0)*r02*x6771))+(((-1.0)*x6766*x6772)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6773=((1.0)*cj5);
CheckValue<IkReal> x6774=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x6773))+(((-1.0)*r00*sj5)))),-1);
if(!x6774.valid){
continue;
}
CheckValue<IkReal> x6775 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6773)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6775.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6774.value)))+(x6775.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6776=IKsin(j4);
IkReal x6777=IKcos(j4);
IkReal x6778=(r11*sj5);
IkReal x6779=(cj5*r00);
IkReal x6780=(cj5*r10);
IkReal x6781=(r21*sj5);
IkReal x6782=(cj5*r20);
IkReal x6783=(r01*sj5);
IkReal x6784=((1.0)*x6777);
IkReal x6785=((1.0)*x6776);
evalcond[0]=((((-1.0)*x6782*x6785))+((x6776*x6781))+(((-1.0)*r22*x6784)));
evalcond[1]=(((x6777*x6782))+(((-1.0)*x6781*x6784))+(((-1.0)*r22*x6785)));
evalcond[2]=(cj0+((x6776*x6778))+(((-1.0)*r12*x6784))+(((-1.0)*x6780*x6785)));
evalcond[3]=(((x6777*x6779))+cj0+(((-1.0)*r02*x6785))+(((-1.0)*x6783*x6784)));
evalcond[4]=(sj0+((x6777*x6780))+(((-1.0)*x6778*x6784))+(((-1.0)*r12*x6785)));
evalcond[5]=(((x6776*x6783))+(((-1.0)*sj0))+(((-1.0)*x6779*x6785))+(((-1.0)*r02*x6784)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-1.73273825150958)*py))+(((-7.03596744552376)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((7.03596744552376)*py))+(((-1.73273825150958)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.73273825150958)*py))+(((-7.03596744552376)*px))))+IKsqr(((((7.03596744552376)*py))+(((-1.73273825150958)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.73273825150958)*py))+(((-7.03596744552376)*px))), ((((7.03596744552376)*py))+(((-1.73273825150958)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6786=IKcos(j0);
IkReal x6787=IKsin(j0);
evalcond[0]=((((-0.033)*x6786))+(((-0.134)*x6787))+(((-1.0)*px)));
evalcond[1]=((((-0.033)*x6787))+(((-1.0)*py))+(((0.134)*x6786)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6788=((1.0)*cj5);
IkReal x6789=((((-1.0)*r00*sj5))+(((-1.0)*r01*x6788)));
j4eval[0]=x6789;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6788)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x6789);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6790=((1.0)*cj5);
IkReal x6791=((((-1.0)*r11*x6790))+(((-1.0)*r10*sj5)));
j4eval[0]=x6791;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x6790))))));
j4eval[2]=IKsign(x6791);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6792=cj5*cj5;
IkReal x6793=((1.0)*sj5);
IkReal x6794=(cj5*r20);
IkReal x6795=(r11*r21);
IkReal x6796=(((r10*r20*x6792))+(((-1.0)*x6792*x6795))+x6795+((r12*r22))+(((-1.0)*cj5*r10*r21*x6793))+(((-1.0)*r11*x6793*x6794)));
j4eval[0]=x6796;
j4eval[1]=IKsign(x6796);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*x6793))+((cj0*x6794))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6797=cj5*cj5;
IkReal x6798=((1.0)*sj5);
IkReal x6799=(cj5*r20);
IkReal x6800=(r11*r21);
CheckValue<IkReal> x6801=IKPowWithIntegerCheck(IKsign((((r10*r20*x6797))+(((-1.0)*r11*x6798*x6799))+((r12*r22))+(((-1.0)*cj5*r10*r21*x6798))+x6800+(((-1.0)*x6797*x6800)))),-1);
if(!x6801.valid){
continue;
}
CheckValue<IkReal> x6802 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x6798))+((cj0*x6799)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6802.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6801.value)))+(x6802.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6803=IKsin(j4);
IkReal x6804=IKcos(j4);
IkReal x6805=((1.0)*sj0);
IkReal x6806=(cj5*r00);
IkReal x6807=(r11*sj5);
IkReal x6808=(cj5*r10);
IkReal x6809=(r21*sj5);
IkReal x6810=(cj5*r20);
IkReal x6811=(r01*sj5);
IkReal x6812=((1.0)*x6804);
IkReal x6813=((1.0)*x6803);
evalcond[0]=((((-1.0)*x6810*x6813))+((x6803*x6809))+(((-1.0)*r22*x6812)));
evalcond[1]=(((x6804*x6810))+(((-1.0)*x6809*x6812))+(((-1.0)*r22*x6813)));
evalcond[2]=(cj0+(((-1.0)*x6808*x6813))+((x6803*x6807))+(((-1.0)*r12*x6812)));
evalcond[3]=(((x6803*x6811))+(((-1.0)*x6806*x6813))+(((-1.0)*r02*x6812))+(((-1.0)*x6805)));
evalcond[4]=((((-1.0)*x6811*x6812))+((x6804*x6806))+(((-1.0)*r02*x6813))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x6807*x6812))+((x6804*x6808))+(((-1.0)*r12*x6813))+(((-1.0)*x6805)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6814=((1.0)*cj5);
CheckValue<IkReal> x6815=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x6814)))),-1);
if(!x6815.valid){
continue;
}
CheckValue<IkReal> x6816 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x6814)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6816.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6815.value)))+(x6816.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6817=IKsin(j4);
IkReal x6818=IKcos(j4);
IkReal x6819=((1.0)*sj0);
IkReal x6820=(cj5*r00);
IkReal x6821=(r11*sj5);
IkReal x6822=(cj5*r10);
IkReal x6823=(r21*sj5);
IkReal x6824=(cj5*r20);
IkReal x6825=(r01*sj5);
IkReal x6826=((1.0)*x6818);
IkReal x6827=((1.0)*x6817);
evalcond[0]=(((x6817*x6823))+(((-1.0)*x6824*x6827))+(((-1.0)*r22*x6826)));
evalcond[1]=((((-1.0)*x6823*x6826))+((x6818*x6824))+(((-1.0)*r22*x6827)));
evalcond[2]=(((x6817*x6821))+cj0+(((-1.0)*r12*x6826))+(((-1.0)*x6822*x6827)));
evalcond[3]=(((x6817*x6825))+(((-1.0)*r02*x6826))+(((-1.0)*x6819))+(((-1.0)*x6820*x6827)));
evalcond[4]=((((-1.0)*r02*x6827))+((x6818*x6820))+(((-1.0)*x6825*x6826))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x6827))+(((-1.0)*x6819))+((x6818*x6822))+(((-1.0)*x6821*x6826)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6828=((1.0)*cj5);
CheckValue<IkReal> x6829=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x6828)))),-1);
if(!x6829.valid){
continue;
}
CheckValue<IkReal> x6830 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6828)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6830.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6829.value)))+(x6830.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6831=IKsin(j4);
IkReal x6832=IKcos(j4);
IkReal x6833=((1.0)*sj0);
IkReal x6834=(cj5*r00);
IkReal x6835=(r11*sj5);
IkReal x6836=(cj5*r10);
IkReal x6837=(r21*sj5);
IkReal x6838=(cj5*r20);
IkReal x6839=(r01*sj5);
IkReal x6840=((1.0)*x6832);
IkReal x6841=((1.0)*x6831);
evalcond[0]=(((x6831*x6837))+(((-1.0)*r22*x6840))+(((-1.0)*x6838*x6841)));
evalcond[1]=((((-1.0)*r22*x6841))+((x6832*x6838))+(((-1.0)*x6837*x6840)));
evalcond[2]=(cj0+((x6831*x6835))+(((-1.0)*x6836*x6841))+(((-1.0)*r12*x6840)));
evalcond[3]=(((x6831*x6839))+(((-1.0)*x6834*x6841))+(((-1.0)*r02*x6840))+(((-1.0)*x6833)));
evalcond[4]=((((-1.0)*x6839*x6840))+((x6832*x6834))+(((-1.0)*r02*x6841))+(((-1.0)*cj0)));
evalcond[5]=(((x6832*x6836))+(((-1.0)*x6835*x6840))+(((-1.0)*r12*x6841))+(((-1.0)*x6833)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.780795278522751)*px))+(((2.28411671544462)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.780795278522751)*py))+(((2.28411671544462)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.780795278522751)*px))+(((2.28411671544462)*py))))+IKsqr(((((0.780795278522751)*py))+(((2.28411671544462)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.780795278522751)*px))+(((2.28411671544462)*py))), ((((0.780795278522751)*py))+(((2.28411671544462)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6842=IKsin(j0);
IkReal x6843=IKcos(j0);
evalcond[0]=((((0.39199986)*x6843))+(((-1.0)*px))+(((-0.134)*x6842)));
evalcond[1]=((((0.134)*x6843))+(((0.39199986)*x6842))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x6844=((1.0)*cj5);
IkReal x6845=((((-1.0)*r01*x6844))+(((-1.0)*r00*sj5)));
j4eval[0]=x6845;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6844))))));
j4eval[2]=IKsign(x6845);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x6846=((1.0)*cj5);
IkReal x6847=((((-1.0)*r10*sj5))+(((-1.0)*r11*x6846)));
j4eval[0]=x6847;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x6846))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x6847);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x6848=cj5*cj5;
IkReal x6849=((1.0)*sj5);
IkReal x6850=(cj5*r20);
IkReal x6851=(r11*r21);
IkReal x6852=((((-1.0)*cj5*r10*r21*x6849))+(((-1.0)*x6848*x6851))+((r12*r22))+(((-1.0)*r11*x6849*x6850))+x6851+((r10*r20*x6848)));
j4eval[0]=x6852;
j4eval[1]=IKsign(x6852);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x6849))+((cj0*x6850)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6853=cj5*cj5;
IkReal x6854=((1.0)*sj5);
IkReal x6855=(cj5*r20);
IkReal x6856=(r11*r21);
CheckValue<IkReal> x6857 = IKatan2WithCheck(IkReal((((cj0*x6855))+(((-1.0)*cj0*r21*x6854)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6857.valid){
continue;
}
CheckValue<IkReal> x6858=IKPowWithIntegerCheck(IKsign(((((-1.0)*x6853*x6856))+(((-1.0)*r11*x6854*x6855))+((r12*r22))+(((-1.0)*cj5*r10*r21*x6854))+x6856+((r10*r20*x6853)))),-1);
if(!x6858.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6857.value)+(((1.5707963267949)*(x6858.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6859=IKsin(j4);
IkReal x6860=IKcos(j4);
IkReal x6861=((1.0)*sj0);
IkReal x6862=(cj5*r00);
IkReal x6863=(r11*sj5);
IkReal x6864=(cj5*r10);
IkReal x6865=(r21*sj5);
IkReal x6866=(cj5*r20);
IkReal x6867=(r01*sj5);
IkReal x6868=((1.0)*x6860);
IkReal x6869=((1.0)*x6859);
evalcond[0]=((((-1.0)*r22*x6868))+((x6859*x6865))+(((-1.0)*x6866*x6869)));
evalcond[1]=((((-1.0)*x6865*x6868))+((x6860*x6866))+(((-1.0)*r22*x6869)));
evalcond[2]=(cj0+(((-1.0)*x6864*x6869))+((x6859*x6863))+(((-1.0)*r12*x6868)));
evalcond[3]=((((-1.0)*x6862*x6869))+(((-1.0)*x6861))+((x6859*x6867))+(((-1.0)*r02*x6868)));
evalcond[4]=(((x6860*x6862))+(((-1.0)*r02*x6869))+(((-1.0)*x6867*x6868))+(((-1.0)*cj0)));
evalcond[5]=(((x6860*x6864))+(((-1.0)*x6861))+(((-1.0)*x6863*x6868))+(((-1.0)*r12*x6869)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6870=((1.0)*cj5);
CheckValue<IkReal> x6871=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x6870)))),-1);
if(!x6871.valid){
continue;
}
CheckValue<IkReal> x6872 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x6870))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6872.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6871.value)))+(x6872.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6873=IKsin(j4);
IkReal x6874=IKcos(j4);
IkReal x6875=((1.0)*sj0);
IkReal x6876=(cj5*r00);
IkReal x6877=(r11*sj5);
IkReal x6878=(cj5*r10);
IkReal x6879=(r21*sj5);
IkReal x6880=(cj5*r20);
IkReal x6881=(r01*sj5);
IkReal x6882=((1.0)*x6874);
IkReal x6883=((1.0)*x6873);
evalcond[0]=(((x6873*x6879))+(((-1.0)*x6880*x6883))+(((-1.0)*r22*x6882)));
evalcond[1]=(((x6874*x6880))+(((-1.0)*x6879*x6882))+(((-1.0)*r22*x6883)));
evalcond[2]=(cj0+((x6873*x6877))+(((-1.0)*x6878*x6883))+(((-1.0)*r12*x6882)));
evalcond[3]=((((-1.0)*x6876*x6883))+(((-1.0)*x6875))+((x6873*x6881))+(((-1.0)*r02*x6882)));
evalcond[4]=((((-1.0)*x6881*x6882))+(((-1.0)*r02*x6883))+((x6874*x6876))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x6875))+((x6874*x6878))+(((-1.0)*x6877*x6882))+(((-1.0)*r12*x6883)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6884=((1.0)*cj5);
CheckValue<IkReal> x6885 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6884)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6885.valid){
continue;
}
CheckValue<IkReal> x6886=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x6884)))),-1);
if(!x6886.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6885.value)+(((1.5707963267949)*(x6886.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6887=IKsin(j4);
IkReal x6888=IKcos(j4);
IkReal x6889=((1.0)*sj0);
IkReal x6890=(cj5*r00);
IkReal x6891=(r11*sj5);
IkReal x6892=(cj5*r10);
IkReal x6893=(r21*sj5);
IkReal x6894=(cj5*r20);
IkReal x6895=(r01*sj5);
IkReal x6896=((1.0)*x6888);
IkReal x6897=((1.0)*x6887);
evalcond[0]=((((-1.0)*x6894*x6897))+(((-1.0)*r22*x6896))+((x6887*x6893)));
evalcond[1]=((((-1.0)*x6893*x6896))+((x6888*x6894))+(((-1.0)*r22*x6897)));
evalcond[2]=(cj0+(((-1.0)*x6892*x6897))+(((-1.0)*r12*x6896))+((x6887*x6891)));
evalcond[3]=((((-1.0)*x6890*x6897))+(((-1.0)*x6889))+(((-1.0)*r02*x6896))+((x6887*x6895)));
evalcond[4]=((((-1.0)*x6895*x6896))+((x6888*x6890))+(((-1.0)*r02*x6897))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x6891*x6896))+((x6888*x6892))+(((-1.0)*r12*x6897))+(((-1.0)*x6889)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.28411542533182)*py))+(((-0.780794279804245)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.28411542533182)*px))+(((0.780794279804245)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.28411542533182)*py))+(((-0.780794279804245)*px))))+IKsqr(((((-2.28411542533182)*px))+(((0.780794279804245)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.28411542533182)*py))+(((-0.780794279804245)*px))), ((((-2.28411542533182)*px))+(((0.780794279804245)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6898=IKcos(j0);
IkReal x6899=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((-0.39200014)*x6898))+(((-0.134)*x6899)));
evalcond[1]=((((-1.0)*py))+(((-0.39200014)*x6899))+(((0.134)*x6898)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x6900=((1.0)*cj5);
IkReal x6901=((((-1.0)*r00*sj5))+(((-1.0)*r01*x6900)));
j4eval[0]=x6901;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6900)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x6901);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x6902=cj5*cj5;
IkReal x6903=((1.0)*r21);
IkReal x6904=(cj5*sj5);
IkReal x6905=((1.0)*r20);
IkReal x6906=((((-1.0)*r01*x6904*x6905))+((r01*r21))+(((-1.0)*r00*x6903*x6904))+(((-1.0)*r01*x6902*x6903))+((r00*r20*x6902))+((r02*r22)));
j4eval[0]=x6906;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x6905))))));
j4eval[2]=IKsign(x6906);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x6907=cj5*cj5;
IkReal x6908=(r21*sj5);
IkReal x6909=(r11*r21);
IkReal x6910=((1.0)*cj5*r20);
IkReal x6911=((((-1.0)*cj5*r10*x6908))+(((-1.0)*r11*sj5*x6910))+(((-1.0)*x6907*x6909))+((r12*r22))+((r10*r20*x6907))+x6909);
j4eval[0]=x6911;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*sj0*x6910))+((sj0*x6908))))));
j4eval[2]=IKsign(x6911);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6912=cj5*cj5;
IkReal x6913=(r21*sj5);
IkReal x6914=(r11*r21);
IkReal x6915=((1.0)*cj5*r20);
CheckValue<IkReal> x6916=IKPowWithIntegerCheck(IKsign(((((-1.0)*x6912*x6914))+(((-1.0)*r11*sj5*x6915))+((r12*r22))+((r10*r20*x6912))+x6914+(((-1.0)*cj5*r10*x6913)))),-1);
if(!x6916.valid){
continue;
}
CheckValue<IkReal> x6917 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*sj0*x6915))+((sj0*x6913)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6917.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6916.value)))+(x6917.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6918=IKsin(j4);
IkReal x6919=IKcos(j4);
IkReal x6920=(r11*sj5);
IkReal x6921=(cj5*r00);
IkReal x6922=(cj5*r10);
IkReal x6923=(r21*sj5);
IkReal x6924=(cj5*r20);
IkReal x6925=(r01*sj5);
IkReal x6926=((1.0)*x6919);
IkReal x6927=((1.0)*x6918);
evalcond[0]=((((-1.0)*r22*x6926))+(((-1.0)*x6924*x6927))+((x6918*x6923)));
evalcond[1]=((((-1.0)*r22*x6927))+((x6919*x6924))+(((-1.0)*x6923*x6926)));
evalcond[2]=(cj0+(((-1.0)*r12*x6926))+(((-1.0)*x6922*x6927))+((x6918*x6920)));
evalcond[3]=(cj0+(((-1.0)*r02*x6927))+(((-1.0)*x6925*x6926))+((x6919*x6921)));
evalcond[4]=(sj0+((x6919*x6922))+(((-1.0)*x6920*x6926))+(((-1.0)*r12*x6927)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x6926))+(((-1.0)*x6921*x6927))+((x6918*x6925)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6928=cj5*cj5;
IkReal x6929=((1.0)*r21);
IkReal x6930=(cj5*sj5);
IkReal x6931=((1.0)*r20);
CheckValue<IkReal> x6932 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x6931)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6932.valid){
continue;
}
CheckValue<IkReal> x6933=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x6928*x6929))+((r01*r21))+((r00*r20*x6928))+((r02*r22))+(((-1.0)*r01*x6930*x6931))+(((-1.0)*r00*x6929*x6930)))),-1);
if(!x6933.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6932.value)+(((1.5707963267949)*(x6933.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6934=IKsin(j4);
IkReal x6935=IKcos(j4);
IkReal x6936=(r11*sj5);
IkReal x6937=(cj5*r00);
IkReal x6938=(cj5*r10);
IkReal x6939=(r21*sj5);
IkReal x6940=(cj5*r20);
IkReal x6941=(r01*sj5);
IkReal x6942=((1.0)*x6935);
IkReal x6943=((1.0)*x6934);
evalcond[0]=((((-1.0)*r22*x6942))+(((-1.0)*x6940*x6943))+((x6934*x6939)));
evalcond[1]=((((-1.0)*r22*x6943))+(((-1.0)*x6939*x6942))+((x6935*x6940)));
evalcond[2]=(cj0+(((-1.0)*r12*x6942))+(((-1.0)*x6938*x6943))+((x6934*x6936)));
evalcond[3]=(cj0+(((-1.0)*x6941*x6942))+(((-1.0)*r02*x6943))+((x6935*x6937)));
evalcond[4]=(sj0+(((-1.0)*r12*x6943))+((x6935*x6938))+(((-1.0)*x6936*x6942)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x6942))+((x6934*x6941))+(((-1.0)*x6937*x6943)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6944=((1.0)*cj5);
CheckValue<IkReal> x6945 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6944)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6945.valid){
continue;
}
CheckValue<IkReal> x6946=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x6944)))),-1);
if(!x6946.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6945.value)+(((1.5707963267949)*(x6946.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6947=IKsin(j4);
IkReal x6948=IKcos(j4);
IkReal x6949=(r11*sj5);
IkReal x6950=(cj5*r00);
IkReal x6951=(cj5*r10);
IkReal x6952=(r21*sj5);
IkReal x6953=(cj5*r20);
IkReal x6954=(r01*sj5);
IkReal x6955=((1.0)*x6948);
IkReal x6956=((1.0)*x6947);
evalcond[0]=(((x6947*x6952))+(((-1.0)*r22*x6955))+(((-1.0)*x6953*x6956)));
evalcond[1]=((((-1.0)*x6952*x6955))+(((-1.0)*r22*x6956))+((x6948*x6953)));
evalcond[2]=((((-1.0)*x6951*x6956))+cj0+(((-1.0)*r12*x6955))+((x6947*x6949)));
evalcond[3]=(cj0+(((-1.0)*r02*x6956))+((x6948*x6950))+(((-1.0)*x6954*x6955)));
evalcond[4]=(sj0+(((-1.0)*r12*x6956))+(((-1.0)*x6949*x6955))+((x6948*x6951)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x6950*x6956))+(((-1.0)*r02*x6955))+((x6947*x6954)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x6957=((7.0e-5)*sj1);
IkReal x6958=(r00*sj5);
IkReal x6959=(cj5*r01);
IkReal x6960=(cj1*sj2);
IkReal x6961=((500.0)*px);
IkReal x6962=(cj2*sj1);
IkReal x6963=((212.5)*cj1);
IkReal x6964=((196.0)*cj1*cj2);
IkReal x6965=((196.0)*sj1*sj2);
CheckValue<IkReal> x6966=IKPowWithIntegerCheck(((((-67.0)*x6960))+(((-67.0)*x6962))),-1);
if(!x6966.valid){
continue;
}
CheckValue<IkReal> x6967=IKPowWithIntegerCheck(((((-1.0)*x6960))+(((-1.0)*x6962))),-1);
if(!x6967.valid){
continue;
}
if( IKabs(((x6966.value)*(((((-1.0)*x6959*x6965))+(((-1.0)*x6958*x6965))+(((50.0)*x6958*x6960))+(((50.0)*x6958*x6962))+((x6961*x6962))+((x6957*x6958))+((x6957*x6959))+((x6959*x6963))+((x6959*x6964))+((x6958*x6964))+((x6958*x6963))+(((50.0)*x6959*x6962))+(((50.0)*x6959*x6960))+((x6960*x6961)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x6967.value)*((x6958+x6959)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x6966.value)*(((((-1.0)*x6959*x6965))+(((-1.0)*x6958*x6965))+(((50.0)*x6958*x6960))+(((50.0)*x6958*x6962))+((x6961*x6962))+((x6957*x6958))+((x6957*x6959))+((x6959*x6963))+((x6959*x6964))+((x6958*x6964))+((x6958*x6963))+(((50.0)*x6959*x6962))+(((50.0)*x6959*x6960))+((x6960*x6961))))))+IKsqr(((x6967.value)*((x6958+x6959))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x6966.value)*(((((-1.0)*x6959*x6965))+(((-1.0)*x6958*x6965))+(((50.0)*x6958*x6960))+(((50.0)*x6958*x6962))+((x6961*x6962))+((x6957*x6958))+((x6957*x6959))+((x6959*x6963))+((x6959*x6964))+((x6958*x6964))+((x6958*x6963))+(((50.0)*x6959*x6962))+(((50.0)*x6959*x6960))+((x6960*x6961))))), ((x6967.value)*((x6958+x6959))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x6968=IKcos(j0);
IkReal x6969=IKsin(j0);
IkReal x6970=(r00*sj5);
IkReal x6971=((0.392)*sj1);
IkReal x6972=(cj5*r11);
IkReal x6973=((1.0)*cj1);
IkReal x6974=(r10*sj5);
IkReal x6975=((1.0)*cj2);
IkReal x6976=((0.425)*cj1);
IkReal x6977=(cj5*r01);
IkReal x6978=(sj2*x6969);
IkReal x6979=(sj1*x6968);
IkReal x6980=(sj2*x6968);
IkReal x6981=((0.392)*cj1*cj2);
IkReal x6982=(sj1*x6969);
evalcond[0]=((((-1.0)*x6970))+(((-1.0)*x6977))+(((-1.0)*x6975*x6979))+(((-1.0)*x6973*x6980)));
evalcond[1]=((((-1.0)*x6972))+(((-1.0)*x6974))+(((-1.0)*x6975*x6982))+(((-1.0)*x6973*x6978)));
evalcond[2]=((((-0.134)*x6969))+((x6968*x6976))+(((1.4e-7)*x6979))+(((-1.0)*px))+(((-1.0)*x6971*x6980))+((x6968*x6981))+(((-0.1)*x6970))+(((-0.1)*x6977)));
evalcond[3]=(((x6969*x6976))+(((0.134)*x6968))+(((1.4e-7)*x6982))+(((-1.0)*x6971*x6978))+(((-1.0)*py))+((x6969*x6981))+(((-0.1)*x6972))+(((-0.1)*x6974)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x6983=((1.0)*cj5);
IkReal x6984=((((-1.0)*r00*sj5))+(((-1.0)*r01*x6983)));
j4eval[0]=x6984;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r20*x6983))+((cj0*r21*sj5))))));
j4eval[2]=IKsign(x6984);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x6985=((1.0)*cj5);
IkReal x6986=((((-1.0)*r10*sj5))+(((-1.0)*r11*x6985)));
j4eval[0]=x6986;
j4eval[1]=((IKabs(((((-1.0)*r20*sj0*x6985))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x6986);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x6987=((1.0)*sj0);
IkReal x6988=((1.0)*cj0);
IkReal x6989=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x6989;
j4eval[1]=((IKabs(((((-1.0)*r12*x6987))+(((-1.0)*r02*x6988)))))+(IKabs((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x6987))+(((-1.0)*r01*sj5*x6988))))));
j4eval[2]=IKsign(x6989);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x6990=((-1.0)*r20);
IkReal x6992 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x6992)==0){
continue;
}
IkReal x6991=pow(x6992,-0.5);
CheckValue<IkReal> x6993 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x6990),IKFAST_ATAN2_MAGTHRESH);
if(!x6993.valid){
continue;
}
IkReal gconst132=((-1.0)*(x6993.value));
IkReal gconst133=(r21*x6991);
IkReal gconst134=(x6990*x6991);
CheckValue<IkReal> x6994 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6994.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x6994.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x6995=((-1.0)*r20);
IkReal x6996=x6991;
CheckValue<IkReal> x6998 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x6995),IKFAST_ATAN2_MAGTHRESH);
if(!x6998.valid){
continue;
}
IkReal x6997=((-1.0)*(x6998.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x6997;
IkReal gconst132=x6997;
IkReal gconst133=(r21*x6996);
IkReal gconst134=(x6995*x6996);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6999=((-1.0)*r20);
IkReal x7000=x6991;
CheckValue<IkReal> x7002 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x6999),IKFAST_ATAN2_MAGTHRESH);
if(!x7002.valid){
continue;
}
IkReal x7001=((-1.0)*(x7002.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x7001;
IkReal gconst132=x7001;
IkReal gconst133=(r21*x7000);
IkReal gconst134=(x6999*x7000);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x7003=((-1.0)*r20);
IkReal x7004=x6991;
CheckValue<IkReal> x7006 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7003),IKFAST_ATAN2_MAGTHRESH);
if(!x7006.valid){
continue;
}
IkReal x7005=((-1.0)*(x7006.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x7005;
IkReal gconst132=x7005;
IkReal gconst133=(r21*x7004);
IkReal gconst134=(x7003*x7004);
IkReal x7007=r22*r22;
CheckValue<IkReal> x7010=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x7007))),-1);
if(!x7010.valid){
continue;
}
IkReal x7008=x7010.value;
IkReal x7009=(((x7008*(r20*r20*r20*r20)))+x7007+(((2.0)*x7008*(r20*r20)*(r21*r21)))+((x7008*(r21*r21*r21*r21))));
j4eval[0]=x7009;
j4eval[1]=IKsign(x7009);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7011=(gconst133*r21);
IkReal x7012=(cj1*sj2);
IkReal x7013=(gconst134*r20);
IkReal x7014=(cj2*sj1);
CheckValue<IkReal> x7015=IKPowWithIntegerCheck(IKsign(((x7013*x7013)+(r22*r22)+(((-2.0)*x7011*x7013))+(x7011*x7011))),-1);
if(!x7015.valid){
continue;
}
CheckValue<IkReal> x7016 = IKatan2WithCheck(IkReal((((r22*x7014))+((r22*x7012)))),IkReal((((x7011*x7012))+((x7011*x7014))+(((-1.0)*x7012*x7013))+(((-1.0)*x7013*x7014)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7016.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7015.value)))+(x7016.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7017=IKsin(j4);
IkReal x7018=IKcos(j4);
IkReal x7019=(sj1*sj2);
IkReal x7020=(gconst133*r11);
IkReal x7021=(gconst133*r21);
IkReal x7022=(gconst133*r01);
IkReal x7023=((1.0)*x7018);
IkReal x7024=(gconst134*x7018);
IkReal x7025=((1.0)*x7017);
IkReal x7026=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*gconst134*r20*x7025))+(((-1.0)*r22*x7023))+((x7017*x7021)));
evalcond[1]=((((-1.0)*gconst134*r10*x7025))+(((-1.0)*r12*x7023))+cj0+((x7017*x7020)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x7023))+((x7017*x7022))+(((-1.0)*gconst134*r00*x7025)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x7025))+(((-1.0)*x7021*x7023))+((cj1*sj2))+((r20*x7024)));
evalcond[4]=((((-1.0)*cj0*x7026))+((cj0*x7019))+((r00*x7024))+(((-1.0)*r02*x7025))+(((-1.0)*x7022*x7023)));
evalcond[5]=((((-1.0)*r12*x7025))+((r10*x7024))+((sj0*x7019))+(((-1.0)*x7020*x7023))+(((-1.0)*sj0*x7026)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7027=((1.0)*gconst134);
CheckValue<IkReal> x7028=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x7027))+(((-1.0)*gconst133*r10)))),-1);
if(!x7028.valid){
continue;
}
CheckValue<IkReal> x7029 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x7027))+((gconst133*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7029.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7028.value)))+(x7029.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7030=IKsin(j4);
IkReal x7031=IKcos(j4);
IkReal x7032=(sj1*sj2);
IkReal x7033=(gconst133*r11);
IkReal x7034=(gconst133*r21);
IkReal x7035=(gconst133*r01);
IkReal x7036=((1.0)*x7031);
IkReal x7037=(gconst134*x7031);
IkReal x7038=((1.0)*x7030);
IkReal x7039=((1.0)*cj1*cj2);
evalcond[0]=(((x7030*x7034))+(((-1.0)*r22*x7036))+(((-1.0)*gconst134*r20*x7038)));
evalcond[1]=(((x7030*x7033))+cj0+(((-1.0)*r12*x7036))+(((-1.0)*gconst134*r10*x7038)));
evalcond[2]=(((x7030*x7035))+(((-1.0)*sj0))+(((-1.0)*r02*x7036))+(((-1.0)*gconst134*r00*x7038)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x7034*x7036))+(((-1.0)*r22*x7038))+((cj1*sj2))+((r20*x7037)));
evalcond[4]=((((-1.0)*r02*x7038))+((r00*x7037))+(((-1.0)*x7035*x7036))+((cj0*x7032))+(((-1.0)*cj0*x7039)));
evalcond[5]=(((sj0*x7032))+(((-1.0)*r12*x7038))+((r10*x7037))+(((-1.0)*sj0*x7039))+(((-1.0)*x7033*x7036)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7040=((1.0)*gconst134);
CheckValue<IkReal> x7041 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x7040))+((cj0*gconst133*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7041.valid){
continue;
}
CheckValue<IkReal> x7042=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst133*r00))+(((-1.0)*r01*x7040)))),-1);
if(!x7042.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7041.value)+(((1.5707963267949)*(x7042.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7043=IKsin(j4);
IkReal x7044=IKcos(j4);
IkReal x7045=(sj1*sj2);
IkReal x7046=(gconst133*r11);
IkReal x7047=(gconst133*r21);
IkReal x7048=(gconst133*r01);
IkReal x7049=((1.0)*x7044);
IkReal x7050=(gconst134*x7044);
IkReal x7051=((1.0)*x7043);
IkReal x7052=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*r22*x7049))+(((-1.0)*gconst134*r20*x7051))+((x7043*x7047)));
evalcond[1]=(cj0+(((-1.0)*r12*x7049))+(((-1.0)*gconst134*r10*x7051))+((x7043*x7046)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x7049))+(((-1.0)*gconst134*r00*x7051))+((x7043*x7048)));
evalcond[3]=(((r20*x7050))+((cj2*sj1))+(((-1.0)*r22*x7051))+((cj1*sj2))+(((-1.0)*x7047*x7049)));
evalcond[4]=((((-1.0)*x7048*x7049))+(((-1.0)*cj0*x7052))+((cj0*x7045))+((r00*x7050))+(((-1.0)*r02*x7051)));
evalcond[5]=(((r10*x7050))+((sj0*x7045))+(((-1.0)*x7046*x7049))+(((-1.0)*r12*x7051))+(((-1.0)*sj0*x7052)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7053=((-1.0)*r21);
IkReal x7055 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x7055)==0){
continue;
}
IkReal x7054=pow(x7055,-0.5);
CheckValue<IkReal> x7056 = IKatan2WithCheck(IkReal(x7053),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7056.valid){
continue;
}
IkReal gconst135=((3.14159265358979)+(((-1.0)*(x7056.value))));
IkReal gconst136=(x7053*x7054);
IkReal gconst137=((1.0)*r20*x7054);
CheckValue<IkReal> x7057 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7057.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x7057.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7058=((-1.0)*r21);
CheckValue<IkReal> x7061 = IKatan2WithCheck(IkReal(x7058),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7061.valid){
continue;
}
IkReal x7059=((1.0)*(x7061.value));
IkReal x7060=x7054;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x7059)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7059)));
IkReal gconst136=(x7058*x7060);
IkReal gconst137=((1.0)*r20*x7060);
IkReal x7062=r22*r22;
IkReal x7063=((1.0)*x7062);
CheckValue<IkReal> x7067=IKPowWithIntegerCheck(((-1.0)+x7062),-1);
if(!x7067.valid){
continue;
}
IkReal x7064=x7067.value;
if((((1.0)+(((-1.0)*x7063)))) < -0.00001)
continue;
IkReal x7065=IKsqrt(((1.0)+(((-1.0)*x7063))));
IkReal x7066=(cj0*x7064*x7065);
j4eval[0]=((IKabs((x7066+(((-1.0)*x7063*x7066)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7068=((-1.0)*r21);
CheckValue<IkReal> x7071 = IKatan2WithCheck(IkReal(x7068),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7071.valid){
continue;
}
IkReal x7069=((1.0)*(x7071.value));
IkReal x7070=x7054;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x7069)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7069)));
IkReal gconst136=(x7068*x7070);
IkReal gconst137=((1.0)*r20*x7070);
IkReal x7072=r22*r22;
IkReal x7073=((1.0)*x7072);
CheckValue<IkReal> x7077=IKPowWithIntegerCheck(((-1.0)+x7072),-1);
if(!x7077.valid){
continue;
}
IkReal x7074=x7077.value;
if((((1.0)+(((-1.0)*x7073)))) < -0.00001)
continue;
IkReal x7075=IKsqrt(((1.0)+(((-1.0)*x7073))));
IkReal x7076=(sj0*x7074*x7075);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x7076+(((-1.0)*x7073*x7076))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x7078=((-1.0)*r21);
CheckValue<IkReal> x7081 = IKatan2WithCheck(IkReal(x7078),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7081.valid){
continue;
}
IkReal x7079=((1.0)*(x7081.value));
IkReal x7080=x7054;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x7079)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7079)));
IkReal gconst136=(x7078*x7080);
IkReal gconst137=((1.0)*r20*x7080);
IkReal x7082=r22*r22;
IkReal x7083=(r12*sj0);
IkReal x7084=(cj0*r02);
CheckValue<IkReal> x7088=IKPowWithIntegerCheck(((-1.0)+x7082),-1);
if(!x7088.valid){
continue;
}
IkReal x7085=x7088.value;
if((((1.0)+(((-1.0)*x7082)))) < -0.00001)
continue;
IkReal x7086=IKsqrt(((1.0)+(((-1.0)*x7082))));
IkReal x7087=(r22*x7085*x7086);
j4eval[0]=0;
j4eval[1]=((IKabs(((((-1.0)*x7084))+(((-1.0)*x7083)))))+(IKabs((((x7083*x7087))+((x7084*x7087))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7089=((1.0)*sj0);
IkReal x7090=((1.0)*cj0);
CheckValue<IkReal> x7091=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst136*r20))+(((-1.0)*gconst137*r21)))),-1);
if(!x7091.valid){
continue;
}
CheckValue<IkReal> x7092 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x7089))+(((-1.0)*r02*x7090)))),IkReal(((((-1.0)*gconst136*r01*x7090))+((gconst137*r10*sj0))+(((-1.0)*gconst136*r11*x7089))+((cj0*gconst137*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7092.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7091.value)))+(x7092.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7093=IKsin(j4);
IkReal x7094=IKcos(j4);
IkReal x7095=(gconst136*r01);
IkReal x7096=(gconst137*r10);
IkReal x7097=(sj1*sj2);
IkReal x7098=(gconst137*r20);
IkReal x7099=(gconst136*r11);
IkReal x7100=(gconst136*r21);
IkReal x7101=(gconst137*r00);
IkReal x7102=((1.0)*x7094);
IkReal x7103=((1.0)*cj1*cj2);
IkReal x7104=((1.0)*x7093);
evalcond[0]=((((-1.0)*r22*x7102))+((x7093*x7100))+(((-1.0)*x7098*x7104)));
evalcond[1]=(cj0+(((-1.0)*r12*x7102))+((x7093*x7099))+(((-1.0)*x7096*x7104)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x7101*x7104))+((x7093*x7095))+(((-1.0)*r02*x7102)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x7100*x7102))+(((-1.0)*r22*x7104))+((x7094*x7098)));
evalcond[4]=((((-1.0)*cj0*x7103))+(((-1.0)*r02*x7104))+(((-1.0)*x7095*x7102))+((x7094*x7101))+((cj0*x7097)));
evalcond[5]=((((-1.0)*r12*x7104))+((x7094*x7096))+(((-1.0)*x7099*x7102))+((sj0*x7097))+(((-1.0)*sj0*x7103)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7105=((1.0)*gconst137);
CheckValue<IkReal> x7106 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x7105))+((gconst136*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7106.valid){
continue;
}
CheckValue<IkReal> x7107=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x7105))+(((-1.0)*gconst136*r10)))),-1);
if(!x7107.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7106.value)+(((1.5707963267949)*(x7107.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7108=IKsin(j4);
IkReal x7109=IKcos(j4);
IkReal x7110=(gconst136*r01);
IkReal x7111=(gconst137*r10);
IkReal x7112=(sj1*sj2);
IkReal x7113=(gconst137*r20);
IkReal x7114=(gconst136*r11);
IkReal x7115=(gconst136*r21);
IkReal x7116=(gconst137*r00);
IkReal x7117=((1.0)*x7109);
IkReal x7118=((1.0)*cj1*cj2);
IkReal x7119=((1.0)*x7108);
evalcond[0]=((((-1.0)*r22*x7117))+((x7108*x7115))+(((-1.0)*x7113*x7119)));
evalcond[1]=(cj0+(((-1.0)*x7111*x7119))+(((-1.0)*r12*x7117))+((x7108*x7114)));
evalcond[2]=((((-1.0)*x7116*x7119))+(((-1.0)*sj0))+(((-1.0)*r02*x7117))+((x7108*x7110)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x7115*x7117))+((cj1*sj2))+((x7109*x7113))+(((-1.0)*r22*x7119)));
evalcond[4]=((((-1.0)*cj0*x7118))+((cj0*x7112))+(((-1.0)*x7110*x7117))+((x7109*x7116))+(((-1.0)*r02*x7119)));
evalcond[5]=(((sj0*x7112))+(((-1.0)*r12*x7119))+((x7109*x7111))+(((-1.0)*sj0*x7118))+(((-1.0)*x7114*x7117)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7120=((1.0)*gconst137);
CheckValue<IkReal> x7121=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst136*r00))+(((-1.0)*r01*x7120)))),-1);
if(!x7121.valid){
continue;
}
CheckValue<IkReal> x7122 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x7120))+((cj0*gconst136*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7122.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7121.value)))+(x7122.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7123=IKsin(j4);
IkReal x7124=IKcos(j4);
IkReal x7125=(gconst136*r01);
IkReal x7126=(gconst137*r10);
IkReal x7127=(sj1*sj2);
IkReal x7128=(gconst137*r20);
IkReal x7129=(gconst136*r11);
IkReal x7130=(gconst136*r21);
IkReal x7131=(gconst137*r00);
IkReal x7132=((1.0)*x7124);
IkReal x7133=((1.0)*cj1*cj2);
IkReal x7134=((1.0)*x7123);
evalcond[0]=(((x7123*x7130))+(((-1.0)*r22*x7132))+(((-1.0)*x7128*x7134)));
evalcond[1]=((((-1.0)*r12*x7132))+cj0+((x7123*x7129))+(((-1.0)*x7126*x7134)));
evalcond[2]=((((-1.0)*sj0))+((x7123*x7125))+(((-1.0)*x7131*x7134))+(((-1.0)*r02*x7132)));
evalcond[3]=((((-1.0)*x7130*x7132))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x7134))+((x7124*x7128)));
evalcond[4]=(((x7124*x7131))+(((-1.0)*x7125*x7132))+((cj0*x7127))+(((-1.0)*cj0*x7133))+(((-1.0)*r02*x7134)));
evalcond[5]=((((-1.0)*r12*x7134))+(((-1.0)*sj0*x7133))+((x7124*x7126))+((sj0*x7127))+(((-1.0)*x7129*x7132)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7135=((-1.0)*r10);
IkReal x7137 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x7137)==0){
continue;
}
IkReal x7136=pow(x7137,-0.5);
CheckValue<IkReal> x7138 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x7135),IKFAST_ATAN2_MAGTHRESH);
if(!x7138.valid){
continue;
}
IkReal gconst138=((-1.0)*(x7138.value));
IkReal gconst139=(r11*x7136);
IkReal gconst140=(x7135*x7136);
CheckValue<IkReal> x7139 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7139.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7139.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x7140=((-1.0)*r10);
IkReal x7141=x7136;
CheckValue<IkReal> x7143 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x7140),IKFAST_ATAN2_MAGTHRESH);
if(!x7143.valid){
continue;
}
IkReal x7142=((-1.0)*(x7143.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst139;
cj5=gconst140;
j5=x7142;
IkReal gconst138=x7142;
IkReal gconst139=(r11*x7141);
IkReal gconst140=(x7140*x7141);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7144=((1.0)*sj0);
IkReal x7145=((1.0)*gconst139);
CheckValue<IkReal> x7146 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x7144)))),IkReal((((gconst140*r10*sj0))+(((-1.0)*gconst139*r11*x7144))+((cj0*gconst140*r00))+(((-1.0)*cj0*r01*x7145)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7146.valid){
continue;
}
CheckValue<IkReal> x7147=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst140*r21))+(((-1.0)*r20*x7145)))),-1);
if(!x7147.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7146.value)+(((1.5707963267949)*(x7147.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7148=IKsin(j4);
IkReal x7149=IKcos(j4);
IkReal x7150=(gconst140*r00);
IkReal x7151=(sj1*sj2);
IkReal x7152=(gconst139*r11);
IkReal x7153=(gconst139*r01);
IkReal x7154=(gconst139*r21);
IkReal x7155=((1.0)*x7149);
IkReal x7156=((1.0)*x7148);
IkReal x7157=((1.0)*cj1*cj2);
IkReal x7158=(gconst140*x7149);
evalcond[0]=((((-1.0)*r22*x7155))+(((-1.0)*gconst140*r20*x7156))+((x7148*x7154)));
evalcond[1]=((((-1.0)*r12*x7155))+cj0+(((-1.0)*gconst140*r10*x7156))+((x7148*x7152)));
evalcond[2]=((((-1.0)*sj0))+((x7148*x7153))+(((-1.0)*x7150*x7156))+(((-1.0)*r02*x7155)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x7156))+((cj1*sj2))+((r20*x7158))+(((-1.0)*x7154*x7155)));
evalcond[4]=(((x7149*x7150))+(((-1.0)*x7153*x7155))+((cj0*x7151))+(((-1.0)*cj0*x7157))+(((-1.0)*r02*x7156)));
evalcond[5]=((((-1.0)*r12*x7156))+(((-1.0)*x7152*x7155))+(((-1.0)*sj0*x7157))+((sj0*x7151))+((r10*x7158)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7159=((1.0)*gconst140);
CheckValue<IkReal> x7160 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst139*r21))+(((-1.0)*cj0*r20*x7159)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7160.valid){
continue;
}
CheckValue<IkReal> x7161=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7159))+(((-1.0)*gconst139*r00)))),-1);
if(!x7161.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7160.value)+(((1.5707963267949)*(x7161.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7162=IKsin(j4);
IkReal x7163=IKcos(j4);
IkReal x7164=(gconst140*r00);
IkReal x7165=(sj1*sj2);
IkReal x7166=(gconst139*r11);
IkReal x7167=(gconst139*r01);
IkReal x7168=(gconst139*r21);
IkReal x7169=((1.0)*x7163);
IkReal x7170=((1.0)*x7162);
IkReal x7171=((1.0)*cj1*cj2);
IkReal x7172=(gconst140*x7163);
evalcond[0]=(((x7162*x7168))+(((-1.0)*r22*x7169))+(((-1.0)*gconst140*r20*x7170)));
evalcond[1]=(((x7162*x7166))+cj0+(((-1.0)*gconst140*r10*x7170))+(((-1.0)*r12*x7169)));
evalcond[2]=(((x7162*x7167))+(((-1.0)*r02*x7169))+(((-1.0)*sj0))+(((-1.0)*x7164*x7170)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x7168*x7169))+(((-1.0)*r22*x7170))+((r20*x7172)));
evalcond[4]=((((-1.0)*r02*x7170))+((cj0*x7165))+((x7163*x7164))+(((-1.0)*cj0*x7171))+(((-1.0)*x7167*x7169)));
evalcond[5]=(((r10*x7172))+(((-1.0)*r12*x7170))+(((-1.0)*x7166*x7169))+(((-1.0)*sj0*x7171))+((sj0*x7165)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7173=((-1.0)*r11);
IkReal x7175 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x7175)==0){
continue;
}
IkReal x7174=pow(x7175,-0.5);
CheckValue<IkReal> x7176 = IKatan2WithCheck(IkReal(x7173),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7176.valid){
continue;
}
IkReal gconst141=((3.14159265358979)+(((-1.0)*(x7176.value))));
IkReal gconst142=(x7173*x7174);
IkReal gconst143=((1.0)*r10*x7174);
CheckValue<IkReal> x7177 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7177.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x7177.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x7178=((-1.0)*r11);
CheckValue<IkReal> x7181 = IKatan2WithCheck(IkReal(x7178),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7181.valid){
continue;
}
IkReal x7179=((1.0)*(x7181.value));
IkReal x7180=x7174;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x7179)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x7179)));
IkReal gconst142=(x7178*x7180);
IkReal gconst143=((1.0)*r10*x7180);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7182=((-1.0)*r11);
CheckValue<IkReal> x7185 = IKatan2WithCheck(IkReal(x7182),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7185.valid){
continue;
}
IkReal x7183=((1.0)*(x7185.value));
IkReal x7184=x7174;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x7183)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x7183)));
IkReal gconst142=(x7182*x7184);
IkReal gconst143=((1.0)*r10*x7184);
IkReal x7186=r12*r12;
IkReal x7187=((1.0)*sj0);
IkReal x7188=(cj0*r02);
IkReal x7189=x7174;
j4eval[0]=((IKabs(((((-1.0)*x7187*x7189))+((sj0*x7186*x7189))+((r12*x7188*x7189)))))+(IKabs(((((-1.0)*x7188))+(((-1.0)*r12*x7187))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7190=((-1.0)*r11);
CheckValue<IkReal> x7193 = IKatan2WithCheck(IkReal(x7190),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7193.valid){
continue;
}
IkReal x7191=((1.0)*(x7193.value));
IkReal x7192=x7174;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x7191)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x7191)));
IkReal gconst142=(x7190*x7192);
IkReal gconst143=((1.0)*r10*x7192);
IkReal x7194=r12*r12;
IkReal x7195=(cj1*r22*sj2);
IkReal x7196=(cj2*r22*sj1);
CheckValue<IkReal> x7200=IKPowWithIntegerCheck(((-1.0)+x7194),-1);
if(!x7200.valid){
continue;
}
IkReal x7197=x7200.value;
if((((1.0)+(((-1.0)*x7194)))) < -0.00001)
continue;
IkReal x7198=IKsqrt(((1.0)+(((-1.0)*x7194))));
IkReal x7199=((1.0)*r12*x7197*x7198);
j4eval[0]=((IKabs((x7196+x7195)))+(IKabs(((((-1.0)*x7196*x7199))+(((-1.0)*x7195*x7199))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7201=(gconst142*r21);
IkReal x7202=(cj1*sj2);
IkReal x7203=(cj2*sj1);
IkReal x7204=(gconst143*r20);
CheckValue<IkReal> x7205=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x7204*x7204)+(x7201*x7201)+(((-2.0)*x7201*x7204)))),-1);
if(!x7205.valid){
continue;
}
CheckValue<IkReal> x7206 = IKatan2WithCheck(IkReal((((r22*x7203))+((r22*x7202)))),IkReal((((x7201*x7203))+((x7201*x7202))+(((-1.0)*x7203*x7204))+(((-1.0)*x7202*x7204)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7206.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7205.value)))+(x7206.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7207=IKsin(j4);
IkReal x7208=IKcos(j4);
IkReal x7209=(sj1*sj2);
IkReal x7210=(gconst143*r20);
IkReal x7211=((1.0)*x7208);
IkReal x7212=((1.0)*cj1*cj2);
IkReal x7213=((1.0)*x7207);
IkReal x7214=(gconst142*x7207);
IkReal x7215=(gconst143*x7208);
evalcond[0]=(((r21*x7214))+(((-1.0)*x7210*x7213))+(((-1.0)*r22*x7211)));
evalcond[1]=((((-1.0)*gconst143*r10*x7213))+((r11*x7214))+cj0+(((-1.0)*r12*x7211)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*gconst143*r00*x7213))+(((-1.0)*r02*x7211))+((r01*x7214)));
evalcond[3]=(((cj2*sj1))+((x7208*x7210))+(((-1.0)*gconst142*r21*x7211))+((cj1*sj2))+(((-1.0)*r22*x7213)));
evalcond[4]=(((r00*x7215))+(((-1.0)*cj0*x7212))+((cj0*x7209))+(((-1.0)*r02*x7213))+(((-1.0)*gconst142*r01*x7211)));
evalcond[5]=(((r10*x7215))+(((-1.0)*sj0*x7212))+(((-1.0)*gconst142*r11*x7211))+(((-1.0)*r12*x7213))+((sj0*x7209)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7216=((1.0)*sj0);
IkReal x7217=((1.0)*gconst142);
CheckValue<IkReal> x7218 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x7216)))),IkReal(((((-1.0)*cj0*r01*x7217))+(((-1.0)*gconst142*r11*x7216))+((cj0*gconst143*r00))+((gconst143*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7218.valid){
continue;
}
CheckValue<IkReal> x7219=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst143*r21))+(((-1.0)*r20*x7217)))),-1);
if(!x7219.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7218.value)+(((1.5707963267949)*(x7219.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7220=IKsin(j4);
IkReal x7221=IKcos(j4);
IkReal x7222=(sj1*sj2);
IkReal x7223=(gconst143*r20);
IkReal x7224=((1.0)*x7221);
IkReal x7225=((1.0)*cj1*cj2);
IkReal x7226=((1.0)*x7220);
IkReal x7227=(gconst142*x7220);
IkReal x7228=(gconst143*x7221);
evalcond[0]=(((r21*x7227))+(((-1.0)*r22*x7224))+(((-1.0)*x7223*x7226)));
evalcond[1]=(cj0+(((-1.0)*gconst143*r10*x7226))+(((-1.0)*r12*x7224))+((r11*x7227)));
evalcond[2]=((((-1.0)*r02*x7224))+(((-1.0)*sj0))+(((-1.0)*gconst143*r00*x7226))+((r01*x7227)));
evalcond[3]=(((cj2*sj1))+((x7221*x7223))+((cj1*sj2))+(((-1.0)*gconst142*r21*x7224))+(((-1.0)*r22*x7226)));
evalcond[4]=((((-1.0)*r02*x7226))+((r00*x7228))+(((-1.0)*gconst142*r01*x7224))+(((-1.0)*cj0*x7225))+((cj0*x7222)));
evalcond[5]=(((sj0*x7222))+((r10*x7228))+(((-1.0)*gconst142*r11*x7224))+(((-1.0)*r12*x7226))+(((-1.0)*sj0*x7225)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7229=((1.0)*gconst143);
CheckValue<IkReal> x7230=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7229))+(((-1.0)*gconst142*r00)))),-1);
if(!x7230.valid){
continue;
}
CheckValue<IkReal> x7231 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst142*r21))+(((-1.0)*cj0*r20*x7229)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7231.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7230.value)))+(x7231.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7232=IKsin(j4);
IkReal x7233=IKcos(j4);
IkReal x7234=(sj1*sj2);
IkReal x7235=(gconst143*r20);
IkReal x7236=((1.0)*x7233);
IkReal x7237=((1.0)*cj1*cj2);
IkReal x7238=((1.0)*x7232);
IkReal x7239=(gconst142*x7232);
IkReal x7240=(gconst143*x7233);
evalcond[0]=((((-1.0)*r22*x7236))+((r21*x7239))+(((-1.0)*x7235*x7238)));
evalcond[1]=(cj0+(((-1.0)*gconst143*r10*x7238))+(((-1.0)*r12*x7236))+((r11*x7239)));
evalcond[2]=((((-1.0)*sj0))+((r01*x7239))+(((-1.0)*gconst143*r00*x7238))+(((-1.0)*r02*x7236)));
evalcond[3]=(((cj2*sj1))+((x7233*x7235))+((cj1*sj2))+(((-1.0)*gconst142*r21*x7236))+(((-1.0)*r22*x7238)));
evalcond[4]=((((-1.0)*gconst142*r01*x7236))+((r00*x7240))+(((-1.0)*cj0*x7237))+((cj0*x7234))+(((-1.0)*r02*x7238)));
evalcond[5]=(((r10*x7240))+(((-1.0)*gconst142*r11*x7236))+(((-1.0)*sj0*x7237))+((sj0*x7234))+(((-1.0)*r12*x7238)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7241=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x7241;
j4eval[1]=IKsign(x7241);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7242=((1.0)*cj5);
IkReal x7243=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7242)));
j4eval[0]=x7243;
j4eval[1]=((IKabs(((((-1.0)*r20*x7242))+((r21*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x7243);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7244=cj5*cj5;
IkReal x7245=r11*r11;
IkReal x7246=(r11*sj5);
IkReal x7247=(cj5*r10);
IkReal x7248=((r12*r12)+(((-1.0)*x7244*x7245))+x7245+((x7244*(r10*r10)))+(((-2.0)*x7246*x7247)));
j4eval[0]=x7248;
j4eval[1]=IKsign(x7248);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x7246))+x7247))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7249=cj5*cj5;
IkReal x7250=r11*r11;
IkReal x7251=(cj5*r10);
IkReal x7252=(r11*sj5);
CheckValue<IkReal> x7253 = IKatan2WithCheck(IkReal((x7251+(((-1.0)*x7252)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x7253.valid){
continue;
}
CheckValue<IkReal> x7254=IKPowWithIntegerCheck(IKsign(((r12*r12)+((x7249*(r10*r10)))+x7250+(((-2.0)*x7251*x7252))+(((-1.0)*x7249*x7250)))),-1);
if(!x7254.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7253.value)+(((1.5707963267949)*(x7254.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7255=IKsin(j4);
IkReal x7256=IKcos(j4);
IkReal x7257=(cj5*r10);
IkReal x7258=(r01*sj5);
IkReal x7259=(cj5*r00);
IkReal x7260=(cj5*r20);
IkReal x7261=((1.0)*x7256);
IkReal x7262=((1.0)*x7255);
IkReal x7263=(sj5*x7255);
evalcond[0]=((((-1.0)*r22*x7261))+((r21*x7263))+(((-1.0)*x7260*x7262)));
evalcond[1]=((((-1.0)*x7259*x7262))+(((-1.0)*r02*x7261))+((x7255*x7258)));
evalcond[2]=((((-1.0)*r11*sj5*x7261))+(((-1.0)*r12*x7262))+((x7256*x7257)));
evalcond[3]=((1.0)+(((-1.0)*x7257*x7262))+((r11*x7263))+(((-1.0)*r12*x7261)));
evalcond[4]=(((x7256*x7260))+((cj2*sj1))+(((-1.0)*r22*x7262))+(((-1.0)*r21*sj5*x7261))+((cj1*sj2)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x7258*x7261))+(((-1.0)*r02*x7262))+((x7256*x7259)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7264=((1.0)*cj5);
CheckValue<IkReal> x7265 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x7264)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7265.valid){
continue;
}
CheckValue<IkReal> x7266=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7264))+(((-1.0)*r00*sj5)))),-1);
if(!x7266.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7265.value)+(((1.5707963267949)*(x7266.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7267=IKsin(j4);
IkReal x7268=IKcos(j4);
IkReal x7269=(cj5*r10);
IkReal x7270=(r01*sj5);
IkReal x7271=(cj5*r00);
IkReal x7272=(cj5*r20);
IkReal x7273=((1.0)*x7268);
IkReal x7274=((1.0)*x7267);
IkReal x7275=(sj5*x7267);
evalcond[0]=((((-1.0)*r22*x7273))+(((-1.0)*x7272*x7274))+((r21*x7275)));
evalcond[1]=(((x7267*x7270))+(((-1.0)*r02*x7273))+(((-1.0)*x7271*x7274)));
evalcond[2]=(((x7268*x7269))+(((-1.0)*r11*sj5*x7273))+(((-1.0)*r12*x7274)));
evalcond[3]=((1.0)+(((-1.0)*r12*x7273))+((r11*x7275))+(((-1.0)*x7269*x7274)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x7274))+((cj1*sj2))+((x7268*x7272))+(((-1.0)*r21*sj5*x7273)));
evalcond[5]=(((x7268*x7271))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r02*x7274))+(((-1.0)*x7270*x7273)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7276=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x7276.valid){
continue;
}
CheckValue<IkReal> x7277 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7277.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7276.value)))+(x7277.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7278=IKsin(j4);
IkReal x7279=IKcos(j4);
IkReal x7280=(cj5*r10);
IkReal x7281=(r01*sj5);
IkReal x7282=(cj5*r00);
IkReal x7283=(cj5*r20);
IkReal x7284=((1.0)*x7279);
IkReal x7285=((1.0)*x7278);
IkReal x7286=(sj5*x7278);
evalcond[0]=((((-1.0)*x7283*x7285))+((r21*x7286))+(((-1.0)*r22*x7284)));
evalcond[1]=((((-1.0)*x7282*x7285))+((x7278*x7281))+(((-1.0)*r02*x7284)));
evalcond[2]=((((-1.0)*r12*x7285))+((x7279*x7280))+(((-1.0)*r11*sj5*x7284)));
evalcond[3]=((1.0)+((r11*x7286))+(((-1.0)*r12*x7284))+(((-1.0)*x7280*x7285)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x7279*x7283))+(((-1.0)*r21*sj5*x7284))+(((-1.0)*r22*x7285)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x7279*x7282))+(((-1.0)*x7281*x7284))+(((-1.0)*r02*x7285)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7287=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x7287;
j4eval[1]=IKsign(x7287);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7288=((1.0)*cj5);
IkReal x7289=((((-1.0)*r21*x7288))+(((-1.0)*r20*sj5)));
j4eval[0]=x7289;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x7288))))));
j4eval[2]=IKsign(x7289);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7290=cj5*cj5;
IkReal x7291=r11*r11;
IkReal x7292=(cj5*r10);
IkReal x7293=(r11*sj5);
IkReal x7294=((((-1.0)*x7291))+(((-1.0)*x7290*(r10*r10)))+((x7290*x7291))+(((-1.0)*(r12*r12)))+(((2.0)*x7292*x7293)));
j4eval[0]=x7294;
j4eval[1]=((IKabs(r12))+(IKabs((x7292+(((-1.0)*x7293))))));
j4eval[2]=IKsign(x7294);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7295=cj5*cj5;
IkReal x7296=r11*r11;
IkReal x7297=(cj5*r10);
IkReal x7298=(r11*sj5);
CheckValue<IkReal> x7299=IKPowWithIntegerCheck(IKsign(((((-1.0)*x7296))+(((2.0)*x7297*x7298))+((x7295*x7296))+(((-1.0)*(r12*r12)))+(((-1.0)*x7295*(r10*r10))))),-1);
if(!x7299.valid){
continue;
}
CheckValue<IkReal> x7300 = IKatan2WithCheck(IkReal((x7297+(((-1.0)*x7298)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x7300.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7299.value)))+(x7300.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7301=IKsin(j4);
IkReal x7302=IKcos(j4);
IkReal x7303=(cj5*r10);
IkReal x7304=(r01*sj5);
IkReal x7305=(cj5*r00);
IkReal x7306=(cj5*r20);
IkReal x7307=((1.0)*x7302);
IkReal x7308=((1.0)*x7301);
IkReal x7309=(sj5*x7301);
evalcond[0]=(((r21*x7309))+(((-1.0)*r22*x7307))+(((-1.0)*x7306*x7308)));
evalcond[1]=((((-1.0)*r02*x7307))+((x7301*x7304))+(((-1.0)*x7305*x7308)));
evalcond[2]=(((x7302*x7303))+(((-1.0)*r12*x7308))+(((-1.0)*r11*sj5*x7307)));
evalcond[3]=((-1.0)+(((-1.0)*x7303*x7308))+(((-1.0)*r12*x7307))+((r11*x7309)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r21*sj5*x7307))+((x7302*x7306))+((cj1*sj2))+(((-1.0)*r22*x7308)));
evalcond[5]=((((-1.0)*r02*x7308))+((x7302*x7305))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*x7304*x7307)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7310=((1.0)*cj5);
CheckValue<IkReal> x7311 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x7310)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7311.valid){
continue;
}
CheckValue<IkReal> x7312=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x7310))+(((-1.0)*r20*sj5)))),-1);
if(!x7312.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7311.value)+(((1.5707963267949)*(x7312.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7313=IKsin(j4);
IkReal x7314=IKcos(j4);
IkReal x7315=(cj5*r10);
IkReal x7316=(r01*sj5);
IkReal x7317=(cj5*r00);
IkReal x7318=(cj5*r20);
IkReal x7319=((1.0)*x7314);
IkReal x7320=((1.0)*x7313);
IkReal x7321=(sj5*x7313);
evalcond[0]=(((r21*x7321))+(((-1.0)*x7318*x7320))+(((-1.0)*r22*x7319)));
evalcond[1]=((((-1.0)*x7317*x7320))+((x7313*x7316))+(((-1.0)*r02*x7319)));
evalcond[2]=(((x7314*x7315))+(((-1.0)*r11*sj5*x7319))+(((-1.0)*r12*x7320)));
evalcond[3]=((-1.0)+(((-1.0)*x7315*x7320))+(((-1.0)*r12*x7319))+((r11*x7321)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x7320))+((cj1*sj2))+((x7314*x7318))+(((-1.0)*r21*sj5*x7319)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*x7316*x7319))+((x7314*x7317))+((cj1*cj2))+(((-1.0)*r02*x7320)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7322 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7322.valid){
continue;
}
CheckValue<IkReal> x7323=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x7323.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7322.value)+(((1.5707963267949)*(x7323.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7324=IKsin(j4);
IkReal x7325=IKcos(j4);
IkReal x7326=(cj5*r10);
IkReal x7327=(r01*sj5);
IkReal x7328=(cj5*r00);
IkReal x7329=(cj5*r20);
IkReal x7330=((1.0)*x7325);
IkReal x7331=((1.0)*x7324);
IkReal x7332=(sj5*x7324);
evalcond[0]=(((r21*x7332))+(((-1.0)*x7329*x7331))+(((-1.0)*r22*x7330)));
evalcond[1]=((((-1.0)*r02*x7330))+(((-1.0)*x7328*x7331))+((x7324*x7327)));
evalcond[2]=((((-1.0)*r12*x7331))+((x7325*x7326))+(((-1.0)*r11*sj5*x7330)));
evalcond[3]=((-1.0)+(((-1.0)*x7326*x7331))+(((-1.0)*r12*x7330))+((r11*x7332)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r21*sj5*x7330))+((cj1*sj2))+((x7325*x7329))+(((-1.0)*r22*x7331)));
evalcond[5]=((((-1.0)*r02*x7331))+(((-1.0)*x7327*x7330))+(((-1.0)*sj1*sj2))+((x7325*x7328))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7333=((-1.0)*r00);
IkReal x7335 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x7335)==0){
continue;
}
IkReal x7334=pow(x7335,-0.5);
CheckValue<IkReal> x7336 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x7333),IKFAST_ATAN2_MAGTHRESH);
if(!x7336.valid){
continue;
}
IkReal gconst144=((-1.0)*(x7336.value));
IkReal gconst145=(r01*x7334);
IkReal gconst146=(x7333*x7334);
CheckValue<IkReal> x7337 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7337.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7337.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x7338=((-1.0)*r00);
IkReal x7339=x7334;
CheckValue<IkReal> x7341 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x7338),IKFAST_ATAN2_MAGTHRESH);
if(!x7341.valid){
continue;
}
IkReal x7340=((-1.0)*(x7341.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst145;
cj5=gconst146;
j5=x7340;
IkReal gconst144=x7340;
IkReal gconst145=(r01*x7339);
IkReal gconst146=(x7338*x7339);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7342=((1.0)*sj0);
IkReal x7343=((1.0)*gconst145);
CheckValue<IkReal> x7344 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x7342))+(((-1.0)*cj0*r02)))),IkReal((((cj0*gconst146*r00))+((gconst146*r10*sj0))+(((-1.0)*cj0*r01*x7343))+(((-1.0)*gconst145*r11*x7342)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7344.valid){
continue;
}
CheckValue<IkReal> x7345=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst146*r21))+(((-1.0)*r20*x7343)))),-1);
if(!x7345.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7344.value)+(((1.5707963267949)*(x7345.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7346=IKsin(j4);
IkReal x7347=IKcos(j4);
IkReal x7348=(gconst146*r10);
IkReal x7349=(sj1*sj2);
IkReal x7350=(gconst146*r20);
IkReal x7351=(gconst146*r00);
IkReal x7352=((1.0)*x7347);
IkReal x7353=((1.0)*x7346);
IkReal x7354=(gconst145*x7346);
IkReal x7355=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*r22*x7352))+((r21*x7354))+(((-1.0)*x7350*x7353)));
evalcond[1]=(cj0+(((-1.0)*r12*x7352))+((r11*x7354))+(((-1.0)*x7348*x7353)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x7351*x7353))+((r01*x7354))+(((-1.0)*r02*x7352)));
evalcond[3]=((((-1.0)*r22*x7353))+((cj2*sj1))+((x7347*x7350))+((cj1*sj2))+(((-1.0)*gconst145*r21*x7352)));
evalcond[4]=((((-1.0)*cj0*x7355))+((x7347*x7351))+(((-1.0)*gconst145*r01*x7352))+(((-1.0)*r02*x7353))+((cj0*x7349)));
evalcond[5]=((((-1.0)*r12*x7353))+(((-1.0)*sj0*x7355))+((x7347*x7348))+((sj0*x7349))+(((-1.0)*gconst145*r11*x7352)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7356=((1.0)*gconst146);
CheckValue<IkReal> x7357=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x7356))+(((-1.0)*gconst145*r10)))),-1);
if(!x7357.valid){
continue;
}
CheckValue<IkReal> x7358 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst145*r21*sj0))+(((-1.0)*r20*sj0*x7356)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7358.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7357.value)))+(x7358.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7359=IKsin(j4);
IkReal x7360=IKcos(j4);
IkReal x7361=(gconst146*r10);
IkReal x7362=(sj1*sj2);
IkReal x7363=(gconst146*r20);
IkReal x7364=(gconst146*r00);
IkReal x7365=((1.0)*x7360);
IkReal x7366=((1.0)*x7359);
IkReal x7367=(gconst145*x7359);
IkReal x7368=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*x7363*x7366))+((r21*x7367))+(((-1.0)*r22*x7365)));
evalcond[1]=(((r11*x7367))+cj0+(((-1.0)*r12*x7365))+(((-1.0)*x7361*x7366)));
evalcond[2]=((((-1.0)*sj0))+((r01*x7367))+(((-1.0)*x7364*x7366))+(((-1.0)*r02*x7365)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst145*r21*x7365))+((cj1*sj2))+(((-1.0)*r22*x7366))+((x7360*x7363)));
evalcond[4]=((((-1.0)*gconst145*r01*x7365))+((cj0*x7362))+((x7360*x7364))+(((-1.0)*r02*x7366))+(((-1.0)*cj0*x7368)));
evalcond[5]=(((sj0*x7362))+(((-1.0)*r12*x7366))+(((-1.0)*gconst145*r11*x7365))+((x7360*x7361))+(((-1.0)*sj0*x7368)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7369=((-1.0)*r01);
IkReal x7371 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x7371)==0){
continue;
}
IkReal x7370=pow(x7371,-0.5);
CheckValue<IkReal> x7372 = IKatan2WithCheck(IkReal(x7369),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7372.valid){
continue;
}
IkReal gconst147=((3.14159265358979)+(((-1.0)*(x7372.value))));
IkReal gconst148=(x7369*x7370);
IkReal gconst149=((1.0)*r00*x7370);
CheckValue<IkReal> x7373 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7373.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x7373.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x7374=((-1.0)*r01);
CheckValue<IkReal> x7377 = IKatan2WithCheck(IkReal(x7374),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7377.valid){
continue;
}
IkReal x7375=((1.0)*(x7377.value));
IkReal x7376=x7370;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x7375)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x7375)));
IkReal gconst148=(x7374*x7376);
IkReal gconst149=((1.0)*r00*x7376);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x7378=((-1.0)*r01);
CheckValue<IkReal> x7381 = IKatan2WithCheck(IkReal(x7378),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7381.valid){
continue;
}
IkReal x7379=((1.0)*(x7381.value));
IkReal x7380=x7370;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x7379)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x7379)));
IkReal gconst148=(x7378*x7380);
IkReal gconst149=((1.0)*r00*x7380);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7382=((-1.0)*r01);
CheckValue<IkReal> x7385 = IKatan2WithCheck(IkReal(x7382),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7385.valid){
continue;
}
IkReal x7383=((1.0)*(x7385.value));
IkReal x7384=x7370;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x7383)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x7383)));
IkReal gconst148=(x7382*x7384);
IkReal gconst149=((1.0)*r00*x7384);
IkReal x7386=r02*r02;
IkReal x7387=(r12*sj0);
IkReal x7388=((1.0)*cj0);
IkReal x7389=x7370;
j4eval[0]=((IKabs(((((-1.0)*r02*x7388))+(((-1.0)*x7387)))))+(IKabs((((cj0*x7386*x7389))+((r02*x7387*x7389))+(((-1.0)*x7388*x7389))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7390=((1.0)*sj0);
IkReal x7391=((1.0)*gconst148);
CheckValue<IkReal> x7392=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst149*r21))+(((-1.0)*r20*x7391)))),-1);
if(!x7392.valid){
continue;
}
CheckValue<IkReal> x7393 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x7390))+(((-1.0)*cj0*r02)))),IkReal((((gconst149*r10*sj0))+(((-1.0)*cj0*r01*x7391))+((cj0*gconst149*r00))+(((-1.0)*gconst148*r11*x7390)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7393.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7392.value)))+(x7393.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7394=IKsin(j4);
IkReal x7395=IKcos(j4);
IkReal x7396=(gconst148*r11);
IkReal x7397=(sj1*sj2);
IkReal x7398=((1.0)*x7395);
IkReal x7399=(gconst149*x7395);
IkReal x7400=(gconst148*x7394);
IkReal x7401=((1.0)*cj1*cj2);
IkReal x7402=((1.0)*x7394);
evalcond[0]=((((-1.0)*r22*x7398))+((r21*x7400))+(((-1.0)*gconst149*r20*x7402)));
evalcond[1]=((((-1.0)*r12*x7398))+cj0+(((-1.0)*gconst149*r10*x7402))+((x7394*x7396)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x7398))+((r01*x7400))+(((-1.0)*gconst149*r00*x7402)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst148*r21*x7398))+(((-1.0)*r22*x7402))+((r20*x7399)));
evalcond[4]=((((-1.0)*gconst148*r01*x7398))+((r00*x7399))+(((-1.0)*cj0*x7401))+(((-1.0)*r02*x7402))+((cj0*x7397)));
evalcond[5]=((((-1.0)*r12*x7402))+((r10*x7399))+(((-1.0)*x7396*x7398))+(((-1.0)*sj0*x7401))+((sj0*x7397)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7403=((1.0)*gconst149);
CheckValue<IkReal> x7404=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x7403))+(((-1.0)*gconst148*r10)))),-1);
if(!x7404.valid){
continue;
}
CheckValue<IkReal> x7405 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x7403))+((gconst148*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7405.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7404.value)))+(x7405.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7406=IKsin(j4);
IkReal x7407=IKcos(j4);
IkReal x7408=(gconst148*r11);
IkReal x7409=(sj1*sj2);
IkReal x7410=((1.0)*x7407);
IkReal x7411=(gconst149*x7407);
IkReal x7412=(gconst148*x7406);
IkReal x7413=((1.0)*cj1*cj2);
IkReal x7414=((1.0)*x7406);
evalcond[0]=(((r21*x7412))+(((-1.0)*r22*x7410))+(((-1.0)*gconst149*r20*x7414)));
evalcond[1]=((((-1.0)*r12*x7410))+cj0+((x7406*x7408))+(((-1.0)*gconst149*r10*x7414)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*gconst149*r00*x7414))+((r01*x7412))+(((-1.0)*r02*x7410)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst148*r21*x7410))+((r20*x7411))+((cj1*sj2))+(((-1.0)*r22*x7414)));
evalcond[4]=((((-1.0)*gconst148*r01*x7410))+((r00*x7411))+(((-1.0)*cj0*x7413))+(((-1.0)*r02*x7414))+((cj0*x7409)));
evalcond[5]=((((-1.0)*r12*x7414))+(((-1.0)*x7408*x7410))+(((-1.0)*sj0*x7413))+((r10*x7411))+((sj0*x7409)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7415=((1.0)*gconst149);
CheckValue<IkReal> x7416=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7415))+(((-1.0)*gconst148*r00)))),-1);
if(!x7416.valid){
continue;
}
CheckValue<IkReal> x7417 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst148*r21))+(((-1.0)*cj0*r20*x7415)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7417.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7416.value)))+(x7417.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7418=IKsin(j4);
IkReal x7419=IKcos(j4);
IkReal x7420=(gconst148*r11);
IkReal x7421=(sj1*sj2);
IkReal x7422=((1.0)*x7419);
IkReal x7423=(gconst149*x7419);
IkReal x7424=(gconst148*x7418);
IkReal x7425=((1.0)*cj1*cj2);
IkReal x7426=((1.0)*x7418);
evalcond[0]=((((-1.0)*r22*x7422))+((r21*x7424))+(((-1.0)*gconst149*r20*x7426)));
evalcond[1]=(cj0+(((-1.0)*gconst149*r10*x7426))+((x7418*x7420))+(((-1.0)*r12*x7422)));
evalcond[2]=(((r01*x7424))+(((-1.0)*sj0))+(((-1.0)*gconst149*r00*x7426))+(((-1.0)*r02*x7422)));
evalcond[3]=((((-1.0)*gconst148*r21*x7422))+((cj2*sj1))+(((-1.0)*r22*x7426))+((cj1*sj2))+((r20*x7423)));
evalcond[4]=((((-1.0)*gconst148*r01*x7422))+((r00*x7423))+(((-1.0)*cj0*x7425))+((cj0*x7421))+(((-1.0)*r02*x7426)));
evalcond[5]=((((-1.0)*r12*x7426))+((r10*x7423))+(((-1.0)*sj0*x7425))+((sj0*x7421))+(((-1.0)*x7420*x7422)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x7427=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x7427;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x7427);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x7428=((1.0)*cj5);
IkReal x7429=((((-1.0)*r10*sj5))+(((-1.0)*r11*x7428)));
j4eval[0]=x7429;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x7428))))));
j4eval[2]=IKsign(x7429);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x7430=cj5*cj5;
IkReal x7431=r01*r01;
IkReal x7432=(r01*sj5);
IkReal x7433=(cj5*r00);
IkReal x7434=((((-1.0)*x7431))+(((-1.0)*(r02*r02)))+(((2.0)*x7432*x7433))+((x7430*x7431))+(((-1.0)*x7430*(r00*r00))));
j4eval[0]=x7434;
j4eval[1]=IKsign(x7434);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x7432))+x7433))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7435=cj5*cj5;
IkReal x7436=r01*r01;
IkReal x7437=(r01*sj5);
IkReal x7438=(cj5*r00);
CheckValue<IkReal> x7439 = IKatan2WithCheck(IkReal(((((-1.0)*x7437))+x7438)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x7439.valid){
continue;
}
CheckValue<IkReal> x7440=IKPowWithIntegerCheck(IKsign(((((-1.0)*x7436))+(((2.0)*x7437*x7438))+(((-1.0)*x7435*(r00*r00)))+((x7435*x7436))+(((-1.0)*(r02*r02))))),-1);
if(!x7440.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7439.value)+(((1.5707963267949)*(x7440.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7441=IKsin(j4);
IkReal x7442=IKcos(j4);
IkReal x7443=(cj5*r10);
IkReal x7444=(r01*sj5);
IkReal x7445=(cj5*r00);
IkReal x7446=(cj5*r20);
IkReal x7447=((1.0)*x7442);
IkReal x7448=((1.0)*x7441);
IkReal x7449=(sj5*x7441);
evalcond[0]=((((-1.0)*x7446*x7448))+((r21*x7449))+(((-1.0)*r22*x7447)));
evalcond[1]=(((r11*x7449))+(((-1.0)*r12*x7447))+(((-1.0)*x7443*x7448)));
evalcond[2]=(((x7442*x7445))+(((-1.0)*r02*x7448))+(((-1.0)*x7444*x7447)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x7447))+(((-1.0)*x7445*x7448))+((x7441*x7444)));
evalcond[4]=(((cj2*sj1))+((x7442*x7446))+((cj1*sj2))+(((-1.0)*r21*sj5*x7447))+(((-1.0)*r22*x7448)));
evalcond[5]=((((-1.0)*r11*sj5*x7447))+((x7442*x7443))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x7448)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7450=((1.0)*cj5);
CheckValue<IkReal> x7451 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x7450)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7451.valid){
continue;
}
CheckValue<IkReal> x7452=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x7450)))),-1);
if(!x7452.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7451.value)+(((1.5707963267949)*(x7452.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7453=IKsin(j4);
IkReal x7454=IKcos(j4);
IkReal x7455=(cj5*r10);
IkReal x7456=(r01*sj5);
IkReal x7457=(cj5*r00);
IkReal x7458=(cj5*r20);
IkReal x7459=((1.0)*x7454);
IkReal x7460=((1.0)*x7453);
IkReal x7461=(sj5*x7453);
evalcond[0]=(((r21*x7461))+(((-1.0)*x7458*x7460))+(((-1.0)*r22*x7459)));
evalcond[1]=((((-1.0)*x7455*x7460))+((r11*x7461))+(((-1.0)*r12*x7459)));
evalcond[2]=((((-1.0)*x7456*x7459))+((x7454*x7457))+(((-1.0)*r02*x7460)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x7459))+((x7453*x7456))+(((-1.0)*x7457*x7460)));
evalcond[4]=(((cj2*sj1))+((x7454*x7458))+((cj1*sj2))+(((-1.0)*r22*x7460))+(((-1.0)*r21*sj5*x7459)));
evalcond[5]=(((x7454*x7455))+(((-1.0)*r11*sj5*x7459))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x7460)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7462=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x7462.valid){
continue;
}
CheckValue<IkReal> x7463 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7463.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7462.value)))+(x7463.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7464=IKsin(j4);
IkReal x7465=IKcos(j4);
IkReal x7466=(cj5*r10);
IkReal x7467=(r01*sj5);
IkReal x7468=(cj5*r00);
IkReal x7469=(cj5*r20);
IkReal x7470=((1.0)*x7465);
IkReal x7471=((1.0)*x7464);
IkReal x7472=(sj5*x7464);
evalcond[0]=((((-1.0)*r22*x7470))+((r21*x7472))+(((-1.0)*x7469*x7471)));
evalcond[1]=((((-1.0)*x7466*x7471))+((r11*x7472))+(((-1.0)*r12*x7470)));
evalcond[2]=((((-1.0)*r02*x7471))+(((-1.0)*x7467*x7470))+((x7465*x7468)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x7470))+((x7464*x7467))+(((-1.0)*x7468*x7471)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x7471))+(((-1.0)*r21*sj5*x7470))+((x7465*x7469)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r11*sj5*x7470))+((x7465*x7466))+(((-1.0)*r12*x7471)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x7473=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x7473;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x7473);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x7474=((1.0)*cj5);
IkReal x7475=((((-1.0)*r21*x7474))+(((-1.0)*r20*sj5)));
j4eval[0]=x7475;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x7474))))));
j4eval[2]=IKsign(x7475);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x7476=cj5*cj5;
IkReal x7477=r01*r01;
IkReal x7478=(cj5*r00);
IkReal x7479=(r01*sj5);
IkReal x7480=((((-1.0)*x7476*x7477))+(((-2.0)*x7478*x7479))+(r02*r02)+x7477+((x7476*(r00*r00))));
j4eval[0]=x7480;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*x7479))+x7478))));
j4eval[2]=IKsign(x7480);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7481=cj5*cj5;
IkReal x7482=r01*r01;
IkReal x7483=(r01*sj5);
IkReal x7484=(cj5*r00);
CheckValue<IkReal> x7485 = IKatan2WithCheck(IkReal(((((-1.0)*x7483))+x7484)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x7485.valid){
continue;
}
CheckValue<IkReal> x7486=IKPowWithIntegerCheck(IKsign(((r02*r02)+x7482+((x7481*(r00*r00)))+(((-2.0)*x7483*x7484))+(((-1.0)*x7481*x7482)))),-1);
if(!x7486.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7485.value)+(((1.5707963267949)*(x7486.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7487=IKsin(j4);
IkReal x7488=IKcos(j4);
IkReal x7489=(cj5*r10);
IkReal x7490=(r01*sj5);
IkReal x7491=(cj5*r00);
IkReal x7492=(cj5*r20);
IkReal x7493=((1.0)*x7488);
IkReal x7494=((1.0)*x7487);
IkReal x7495=(sj5*x7487);
evalcond[0]=((((-1.0)*r22*x7493))+(((-1.0)*x7492*x7494))+((r21*x7495)));
evalcond[1]=(((r11*x7495))+(((-1.0)*x7489*x7494))+(((-1.0)*r12*x7493)));
evalcond[2]=(((x7488*x7491))+(((-1.0)*x7490*x7493))+(((-1.0)*r02*x7494)));
evalcond[3]=((1.0)+((x7487*x7490))+(((-1.0)*x7491*x7494))+(((-1.0)*r02*x7493)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*sj5*x7493))+((x7488*x7492))+(((-1.0)*r22*x7494)));
evalcond[5]=((((-1.0)*sj1*sj2))+((x7488*x7489))+((cj1*cj2))+(((-1.0)*r12*x7494))+(((-1.0)*r11*sj5*x7493)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7496=((1.0)*cj5);
CheckValue<IkReal> x7497=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x7496))+(((-1.0)*r20*sj5)))),-1);
if(!x7497.valid){
continue;
}
CheckValue<IkReal> x7498 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x7496)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7498.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7497.value)))+(x7498.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7499=IKsin(j4);
IkReal x7500=IKcos(j4);
IkReal x7501=(cj5*r10);
IkReal x7502=(r01*sj5);
IkReal x7503=(cj5*r00);
IkReal x7504=(cj5*r20);
IkReal x7505=((1.0)*x7500);
IkReal x7506=((1.0)*x7499);
IkReal x7507=(sj5*x7499);
evalcond[0]=((((-1.0)*r22*x7505))+(((-1.0)*x7504*x7506))+((r21*x7507)));
evalcond[1]=((((-1.0)*x7501*x7506))+((r11*x7507))+(((-1.0)*r12*x7505)));
evalcond[2]=((((-1.0)*x7502*x7505))+(((-1.0)*r02*x7506))+((x7500*x7503)));
evalcond[3]=((1.0)+(((-1.0)*x7503*x7506))+((x7499*x7502))+(((-1.0)*r02*x7505)));
evalcond[4]=((((-1.0)*r22*x7506))+((cj2*sj1))+((cj1*sj2))+((x7500*x7504))+(((-1.0)*r21*sj5*x7505)));
evalcond[5]=((((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*r11*sj5*x7505))+((x7500*x7501))+(((-1.0)*r12*x7506)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7508 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7508.valid){
continue;
}
CheckValue<IkReal> x7509=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x7509.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7508.value)+(((1.5707963267949)*(x7509.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7510=IKsin(j4);
IkReal x7511=IKcos(j4);
IkReal x7512=(cj5*r10);
IkReal x7513=(r01*sj5);
IkReal x7514=(cj5*r00);
IkReal x7515=(cj5*r20);
IkReal x7516=((1.0)*x7511);
IkReal x7517=((1.0)*x7510);
IkReal x7518=(sj5*x7510);
evalcond[0]=((((-1.0)*x7515*x7517))+((r21*x7518))+(((-1.0)*r22*x7516)));
evalcond[1]=(((r11*x7518))+(((-1.0)*x7512*x7517))+(((-1.0)*r12*x7516)));
evalcond[2]=((((-1.0)*r02*x7517))+((x7511*x7514))+(((-1.0)*x7513*x7516)));
evalcond[3]=((1.0)+(((-1.0)*r02*x7516))+((x7510*x7513))+(((-1.0)*x7514*x7517)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x7511*x7515))+(((-1.0)*r21*sj5*x7516))+(((-1.0)*r22*x7517)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r11*sj5*x7516))+((x7511*x7512))+((cj1*cj2))+(((-1.0)*r12*x7517)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7519=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x7519);
rxp1_1=(px*r21);
rxp1_2=(r11*x7519);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7520=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x7520);
rxp1_1=(px*r21);
rxp1_2=(r11*x7520);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7521=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x7521);
rxp1_1=(px*r21);
rxp1_2=(r11*x7521);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x7524=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x7524.valid){
continue;
}
IkReal x7522=x7524.value;
IkReal x7523=(sj0*x7522);
cj4array[0]=((((-1.0)*sj1*sj2*x7523))+((cj1*cj2*x7523)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x7525=IKsin(j4);
IkReal x7526=IKcos(j4);
IkReal x7527=(r21*sj5);
IkReal x7528=(cj5*r20);
IkReal x7529=((1.0)*x7525);
IkReal x7530=((1.0)*x7526);
evalcond[0]=((-1.0)*r02*x7525);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x7530)));
evalcond[2]=(((x7525*x7527))+(((-1.0)*x7528*x7529)));
evalcond[3]=(((r11*sj5*x7525))+(((-1.0)*cj5*r10*x7529)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x7527*x7530))+((x7526*x7528))+((cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x7533=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x7533.valid){
continue;
}
IkReal x7531=x7533.value;
IkReal x7532=((1.0)*x7531);
cj4array[0]=((((-1.0)*cj1*sj2*x7532))+(((-1.0)*cj2*sj1*x7532)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x7534=IKsin(j4);
IkReal x7535=IKcos(j4);
IkReal x7536=(r11*sj5);
IkReal x7537=((1.0)*sj0);
IkReal x7538=((1.0)*x7535);
IkReal x7539=((1.0)*cj5*x7534);
evalcond[0]=((-1.0)*r02*x7534);
evalcond[1]=((((-1.0)*x7537))+(((-1.0)*r02*x7538)));
evalcond[2]=(((r21*sj5*x7534))+(((-1.0)*r20*x7539)));
evalcond[3]=(((x7534*x7536))+(((-1.0)*r10*x7539)));
evalcond[4]=((((-1.0)*cj1*cj2*x7537))+((cj5*r10*x7535))+(((-1.0)*x7536*x7538))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x7540=IKPowWithIntegerCheck(r02,-1);
if(!x7540.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x7540.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x7541=IKsin(j4);
IkReal x7542=IKcos(j4);
IkReal x7543=(cj5*x7542);
IkReal x7544=(sj5*x7541);
IkReal x7545=((1.0)*sj5*x7542);
IkReal x7546=((1.0)*cj5*x7541);
evalcond[0]=((-1.0)*r02*x7541);
evalcond[1]=(((r21*x7544))+(((-1.0)*r20*x7546)));
evalcond[2]=((((-1.0)*r10*x7546))+((r11*x7544)));
evalcond[3]=(((r20*x7543))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*x7545)));
evalcond[4]=(((r10*x7543))+(((-1.0)*cj1*cj2*sj0))+(((-1.0)*r11*x7545))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7547=((1.0)*sj0);
IkReal x7548=((1.0)*cj0);
CheckValue<IkReal> x7549 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x7547))+(((-1.0)*r02*x7548)))),IkReal(((((-1.0)*r11*sj5*x7547))+((cj0*cj5*r00))+(((-1.0)*r01*sj5*x7548))+((cj5*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7549.valid){
continue;
}
CheckValue<IkReal> x7550=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x7550.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7549.value)+(((1.5707963267949)*(x7550.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7551=IKsin(j4);
IkReal x7552=IKcos(j4);
IkReal x7553=(cj5*r10);
IkReal x7554=(sj1*sj2);
IkReal x7555=(r01*sj5);
IkReal x7556=(cj5*r00);
IkReal x7557=(cj5*r20);
IkReal x7558=((1.0)*x7552);
IkReal x7559=((1.0)*cj1*cj2);
IkReal x7560=((1.0)*x7551);
IkReal x7561=(sj5*x7551);
evalcond[0]=((((-1.0)*x7557*x7560))+((r21*x7561))+(((-1.0)*r22*x7558)));
evalcond[1]=(cj0+((r11*x7561))+(((-1.0)*r12*x7558))+(((-1.0)*x7553*x7560)));
evalcond[2]=((((-1.0)*sj0))+((x7551*x7555))+(((-1.0)*x7556*x7560))+(((-1.0)*r02*x7558)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x7560))+((cj1*sj2))+((x7552*x7557))+(((-1.0)*r21*sj5*x7558)));
evalcond[4]=((((-1.0)*x7555*x7558))+(((-1.0)*r02*x7560))+((cj0*x7554))+(((-1.0)*cj0*x7559))+((x7552*x7556)));
evalcond[5]=((((-1.0)*r11*sj5*x7558))+((sj0*x7554))+((x7552*x7553))+(((-1.0)*sj0*x7559))+(((-1.0)*r12*x7560)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7562=((1.0)*cj5);
CheckValue<IkReal> x7563=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x7562)))),-1);
if(!x7563.valid){
continue;
}
CheckValue<IkReal> x7564 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x7562)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7564.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7563.value)))+(x7564.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7565=IKsin(j4);
IkReal x7566=IKcos(j4);
IkReal x7567=(cj5*r10);
IkReal x7568=(sj1*sj2);
IkReal x7569=(r01*sj5);
IkReal x7570=(cj5*r00);
IkReal x7571=(cj5*r20);
IkReal x7572=((1.0)*x7566);
IkReal x7573=((1.0)*cj1*cj2);
IkReal x7574=((1.0)*x7565);
IkReal x7575=(sj5*x7565);
evalcond[0]=((((-1.0)*x7571*x7574))+(((-1.0)*r22*x7572))+((r21*x7575)));
evalcond[1]=((((-1.0)*x7567*x7574))+cj0+(((-1.0)*r12*x7572))+((r11*x7575)));
evalcond[2]=((((-1.0)*sj0))+((x7565*x7569))+(((-1.0)*r02*x7572))+(((-1.0)*x7570*x7574)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((x7566*x7571))+(((-1.0)*r22*x7574))+(((-1.0)*r21*sj5*x7572)));
evalcond[4]=(((cj0*x7568))+((x7566*x7570))+(((-1.0)*r02*x7574))+(((-1.0)*x7569*x7572))+(((-1.0)*cj0*x7573)));
evalcond[5]=(((x7566*x7567))+(((-1.0)*sj0*x7573))+((sj0*x7568))+(((-1.0)*r11*sj5*x7572))+(((-1.0)*r12*x7574)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7576=((1.0)*cj5);
CheckValue<IkReal> x7577=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7576))+(((-1.0)*r00*sj5)))),-1);
if(!x7577.valid){
continue;
}
CheckValue<IkReal> x7578 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7576)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7578.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7577.value)))+(x7578.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7579=IKsin(j4);
IkReal x7580=IKcos(j4);
IkReal x7581=(cj5*r10);
IkReal x7582=(sj1*sj2);
IkReal x7583=(r01*sj5);
IkReal x7584=(cj5*r00);
IkReal x7585=(cj5*r20);
IkReal x7586=((1.0)*x7580);
IkReal x7587=((1.0)*cj1*cj2);
IkReal x7588=((1.0)*x7579);
IkReal x7589=(sj5*x7579);
evalcond[0]=((((-1.0)*x7585*x7588))+(((-1.0)*r22*x7586))+((r21*x7589)));
evalcond[1]=(cj0+(((-1.0)*x7581*x7588))+(((-1.0)*r12*x7586))+((r11*x7589)));
evalcond[2]=((((-1.0)*x7584*x7588))+(((-1.0)*sj0))+((x7579*x7583))+(((-1.0)*r02*x7586)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r21*sj5*x7586))+((cj1*sj2))+(((-1.0)*r22*x7588))+((x7580*x7585)));
evalcond[4]=((((-1.0)*r02*x7588))+((cj0*x7582))+(((-1.0)*cj0*x7587))+(((-1.0)*x7583*x7586))+((x7580*x7584)));
evalcond[5]=((((-1.0)*sj0*x7587))+(((-1.0)*r11*sj5*x7586))+(((-1.0)*r12*x7588))+((sj0*x7582))+((x7580*x7581)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7590=cj5*cj5;
IkReal x7591=r21*r21;
IkReal x7592=(cj2*sj1);
IkReal x7593=(cj1*sj2);
IkReal x7594=(r21*sj5);
IkReal x7595=((1.0)*cj5*r20);
CheckValue<IkReal> x7596 = IKatan2WithCheck(IkReal((((r22*x7593))+((r22*x7592)))),IkReal(((((-1.0)*x7592*x7595))+(((-1.0)*x7593*x7595))+((x7593*x7594))+((x7592*x7594)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7596.valid){
continue;
}
CheckValue<IkReal> x7597=IKPowWithIntegerCheck(IKsign(((((-1.0)*x7590*x7591))+(r22*r22)+((x7590*(r20*r20)))+(((-2.0)*cj5*r20*x7594))+x7591)),-1);
if(!x7597.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7596.value)+(((1.5707963267949)*(x7597.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x7598=IKsin(j4);
IkReal x7599=IKcos(j4);
IkReal x7600=(r21*sj5);
IkReal x7601=(cj5*r20);
IkReal x7602=((1.0)*x7599);
IkReal x7603=((1.0)*x7598);
evalcond[0]=(((x7598*x7600))+(((-1.0)*r22*x7602))+(((-1.0)*x7601*x7603)));
evalcond[1]=(((x7599*x7601))+((cj2*sj1))+(((-1.0)*r22*x7603))+((cj1*sj2))+(((-1.0)*x7600*x7602)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7604=(cj5*sj4);
IkReal x7605=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+((r01*x7605))+(((-1.0)*r00*x7604)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x7605))+((r10*x7604))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+((r01*x7605))+(((-1.0)*r00*x7604))))+IKsqr(((((-1.0)*r11*x7605))+((r10*x7604))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+((r01*x7605))+(((-1.0)*r00*x7604))), ((((-1.0)*r11*x7605))+((r10*x7604))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x7606=IKcos(j0);
IkReal x7607=IKsin(j0);
IkReal x7608=(cj4*cj5);
IkReal x7609=((0.1)*sj5);
IkReal x7610=((0.392)*sj1);
IkReal x7611=(cj5*r11);
IkReal x7612=((0.425)*cj1);
IkReal x7613=((1.0)*cj1);
IkReal x7614=(r11*sj5);
IkReal x7615=((1.0)*sj5);
IkReal x7616=((1.0)*sj4);
IkReal x7617=((0.392)*cj1);
IkReal x7618=((1.0)*sj1);
IkReal x7619=(cj5*r01);
IkReal x7620=((1.0)*cj4);
IkReal x7621=((1.4e-7)*sj1);
IkReal x7622=(sj2*x7607);
IkReal x7623=(sj2*x7606);
IkReal x7624=(cj2*x7606);
IkReal x7625=(cj2*x7607);
evalcond[0]=(((sj4*x7614))+(((-1.0)*r12*x7620))+(((-1.0)*cj5*r10*x7616))+x7606);
evalcond[1]=(((r01*sj4*sj5))+(((-1.0)*x7607))+(((-1.0)*r02*x7620))+(((-1.0)*cj5*r00*x7616)));
evalcond[2]=((((-1.0)*r00*x7615))+(((-1.0)*x7619))+(((-1.0)*x7618*x7624))+(((-1.0)*x7613*x7623)));
evalcond[3]=((((-1.0)*x7611))+(((-1.0)*x7618*x7625))+(((-1.0)*r10*x7615))+(((-1.0)*x7613*x7622)));
evalcond[4]=(((r00*x7608))+((sj1*x7623))+(((-1.0)*r02*x7616))+(((-1.0)*cj4*r01*x7615))+(((-1.0)*x7613*x7624)));
evalcond[5]=((((-1.0)*r12*x7616))+(((-1.0)*x7614*x7620))+((sj1*x7622))+((r10*x7608))+(((-1.0)*x7613*x7625)));
evalcond[6]=(((x7617*x7624))+(((-1.0)*x7610*x7623))+(((-0.134)*x7607))+((x7606*x7612))+(((-1.0)*px))+(((-0.1)*x7619))+(((-1.0)*r00*x7609))+((x7606*x7621)));
evalcond[7]=(((x7617*x7625))+(((-1.0)*x7610*x7622))+(((-1.0)*r10*x7609))+((x7607*x7621))+(((0.134)*x7606))+(((-1.0)*py))+(((-0.1)*x7611))+((x7607*x7612)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x7626 = IKatan2WithCheck(IkReal((((cj5*r11))+((r10*sj5)))),IkReal((((r00*sj5))+((cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7626.valid){
continue;
}
CheckValue<IkReal> x7627=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))),-1);
if(!x7627.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x7626.value)+(((1.5707963267949)*(x7627.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7628=IKcos(j0);
IkReal x7629=IKsin(j0);
IkReal x7630=(r00*sj5);
IkReal x7631=((0.392)*sj1);
IkReal x7632=(cj5*r11);
IkReal x7633=((1.0)*cj1);
IkReal x7634=(r10*sj5);
IkReal x7635=((1.0)*cj2);
IkReal x7636=((0.425)*cj1);
IkReal x7637=(cj5*r01);
IkReal x7638=(sj2*x7629);
IkReal x7639=(sj1*x7628);
IkReal x7640=(sj2*x7628);
IkReal x7641=((0.392)*cj1*cj2);
IkReal x7642=(sj1*x7629);
evalcond[0]=((((-1.0)*x7635*x7639))+(((-1.0)*x7633*x7640))+(((-1.0)*x7637))+(((-1.0)*x7630)));
evalcond[1]=((((-1.0)*x7633*x7638))+(((-1.0)*x7635*x7642))+(((-1.0)*x7634))+(((-1.0)*x7632)));
evalcond[2]=(((x7628*x7636))+((x7628*x7641))+(((-1.0)*x7631*x7640))+(((-1.0)*px))+(((-0.134)*x7629))+(((-0.1)*x7630))+(((-0.1)*x7637))+(((1.4e-7)*x7639)));
evalcond[3]=((((0.134)*x7628))+((x7629*x7636))+(((-1.0)*py))+((x7629*x7641))+(((-0.1)*x7632))+(((-0.1)*x7634))+(((-1.0)*x7631*x7638))+(((1.4e-7)*x7642)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x7643=((1.0)*cj5);
IkReal x7644=((((-1.0)*r01*x7643))+(((-1.0)*r00*sj5)));
j4eval[0]=x7644;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x7643))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7644);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x7645=((1.0)*cj5);
IkReal x7646=((((-1.0)*r10*sj5))+(((-1.0)*r11*x7645)));
j4eval[0]=x7646;
j4eval[1]=((IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x7645)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x7646);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x7647=((1.0)*sj0);
IkReal x7648=((1.0)*cj0);
IkReal x7649=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x7649;
j4eval[1]=((IKabs(((((-1.0)*r02*x7648))+(((-1.0)*r12*x7647)))))+(IKabs((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x7648))+(((-1.0)*r11*sj5*x7647))))));
j4eval[2]=IKsign(x7649);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x7650=((-1.0)*r20);
IkReal x7652 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x7652)==0){
continue;
}
IkReal x7651=pow(x7652,-0.5);
CheckValue<IkReal> x7653 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7650),IKFAST_ATAN2_MAGTHRESH);
if(!x7653.valid){
continue;
}
IkReal gconst132=((-1.0)*(x7653.value));
IkReal gconst133=(r21*x7651);
IkReal gconst134=(x7650*x7651);
CheckValue<IkReal> x7654 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7654.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7654.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7655=((-1.0)*r20);
IkReal x7656=x7651;
CheckValue<IkReal> x7658 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7655),IKFAST_ATAN2_MAGTHRESH);
if(!x7658.valid){
continue;
}
IkReal x7657=((-1.0)*(x7658.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x7657;
IkReal gconst132=x7657;
IkReal gconst133=(r21*x7656);
IkReal gconst134=(x7655*x7656);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7659=((-1.0)*r20);
IkReal x7660=x7651;
CheckValue<IkReal> x7662 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7659),IKFAST_ATAN2_MAGTHRESH);
if(!x7662.valid){
continue;
}
IkReal x7661=((-1.0)*(x7662.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x7661;
IkReal gconst132=x7661;
IkReal gconst133=(r21*x7660);
IkReal gconst134=(x7659*x7660);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x7663=((-1.0)*r20);
IkReal x7664=x7651;
CheckValue<IkReal> x7666 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7663),IKFAST_ATAN2_MAGTHRESH);
if(!x7666.valid){
continue;
}
IkReal x7665=((-1.0)*(x7666.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x7665;
IkReal gconst132=x7665;
IkReal gconst133=(r21*x7664);
IkReal gconst134=(x7663*x7664);
IkReal x7667=r22*r22;
CheckValue<IkReal> x7670=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x7667))),-1);
if(!x7670.valid){
continue;
}
IkReal x7668=x7670.value;
IkReal x7669=(((x7668*(r20*r20*r20*r20)))+(((2.0)*x7668*(r20*r20)*(r21*r21)))+((x7668*(r21*r21*r21*r21)))+x7667);
j4eval[0]=x7669;
j4eval[1]=IKsign(x7669);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7671=(gconst133*r21);
IkReal x7672=(cj1*sj2);
IkReal x7673=(gconst134*r20);
IkReal x7674=(cj2*sj1);
CheckValue<IkReal> x7675 = IKatan2WithCheck(IkReal((((r22*x7674))+((r22*x7672)))),IkReal(((((-1.0)*x7673*x7674))+((x7671*x7674))+((x7671*x7672))+(((-1.0)*x7672*x7673)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7675.valid){
continue;
}
CheckValue<IkReal> x7676=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x7673*x7673)+(x7671*x7671)+(((-2.0)*x7671*x7673)))),-1);
if(!x7676.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7675.value)+(((1.5707963267949)*(x7676.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7677=IKsin(j4);
IkReal x7678=IKcos(j4);
IkReal x7679=(sj1*sj2);
IkReal x7680=(gconst133*r11);
IkReal x7681=(gconst133*r21);
IkReal x7682=(gconst133*r01);
IkReal x7683=((1.0)*x7678);
IkReal x7684=(gconst134*x7678);
IkReal x7685=((1.0)*x7677);
IkReal x7686=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*gconst134*r20*x7685))+((x7677*x7681))+(((-1.0)*r22*x7683)));
evalcond[1]=((((-1.0)*gconst134*r10*x7685))+((x7677*x7680))+cj0+(((-1.0)*r12*x7683)));
evalcond[2]=((((-1.0)*gconst134*r00*x7685))+(((-1.0)*sj0))+((x7677*x7682))+(((-1.0)*r02*x7683)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x7685))+(((-1.0)*x7681*x7683))+((r20*x7684)));
evalcond[4]=((((-1.0)*cj0*x7686))+(((-1.0)*x7682*x7683))+((r00*x7684))+((cj0*x7679))+(((-1.0)*r02*x7685)));
evalcond[5]=(((sj0*x7679))+((r10*x7684))+(((-1.0)*x7680*x7683))+(((-1.0)*r12*x7685))+(((-1.0)*sj0*x7686)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7687=((1.0)*gconst134);
CheckValue<IkReal> x7688 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x7687))+((gconst133*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7688.valid){
continue;
}
CheckValue<IkReal> x7689=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst133*r10))+(((-1.0)*r11*x7687)))),-1);
if(!x7689.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7688.value)+(((1.5707963267949)*(x7689.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7690=IKsin(j4);
IkReal x7691=IKcos(j4);
IkReal x7692=(sj1*sj2);
IkReal x7693=(gconst133*r11);
IkReal x7694=(gconst133*r21);
IkReal x7695=(gconst133*r01);
IkReal x7696=((1.0)*x7691);
IkReal x7697=(gconst134*x7691);
IkReal x7698=((1.0)*x7690);
IkReal x7699=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*gconst134*r20*x7698))+((x7690*x7694))+(((-1.0)*r22*x7696)));
evalcond[1]=((((-1.0)*gconst134*r10*x7698))+cj0+((x7690*x7693))+(((-1.0)*r12*x7696)));
evalcond[2]=((((-1.0)*r02*x7696))+(((-1.0)*sj0))+((x7690*x7695))+(((-1.0)*gconst134*r00*x7698)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x7698))+((r20*x7697))+(((-1.0)*x7694*x7696)));
evalcond[4]=((((-1.0)*r02*x7698))+(((-1.0)*cj0*x7699))+(((-1.0)*x7695*x7696))+((r00*x7697))+((cj0*x7692)));
evalcond[5]=((((-1.0)*x7693*x7696))+((r10*x7697))+((sj0*x7692))+(((-1.0)*r12*x7698))+(((-1.0)*sj0*x7699)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7700=((1.0)*gconst134);
CheckValue<IkReal> x7701 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x7700))+((cj0*gconst133*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7701.valid){
continue;
}
CheckValue<IkReal> x7702=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst133*r00))+(((-1.0)*r01*x7700)))),-1);
if(!x7702.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7701.value)+(((1.5707963267949)*(x7702.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7703=IKsin(j4);
IkReal x7704=IKcos(j4);
IkReal x7705=(sj1*sj2);
IkReal x7706=(gconst133*r11);
IkReal x7707=(gconst133*r21);
IkReal x7708=(gconst133*r01);
IkReal x7709=((1.0)*x7704);
IkReal x7710=(gconst134*x7704);
IkReal x7711=((1.0)*x7703);
IkReal x7712=((1.0)*cj1*cj2);
evalcond[0]=(((x7703*x7707))+(((-1.0)*gconst134*r20*x7711))+(((-1.0)*r22*x7709)));
evalcond[1]=(((x7703*x7706))+cj0+(((-1.0)*gconst134*r10*x7711))+(((-1.0)*r12*x7709)));
evalcond[2]=((((-1.0)*sj0))+((x7703*x7708))+(((-1.0)*gconst134*r00*x7711))+(((-1.0)*r02*x7709)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x7711))+((cj1*sj2))+(((-1.0)*x7707*x7709))+((r20*x7710)));
evalcond[4]=((((-1.0)*cj0*x7712))+(((-1.0)*x7708*x7709))+((cj0*x7705))+(((-1.0)*r02*x7711))+((r00*x7710)));
evalcond[5]=((((-1.0)*r12*x7711))+(((-1.0)*x7706*x7709))+((sj0*x7705))+((r10*x7710))+(((-1.0)*sj0*x7712)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7713=((-1.0)*r21);
IkReal x7715 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x7715)==0){
continue;
}
IkReal x7714=pow(x7715,-0.5);
CheckValue<IkReal> x7716 = IKatan2WithCheck(IkReal(x7713),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7716.valid){
continue;
}
IkReal gconst135=((3.14159265358979)+(((-1.0)*(x7716.value))));
IkReal gconst136=(x7713*x7714);
IkReal gconst137=((1.0)*r20*x7714);
CheckValue<IkReal> x7717 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7717.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x7717.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7718=((-1.0)*r21);
CheckValue<IkReal> x7721 = IKatan2WithCheck(IkReal(x7718),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7721.valid){
continue;
}
IkReal x7719=((1.0)*(x7721.value));
IkReal x7720=x7714;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x7719)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7719)));
IkReal gconst136=(x7718*x7720);
IkReal gconst137=((1.0)*r20*x7720);
IkReal x7722=r22*r22;
IkReal x7723=((1.0)*x7722);
CheckValue<IkReal> x7727=IKPowWithIntegerCheck(((-1.0)+x7722),-1);
if(!x7727.valid){
continue;
}
IkReal x7724=x7727.value;
if((((1.0)+(((-1.0)*x7723)))) < -0.00001)
continue;
IkReal x7725=IKsqrt(((1.0)+(((-1.0)*x7723))));
IkReal x7726=(cj0*x7724*x7725);
j4eval[0]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*x7723*x7726))+x7726))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7728=((-1.0)*r21);
CheckValue<IkReal> x7731 = IKatan2WithCheck(IkReal(x7728),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7731.valid){
continue;
}
IkReal x7729=((1.0)*(x7731.value));
IkReal x7730=x7714;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x7729)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7729)));
IkReal gconst136=(x7728*x7730);
IkReal gconst137=((1.0)*r20*x7730);
IkReal x7732=r22*r22;
IkReal x7733=((1.0)*x7732);
CheckValue<IkReal> x7737=IKPowWithIntegerCheck(((-1.0)+x7732),-1);
if(!x7737.valid){
continue;
}
IkReal x7734=x7737.value;
if((((1.0)+(((-1.0)*x7733)))) < -0.00001)
continue;
IkReal x7735=IKsqrt(((1.0)+(((-1.0)*x7733))));
IkReal x7736=(sj0*x7734*x7735);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x7736+(((-1.0)*x7733*x7736))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x7738=((-1.0)*r21);
CheckValue<IkReal> x7741 = IKatan2WithCheck(IkReal(x7738),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7741.valid){
continue;
}
IkReal x7739=((1.0)*(x7741.value));
IkReal x7740=x7714;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x7739)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7739)));
IkReal gconst136=(x7738*x7740);
IkReal gconst137=((1.0)*r20*x7740);
IkReal x7742=r22*r22;
IkReal x7743=(r12*sj0);
IkReal x7744=(cj0*r02);
CheckValue<IkReal> x7748=IKPowWithIntegerCheck(((-1.0)+x7742),-1);
if(!x7748.valid){
continue;
}
IkReal x7745=x7748.value;
if((((1.0)+(((-1.0)*x7742)))) < -0.00001)
continue;
IkReal x7746=IKsqrt(((1.0)+(((-1.0)*x7742))));
IkReal x7747=(r22*x7745*x7746);
j4eval[0]=0;
j4eval[1]=((IKabs(((((-1.0)*x7744))+(((-1.0)*x7743)))))+(IKabs((((x7743*x7747))+((x7744*x7747))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7749=((1.0)*sj0);
IkReal x7750=((1.0)*cj0);
CheckValue<IkReal> x7751=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst136*r20))+(((-1.0)*gconst137*r21)))),-1);
if(!x7751.valid){
continue;
}
CheckValue<IkReal> x7752 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x7750))+(((-1.0)*r12*x7749)))),IkReal((((gconst137*r10*sj0))+(((-1.0)*gconst136*r11*x7749))+(((-1.0)*gconst136*r01*x7750))+((cj0*gconst137*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7752.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7751.value)))+(x7752.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7753=IKsin(j4);
IkReal x7754=IKcos(j4);
IkReal x7755=(gconst136*r01);
IkReal x7756=(gconst137*r10);
IkReal x7757=(sj1*sj2);
IkReal x7758=(gconst137*r20);
IkReal x7759=(gconst136*r11);
IkReal x7760=(gconst136*r21);
IkReal x7761=(gconst137*r00);
IkReal x7762=((1.0)*x7754);
IkReal x7763=((1.0)*cj1*cj2);
IkReal x7764=((1.0)*x7753);
evalcond[0]=((((-1.0)*r22*x7762))+(((-1.0)*x7758*x7764))+((x7753*x7760)));
evalcond[1]=(cj0+((x7753*x7759))+(((-1.0)*r12*x7762))+(((-1.0)*x7756*x7764)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x7762))+((x7753*x7755))+(((-1.0)*x7761*x7764)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x7760*x7762))+(((-1.0)*r22*x7764))+((cj1*sj2))+((x7754*x7758)));
evalcond[4]=((((-1.0)*r02*x7764))+(((-1.0)*x7755*x7762))+(((-1.0)*cj0*x7763))+((cj0*x7757))+((x7754*x7761)));
evalcond[5]=(((sj0*x7757))+(((-1.0)*x7759*x7762))+(((-1.0)*sj0*x7763))+(((-1.0)*r12*x7764))+((x7754*x7756)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7765=((1.0)*gconst137);
CheckValue<IkReal> x7766 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x7765))+((gconst136*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7766.valid){
continue;
}
CheckValue<IkReal> x7767=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst136*r10))+(((-1.0)*r11*x7765)))),-1);
if(!x7767.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7766.value)+(((1.5707963267949)*(x7767.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7768=IKsin(j4);
IkReal x7769=IKcos(j4);
IkReal x7770=(gconst136*r01);
IkReal x7771=(gconst137*r10);
IkReal x7772=(sj1*sj2);
IkReal x7773=(gconst137*r20);
IkReal x7774=(gconst136*r11);
IkReal x7775=(gconst136*r21);
IkReal x7776=(gconst137*r00);
IkReal x7777=((1.0)*x7769);
IkReal x7778=((1.0)*cj1*cj2);
IkReal x7779=((1.0)*x7768);
evalcond[0]=((((-1.0)*r22*x7777))+((x7768*x7775))+(((-1.0)*x7773*x7779)));
evalcond[1]=((((-1.0)*x7771*x7779))+cj0+((x7768*x7774))+(((-1.0)*r12*x7777)));
evalcond[2]=((((-1.0)*r02*x7777))+(((-1.0)*sj0))+(((-1.0)*x7776*x7779))+((x7768*x7770)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x7779))+((cj1*sj2))+(((-1.0)*x7775*x7777))+((x7769*x7773)));
evalcond[4]=((((-1.0)*r02*x7779))+(((-1.0)*cj0*x7778))+((x7769*x7776))+((cj0*x7772))+(((-1.0)*x7770*x7777)));
evalcond[5]=(((sj0*x7772))+((x7769*x7771))+(((-1.0)*sj0*x7778))+(((-1.0)*r12*x7779))+(((-1.0)*x7774*x7777)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7780=((1.0)*gconst137);
CheckValue<IkReal> x7781 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x7780))+((cj0*gconst136*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7781.valid){
continue;
}
CheckValue<IkReal> x7782=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7780))+(((-1.0)*gconst136*r00)))),-1);
if(!x7782.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7781.value)+(((1.5707963267949)*(x7782.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7783=IKsin(j4);
IkReal x7784=IKcos(j4);
IkReal x7785=(gconst136*r01);
IkReal x7786=(gconst137*r10);
IkReal x7787=(sj1*sj2);
IkReal x7788=(gconst137*r20);
IkReal x7789=(gconst136*r11);
IkReal x7790=(gconst136*r21);
IkReal x7791=(gconst137*r00);
IkReal x7792=((1.0)*x7784);
IkReal x7793=((1.0)*cj1*cj2);
IkReal x7794=((1.0)*x7783);
evalcond[0]=((((-1.0)*r22*x7792))+((x7783*x7790))+(((-1.0)*x7788*x7794)));
evalcond[1]=((((-1.0)*x7786*x7794))+cj0+(((-1.0)*r12*x7792))+((x7783*x7789)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x7791*x7794))+((x7783*x7785))+(((-1.0)*r02*x7792)));
evalcond[3]=((((-1.0)*r22*x7794))+((cj2*sj1))+((x7784*x7788))+((cj1*sj2))+(((-1.0)*x7790*x7792)));
evalcond[4]=((((-1.0)*cj0*x7793))+(((-1.0)*x7785*x7792))+(((-1.0)*r02*x7794))+((cj0*x7787))+((x7784*x7791)));
evalcond[5]=(((sj0*x7787))+((x7784*x7786))+(((-1.0)*r12*x7794))+(((-1.0)*sj0*x7793))+(((-1.0)*x7789*x7792)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7795=((-1.0)*r10);
IkReal x7797 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x7797)==0){
continue;
}
IkReal x7796=pow(x7797,-0.5);
CheckValue<IkReal> x7798 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x7795),IKFAST_ATAN2_MAGTHRESH);
if(!x7798.valid){
continue;
}
IkReal gconst138=((-1.0)*(x7798.value));
IkReal gconst139=(r11*x7796);
IkReal gconst140=(x7795*x7796);
CheckValue<IkReal> x7799 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7799.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7799.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x7800=((-1.0)*r10);
IkReal x7801=x7796;
CheckValue<IkReal> x7803 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x7800),IKFAST_ATAN2_MAGTHRESH);
if(!x7803.valid){
continue;
}
IkReal x7802=((-1.0)*(x7803.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst139;
cj5=gconst140;
j5=x7802;
IkReal gconst138=x7802;
IkReal gconst139=(r11*x7801);
IkReal gconst140=(x7800*x7801);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7804=((1.0)*sj0);
IkReal x7805=((1.0)*gconst139);
CheckValue<IkReal> x7806 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x7804))+(((-1.0)*cj0*r02)))),IkReal((((gconst140*r10*sj0))+(((-1.0)*gconst139*r11*x7804))+(((-1.0)*cj0*r01*x7805))+((cj0*gconst140*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7806.valid){
continue;
}
CheckValue<IkReal> x7807=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst140*r21))+(((-1.0)*r20*x7805)))),-1);
if(!x7807.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7806.value)+(((1.5707963267949)*(x7807.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7808=IKsin(j4);
IkReal x7809=IKcos(j4);
IkReal x7810=(gconst140*r00);
IkReal x7811=(sj1*sj2);
IkReal x7812=(gconst139*r11);
IkReal x7813=(gconst139*r01);
IkReal x7814=(gconst139*r21);
IkReal x7815=((1.0)*x7809);
IkReal x7816=((1.0)*x7808);
IkReal x7817=((1.0)*cj1*cj2);
IkReal x7818=(gconst140*x7809);
evalcond[0]=((((-1.0)*r22*x7815))+((x7808*x7814))+(((-1.0)*gconst140*r20*x7816)));
evalcond[1]=((((-1.0)*gconst140*r10*x7816))+cj0+(((-1.0)*r12*x7815))+((x7808*x7812)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x7815))+(((-1.0)*x7810*x7816))+((x7808*x7813)));
evalcond[3]=(((cj2*sj1))+((r20*x7818))+((cj1*sj2))+(((-1.0)*x7814*x7815))+(((-1.0)*r22*x7816)));
evalcond[4]=((((-1.0)*r02*x7816))+((x7809*x7810))+(((-1.0)*x7813*x7815))+(((-1.0)*cj0*x7817))+((cj0*x7811)));
evalcond[5]=(((r10*x7818))+(((-1.0)*x7812*x7815))+((sj0*x7811))+(((-1.0)*r12*x7816))+(((-1.0)*sj0*x7817)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7819=((1.0)*gconst140);
CheckValue<IkReal> x7820 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst139*r21))+(((-1.0)*cj0*r20*x7819)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7820.valid){
continue;
}
CheckValue<IkReal> x7821=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst139*r00))+(((-1.0)*r01*x7819)))),-1);
if(!x7821.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7820.value)+(((1.5707963267949)*(x7821.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7822=IKsin(j4);
IkReal x7823=IKcos(j4);
IkReal x7824=(gconst140*r00);
IkReal x7825=(sj1*sj2);
IkReal x7826=(gconst139*r11);
IkReal x7827=(gconst139*r01);
IkReal x7828=(gconst139*r21);
IkReal x7829=((1.0)*x7823);
IkReal x7830=((1.0)*x7822);
IkReal x7831=((1.0)*cj1*cj2);
IkReal x7832=(gconst140*x7823);
evalcond[0]=((((-1.0)*gconst140*r20*x7830))+(((-1.0)*r22*x7829))+((x7822*x7828)));
evalcond[1]=(cj0+((x7822*x7826))+(((-1.0)*r12*x7829))+(((-1.0)*gconst140*r10*x7830)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x7824*x7830))+(((-1.0)*r02*x7829))+((x7822*x7827)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x7828*x7829))+(((-1.0)*r22*x7830))+((r20*x7832))+((cj1*sj2)));
evalcond[4]=((((-1.0)*cj0*x7831))+(((-1.0)*x7827*x7829))+(((-1.0)*r02*x7830))+((x7823*x7824))+((cj0*x7825)));
evalcond[5]=(((r10*x7832))+(((-1.0)*x7826*x7829))+((sj0*x7825))+(((-1.0)*r12*x7830))+(((-1.0)*sj0*x7831)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7833=((-1.0)*r11);
IkReal x7835 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x7835)==0){
continue;
}
IkReal x7834=pow(x7835,-0.5);
CheckValue<IkReal> x7836 = IKatan2WithCheck(IkReal(x7833),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7836.valid){
continue;
}
IkReal gconst141=((3.14159265358979)+(((-1.0)*(x7836.value))));
IkReal gconst142=(x7833*x7834);
IkReal gconst143=((1.0)*r10*x7834);
CheckValue<IkReal> x7837 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7837.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x7837.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x7838=((-1.0)*r11);
CheckValue<IkReal> x7841 = IKatan2WithCheck(IkReal(x7838),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7841.valid){
continue;
}
IkReal x7839=((1.0)*(x7841.value));
IkReal x7840=x7834;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x7839)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x7839)));
IkReal gconst142=(x7838*x7840);
IkReal gconst143=((1.0)*r10*x7840);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7842=((-1.0)*r11);
CheckValue<IkReal> x7845 = IKatan2WithCheck(IkReal(x7842),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7845.valid){
continue;
}
IkReal x7843=((1.0)*(x7845.value));
IkReal x7844=x7834;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x7843)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x7843)));
IkReal gconst142=(x7842*x7844);
IkReal gconst143=((1.0)*r10*x7844);
IkReal x7846=r12*r12;
IkReal x7847=((1.0)*sj0);
IkReal x7848=(cj0*r02);
IkReal x7849=x7834;
j4eval[0]=((IKabs(((((-1.0)*r12*x7847))+(((-1.0)*x7848)))))+(IKabs((((r12*x7848*x7849))+((sj0*x7846*x7849))+(((-1.0)*x7847*x7849))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7850=((-1.0)*r11);
CheckValue<IkReal> x7853 = IKatan2WithCheck(IkReal(x7850),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7853.valid){
continue;
}
IkReal x7851=((1.0)*(x7853.value));
IkReal x7852=x7834;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x7851)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x7851)));
IkReal gconst142=(x7850*x7852);
IkReal gconst143=((1.0)*r10*x7852);
IkReal x7854=r12*r12;
IkReal x7855=(cj1*r22*sj2);
IkReal x7856=(cj2*r22*sj1);
CheckValue<IkReal> x7860=IKPowWithIntegerCheck(((-1.0)+x7854),-1);
if(!x7860.valid){
continue;
}
IkReal x7857=x7860.value;
if((((1.0)+(((-1.0)*x7854)))) < -0.00001)
continue;
IkReal x7858=IKsqrt(((1.0)+(((-1.0)*x7854))));
IkReal x7859=((1.0)*r12*x7857*x7858);
j4eval[0]=((IKabs(((((-1.0)*x7856*x7859))+(((-1.0)*x7855*x7859)))))+(IKabs((x7856+x7855))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7861=(gconst142*r21);
IkReal x7862=(cj1*sj2);
IkReal x7863=(cj2*sj1);
IkReal x7864=(gconst143*r20);
CheckValue<IkReal> x7865 = IKatan2WithCheck(IkReal((((r22*x7863))+((r22*x7862)))),IkReal((((x7861*x7863))+((x7861*x7862))+(((-1.0)*x7862*x7864))+(((-1.0)*x7863*x7864)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7865.valid){
continue;
}
CheckValue<IkReal> x7866=IKPowWithIntegerCheck(IKsign(((x7861*x7861)+(((-2.0)*x7861*x7864))+(r22*r22)+(x7864*x7864))),-1);
if(!x7866.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7865.value)+(((1.5707963267949)*(x7866.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7867=IKsin(j4);
IkReal x7868=IKcos(j4);
IkReal x7869=(sj1*sj2);
IkReal x7870=(gconst143*r20);
IkReal x7871=((1.0)*x7868);
IkReal x7872=((1.0)*cj1*cj2);
IkReal x7873=((1.0)*x7867);
IkReal x7874=(gconst142*x7867);
IkReal x7875=(gconst143*x7868);
evalcond[0]=((((-1.0)*r22*x7871))+(((-1.0)*x7870*x7873))+((r21*x7874)));
evalcond[1]=(cj0+((r11*x7874))+(((-1.0)*r12*x7871))+(((-1.0)*gconst143*r10*x7873)));
evalcond[2]=((((-1.0)*sj0))+((r01*x7874))+(((-1.0)*r02*x7871))+(((-1.0)*gconst143*r00*x7873)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x7873))+((cj1*sj2))+(((-1.0)*gconst142*r21*x7871))+((x7868*x7870)));
evalcond[4]=(((cj0*x7869))+(((-1.0)*gconst142*r01*x7871))+((r00*x7875))+(((-1.0)*r02*x7873))+(((-1.0)*cj0*x7872)));
evalcond[5]=((((-1.0)*gconst142*r11*x7871))+((r10*x7875))+(((-1.0)*r12*x7873))+((sj0*x7869))+(((-1.0)*sj0*x7872)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7876=((1.0)*sj0);
IkReal x7877=((1.0)*gconst142);
CheckValue<IkReal> x7878=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x7877))+(((-1.0)*gconst143*r21)))),-1);
if(!x7878.valid){
continue;
}
CheckValue<IkReal> x7879 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x7876))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*gconst142*r11*x7876))+((cj0*gconst143*r00))+(((-1.0)*cj0*r01*x7877))+((gconst143*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7879.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7878.value)))+(x7879.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7880=IKsin(j4);
IkReal x7881=IKcos(j4);
IkReal x7882=(sj1*sj2);
IkReal x7883=(gconst143*r20);
IkReal x7884=((1.0)*x7881);
IkReal x7885=((1.0)*cj1*cj2);
IkReal x7886=((1.0)*x7880);
IkReal x7887=(gconst142*x7880);
IkReal x7888=(gconst143*x7881);
evalcond[0]=((((-1.0)*r22*x7884))+((r21*x7887))+(((-1.0)*x7883*x7886)));
evalcond[1]=(cj0+((r11*x7887))+(((-1.0)*r12*x7884))+(((-1.0)*gconst143*r10*x7886)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*gconst143*r00*x7886))+((r01*x7887))+(((-1.0)*r02*x7884)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x7886))+((cj1*sj2))+(((-1.0)*gconst142*r21*x7884))+((x7881*x7883)));
evalcond[4]=(((cj0*x7882))+(((-1.0)*r02*x7886))+((r00*x7888))+(((-1.0)*gconst142*r01*x7884))+(((-1.0)*cj0*x7885)));
evalcond[5]=((((-1.0)*sj0*x7885))+((sj0*x7882))+((r10*x7888))+(((-1.0)*r12*x7886))+(((-1.0)*gconst142*r11*x7884)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7889=((1.0)*gconst143);
CheckValue<IkReal> x7890 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x7889))+((cj0*gconst142*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7890.valid){
continue;
}
CheckValue<IkReal> x7891=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7889))+(((-1.0)*gconst142*r00)))),-1);
if(!x7891.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7890.value)+(((1.5707963267949)*(x7891.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7892=IKsin(j4);
IkReal x7893=IKcos(j4);
IkReal x7894=(sj1*sj2);
IkReal x7895=(gconst143*r20);
IkReal x7896=((1.0)*x7893);
IkReal x7897=((1.0)*cj1*cj2);
IkReal x7898=((1.0)*x7892);
IkReal x7899=(gconst142*x7892);
IkReal x7900=(gconst143*x7893);
evalcond[0]=((((-1.0)*x7895*x7898))+((r21*x7899))+(((-1.0)*r22*x7896)));
evalcond[1]=(cj0+(((-1.0)*r12*x7896))+(((-1.0)*gconst143*r10*x7898))+((r11*x7899)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*gconst143*r00*x7898))+((r01*x7899))+(((-1.0)*r02*x7896)));
evalcond[3]=(((cj2*sj1))+((x7893*x7895))+((cj1*sj2))+(((-1.0)*r22*x7898))+(((-1.0)*gconst142*r21*x7896)));
evalcond[4]=((((-1.0)*cj0*x7897))+((cj0*x7894))+((r00*x7900))+(((-1.0)*gconst142*r01*x7896))+(((-1.0)*r02*x7898)));
evalcond[5]=(((r10*x7900))+(((-1.0)*r12*x7898))+(((-1.0)*gconst142*r11*x7896))+(((-1.0)*sj0*x7897))+((sj0*x7894)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7901=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x7901;
j4eval[1]=IKsign(x7901);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7902=((1.0)*cj5);
IkReal x7903=((((-1.0)*r01*x7902))+(((-1.0)*r00*sj5)));
j4eval[0]=x7903;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x7902))))));
j4eval[2]=IKsign(x7903);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7904=cj5*cj5;
IkReal x7905=r11*r11;
IkReal x7906=(r11*sj5);
IkReal x7907=(cj5*r10);
IkReal x7908=((r12*r12)+((x7904*(r10*r10)))+x7905+(((-1.0)*x7904*x7905))+(((-2.0)*x7906*x7907)));
j4eval[0]=x7908;
j4eval[1]=IKsign(x7908);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x7906))+x7907))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7909=cj5*cj5;
IkReal x7910=r11*r11;
IkReal x7911=(cj5*r10);
IkReal x7912=(r11*sj5);
CheckValue<IkReal> x7913=IKPowWithIntegerCheck(IKsign(((r12*r12)+x7910+(((-1.0)*x7909*x7910))+((x7909*(r10*r10)))+(((-2.0)*x7911*x7912)))),-1);
if(!x7913.valid){
continue;
}
CheckValue<IkReal> x7914 = IKatan2WithCheck(IkReal(((((-1.0)*x7912))+x7911)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x7914.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7913.value)))+(x7914.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7915=IKsin(j4);
IkReal x7916=IKcos(j4);
IkReal x7917=(cj5*r10);
IkReal x7918=(r01*sj5);
IkReal x7919=(cj5*r00);
IkReal x7920=(cj5*r20);
IkReal x7921=((1.0)*x7916);
IkReal x7922=((1.0)*x7915);
IkReal x7923=(sj5*x7915);
evalcond[0]=((((-1.0)*x7920*x7922))+(((-1.0)*r22*x7921))+((r21*x7923)));
evalcond[1]=((((-1.0)*r02*x7921))+((x7915*x7918))+(((-1.0)*x7919*x7922)));
evalcond[2]=((((-1.0)*r11*sj5*x7921))+(((-1.0)*r12*x7922))+((x7916*x7917)));
evalcond[3]=((1.0)+(((-1.0)*r12*x7921))+((r11*x7923))+(((-1.0)*x7917*x7922)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x7922))+(((-1.0)*r21*sj5*x7921))+((x7916*x7920)));
evalcond[5]=((((-1.0)*r02*x7922))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x7916*x7919))+(((-1.0)*x7918*x7921)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7924=((1.0)*cj5);
CheckValue<IkReal> x7925 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x7924)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7925.valid){
continue;
}
CheckValue<IkReal> x7926=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7924)))),-1);
if(!x7926.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7925.value)+(((1.5707963267949)*(x7926.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7927=IKsin(j4);
IkReal x7928=IKcos(j4);
IkReal x7929=(cj5*r10);
IkReal x7930=(r01*sj5);
IkReal x7931=(cj5*r00);
IkReal x7932=(cj5*r20);
IkReal x7933=((1.0)*x7928);
IkReal x7934=((1.0)*x7927);
IkReal x7935=(sj5*x7927);
evalcond[0]=(((r21*x7935))+(((-1.0)*x7932*x7934))+(((-1.0)*r22*x7933)));
evalcond[1]=((((-1.0)*r02*x7933))+((x7927*x7930))+(((-1.0)*x7931*x7934)));
evalcond[2]=((((-1.0)*r11*sj5*x7933))+(((-1.0)*r12*x7934))+((x7928*x7929)));
evalcond[3]=((1.0)+(((-1.0)*r12*x7933))+((r11*x7935))+(((-1.0)*x7929*x7934)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x7934))+(((-1.0)*r21*sj5*x7933))+((cj1*sj2))+((x7928*x7932)));
evalcond[5]=((((-1.0)*r02*x7934))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x7928*x7931))+(((-1.0)*x7930*x7933)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7936=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x7936.valid){
continue;
}
CheckValue<IkReal> x7937 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7937.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7936.value)))+(x7937.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7938=IKsin(j4);
IkReal x7939=IKcos(j4);
IkReal x7940=(cj5*r10);
IkReal x7941=(r01*sj5);
IkReal x7942=(cj5*r00);
IkReal x7943=(cj5*r20);
IkReal x7944=((1.0)*x7939);
IkReal x7945=((1.0)*x7938);
IkReal x7946=(sj5*x7938);
evalcond[0]=(((r21*x7946))+(((-1.0)*r22*x7944))+(((-1.0)*x7943*x7945)));
evalcond[1]=((((-1.0)*r02*x7944))+((x7938*x7941))+(((-1.0)*x7942*x7945)));
evalcond[2]=((((-1.0)*r11*sj5*x7944))+(((-1.0)*r12*x7945))+((x7939*x7940)));
evalcond[3]=((1.0)+(((-1.0)*x7940*x7945))+((r11*x7946))+(((-1.0)*r12*x7944)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x7945))+(((-1.0)*r21*sj5*x7944))+((cj1*sj2))+((x7939*x7943)));
evalcond[5]=((((-1.0)*x7941*x7944))+(((-1.0)*r02*x7945))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x7939*x7942)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7947=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x7947;
j4eval[1]=IKsign(x7947);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7948=((1.0)*cj5);
IkReal x7949=((((-1.0)*r21*x7948))+(((-1.0)*r20*sj5)));
j4eval[0]=x7949;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r00*x7948))+((r01*sj5))))));
j4eval[2]=IKsign(x7949);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7950=cj5*cj5;
IkReal x7951=r11*r11;
IkReal x7952=(cj5*r10);
IkReal x7953=(r11*sj5);
IkReal x7954=(((x7950*x7951))+(((-1.0)*x7951))+(((-1.0)*(r12*r12)))+(((-1.0)*x7950*(r10*r10)))+(((2.0)*x7952*x7953)));
j4eval[0]=x7954;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*x7953))+x7952))));
j4eval[2]=IKsign(x7954);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7955=cj5*cj5;
IkReal x7956=r11*r11;
IkReal x7957=(cj5*r10);
IkReal x7958=(r11*sj5);
CheckValue<IkReal> x7959=IKPowWithIntegerCheck(IKsign((((x7955*x7956))+(((-1.0)*x7956))+(((-1.0)*(r12*r12)))+(((2.0)*x7957*x7958))+(((-1.0)*x7955*(r10*r10))))),-1);
if(!x7959.valid){
continue;
}
CheckValue<IkReal> x7960 = IKatan2WithCheck(IkReal(((((-1.0)*x7958))+x7957)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x7960.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7959.value)))+(x7960.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7961=IKsin(j4);
IkReal x7962=IKcos(j4);
IkReal x7963=(cj5*r10);
IkReal x7964=(r01*sj5);
IkReal x7965=(cj5*r00);
IkReal x7966=(cj5*r20);
IkReal x7967=((1.0)*x7962);
IkReal x7968=((1.0)*x7961);
IkReal x7969=(sj5*x7961);
evalcond[0]=(((r21*x7969))+(((-1.0)*r22*x7967))+(((-1.0)*x7966*x7968)));
evalcond[1]=(((x7961*x7964))+(((-1.0)*x7965*x7968))+(((-1.0)*r02*x7967)));
evalcond[2]=((((-1.0)*r11*sj5*x7967))+(((-1.0)*r12*x7968))+((x7962*x7963)));
evalcond[3]=((-1.0)+(((-1.0)*x7963*x7968))+((r11*x7969))+(((-1.0)*r12*x7967)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x7968))+((cj1*sj2))+(((-1.0)*r21*sj5*x7967))+((x7962*x7966)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*x7964*x7967))+(((-1.0)*r02*x7968))+((cj1*cj2))+((x7962*x7965)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7970=((1.0)*cj5);
CheckValue<IkReal> x7971=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x7970))+(((-1.0)*r20*sj5)))),-1);
if(!x7971.valid){
continue;
}
CheckValue<IkReal> x7972 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x7970)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7972.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7971.value)))+(x7972.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7973=IKsin(j4);
IkReal x7974=IKcos(j4);
IkReal x7975=(cj5*r10);
IkReal x7976=(r01*sj5);
IkReal x7977=(cj5*r00);
IkReal x7978=(cj5*r20);
IkReal x7979=((1.0)*x7974);
IkReal x7980=((1.0)*x7973);
IkReal x7981=(sj5*x7973);
evalcond[0]=((((-1.0)*r22*x7979))+(((-1.0)*x7978*x7980))+((r21*x7981)));
evalcond[1]=(((x7973*x7976))+(((-1.0)*r02*x7979))+(((-1.0)*x7977*x7980)));
evalcond[2]=((((-1.0)*r12*x7980))+(((-1.0)*r11*sj5*x7979))+((x7974*x7975)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x7979))+(((-1.0)*x7975*x7980))+((r11*x7981)));
evalcond[4]=((((-1.0)*r22*x7980))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*sj5*x7979))+((x7974*x7978)));
evalcond[5]=((((-1.0)*sj1*sj2))+((x7974*x7977))+((cj1*cj2))+(((-1.0)*r02*x7980))+(((-1.0)*x7976*x7979)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7982 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7982.valid){
continue;
}
CheckValue<IkReal> x7983=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x7983.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7982.value)+(((1.5707963267949)*(x7983.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7984=IKsin(j4);
IkReal x7985=IKcos(j4);
IkReal x7986=(cj5*r10);
IkReal x7987=(r01*sj5);
IkReal x7988=(cj5*r00);
IkReal x7989=(cj5*r20);
IkReal x7990=((1.0)*x7985);
IkReal x7991=((1.0)*x7984);
IkReal x7992=(sj5*x7984);
evalcond[0]=(((r21*x7992))+(((-1.0)*x7989*x7991))+(((-1.0)*r22*x7990)));
evalcond[1]=(((x7984*x7987))+(((-1.0)*x7988*x7991))+(((-1.0)*r02*x7990)));
evalcond[2]=((((-1.0)*r12*x7991))+(((-1.0)*r11*sj5*x7990))+((x7985*x7986)));
evalcond[3]=((-1.0)+((r11*x7992))+(((-1.0)*r12*x7990))+(((-1.0)*x7986*x7991)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x7991))+((x7985*x7989))+(((-1.0)*r21*sj5*x7990)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r02*x7991))+((cj1*cj2))+(((-1.0)*x7987*x7990))+((x7985*x7988)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7993=((-1.0)*r00);
IkReal x7995 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x7995)==0){
continue;
}
IkReal x7994=pow(x7995,-0.5);
CheckValue<IkReal> x7996 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x7993),IKFAST_ATAN2_MAGTHRESH);
if(!x7996.valid){
continue;
}
IkReal gconst144=((-1.0)*(x7996.value));
IkReal gconst145=(r01*x7994);
IkReal gconst146=(x7993*x7994);
CheckValue<IkReal> x7997 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7997.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7997.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x7998=((-1.0)*r00);
IkReal x7999=x7994;
CheckValue<IkReal> x8001 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x7998),IKFAST_ATAN2_MAGTHRESH);
if(!x8001.valid){
continue;
}
IkReal x8000=((-1.0)*(x8001.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst145;
cj5=gconst146;
j5=x8000;
IkReal gconst144=x8000;
IkReal gconst145=(r01*x7999);
IkReal gconst146=(x7998*x7999);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8002=((1.0)*sj0);
IkReal x8003=((1.0)*gconst145);
CheckValue<IkReal> x8004=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x8003))+(((-1.0)*gconst146*r21)))),-1);
if(!x8004.valid){
continue;
}
CheckValue<IkReal> x8005 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x8002))+(((-1.0)*cj0*r02)))),IkReal((((cj0*gconst146*r00))+(((-1.0)*gconst145*r11*x8002))+((gconst146*r10*sj0))+(((-1.0)*cj0*r01*x8003)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8005.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8004.value)))+(x8005.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8006=IKsin(j4);
IkReal x8007=IKcos(j4);
IkReal x8008=(gconst146*r10);
IkReal x8009=(sj1*sj2);
IkReal x8010=(gconst146*r20);
IkReal x8011=(gconst146*r00);
IkReal x8012=((1.0)*x8007);
IkReal x8013=((1.0)*x8006);
IkReal x8014=(gconst145*x8006);
IkReal x8015=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*r22*x8012))+(((-1.0)*x8010*x8013))+((r21*x8014)));
evalcond[1]=((((-1.0)*x8008*x8013))+cj0+((r11*x8014))+(((-1.0)*r12*x8012)));
evalcond[2]=((((-1.0)*x8011*x8013))+(((-1.0)*sj0))+(((-1.0)*r02*x8012))+((r01*x8014)));
evalcond[3]=((((-1.0)*r22*x8013))+((cj2*sj1))+((cj1*sj2))+((x8007*x8010))+(((-1.0)*gconst145*r21*x8012)));
evalcond[4]=((((-1.0)*r02*x8013))+((cj0*x8009))+(((-1.0)*cj0*x8015))+((x8007*x8011))+(((-1.0)*gconst145*r01*x8012)));
evalcond[5]=(((sj0*x8009))+(((-1.0)*gconst145*r11*x8012))+(((-1.0)*sj0*x8015))+(((-1.0)*r12*x8013))+((x8007*x8008)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8016=((1.0)*gconst146);
CheckValue<IkReal> x8017 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst145*r21*sj0))+(((-1.0)*r20*sj0*x8016)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8017.valid){
continue;
}
CheckValue<IkReal> x8018=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst145*r10))+(((-1.0)*r11*x8016)))),-1);
if(!x8018.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8017.value)+(((1.5707963267949)*(x8018.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8019=IKsin(j4);
IkReal x8020=IKcos(j4);
IkReal x8021=(gconst146*r10);
IkReal x8022=(sj1*sj2);
IkReal x8023=(gconst146*r20);
IkReal x8024=(gconst146*r00);
IkReal x8025=((1.0)*x8020);
IkReal x8026=((1.0)*x8019);
IkReal x8027=(gconst145*x8019);
IkReal x8028=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*x8023*x8026))+((r21*x8027))+(((-1.0)*r22*x8025)));
evalcond[1]=((((-1.0)*r12*x8025))+cj0+((r11*x8027))+(((-1.0)*x8021*x8026)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8025))+((r01*x8027))+(((-1.0)*x8024*x8026)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst145*r21*x8025))+((cj1*sj2))+((x8020*x8023))+(((-1.0)*r22*x8026)));
evalcond[4]=((((-1.0)*r02*x8026))+((cj0*x8022))+(((-1.0)*gconst145*r01*x8025))+((x8020*x8024))+(((-1.0)*cj0*x8028)));
evalcond[5]=((((-1.0)*r12*x8026))+(((-1.0)*sj0*x8028))+((sj0*x8022))+(((-1.0)*gconst145*r11*x8025))+((x8020*x8021)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8029=((-1.0)*r01);
IkReal x8031 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x8031)==0){
continue;
}
IkReal x8030=pow(x8031,-0.5);
CheckValue<IkReal> x8032 = IKatan2WithCheck(IkReal(x8029),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8032.valid){
continue;
}
IkReal gconst147=((3.14159265358979)+(((-1.0)*(x8032.value))));
IkReal gconst148=(x8029*x8030);
IkReal gconst149=((1.0)*r00*x8030);
CheckValue<IkReal> x8033 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8033.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x8033.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x8034=((-1.0)*r01);
CheckValue<IkReal> x8037 = IKatan2WithCheck(IkReal(x8034),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8037.valid){
continue;
}
IkReal x8035=((1.0)*(x8037.value));
IkReal x8036=x8030;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x8035)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x8035)));
IkReal gconst148=(x8034*x8036);
IkReal gconst149=((1.0)*r00*x8036);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8038=((-1.0)*r01);
CheckValue<IkReal> x8041 = IKatan2WithCheck(IkReal(x8038),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8041.valid){
continue;
}
IkReal x8039=((1.0)*(x8041.value));
IkReal x8040=x8030;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x8039)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x8039)));
IkReal gconst148=(x8038*x8040);
IkReal gconst149=((1.0)*r00*x8040);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8042=((-1.0)*r01);
CheckValue<IkReal> x8045 = IKatan2WithCheck(IkReal(x8042),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8045.valid){
continue;
}
IkReal x8043=((1.0)*(x8045.value));
IkReal x8044=x8030;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x8043)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x8043)));
IkReal gconst148=(x8042*x8044);
IkReal gconst149=((1.0)*r00*x8044);
IkReal x8046=r02*r02;
IkReal x8047=(r12*sj0);
IkReal x8048=((1.0)*cj0);
IkReal x8049=x8030;
j4eval[0]=((IKabs(((((-1.0)*x8047))+(((-1.0)*r02*x8048)))))+(IKabs((((r02*x8047*x8049))+(((-1.0)*x8048*x8049))+((cj0*x8046*x8049))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8050=((1.0)*sj0);
IkReal x8051=((1.0)*gconst148);
CheckValue<IkReal> x8052 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x8050))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x8051))+((gconst149*r10*sj0))+((cj0*gconst149*r00))+(((-1.0)*gconst148*r11*x8050)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8052.valid){
continue;
}
CheckValue<IkReal> x8053=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst149*r21))+(((-1.0)*r20*x8051)))),-1);
if(!x8053.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8052.value)+(((1.5707963267949)*(x8053.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8054=IKsin(j4);
IkReal x8055=IKcos(j4);
IkReal x8056=(gconst148*r11);
IkReal x8057=(sj1*sj2);
IkReal x8058=((1.0)*x8055);
IkReal x8059=(gconst149*x8055);
IkReal x8060=(gconst148*x8054);
IkReal x8061=((1.0)*cj1*cj2);
IkReal x8062=((1.0)*x8054);
evalcond[0]=(((r21*x8060))+(((-1.0)*gconst149*r20*x8062))+(((-1.0)*r22*x8058)));
evalcond[1]=((((-1.0)*r12*x8058))+cj0+((x8054*x8056))+(((-1.0)*gconst149*r10*x8062)));
evalcond[2]=((((-1.0)*sj0))+((r01*x8060))+(((-1.0)*r02*x8058))+(((-1.0)*gconst149*r00*x8062)));
evalcond[3]=(((cj2*sj1))+((r20*x8059))+(((-1.0)*gconst148*r21*x8058))+((cj1*sj2))+(((-1.0)*r22*x8062)));
evalcond[4]=(((r00*x8059))+(((-1.0)*cj0*x8061))+(((-1.0)*gconst148*r01*x8058))+((cj0*x8057))+(((-1.0)*r02*x8062)));
evalcond[5]=((((-1.0)*sj0*x8061))+((r10*x8059))+((sj0*x8057))+(((-1.0)*r12*x8062))+(((-1.0)*x8056*x8058)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8063=((1.0)*gconst149);
CheckValue<IkReal> x8064 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x8063))+((gconst148*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8064.valid){
continue;
}
CheckValue<IkReal> x8065=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x8063))+(((-1.0)*gconst148*r10)))),-1);
if(!x8065.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8064.value)+(((1.5707963267949)*(x8065.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8066=IKsin(j4);
IkReal x8067=IKcos(j4);
IkReal x8068=(gconst148*r11);
IkReal x8069=(sj1*sj2);
IkReal x8070=((1.0)*x8067);
IkReal x8071=(gconst149*x8067);
IkReal x8072=(gconst148*x8066);
IkReal x8073=((1.0)*cj1*cj2);
IkReal x8074=((1.0)*x8066);
evalcond[0]=((((-1.0)*gconst149*r20*x8074))+((r21*x8072))+(((-1.0)*r22*x8070)));
evalcond[1]=(cj0+((x8066*x8068))+(((-1.0)*gconst149*r10*x8074))+(((-1.0)*r12*x8070)));
evalcond[2]=((((-1.0)*gconst149*r00*x8074))+(((-1.0)*sj0))+(((-1.0)*r02*x8070))+((r01*x8072)));
evalcond[3]=(((cj2*sj1))+((r20*x8071))+((cj1*sj2))+(((-1.0)*r22*x8074))+(((-1.0)*gconst148*r21*x8070)));
evalcond[4]=((((-1.0)*r02*x8074))+(((-1.0)*cj0*x8073))+((cj0*x8069))+((r00*x8071))+(((-1.0)*gconst148*r01*x8070)));
evalcond[5]=(((r10*x8071))+(((-1.0)*x8068*x8070))+(((-1.0)*sj0*x8073))+(((-1.0)*r12*x8074))+((sj0*x8069)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8075=((1.0)*gconst149);
CheckValue<IkReal> x8076 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst148*r21))+(((-1.0)*cj0*r20*x8075)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8076.valid){
continue;
}
CheckValue<IkReal> x8077=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x8075))+(((-1.0)*gconst148*r00)))),-1);
if(!x8077.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8076.value)+(((1.5707963267949)*(x8077.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8078=IKsin(j4);
IkReal x8079=IKcos(j4);
IkReal x8080=(gconst148*r11);
IkReal x8081=(sj1*sj2);
IkReal x8082=((1.0)*x8079);
IkReal x8083=(gconst149*x8079);
IkReal x8084=(gconst148*x8078);
IkReal x8085=((1.0)*cj1*cj2);
IkReal x8086=((1.0)*x8078);
evalcond[0]=((((-1.0)*gconst149*r20*x8086))+((r21*x8084))+(((-1.0)*r22*x8082)));
evalcond[1]=(cj0+((x8078*x8080))+(((-1.0)*gconst149*r10*x8086))+(((-1.0)*r12*x8082)));
evalcond[2]=((((-1.0)*gconst149*r00*x8086))+(((-1.0)*r02*x8082))+(((-1.0)*sj0))+((r01*x8084)));
evalcond[3]=((((-1.0)*gconst148*r21*x8082))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x8086))+((r20*x8083)));
evalcond[4]=((((-1.0)*r02*x8086))+(((-1.0)*cj0*x8085))+((r00*x8083))+((cj0*x8081))+(((-1.0)*gconst148*r01*x8082)));
evalcond[5]=(((r10*x8083))+(((-1.0)*x8080*x8082))+((sj0*x8081))+(((-1.0)*sj0*x8085))+(((-1.0)*r12*x8086)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8087=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x8087;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x8087);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8088=((1.0)*cj5);
IkReal x8089=((((-1.0)*r10*sj5))+(((-1.0)*r11*x8088)));
j4eval[0]=x8089;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x8088)))))+(IKabs(r22)));
j4eval[2]=IKsign(x8089);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8090=cj5*cj5;
IkReal x8091=r01*r01;
IkReal x8092=(r01*sj5);
IkReal x8093=(cj5*r00);
IkReal x8094=((((-1.0)*x8090*(r00*r00)))+(((-1.0)*x8091))+(((-1.0)*(r02*r02)))+((x8090*x8091))+(((2.0)*x8092*x8093)));
j4eval[0]=x8094;
j4eval[1]=IKsign(x8094);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x8092))+x8093))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8095=cj5*cj5;
IkReal x8096=r01*r01;
IkReal x8097=(r01*sj5);
IkReal x8098=(cj5*r00);
CheckValue<IkReal> x8099=IKPowWithIntegerCheck(IKsign((((x8095*x8096))+(((-1.0)*x8096))+(((-1.0)*(r02*r02)))+(((2.0)*x8097*x8098))+(((-1.0)*x8095*(r00*r00))))),-1);
if(!x8099.valid){
continue;
}
CheckValue<IkReal> x8100 = IKatan2WithCheck(IkReal(((((-1.0)*x8097))+x8098)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x8100.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8099.value)))+(x8100.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8101=IKsin(j4);
IkReal x8102=IKcos(j4);
IkReal x8103=(cj5*r10);
IkReal x8104=(r01*sj5);
IkReal x8105=(cj5*r00);
IkReal x8106=(cj5*r20);
IkReal x8107=((1.0)*x8102);
IkReal x8108=((1.0)*x8101);
IkReal x8109=(sj5*x8101);
evalcond[0]=((((-1.0)*x8106*x8108))+(((-1.0)*r22*x8107))+((r21*x8109)));
evalcond[1]=(((r11*x8109))+(((-1.0)*x8103*x8108))+(((-1.0)*r12*x8107)));
evalcond[2]=(((x8102*x8105))+(((-1.0)*x8104*x8107))+(((-1.0)*r02*x8108)));
evalcond[3]=((-1.0)+(((-1.0)*x8105*x8108))+((x8101*x8104))+(((-1.0)*r02*x8107)));
evalcond[4]=((((-1.0)*r21*sj5*x8107))+((cj2*sj1))+((x8102*x8106))+((cj1*sj2))+(((-1.0)*r22*x8108)));
evalcond[5]=(((x8102*x8103))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r11*sj5*x8107))+(((-1.0)*r12*x8108)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8110=((1.0)*cj5);
CheckValue<IkReal> x8111=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x8110))+(((-1.0)*r10*sj5)))),-1);
if(!x8111.valid){
continue;
}
CheckValue<IkReal> x8112 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x8110))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8112.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8111.value)))+(x8112.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8113=IKsin(j4);
IkReal x8114=IKcos(j4);
IkReal x8115=(cj5*r10);
IkReal x8116=(r01*sj5);
IkReal x8117=(cj5*r00);
IkReal x8118=(cj5*r20);
IkReal x8119=((1.0)*x8114);
IkReal x8120=((1.0)*x8113);
IkReal x8121=(sj5*x8113);
evalcond[0]=(((r21*x8121))+(((-1.0)*r22*x8119))+(((-1.0)*x8118*x8120)));
evalcond[1]=((((-1.0)*x8115*x8120))+(((-1.0)*r12*x8119))+((r11*x8121)));
evalcond[2]=(((x8114*x8117))+(((-1.0)*x8116*x8119))+(((-1.0)*r02*x8120)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x8119))+(((-1.0)*x8117*x8120))+((x8113*x8116)));
evalcond[4]=(((cj2*sj1))+((x8114*x8118))+(((-1.0)*r21*sj5*x8119))+((cj1*sj2))+(((-1.0)*r22*x8120)));
evalcond[5]=((((-1.0)*r11*sj5*x8119))+((x8114*x8115))+(((-1.0)*r12*x8120))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8122=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x8122.valid){
continue;
}
CheckValue<IkReal> x8123 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8123.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8122.value)))+(x8123.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8124=IKsin(j4);
IkReal x8125=IKcos(j4);
IkReal x8126=(cj5*r10);
IkReal x8127=(r01*sj5);
IkReal x8128=(cj5*r00);
IkReal x8129=(cj5*r20);
IkReal x8130=((1.0)*x8125);
IkReal x8131=((1.0)*x8124);
IkReal x8132=(sj5*x8124);
evalcond[0]=((((-1.0)*r22*x8130))+((r21*x8132))+(((-1.0)*x8129*x8131)));
evalcond[1]=(((r11*x8132))+(((-1.0)*r12*x8130))+(((-1.0)*x8126*x8131)));
evalcond[2]=((((-1.0)*r02*x8131))+((x8125*x8128))+(((-1.0)*x8127*x8130)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x8130))+((x8124*x8127))+(((-1.0)*x8128*x8131)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x8131))+(((-1.0)*r21*sj5*x8130))+((cj1*sj2))+((x8125*x8129)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x8131))+((x8125*x8126))+(((-1.0)*r11*sj5*x8130)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8133=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x8133;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x8133);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8134=((1.0)*cj5);
IkReal x8135=((((-1.0)*r21*x8134))+(((-1.0)*r20*sj5)));
j4eval[0]=x8135;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x8134))))));
j4eval[2]=IKsign(x8135);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8136=cj5*cj5;
IkReal x8137=r01*r01;
IkReal x8138=(cj5*r00);
IkReal x8139=(r01*sj5);
IkReal x8140=((((-1.0)*x8136*x8137))+((x8136*(r00*r00)))+(((-2.0)*x8138*x8139))+(r02*r02)+x8137);
j4eval[0]=x8140;
j4eval[1]=((IKabs(((((-1.0)*x8139))+x8138)))+(IKabs(r02)));
j4eval[2]=IKsign(x8140);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8141=cj5*cj5;
IkReal x8142=r01*r01;
IkReal x8143=(r01*sj5);
IkReal x8144=(cj5*r00);
CheckValue<IkReal> x8145 = IKatan2WithCheck(IkReal(((((-1.0)*x8143))+x8144)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x8145.valid){
continue;
}
CheckValue<IkReal> x8146=IKPowWithIntegerCheck(IKsign(((((-1.0)*x8141*x8142))+(((-2.0)*x8143*x8144))+(r02*r02)+x8142+((x8141*(r00*r00))))),-1);
if(!x8146.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8145.value)+(((1.5707963267949)*(x8146.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8147=IKsin(j4);
IkReal x8148=IKcos(j4);
IkReal x8149=(cj5*r10);
IkReal x8150=(r01*sj5);
IkReal x8151=(cj5*r00);
IkReal x8152=(cj5*r20);
IkReal x8153=((1.0)*x8148);
IkReal x8154=((1.0)*x8147);
IkReal x8155=(sj5*x8147);
evalcond[0]=((((-1.0)*r22*x8153))+((r21*x8155))+(((-1.0)*x8152*x8154)));
evalcond[1]=(((r11*x8155))+(((-1.0)*r12*x8153))+(((-1.0)*x8149*x8154)));
evalcond[2]=(((x8148*x8151))+(((-1.0)*x8150*x8153))+(((-1.0)*r02*x8154)));
evalcond[3]=((1.0)+(((-1.0)*r02*x8153))+(((-1.0)*x8151*x8154))+((x8147*x8150)));
evalcond[4]=(((cj2*sj1))+((x8148*x8152))+((cj1*sj2))+(((-1.0)*r21*sj5*x8153))+(((-1.0)*r22*x8154)));
evalcond[5]=((((-1.0)*sj1*sj2))+((x8148*x8149))+(((-1.0)*r11*sj5*x8153))+((cj1*cj2))+(((-1.0)*r12*x8154)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8156=((1.0)*cj5);
CheckValue<IkReal> x8157=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x8156))+(((-1.0)*r20*sj5)))),-1);
if(!x8157.valid){
continue;
}
CheckValue<IkReal> x8158 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x8156))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8158.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8157.value)))+(x8158.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8159=IKsin(j4);
IkReal x8160=IKcos(j4);
IkReal x8161=(cj5*r10);
IkReal x8162=(r01*sj5);
IkReal x8163=(cj5*r00);
IkReal x8164=(cj5*r20);
IkReal x8165=((1.0)*x8160);
IkReal x8166=((1.0)*x8159);
IkReal x8167=(sj5*x8159);
evalcond[0]=(((r21*x8167))+(((-1.0)*r22*x8165))+(((-1.0)*x8164*x8166)));
evalcond[1]=(((r11*x8167))+(((-1.0)*x8161*x8166))+(((-1.0)*r12*x8165)));
evalcond[2]=(((x8160*x8163))+(((-1.0)*r02*x8166))+(((-1.0)*x8162*x8165)));
evalcond[3]=((1.0)+(((-1.0)*r02*x8165))+((x8159*x8162))+(((-1.0)*x8163*x8166)));
evalcond[4]=(((cj2*sj1))+((x8160*x8164))+(((-1.0)*r21*sj5*x8165))+((cj1*sj2))+(((-1.0)*r22*x8166)));
evalcond[5]=(((x8160*x8161))+(((-1.0)*sj1*sj2))+(((-1.0)*r12*x8166))+(((-1.0)*r11*sj5*x8165))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8168 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8168.valid){
continue;
}
CheckValue<IkReal> x8169=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x8169.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8168.value)+(((1.5707963267949)*(x8169.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8170=IKsin(j4);
IkReal x8171=IKcos(j4);
IkReal x8172=(cj5*r10);
IkReal x8173=(r01*sj5);
IkReal x8174=(cj5*r00);
IkReal x8175=(cj5*r20);
IkReal x8176=((1.0)*x8171);
IkReal x8177=((1.0)*x8170);
IkReal x8178=(sj5*x8170);
evalcond[0]=((((-1.0)*x8175*x8177))+(((-1.0)*r22*x8176))+((r21*x8178)));
evalcond[1]=((((-1.0)*r12*x8176))+(((-1.0)*x8172*x8177))+((r11*x8178)));
evalcond[2]=((((-1.0)*r02*x8177))+(((-1.0)*x8173*x8176))+((x8171*x8174)));
evalcond[3]=((1.0)+(((-1.0)*x8174*x8177))+(((-1.0)*r02*x8176))+((x8170*x8173)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x8177))+((x8171*x8175))+(((-1.0)*r21*sj5*x8176)));
evalcond[5]=((((-1.0)*r12*x8177))+(((-1.0)*sj1*sj2))+((cj1*cj2))+((x8171*x8172))+(((-1.0)*r11*sj5*x8176)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8179=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8179);
rxp1_1=(px*r21);
rxp1_2=(r11*x8179);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8180=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8180);
rxp1_1=(px*r21);
rxp1_2=(r11*x8180);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8181=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8181);
rxp1_1=(px*r21);
rxp1_2=(r11*x8181);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8184=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x8184.valid){
continue;
}
IkReal x8182=x8184.value;
IkReal x8183=(sj0*x8182);
cj4array[0]=((((-1.0)*sj1*sj2*x8183))+((cj1*cj2*x8183)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8185=IKsin(j4);
IkReal x8186=IKcos(j4);
IkReal x8187=(r21*sj5);
IkReal x8188=(cj5*r20);
IkReal x8189=((1.0)*x8185);
IkReal x8190=((1.0)*x8186);
evalcond[0]=((-1.0)*r02*x8185);
evalcond[1]=((((-1.0)*r02*x8190))+(((-1.0)*sj0)));
evalcond[2]=(((x8185*x8187))+(((-1.0)*x8188*x8189)));
evalcond[3]=(((r11*sj5*x8185))+(((-1.0)*cj5*r10*x8189)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x8186*x8188))+(((-1.0)*x8187*x8190)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8193=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x8193.valid){
continue;
}
IkReal x8191=x8193.value;
IkReal x8192=((1.0)*x8191);
cj4array[0]=((((-1.0)*cj2*sj1*x8192))+(((-1.0)*cj1*sj2*x8192)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8194=IKsin(j4);
IkReal x8195=IKcos(j4);
IkReal x8196=(r11*sj5);
IkReal x8197=((1.0)*sj0);
IkReal x8198=((1.0)*x8195);
IkReal x8199=((1.0)*cj5*x8194);
evalcond[0]=((-1.0)*r02*x8194);
evalcond[1]=((((-1.0)*r02*x8198))+(((-1.0)*x8197)));
evalcond[2]=(((r21*sj5*x8194))+(((-1.0)*r20*x8199)));
evalcond[3]=(((x8194*x8196))+(((-1.0)*r10*x8199)));
evalcond[4]=((((-1.0)*x8196*x8198))+(((-1.0)*cj1*cj2*x8197))+((sj0*sj1*sj2))+((cj5*r10*x8195)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8200=IKPowWithIntegerCheck(r02,-1);
if(!x8200.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x8200.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8201=IKsin(j4);
IkReal x8202=IKcos(j4);
IkReal x8203=(cj5*x8202);
IkReal x8204=(sj5*x8201);
IkReal x8205=((1.0)*sj5*x8202);
IkReal x8206=((1.0)*cj5*x8201);
evalcond[0]=((-1.0)*r02*x8201);
evalcond[1]=(((r21*x8204))+(((-1.0)*r20*x8206)));
evalcond[2]=((((-1.0)*r10*x8206))+((r11*x8204)));
evalcond[3]=((((-1.0)*r21*x8205))+((cj2*sj1))+((cj1*sj2))+((r20*x8203)));
evalcond[4]=((((-1.0)*cj1*cj2*sj0))+(((-1.0)*r11*x8205))+((sj0*sj1*sj2))+((r10*x8203)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8207=((1.0)*sj0);
IkReal x8208=((1.0)*cj0);
CheckValue<IkReal> x8209 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x8208))+(((-1.0)*r12*x8207)))),IkReal(((((-1.0)*r01*sj5*x8208))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x8207)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8209.valid){
continue;
}
CheckValue<IkReal> x8210=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x8210.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8209.value)+(((1.5707963267949)*(x8210.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8211=IKsin(j4);
IkReal x8212=IKcos(j4);
IkReal x8213=(cj5*r10);
IkReal x8214=(sj1*sj2);
IkReal x8215=(r01*sj5);
IkReal x8216=(cj5*r00);
IkReal x8217=(cj5*r20);
IkReal x8218=((1.0)*x8212);
IkReal x8219=((1.0)*cj1*cj2);
IkReal x8220=((1.0)*x8211);
IkReal x8221=(sj5*x8211);
evalcond[0]=((((-1.0)*r22*x8218))+((r21*x8221))+(((-1.0)*x8217*x8220)));
evalcond[1]=(cj0+((r11*x8221))+(((-1.0)*r12*x8218))+(((-1.0)*x8213*x8220)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8218))+((x8211*x8215))+(((-1.0)*x8216*x8220)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*sj5*x8218))+(((-1.0)*r22*x8220))+((x8212*x8217)));
evalcond[4]=((((-1.0)*cj0*x8219))+((cj0*x8214))+(((-1.0)*r02*x8220))+(((-1.0)*x8215*x8218))+((x8212*x8216)));
evalcond[5]=((((-1.0)*r12*x8220))+(((-1.0)*sj0*x8219))+((x8212*x8213))+(((-1.0)*r11*sj5*x8218))+((sj0*x8214)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8222=((1.0)*cj5);
CheckValue<IkReal> x8223 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x8222))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8223.valid){
continue;
}
CheckValue<IkReal> x8224=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x8222)))),-1);
if(!x8224.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8223.value)+(((1.5707963267949)*(x8224.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8225=IKsin(j4);
IkReal x8226=IKcos(j4);
IkReal x8227=(cj5*r10);
IkReal x8228=(sj1*sj2);
IkReal x8229=(r01*sj5);
IkReal x8230=(cj5*r00);
IkReal x8231=(cj5*r20);
IkReal x8232=((1.0)*x8226);
IkReal x8233=((1.0)*cj1*cj2);
IkReal x8234=((1.0)*x8225);
IkReal x8235=(sj5*x8225);
evalcond[0]=(((r21*x8235))+(((-1.0)*r22*x8232))+(((-1.0)*x8231*x8234)));
evalcond[1]=(cj0+((r11*x8235))+(((-1.0)*r12*x8232))+(((-1.0)*x8227*x8234)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8232))+((x8225*x8229))+(((-1.0)*x8230*x8234)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*sj5*x8232))+(((-1.0)*r22*x8234))+((x8226*x8231)));
evalcond[4]=(((cj0*x8228))+(((-1.0)*x8229*x8232))+(((-1.0)*r02*x8234))+(((-1.0)*cj0*x8233))+((x8226*x8230)));
evalcond[5]=((((-1.0)*r11*sj5*x8232))+(((-1.0)*r12*x8234))+(((-1.0)*sj0*x8233))+((x8226*x8227))+((sj0*x8228)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8236=((1.0)*cj5);
CheckValue<IkReal> x8237=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x8236)))),-1);
if(!x8237.valid){
continue;
}
CheckValue<IkReal> x8238 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x8236)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8238.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8237.value)))+(x8238.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8239=IKsin(j4);
IkReal x8240=IKcos(j4);
IkReal x8241=(cj5*r10);
IkReal x8242=(sj1*sj2);
IkReal x8243=(r01*sj5);
IkReal x8244=(cj5*r00);
IkReal x8245=(cj5*r20);
IkReal x8246=((1.0)*x8240);
IkReal x8247=((1.0)*cj1*cj2);
IkReal x8248=((1.0)*x8239);
IkReal x8249=(sj5*x8239);
evalcond[0]=((((-1.0)*x8245*x8248))+(((-1.0)*r22*x8246))+((r21*x8249)));
evalcond[1]=((((-1.0)*x8241*x8248))+cj0+((r11*x8249))+(((-1.0)*r12*x8246)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x8244*x8248))+((x8239*x8243))+(((-1.0)*r02*x8246)));
evalcond[3]=(((cj2*sj1))+((x8240*x8245))+((cj1*sj2))+(((-1.0)*r22*x8248))+(((-1.0)*r21*sj5*x8246)));
evalcond[4]=(((x8240*x8244))+(((-1.0)*x8243*x8246))+(((-1.0)*cj0*x8247))+((cj0*x8242))+(((-1.0)*r02*x8248)));
evalcond[5]=(((x8240*x8241))+(((-1.0)*sj0*x8247))+(((-1.0)*r11*sj5*x8246))+((sj0*x8242))+(((-1.0)*r12*x8248)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x8250=cj1*cj1;
IkReal x8251=cj2*cj2;
IkReal x8252=(r10*sj5);
IkReal x8253=(cj1*px);
IkReal x8254=((98000.0)*cj2);
IkReal x8255=((0.0035)*sj1);
IkReal x8256=(cj5*r11);
IkReal x8257=(r00*sj5);
IkReal x8258=(cj5*r01);
IkReal x8259=(sj1*sj2);
IkReal x8260=((0.035)*sj1);
IkReal x8261=((10625.0)*cj1);
IkReal x8262=((0.02744)*sj2);
IkReal x8263=(cj1*sj1);
IkReal x8264=(cj1*py);
IkReal x8265=((9800.0)*x8259);
IkReal x8266=((9800.0)*cj1*cj2);
CheckValue<IkReal> x8267 = IKatan2WithCheck(IkReal((((x8252*x8266))+((x8252*x8261))+(((-1.0)*x8252*x8265))+((x8254*x8264))+((x8255*x8256))+((x8256*x8261))+((x8256*x8266))+(((106250.0)*x8264))+(((-98000.0)*py*x8259))+(((-1.0)*x8256*x8265))+((py*x8260))+(((-3350.0)*x8257))+(((-3350.0)*x8258))+(((-33500.0)*px))+((x8252*x8255)))),IkReal((((x8257*x8266))+((x8257*x8261))+((x8255*x8257))+((x8255*x8258))+((px*x8260))+(((33500.0)*py))+(((-1.0)*x8258*x8265))+(((-98000.0)*px*x8259))+(((-1.0)*x8257*x8265))+((x8258*x8266))+((x8258*x8261))+(((3350.0)*x8256))+(((3350.0)*x8252))+(((106250.0)*x8253))+((x8253*x8254)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8267.valid){
continue;
}
CheckValue<IkReal> x8268=IKPowWithIntegerCheck(IKsign(((42905.0000000049)+(((-83300.0)*cj1*x8259))+(((0.02744)*cj2*x8263))+((x8250*x8262))+(((0.02975)*x8263))+(((76832.0)*x8250*x8251))+(((-76832.0)*cj1*cj2*x8259))+(((-1.0)*x8262))+(((83300.0)*cj2*x8250))+(((6740.2499999951)*x8250))+(((-38416.0)*x8251)))),-1);
if(!x8268.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x8267.value)+(((1.5707963267949)*(x8268.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x8269=IKcos(j0);
IkReal x8270=IKsin(j0);
IkReal x8271=((0.1)*sj5);
IkReal x8272=((0.425)*cj1);
IkReal x8273=((0.1)*cj5);
IkReal x8274=((0.392)*sj2);
IkReal x8275=((0.392)*cj1*cj2);
IkReal x8276=(sj1*x8269);
IkReal x8277=(sj1*x8270);
evalcond[0]=((((-1.0)*x8274*x8276))+((x8269*x8272))+((x8269*x8275))+(((-1.0)*px))+(((1.4e-7)*x8276))+(((-0.134)*x8270))+(((-1.0)*r00*x8271))+(((-1.0)*r01*x8273)));
evalcond[1]=((((-1.0)*x8274*x8277))+(((-1.0)*py))+(((-1.0)*r10*x8271))+(((1.4e-7)*x8277))+(((-1.0)*r11*x8273))+((x8270*x8275))+((x8270*x8272))+(((0.134)*x8269)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
IkReal x8278=((1.0)*cj5);
IkReal x8279=((((-1.0)*r00*sj5))+(((-1.0)*r01*x8278)));
j4eval[0]=x8279;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x8278)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x8279);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8280=((1.0)*cj5);
IkReal x8281=((((-1.0)*r11*x8280))+(((-1.0)*r10*sj5)));
j4eval[0]=x8281;
j4eval[1]=((IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x8280)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x8281);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8282=((1.0)*sj0);
IkReal x8283=((1.0)*cj0);
IkReal x8284=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x8284;
j4eval[1]=((IKabs(((((-1.0)*r02*x8283))+(((-1.0)*r12*x8282)))))+(IKabs((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x8282))+(((-1.0)*r01*sj5*x8283))))));
j4eval[2]=IKsign(x8284);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x8285=((-1.0)*r20);
IkReal x8287 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x8287)==0){
continue;
}
IkReal x8286=pow(x8287,-0.5);
CheckValue<IkReal> x8288 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8285),IKFAST_ATAN2_MAGTHRESH);
if(!x8288.valid){
continue;
}
IkReal gconst0=((-1.0)*(x8288.value));
IkReal gconst1=(r21*x8286);
IkReal gconst2=(x8285*x8286);
CheckValue<IkReal> x8289 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8289.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x8289.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8290=((-1.0)*r20);
IkReal x8291=x8286;
CheckValue<IkReal> x8293 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8290),IKFAST_ATAN2_MAGTHRESH);
if(!x8293.valid){
continue;
}
IkReal x8292=((-1.0)*(x8293.value));
sj5=gconst1;
cj5=gconst2;
j5=x8292;
IkReal gconst0=x8292;
IkReal gconst1=(r21*x8291);
IkReal gconst2=(x8290*x8291);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8294=((-1.0)*r20);
IkReal x8295=x8286;
CheckValue<IkReal> x8297 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8294),IKFAST_ATAN2_MAGTHRESH);
if(!x8297.valid){
continue;
}
IkReal x8296=((-1.0)*(x8297.value));
sj5=gconst1;
cj5=gconst2;
j5=x8296;
IkReal gconst0=x8296;
IkReal gconst1=(r21*x8295);
IkReal gconst2=(x8294*x8295);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8298=((-1.0)*r20);
IkReal x8299=x8286;
CheckValue<IkReal> x8301 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8298),IKFAST_ATAN2_MAGTHRESH);
if(!x8301.valid){
continue;
}
IkReal x8300=((-1.0)*(x8301.value));
sj5=gconst1;
cj5=gconst2;
j5=x8300;
IkReal gconst0=x8300;
IkReal gconst1=(r21*x8299);
IkReal gconst2=(x8298*x8299);
IkReal x8302=r22*r22;
CheckValue<IkReal> x8306=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x8302))),-1);
if(!x8306.valid){
continue;
}
IkReal x8303=x8306.value;
IkReal x8304=(sj3*x8303);
IkReal x8305=((((2.0)*x8304*(r20*r20)*(r21*r21)))+((sj3*x8302))+((x8304*(r20*r20*r20*r20)))+((x8304*(r21*r21*r21*r21))));
j4eval[0]=x8305;
j4eval[1]=IKsign(x8305);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8307=((-1.0)*r20);
IkReal x8308=x8286;
CheckValue<IkReal> x8310 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8307),IKFAST_ATAN2_MAGTHRESH);
if(!x8310.valid){
continue;
}
IkReal x8309=((-1.0)*(x8310.value));
sj5=gconst1;
cj5=gconst2;
j5=x8309;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x8309;
IkReal gconst1=(r21*x8308);
IkReal gconst2=(x8307*x8308);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8311=((-1.0)*r20);
IkReal x8312=x8286;
CheckValue<IkReal> x8314 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8311),IKFAST_ATAN2_MAGTHRESH);
if(!x8314.valid){
continue;
}
IkReal x8313=((-1.0)*(x8314.value));
sj5=gconst1;
cj5=gconst2;
j5=x8313;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x8313;
IkReal gconst1=(r21*x8312);
IkReal gconst2=(x8311*x8312);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8315=((-1.0)*r20);
IkReal x8316=x8286;
CheckValue<IkReal> x8318 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8315),IKFAST_ATAN2_MAGTHRESH);
if(!x8318.valid){
continue;
}
IkReal x8317=((-1.0)*(x8318.value));
sj5=gconst1;
cj5=gconst2;
j5=x8317;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x8317;
IkReal gconst1=(r21*x8316);
IkReal gconst2=(x8315*x8316);
IkReal x8319=((1.0)*(r22*r22));
CheckValue<IkReal> x8323=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x8319))),-1);
if(!x8323.valid){
continue;
}
IkReal x8320=x8323.value;
IkReal x8321=((1.0)*x8320);
IkReal x8322=((((-1.0)*x8321*(r21*r21*r21*r21)))+(((-2.0)*x8320*(r20*r20)*(r21*r21)))+(((-1.0)*x8319))+(((-1.0)*x8321*(r20*r20*r20*r20))));
j4eval[0]=x8322;
j4eval[1]=IKsign(x8322);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8324=((-1.0)*r20);
IkReal x8325=x8286;
CheckValue<IkReal> x8327 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8324),IKFAST_ATAN2_MAGTHRESH);
if(!x8327.valid){
continue;
}
IkReal x8326=((-1.0)*(x8327.value));
sj5=gconst1;
cj5=gconst2;
j5=x8326;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8326;
IkReal gconst1=(r21*x8325);
IkReal gconst2=(x8324*x8325);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x8328=((-1.0)*r20);
IkReal x8329=x8286;
CheckValue<IkReal> x8331 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8328),IKFAST_ATAN2_MAGTHRESH);
if(!x8331.valid){
continue;
}
IkReal x8330=((-1.0)*(x8331.value));
sj5=gconst1;
cj5=gconst2;
j5=x8330;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8330;
IkReal gconst1=(r21*x8329);
IkReal gconst2=(x8328*x8329);
IkReal x8332=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x8336=IKPowWithIntegerCheck(x8332,-1);
if(!x8336.valid){
continue;
}
IkReal x8333=x8336.value;
IkReal x8334=((1.0)*x8333);
IkReal x8335=((((-1.0)*x8334*(r10*r10)*(r20*r20)))+(((-2.0)*r10*r11*r20*r21*x8333))+(((-1.0)*(r12*r12)))+(((-1.0)*x8334*(r11*r11)*(r21*r21))));
j4eval[0]=x8335;
j4eval[1]=r12;
j4eval[2]=x8332;
j4eval[3]=IKsign(x8335);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8337=((-1.0)*r20);
IkReal x8338=x8286;
CheckValue<IkReal> x8340 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8337),IKFAST_ATAN2_MAGTHRESH);
if(!x8340.valid){
continue;
}
IkReal x8339=((-1.0)*(x8340.value));
sj5=gconst1;
cj5=gconst2;
j5=x8339;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8339;
IkReal gconst1=(r21*x8338);
IkReal gconst2=(x8337*x8338);
IkReal x8341=r22*r22;
IkReal x8342=(cj1*r12*sj2);
IkReal x8343=(cj2*r12*sj1);
CheckValue<IkReal> x8347=IKPowWithIntegerCheck(((-1.0)+x8341),-1);
if(!x8347.valid){
continue;
}
IkReal x8344=x8347.value;
if((((1.0)+(((-1.0)*x8341)))) < -0.00001)
continue;
IkReal x8345=IKsqrt(((1.0)+(((-1.0)*x8341))));
IkReal x8346=(r22*x8344*x8345);
j4eval[0]=((IKabs(((((-1.0)*x8343))+(((-1.0)*x8342)))))+(IKabs((((x8342*x8346))+((x8343*x8346))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8348=(cj1*sj2);
IkReal x8349=(cj2*sj1);
IkReal x8350=((1.0)*r12);
IkReal x8351=(gconst1*r11);
IkReal x8352=((1.0)*gconst2*r10);
CheckValue<IkReal> x8353=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*gconst2*r01)))),-1);
if(!x8353.valid){
continue;
}
CheckValue<IkReal> x8354 = IKatan2WithCheck(IkReal((((x8348*x8351))+(((-1.0)*x8349*x8352))+(((-1.0)*x8348*x8352))+((x8349*x8351)))),IkReal(((((-1.0)*x8349*x8350))+(((-1.0)*x8348*x8350)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8354.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8353.value)))+(x8354.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8355=IKcos(j4);
IkReal x8356=IKsin(j4);
IkReal x8357=((1.0)*x8355);
IkReal x8358=(gconst1*x8355);
IkReal x8359=(gconst1*x8356);
IkReal x8360=((1.0)*gconst2*x8356);
evalcond[0]=((((-1.0)*gconst2*r10*x8357))+((r11*x8358))+((r12*x8356)));
evalcond[1]=((((-1.0)*r22*x8357))+(((-1.0)*r20*x8360))+((r21*x8359)));
evalcond[2]=((((-1.0)*r02*x8357))+(((-1.0)*r00*x8360))+((r01*x8359)));
evalcond[3]=((1.0)+((r11*x8359))+(((-1.0)*r12*x8357))+(((-1.0)*r10*x8360)));
evalcond[4]=(((cj2*sj1))+((r22*x8356))+((cj1*sj2))+(((-1.0)*gconst2*r20*x8357))+((r21*x8358)));
evalcond[5]=(((r02*x8356))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst2*r00*x8357))+((r01*x8358)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8361=(gconst2*r10);
IkReal x8362=(gconst1*r11);
CheckValue<IkReal> x8363=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x8361*x8361)))+(((-1.0)*(x8362*x8362)))+(((-1.0)*(r12*r12)))+(((2.0)*x8361*x8362)))),-1);
if(!x8363.valid){
continue;
}
CheckValue<IkReal> x8364 = IKatan2WithCheck(IkReal((x8362+(((-1.0)*x8361)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x8364.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8363.value)))+(x8364.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8365=IKcos(j4);
IkReal x8366=IKsin(j4);
IkReal x8367=((1.0)*x8365);
IkReal x8368=(gconst1*x8365);
IkReal x8369=(gconst1*x8366);
IkReal x8370=((1.0)*gconst2*x8366);
evalcond[0]=((((-1.0)*gconst2*r10*x8367))+((r12*x8366))+((r11*x8368)));
evalcond[1]=((((-1.0)*r20*x8370))+(((-1.0)*r22*x8367))+((r21*x8369)));
evalcond[2]=(((r01*x8369))+(((-1.0)*r00*x8370))+(((-1.0)*r02*x8367)));
evalcond[3]=((1.0)+(((-1.0)*r12*x8367))+(((-1.0)*r10*x8370))+((r11*x8369)));
evalcond[4]=(((cj2*sj1))+((r22*x8366))+((cj1*sj2))+((r21*x8368))+(((-1.0)*gconst2*r20*x8367)));
evalcond[5]=(((r01*x8368))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r02*x8366))+(((-1.0)*gconst2*r00*x8367)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8371=((1.0)*gconst2);
CheckValue<IkReal> x8372 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x8371))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8372.valid){
continue;
}
CheckValue<IkReal> x8373=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x8371)))),-1);
if(!x8373.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8372.value)+(((1.5707963267949)*(x8373.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8374=IKcos(j4);
IkReal x8375=IKsin(j4);
IkReal x8376=((1.0)*x8374);
IkReal x8377=(gconst1*x8374);
IkReal x8378=(gconst1*x8375);
IkReal x8379=((1.0)*gconst2*x8375);
evalcond[0]=((((-1.0)*gconst2*r10*x8376))+((r12*x8375))+((r11*x8377)));
evalcond[1]=((((-1.0)*r20*x8379))+(((-1.0)*r22*x8376))+((r21*x8378)));
evalcond[2]=((((-1.0)*r02*x8376))+(((-1.0)*r00*x8379))+((r01*x8378)));
evalcond[3]=((1.0)+(((-1.0)*r12*x8376))+(((-1.0)*r10*x8379))+((r11*x8378)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r21*x8377))+(((-1.0)*gconst2*r20*x8376))+((r22*x8375)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r02*x8375))+(((-1.0)*gconst2*r00*x8376))+((r01*x8377)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8380=((-1.0)*r20);
IkReal x8381=x8286;
CheckValue<IkReal> x8383 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8380),IKFAST_ATAN2_MAGTHRESH);
if(!x8383.valid){
continue;
}
IkReal x8382=((-1.0)*(x8383.value));
sj5=gconst1;
cj5=gconst2;
j5=x8382;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x8382;
IkReal gconst1=(r21*x8381);
IkReal gconst2=(x8380*x8381);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8384=((-1.0)*r20);
IkReal x8385=x8286;
CheckValue<IkReal> x8387 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8384),IKFAST_ATAN2_MAGTHRESH);
if(!x8387.valid){
continue;
}
IkReal x8386=((-1.0)*(x8387.value));
sj5=gconst1;
cj5=gconst2;
j5=x8386;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x8386;
IkReal gconst1=(r21*x8385);
IkReal gconst2=(x8384*x8385);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8388=((-1.0)*r20);
IkReal x8389=x8286;
CheckValue<IkReal> x8391 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8388),IKFAST_ATAN2_MAGTHRESH);
if(!x8391.valid){
continue;
}
IkReal x8390=((-1.0)*(x8391.value));
sj5=gconst1;
cj5=gconst2;
j5=x8390;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x8390;
IkReal gconst1=(r21*x8389);
IkReal gconst2=(x8388*x8389);
IkReal x8392=r22*r22;
IkReal x8393=(cj1*r12*sj2);
IkReal x8394=(cj2*r12*sj1);
CheckValue<IkReal> x8398=IKPowWithIntegerCheck(((-1.0)+x8392),-1);
if(!x8398.valid){
continue;
}
IkReal x8395=x8398.value;
if((((1.0)+(((-1.0)*x8392)))) < -0.00001)
continue;
IkReal x8396=IKsqrt(((1.0)+(((-1.0)*x8392))));
IkReal x8397=(r22*x8395*x8396);
j4eval[0]=((IKabs((((x8394*x8397))+((x8393*x8397)))))+(IKabs(((((-1.0)*x8393))+(((-1.0)*x8394))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8399=(cj1*sj2);
IkReal x8400=(cj2*sj1);
IkReal x8401=((1.0)*r12);
IkReal x8402=(gconst1*r11);
IkReal x8403=((1.0)*gconst2*r10);
CheckValue<IkReal> x8404=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*gconst2*r01)))),-1);
if(!x8404.valid){
continue;
}
CheckValue<IkReal> x8405 = IKatan2WithCheck(IkReal((((x8399*x8402))+(((-1.0)*x8400*x8403))+(((-1.0)*x8399*x8403))+((x8400*x8402)))),IkReal(((((-1.0)*x8400*x8401))+(((-1.0)*x8399*x8401)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8405.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8404.value)))+(x8405.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8406=IKcos(j4);
IkReal x8407=IKsin(j4);
IkReal x8408=((1.0)*x8406);
IkReal x8409=(gconst1*x8406);
IkReal x8410=(gconst1*x8407);
IkReal x8411=((1.0)*gconst2*x8407);
evalcond[0]=(((r11*x8409))+((r12*x8407))+(((-1.0)*gconst2*r10*x8408)));
evalcond[1]=((((-1.0)*r20*x8411))+((r21*x8410))+(((-1.0)*r22*x8408)));
evalcond[2]=((((-1.0)*r00*x8411))+(((-1.0)*r02*x8408))+((r01*x8410)));
evalcond[3]=((-1.0)+((r11*x8410))+(((-1.0)*r12*x8408))+(((-1.0)*r10*x8411)));
evalcond[4]=(((cj2*sj1))+((r22*x8407))+((cj1*sj2))+(((-1.0)*gconst2*r20*x8408))+((r21*x8409)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r01*x8409))+(((-1.0)*gconst2*r00*x8408))+((r02*x8407))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8412=(gconst1*r11);
IkReal x8413=(gconst2*r10);
CheckValue<IkReal> x8414=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x8412*x8412)+(((-2.0)*x8412*x8413))+(x8413*x8413))),-1);
if(!x8414.valid){
continue;
}
CheckValue<IkReal> x8415 = IKatan2WithCheck(IkReal(((((-1.0)*x8413))+x8412)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x8415.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8414.value)))+(x8415.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8416=IKcos(j4);
IkReal x8417=IKsin(j4);
IkReal x8418=((1.0)*x8416);
IkReal x8419=(gconst1*x8416);
IkReal x8420=(gconst1*x8417);
IkReal x8421=((1.0)*gconst2*x8417);
evalcond[0]=(((r12*x8417))+((r11*x8419))+(((-1.0)*gconst2*r10*x8418)));
evalcond[1]=(((r21*x8420))+(((-1.0)*r20*x8421))+(((-1.0)*r22*x8418)));
evalcond[2]=((((-1.0)*r02*x8418))+((r01*x8420))+(((-1.0)*r00*x8421)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x8418))+(((-1.0)*r10*x8421))+((r11*x8420)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r21*x8419))+((r22*x8417))+(((-1.0)*gconst2*r20*x8418)));
evalcond[5]=(((r02*x8417))+(((-1.0)*sj1*sj2))+((r01*x8419))+((cj1*cj2))+(((-1.0)*gconst2*r00*x8418)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8422 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8422.valid){
continue;
}
CheckValue<IkReal> x8423=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x8423.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8422.value)+(((1.5707963267949)*(x8423.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8424=IKcos(j4);
IkReal x8425=IKsin(j4);
IkReal x8426=((1.0)*x8424);
IkReal x8427=(gconst1*x8424);
IkReal x8428=(gconst1*x8425);
IkReal x8429=((1.0)*gconst2*x8425);
evalcond[0]=(((r11*x8427))+((r12*x8425))+(((-1.0)*gconst2*r10*x8426)));
evalcond[1]=(((r21*x8428))+(((-1.0)*r22*x8426))+(((-1.0)*r20*x8429)));
evalcond[2]=((((-1.0)*r02*x8426))+((r01*x8428))+(((-1.0)*r00*x8429)));
evalcond[3]=((-1.0)+(((-1.0)*r10*x8429))+((r11*x8428))+(((-1.0)*r12*x8426)));
evalcond[4]=(((cj2*sj1))+((r21*x8427))+((cj1*sj2))+(((-1.0)*gconst2*r20*x8426))+((r22*x8425)));
evalcond[5]=(((r02*x8425))+(((-1.0)*sj1*sj2))+(((-1.0)*gconst2*r00*x8426))+((r01*x8427))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8430=((-1.0)*r20);
IkReal x8431=x8286;
CheckValue<IkReal> x8433 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8430),IKFAST_ATAN2_MAGTHRESH);
if(!x8433.valid){
continue;
}
IkReal x8432=((-1.0)*(x8433.value));
sj5=gconst1;
cj5=gconst2;
j5=x8432;
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x8432;
IkReal gconst1=(r21*x8431);
IkReal gconst2=(x8430*x8431);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8434=((-1.0)*r20);
IkReal x8435=x8286;
CheckValue<IkReal> x8437 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8434),IKFAST_ATAN2_MAGTHRESH);
if(!x8437.valid){
continue;
}
IkReal x8436=((-1.0)*(x8437.value));
sj5=gconst1;
cj5=gconst2;
j5=x8436;
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x8436;
IkReal gconst1=(r21*x8435);
IkReal gconst2=(x8434*x8435);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8438=((-1.0)*r20);
IkReal x8439=x8286;
CheckValue<IkReal> x8441 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8438),IKFAST_ATAN2_MAGTHRESH);
if(!x8441.valid){
continue;
}
IkReal x8440=((-1.0)*(x8441.value));
sj5=gconst1;
cj5=gconst2;
j5=x8440;
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x8440;
IkReal gconst1=(r21*x8439);
IkReal gconst2=(x8438*x8439);
IkReal x8442=r22*r22;
IkReal x8443=((1.0)*r02);
IkReal x8444=(cj1*sj2);
IkReal x8445=(cj2*sj1);
CheckValue<IkReal> x8449=IKPowWithIntegerCheck(((-1.0)+x8442),-1);
if(!x8449.valid){
continue;
}
IkReal x8446=x8449.value;
if((((1.0)+(((-1.0)*x8442)))) < -0.00001)
continue;
IkReal x8447=IKsqrt(((1.0)+(((-1.0)*x8442))));
IkReal x8448=(r02*r22*x8446*x8447);
j4eval[0]=((IKabs((((x8444*x8448))+((x8445*x8448)))))+(IKabs(((((-1.0)*x8443*x8445))+(((-1.0)*x8443*x8444))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8450=(cj1*sj2);
IkReal x8451=(gconst1*r01);
IkReal x8452=((1.0)*r02);
IkReal x8453=(cj2*sj1);
IkReal x8454=((1.0)*gconst2*r00);
CheckValue<IkReal> x8455 = IKatan2WithCheck(IkReal((((x8451*x8453))+(((-1.0)*x8453*x8454))+((x8450*x8451))+(((-1.0)*x8450*x8454)))),IkReal(((((-1.0)*x8452*x8453))+(((-1.0)*x8450*x8452)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8455.valid){
continue;
}
CheckValue<IkReal> x8456=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x8456.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8455.value)+(((1.5707963267949)*(x8456.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8457=IKcos(j4);
IkReal x8458=IKsin(j4);
IkReal x8459=((1.0)*x8457);
IkReal x8460=(gconst1*x8457);
IkReal x8461=(gconst1*x8458);
IkReal x8462=((1.0)*gconst2*x8458);
evalcond[0]=(((r01*x8460))+((r02*x8458))+(((-1.0)*gconst2*r00*x8459)));
evalcond[1]=(((r21*x8461))+(((-1.0)*r22*x8459))+(((-1.0)*r20*x8462)));
evalcond[2]=(((r11*x8461))+(((-1.0)*r12*x8459))+(((-1.0)*r10*x8462)));
evalcond[3]=((-1.0)+((r01*x8461))+(((-1.0)*r02*x8459))+(((-1.0)*r00*x8462)));
evalcond[4]=(((cj2*sj1))+((r22*x8458))+((cj1*sj2))+((r21*x8460))+(((-1.0)*gconst2*r20*x8459)));
evalcond[5]=(((r11*x8460))+(((-1.0)*gconst2*r10*x8459))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r12*x8458)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8463=(gconst1*r01);
IkReal x8464=(gconst2*r00);
CheckValue<IkReal> x8465=IKPowWithIntegerCheck(IKsign(((x8463*x8463)+(((-2.0)*x8463*x8464))+(r02*r02)+(x8464*x8464))),-1);
if(!x8465.valid){
continue;
}
CheckValue<IkReal> x8466 = IKatan2WithCheck(IkReal(((((-1.0)*x8464))+x8463)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x8466.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8465.value)))+(x8466.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8467=IKcos(j4);
IkReal x8468=IKsin(j4);
IkReal x8469=((1.0)*x8467);
IkReal x8470=(gconst1*x8467);
IkReal x8471=(gconst1*x8468);
IkReal x8472=((1.0)*gconst2*x8468);
evalcond[0]=(((r01*x8470))+(((-1.0)*gconst2*r00*x8469))+((r02*x8468)));
evalcond[1]=(((r21*x8471))+(((-1.0)*r22*x8469))+(((-1.0)*r20*x8472)));
evalcond[2]=(((r11*x8471))+(((-1.0)*r10*x8472))+(((-1.0)*r12*x8469)));
evalcond[3]=((-1.0)+((r01*x8471))+(((-1.0)*r02*x8469))+(((-1.0)*r00*x8472)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x8468))+((r21*x8470))+(((-1.0)*gconst2*r20*x8469)));
evalcond[5]=(((r12*x8468))+((r11*x8470))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst2*r10*x8469)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8473=((1.0)*gconst2);
CheckValue<IkReal> x8474=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x8473)))),-1);
if(!x8474.valid){
continue;
}
CheckValue<IkReal> x8475 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst1*r21))+(((-1.0)*r20*x8473)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8475.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8474.value)))+(x8475.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8476=IKcos(j4);
IkReal x8477=IKsin(j4);
IkReal x8478=((1.0)*x8476);
IkReal x8479=(gconst1*x8476);
IkReal x8480=(gconst1*x8477);
IkReal x8481=((1.0)*gconst2*x8477);
evalcond[0]=(((r01*x8479))+(((-1.0)*gconst2*r00*x8478))+((r02*x8477)));
evalcond[1]=((((-1.0)*r20*x8481))+(((-1.0)*r22*x8478))+((r21*x8480)));
evalcond[2]=((((-1.0)*r10*x8481))+((r11*x8480))+(((-1.0)*r12*x8478)));
evalcond[3]=((-1.0)+((r01*x8480))+(((-1.0)*r02*x8478))+(((-1.0)*r00*x8481)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x8477))+((r21*x8479))+(((-1.0)*gconst2*r20*x8478)));
evalcond[5]=(((r12*x8477))+((r11*x8479))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst2*r10*x8478)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8482=((-1.0)*r20);
IkReal x8483=x8286;
CheckValue<IkReal> x8485 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8482),IKFAST_ATAN2_MAGTHRESH);
if(!x8485.valid){
continue;
}
IkReal x8484=((-1.0)*(x8485.value));
sj5=gconst1;
cj5=gconst2;
j5=x8484;
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x8484;
IkReal gconst1=(r21*x8483);
IkReal gconst2=(x8482*x8483);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x8486=((-1.0)*r20);
IkReal x8487=x8286;
CheckValue<IkReal> x8489 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8486),IKFAST_ATAN2_MAGTHRESH);
if(!x8489.valid){
continue;
}
IkReal x8488=((-1.0)*(x8489.value));
sj5=gconst1;
cj5=gconst2;
j5=x8488;
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x8488;
IkReal gconst1=(r21*x8487);
IkReal gconst2=(x8486*x8487);
IkReal x8490=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x8494=IKPowWithIntegerCheck(x8490,-1);
if(!x8494.valid){
continue;
}
IkReal x8491=x8494.value;
IkReal x8492=((1.0)*x8491);
IkReal x8493=((((-1.0)*(r02*r02)))+(((-1.0)*x8492*(r01*r01)*(r21*r21)))+(((-2.0)*r00*r01*r20*r21*x8491))+(((-1.0)*x8492*(r00*r00)*(r20*r20))));
j4eval[0]=x8493;
j4eval[1]=IKsign(x8493);
j4eval[2]=r02;
j4eval[3]=x8490;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8495=((-1.0)*r20);
IkReal x8496=x8286;
CheckValue<IkReal> x8498 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8495),IKFAST_ATAN2_MAGTHRESH);
if(!x8498.valid){
continue;
}
IkReal x8497=((-1.0)*(x8498.value));
sj5=gconst1;
cj5=gconst2;
j5=x8497;
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x8497;
IkReal gconst1=(r21*x8496);
IkReal gconst2=(x8495*x8496);
IkReal x8499=r22*r22;
IkReal x8500=((1.0)*r02);
IkReal x8501=(cj1*sj2);
IkReal x8502=(cj2*sj1);
CheckValue<IkReal> x8506=IKPowWithIntegerCheck(((-1.0)+x8499),-1);
if(!x8506.valid){
continue;
}
IkReal x8503=x8506.value;
if((((1.0)+(((-1.0)*x8499)))) < -0.00001)
continue;
IkReal x8504=IKsqrt(((1.0)+(((-1.0)*x8499))));
IkReal x8505=(r02*r22*x8503*x8504);
j4eval[0]=((IKabs(((((-1.0)*x8500*x8502))+(((-1.0)*x8500*x8501)))))+(IKabs((((x8502*x8505))+((x8501*x8505))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8507=(cj1*sj2);
IkReal x8508=(gconst1*r01);
IkReal x8509=((1.0)*r02);
IkReal x8510=(cj2*sj1);
IkReal x8511=((1.0)*gconst2*r00);
CheckValue<IkReal> x8512 = IKatan2WithCheck(IkReal(((((-1.0)*x8507*x8511))+((x8508*x8510))+((x8507*x8508))+(((-1.0)*x8510*x8511)))),IkReal(((((-1.0)*x8509*x8510))+(((-1.0)*x8507*x8509)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8512.valid){
continue;
}
CheckValue<IkReal> x8513=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x8513.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8512.value)+(((1.5707963267949)*(x8513.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8514=IKcos(j4);
IkReal x8515=IKsin(j4);
IkReal x8516=((1.0)*x8514);
IkReal x8517=(gconst1*x8514);
IkReal x8518=(gconst1*x8515);
IkReal x8519=((1.0)*gconst2*x8515);
evalcond[0]=((((-1.0)*gconst2*r00*x8516))+((r02*x8515))+((r01*x8517)));
evalcond[1]=((((-1.0)*r20*x8519))+((r21*x8518))+(((-1.0)*r22*x8516)));
evalcond[2]=(((r11*x8518))+(((-1.0)*r12*x8516))+(((-1.0)*r10*x8519)));
evalcond[3]=((1.0)+(((-1.0)*r00*x8519))+(((-1.0)*r02*x8516))+((r01*x8518)));
evalcond[4]=(((cj2*sj1))+((r22*x8515))+((cj1*sj2))+((r21*x8517))+(((-1.0)*gconst2*r20*x8516)));
evalcond[5]=(((r11*x8517))+(((-1.0)*sj1*sj2))+((r12*x8515))+(((-1.0)*gconst2*r10*x8516))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8520=(gconst1*r01);
IkReal x8521=(gconst2*r00);
CheckValue<IkReal> x8522 = IKatan2WithCheck(IkReal((x8520+(((-1.0)*x8521)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x8522.valid){
continue;
}
CheckValue<IkReal> x8523=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((-1.0)*(x8521*x8521)))+(((2.0)*x8520*x8521))+(((-1.0)*(x8520*x8520))))),-1);
if(!x8523.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8522.value)+(((1.5707963267949)*(x8523.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8524=IKcos(j4);
IkReal x8525=IKsin(j4);
IkReal x8526=((1.0)*x8524);
IkReal x8527=(gconst1*x8524);
IkReal x8528=(gconst1*x8525);
IkReal x8529=((1.0)*gconst2*x8525);
evalcond[0]=(((r02*x8525))+(((-1.0)*gconst2*r00*x8526))+((r01*x8527)));
evalcond[1]=(((r21*x8528))+(((-1.0)*r20*x8529))+(((-1.0)*r22*x8526)));
evalcond[2]=(((r11*x8528))+(((-1.0)*r10*x8529))+(((-1.0)*r12*x8526)));
evalcond[3]=((1.0)+(((-1.0)*r02*x8526))+(((-1.0)*r00*x8529))+((r01*x8528)));
evalcond[4]=(((cj2*sj1))+((r21*x8527))+((cj1*sj2))+((r22*x8525))+(((-1.0)*gconst2*r20*x8526)));
evalcond[5]=(((r12*x8525))+(((-1.0)*sj1*sj2))+(((-1.0)*gconst2*r10*x8526))+((r11*x8527))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8530 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8530.valid){
continue;
}
CheckValue<IkReal> x8531=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x8531.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8530.value)+(((1.5707963267949)*(x8531.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8532=IKcos(j4);
IkReal x8533=IKsin(j4);
IkReal x8534=((1.0)*x8532);
IkReal x8535=(gconst1*x8532);
IkReal x8536=(gconst1*x8533);
IkReal x8537=((1.0)*gconst2*x8533);
evalcond[0]=(((r01*x8535))+(((-1.0)*gconst2*r00*x8534))+((r02*x8533)));
evalcond[1]=((((-1.0)*r22*x8534))+((r21*x8536))+(((-1.0)*r20*x8537)));
evalcond[2]=((((-1.0)*r12*x8534))+((r11*x8536))+(((-1.0)*r10*x8537)));
evalcond[3]=((1.0)+(((-1.0)*r02*x8534))+(((-1.0)*r00*x8537))+((r01*x8536)));
evalcond[4]=(((r22*x8533))+((cj2*sj1))+(((-1.0)*gconst2*r20*x8534))+((cj1*sj2))+((r21*x8535)));
evalcond[5]=((((-1.0)*gconst2*r10*x8534))+(((-1.0)*sj1*sj2))+((r12*x8533))+((cj1*cj2))+((r11*x8535)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8538=((-1.0)*r20);
IkReal x8539=((-1.0)*px);
CheckValue<IkReal> x8541 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8538),IKFAST_ATAN2_MAGTHRESH);
if(!x8541.valid){
continue;
}
IkReal x8540=((-1.0)*(x8541.value));
sj5=gconst1;
cj5=gconst2;
j5=x8540;
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8539);
rxp1_1=(px*r21);
rxp1_2=(r11*x8539);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x8540;
IkReal gconst1=r21;
IkReal gconst2=x8538;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8542=((-1.0)*r20);
IkReal x8543=((-1.0)*px);
CheckValue<IkReal> x8545 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8542),IKFAST_ATAN2_MAGTHRESH);
if(!x8545.valid){
continue;
}
IkReal x8544=((-1.0)*(x8545.value));
sj5=gconst1;
cj5=gconst2;
j5=x8544;
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8543);
rxp1_1=(px*r21);
rxp1_2=(r11*x8543);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x8544;
IkReal gconst1=r21;
IkReal gconst2=x8542;
j4eval[0]=((1.0)+(r21*r21)+(((-1.0)*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8546=((-1.0)*r20);
IkReal x8547=((-1.0)*px);
CheckValue<IkReal> x8549 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8546),IKFAST_ATAN2_MAGTHRESH);
if(!x8549.valid){
continue;
}
IkReal x8548=((-1.0)*(x8549.value));
sj5=gconst1;
cj5=gconst2;
j5=x8548;
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8547);
rxp1_1=(px*r21);
rxp1_2=(r11*x8547);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x8548;
IkReal gconst1=r21;
IkReal gconst2=x8546;
j4eval[0]=(((r11*r21))+((r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8552=IKPowWithIntegerCheck((((gconst1*r11))+(((-1.0)*gconst2*r10))),-1);
if(!x8552.valid){
continue;
}
IkReal x8550=x8552.value;
IkReal x8551=(sj0*x8550);
cj4array[0]=((((-1.0)*sj1*sj2*x8551))+((cj1*cj2*x8551)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8553=IKsin(j4);
IkReal x8554=IKcos(j4);
IkReal x8555=((1.0)*gconst2);
IkReal x8556=(gconst1*r21);
evalcond[0]=(r02*x8553);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x8554)));
evalcond[2]=(((x8553*x8556))+(((-1.0)*r20*x8553*x8555)));
evalcond[3]=(((gconst1*r11*x8553))+(((-1.0)*r10*x8553*x8555)));
evalcond[4]=((((-1.0)*r20*x8554*x8555))+((cj2*sj1))+((cj1*sj2))+((x8554*x8556)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8559=IKPowWithIntegerCheck(((((-1.0)*gconst2*r20))+((gconst1*r21))),-1);
if(!x8559.valid){
continue;
}
IkReal x8557=x8559.value;
IkReal x8558=((1.0)*x8557);
cj4array[0]=((((-1.0)*cj1*sj2*x8558))+(((-1.0)*cj2*sj1*x8558)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8560=IKsin(j4);
IkReal x8561=IKcos(j4);
IkReal x8562=((1.0)*sj0);
IkReal x8563=(gconst1*x8560);
IkReal x8564=((1.0)*x8561);
IkReal x8565=((1.0)*gconst2*x8560);
evalcond[0]=(r02*x8560);
evalcond[1]=((((-1.0)*r02*x8564))+(((-1.0)*x8562)));
evalcond[2]=((((-1.0)*r20*x8565))+((r21*x8563)));
evalcond[3]=(((r11*x8563))+(((-1.0)*r10*x8565)));
evalcond[4]=((((-1.0)*gconst2*r10*x8564))+(((-1.0)*cj1*cj2*x8562))+((gconst1*r11*x8561))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8566=IKPowWithIntegerCheck(r02,-1);
if(!x8566.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x8566.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8567=IKsin(j4);
IkReal x8568=IKcos(j4);
IkReal x8569=(gconst1*r21);
IkReal x8570=(gconst1*r11);
IkReal x8571=((1.0)*gconst2*r10);
IkReal x8572=((1.0)*gconst2*r20);
evalcond[0]=(r02*x8567);
evalcond[1]=(((x8567*x8569))+(((-1.0)*x8567*x8572)));
evalcond[2]=((((-1.0)*x8567*x8571))+((x8567*x8570)));
evalcond[3]=(((cj2*sj1))+((x8568*x8569))+((cj1*sj2))+(((-1.0)*x8568*x8572)));
evalcond[4]=((((-1.0)*cj1*cj2*sj0))+(((-1.0)*x8568*x8571))+((sj0*sj1*sj2))+((x8568*x8570)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8573=(cj2*sj1);
IkReal x8574=(cj1*sj2);
IkReal x8575=(gconst1*r21);
IkReal x8576=((1.0)*gconst2*r20);
CheckValue<IkReal> x8577=IKPowWithIntegerCheck(IKsign(((((2.0)*gconst2*r20*x8575))+(((-1.0)*(r22*r22)))+(((-1.0)*gconst2*r20*x8576))+(((-1.0)*(x8575*x8575))))),-1);
if(!x8577.valid){
continue;
}
CheckValue<IkReal> x8578 = IKatan2WithCheck(IkReal((((r22*x8574))+((r22*x8573)))),IkReal(((((-1.0)*x8573*x8576))+((x8573*x8575))+((x8574*x8575))+(((-1.0)*x8574*x8576)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8578.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8577.value)))+(x8578.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8579=IKsin(j4);
IkReal x8580=IKcos(j4);
IkReal x8581=(sj1*sj2);
IkReal x8582=(gconst2*r10);
IkReal x8583=(gconst2*r00);
IkReal x8584=(gconst2*r20);
IkReal x8585=((1.0)*x8580);
IkReal x8586=(gconst1*x8580);
IkReal x8587=((1.0)*cj1*cj2);
IkReal x8588=(gconst1*x8579);
IkReal x8589=((1.0)*x8579);
evalcond[0]=((((-1.0)*r22*x8585))+(((-1.0)*x8584*x8589))+((r21*x8588)));
evalcond[1]=((((-1.0)*x8582*x8589))+cj0+((r11*x8588))+(((-1.0)*r12*x8585)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x8583*x8589))+(((-1.0)*r02*x8585))+((r01*x8588)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x8584*x8585))+((r22*x8579))+((cj1*sj2))+((r21*x8586)));
evalcond[4]=(((r02*x8579))+(((-1.0)*x8583*x8585))+(((-1.0)*cj0*x8587))+((r01*x8586))+((cj0*x8581)));
evalcond[5]=((((-1.0)*x8582*x8585))+((r12*x8579))+((r11*x8586))+((sj0*x8581))+(((-1.0)*sj0*x8587)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8590=((1.0)*gconst2);
CheckValue<IkReal> x8591=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x8590))+(((-1.0)*gconst1*r10)))),-1);
if(!x8591.valid){
continue;
}
CheckValue<IkReal> x8592 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x8590))+((gconst1*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8592.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8591.value)))+(x8592.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8593=IKsin(j4);
IkReal x8594=IKcos(j4);
IkReal x8595=(sj1*sj2);
IkReal x8596=(gconst2*r10);
IkReal x8597=(gconst2*r00);
IkReal x8598=(gconst2*r20);
IkReal x8599=((1.0)*x8594);
IkReal x8600=(gconst1*x8594);
IkReal x8601=((1.0)*cj1*cj2);
IkReal x8602=(gconst1*x8593);
IkReal x8603=((1.0)*x8593);
evalcond[0]=((((-1.0)*r22*x8599))+(((-1.0)*x8598*x8603))+((r21*x8602)));
evalcond[1]=(cj0+(((-1.0)*r12*x8599))+((r11*x8602))+(((-1.0)*x8596*x8603)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x8597*x8603))+(((-1.0)*r02*x8599))+((r01*x8602)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x8598*x8599))+((r21*x8600))+((r22*x8593)));
evalcond[4]=((((-1.0)*cj0*x8601))+((r01*x8600))+((cj0*x8595))+((r02*x8593))+(((-1.0)*x8597*x8599)));
evalcond[5]=(((sj0*x8595))+(((-1.0)*x8596*x8599))+((r11*x8600))+((r12*x8593))+(((-1.0)*sj0*x8601)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8604=((1.0)*gconst2);
CheckValue<IkReal> x8605 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x8604))+((cj0*gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8605.valid){
continue;
}
CheckValue<IkReal> x8606=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x8604))+(((-1.0)*gconst1*r00)))),-1);
if(!x8606.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8605.value)+(((1.5707963267949)*(x8606.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8607=IKsin(j4);
IkReal x8608=IKcos(j4);
IkReal x8609=(sj1*sj2);
IkReal x8610=(gconst2*r10);
IkReal x8611=(gconst2*r00);
IkReal x8612=(gconst2*r20);
IkReal x8613=((1.0)*x8608);
IkReal x8614=(gconst1*x8608);
IkReal x8615=((1.0)*cj1*cj2);
IkReal x8616=(gconst1*x8607);
IkReal x8617=((1.0)*x8607);
evalcond[0]=((((-1.0)*x8612*x8617))+(((-1.0)*r22*x8613))+((r21*x8616)));
evalcond[1]=(cj0+((r11*x8616))+(((-1.0)*r12*x8613))+(((-1.0)*x8610*x8617)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8613))+((r01*x8616))+(((-1.0)*x8611*x8617)));
evalcond[3]=((((-1.0)*x8612*x8613))+((cj2*sj1))+((cj1*sj2))+((r22*x8607))+((r21*x8614)));
evalcond[4]=(((r01*x8614))+(((-1.0)*x8611*x8613))+((r02*x8607))+(((-1.0)*cj0*x8615))+((cj0*x8609)));
evalcond[5]=(((r12*x8607))+((r11*x8614))+(((-1.0)*sj0*x8615))+(((-1.0)*x8610*x8613))+((sj0*x8609)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8618=((-1.0)*r20);
IkReal x8619=x8286;
CheckValue<IkReal> x8621 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8618),IKFAST_ATAN2_MAGTHRESH);
if(!x8621.valid){
continue;
}
IkReal x8620=((-1.0)*(x8621.value));
sj5=gconst1;
cj5=gconst2;
j5=x8620;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x8620;
IkReal gconst1=(r21*x8619);
IkReal gconst2=(x8618*x8619);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8622=((-1.0)*r20);
IkReal x8623=x8286;
CheckValue<IkReal> x8625 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8622),IKFAST_ATAN2_MAGTHRESH);
if(!x8625.valid){
continue;
}
IkReal x8624=((-1.0)*(x8625.value));
sj5=gconst1;
cj5=gconst2;
j5=x8624;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x8624;
IkReal gconst1=(r21*x8623);
IkReal gconst2=(x8622*x8623);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8626=((-1.0)*r20);
IkReal x8627=x8286;
CheckValue<IkReal> x8629 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8626),IKFAST_ATAN2_MAGTHRESH);
if(!x8629.valid){
continue;
}
IkReal x8628=((-1.0)*(x8629.value));
sj5=gconst1;
cj5=gconst2;
j5=x8628;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x8628;
IkReal gconst1=(r21*x8627);
IkReal gconst2=(x8626*x8627);
IkReal x8630=r22*r22;
CheckValue<IkReal> x8633=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x8630))),-1);
if(!x8633.valid){
continue;
}
IkReal x8631=x8633.value;
IkReal x8632=(((x8631*(r21*r21*r21*r21)))+x8630+((x8631*(r20*r20*r20*r20)))+(((2.0)*x8631*(r20*r20)*(r21*r21))));
j4eval[0]=x8632;
j4eval[1]=IKsign(x8632);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8634=((-1.0)*r20);
IkReal x8635=x8286;
CheckValue<IkReal> x8637 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8634),IKFAST_ATAN2_MAGTHRESH);
if(!x8637.valid){
continue;
}
IkReal x8636=((-1.0)*(x8637.value));
sj5=gconst1;
cj5=gconst2;
j5=x8636;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8636;
IkReal gconst1=(r21*x8635);
IkReal gconst2=(x8634*x8635);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8638=((-1.0)*r20);
IkReal x8639=x8286;
CheckValue<IkReal> x8641 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8638),IKFAST_ATAN2_MAGTHRESH);
if(!x8641.valid){
continue;
}
IkReal x8640=((-1.0)*(x8641.value));
sj5=gconst1;
cj5=gconst2;
j5=x8640;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8640;
IkReal gconst1=(r21*x8639);
IkReal gconst2=(x8638*x8639);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8642=((-1.0)*r20);
IkReal x8643=x8286;
CheckValue<IkReal> x8645 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8642),IKFAST_ATAN2_MAGTHRESH);
if(!x8645.valid){
continue;
}
IkReal x8644=((-1.0)*(x8645.value));
sj5=gconst1;
cj5=gconst2;
j5=x8644;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8644;
IkReal gconst1=(r21*x8643);
IkReal gconst2=(x8642*x8643);
IkReal x8646=r22*r22;
IkReal x8647=(cj1*r12*sj2);
IkReal x8648=(cj2*r12*sj1);
CheckValue<IkReal> x8652=IKPowWithIntegerCheck(((-1.0)+x8646),-1);
if(!x8652.valid){
continue;
}
IkReal x8649=x8652.value;
if((((1.0)+(((-1.0)*x8646)))) < -0.00001)
continue;
IkReal x8650=IKsqrt(((1.0)+(((-1.0)*x8646))));
IkReal x8651=((1.0)*r22*x8649*x8650);
j4eval[0]=((IKabs((x8648+x8647)))+(IKabs(((((-1.0)*x8647*x8651))+(((-1.0)*x8648*x8651))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8653=((1.0)*gconst1);
IkReal x8654=(cj2*sj1);
IkReal x8655=(gconst2*r10);
IkReal x8656=(cj1*sj2);
CheckValue<IkReal> x8657=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x8653))+(((-1.0)*gconst2*r01)))),-1);
if(!x8657.valid){
continue;
}
CheckValue<IkReal> x8658 = IKatan2WithCheck(IkReal((((x8655*x8656))+((x8654*x8655))+(((-1.0)*r11*x8653*x8656))+(((-1.0)*r11*x8653*x8654)))),IkReal((((r12*x8654))+((r12*x8656)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8658.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8657.value)))+(x8658.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8659=IKsin(j4);
IkReal x8660=IKcos(j4);
IkReal x8661=((1.0)*x8660);
IkReal x8662=(gconst2*x8660);
IkReal x8663=(gconst1*x8659);
IkReal x8664=((1.0)*x8659);
evalcond[0]=((((-1.0)*r22*x8661))+(((-1.0)*gconst2*r20*x8664))+((r21*x8663)));
evalcond[1]=((((-1.0)*gconst2*r00*x8664))+(((-1.0)*r02*x8661))+((r01*x8663)));
evalcond[2]=((((-1.0)*r12*x8664))+((r10*x8662))+(((-1.0)*gconst1*r11*x8661)));
evalcond[3]=((1.0)+(((-1.0)*r12*x8661))+((r11*x8663))+(((-1.0)*gconst2*r10*x8664)));
evalcond[4]=(((cj2*sj1))+((r20*x8662))+((cj1*sj2))+(((-1.0)*r22*x8664))+(((-1.0)*gconst1*r21*x8661)));
evalcond[5]=((((-1.0)*gconst1*r01*x8661))+(((-1.0)*r02*x8664))+(((-1.0)*cj1*cj2))+((r00*x8662))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8665=(gconst1*r11);
IkReal x8666=(gconst2*r10);
CheckValue<IkReal> x8667 = IKatan2WithCheck(IkReal((x8666+(((-1.0)*x8665)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x8667.valid){
continue;
}
CheckValue<IkReal> x8668=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x8666*x8666)+(x8665*x8665)+(((-2.0)*x8665*x8666)))),-1);
if(!x8668.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8667.value)+(((1.5707963267949)*(x8668.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8669=IKsin(j4);
IkReal x8670=IKcos(j4);
IkReal x8671=((1.0)*x8670);
IkReal x8672=(gconst2*x8670);
IkReal x8673=(gconst1*x8669);
IkReal x8674=((1.0)*x8669);
evalcond[0]=((((-1.0)*r22*x8671))+(((-1.0)*gconst2*r20*x8674))+((r21*x8673)));
evalcond[1]=((((-1.0)*r02*x8671))+(((-1.0)*gconst2*r00*x8674))+((r01*x8673)));
evalcond[2]=((((-1.0)*r12*x8674))+((r10*x8672))+(((-1.0)*gconst1*r11*x8671)));
evalcond[3]=((1.0)+(((-1.0)*r12*x8671))+((r11*x8673))+(((-1.0)*gconst2*r10*x8674)));
evalcond[4]=(((r20*x8672))+((cj2*sj1))+(((-1.0)*r22*x8674))+((cj1*sj2))+(((-1.0)*gconst1*r21*x8671)));
evalcond[5]=((((-1.0)*r02*x8674))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r00*x8672))+(((-1.0)*gconst1*r01*x8671)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8675=((1.0)*gconst2);
CheckValue<IkReal> x8676 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst1*r21))+(((-1.0)*r20*x8675)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8676.valid){
continue;
}
CheckValue<IkReal> x8677=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x8675))+(((-1.0)*gconst1*r00)))),-1);
if(!x8677.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8676.value)+(((1.5707963267949)*(x8677.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8678=IKsin(j4);
IkReal x8679=IKcos(j4);
IkReal x8680=((1.0)*x8679);
IkReal x8681=(gconst2*x8679);
IkReal x8682=(gconst1*x8678);
IkReal x8683=((1.0)*x8678);
evalcond[0]=((((-1.0)*r22*x8680))+((r21*x8682))+(((-1.0)*gconst2*r20*x8683)));
evalcond[1]=((((-1.0)*r02*x8680))+((r01*x8682))+(((-1.0)*gconst2*r00*x8683)));
evalcond[2]=((((-1.0)*r12*x8683))+((r10*x8681))+(((-1.0)*gconst1*r11*x8680)));
evalcond[3]=((1.0)+(((-1.0)*r12*x8680))+((r11*x8682))+(((-1.0)*gconst2*r10*x8683)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst1*r21*x8680))+((r20*x8681))+((cj1*sj2))+(((-1.0)*r22*x8683)));
evalcond[5]=((((-1.0)*r02*x8683))+((r00*x8681))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst1*r01*x8680)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8684=((-1.0)*r20);
IkReal x8685=x8286;
CheckValue<IkReal> x8687 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8684),IKFAST_ATAN2_MAGTHRESH);
if(!x8687.valid){
continue;
}
IkReal x8686=((-1.0)*(x8687.value));
sj5=gconst1;
cj5=gconst2;
j5=x8686;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x8686;
IkReal gconst1=(r21*x8685);
IkReal gconst2=(x8684*x8685);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x8688=((-1.0)*r20);
IkReal x8689=x8286;
CheckValue<IkReal> x8691 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8688),IKFAST_ATAN2_MAGTHRESH);
if(!x8691.valid){
continue;
}
IkReal x8690=((-1.0)*(x8691.value));
sj5=gconst1;
cj5=gconst2;
j5=x8690;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x8690;
IkReal gconst1=(r21*x8689);
IkReal gconst2=(x8688*x8689);
IkReal x8692=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x8696=IKPowWithIntegerCheck(x8692,-1);
if(!x8696.valid){
continue;
}
IkReal x8693=x8696.value;
IkReal x8694=((1.0)*x8693);
IkReal x8695=((((-1.0)*x8694*(r11*r11)*(r21*r21)))+(((-2.0)*r10*r11*r20*r21*x8693))+(((-1.0)*x8694*(r10*r10)*(r20*r20)))+(((-1.0)*(r12*r12))));
j4eval[0]=x8695;
j4eval[1]=r12;
j4eval[2]=x8692;
j4eval[3]=IKsign(x8695);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8697=((-1.0)*r20);
IkReal x8698=x8286;
CheckValue<IkReal> x8700 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8697),IKFAST_ATAN2_MAGTHRESH);
if(!x8700.valid){
continue;
}
IkReal x8699=((-1.0)*(x8700.value));
sj5=gconst1;
cj5=gconst2;
j5=x8699;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x8699;
IkReal gconst1=(r21*x8698);
IkReal gconst2=(x8697*x8698);
IkReal x8701=r22*r22;
IkReal x8702=(cj1*r12*sj2);
IkReal x8703=(cj2*r12*sj1);
CheckValue<IkReal> x8707=IKPowWithIntegerCheck(((-1.0)+x8701),-1);
if(!x8707.valid){
continue;
}
IkReal x8704=x8707.value;
if((((1.0)+(((-1.0)*x8701)))) < -0.00001)
continue;
IkReal x8705=IKsqrt(((1.0)+(((-1.0)*x8701))));
IkReal x8706=((1.0)*r22*x8704*x8705);
j4eval[0]=((IKabs((x8703+x8702)))+(IKabs(((((-1.0)*x8702*x8706))+(((-1.0)*x8703*x8706))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8708=((1.0)*gconst1);
IkReal x8709=(cj2*sj1);
IkReal x8710=(gconst2*r10);
IkReal x8711=(cj1*sj2);
CheckValue<IkReal> x8712=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst2*r01))+(((-1.0)*r00*x8708)))),-1);
if(!x8712.valid){
continue;
}
CheckValue<IkReal> x8713 = IKatan2WithCheck(IkReal((((x8709*x8710))+(((-1.0)*r11*x8708*x8711))+((x8710*x8711))+(((-1.0)*r11*x8708*x8709)))),IkReal((((r12*x8709))+((r12*x8711)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8713.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8712.value)))+(x8713.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8714=IKsin(j4);
IkReal x8715=IKcos(j4);
IkReal x8716=((1.0)*x8715);
IkReal x8717=(gconst2*x8715);
IkReal x8718=(gconst1*x8714);
IkReal x8719=((1.0)*x8714);
evalcond[0]=((((-1.0)*r22*x8716))+((r21*x8718))+(((-1.0)*gconst2*r20*x8719)));
evalcond[1]=((((-1.0)*r02*x8716))+(((-1.0)*gconst2*r00*x8719))+((r01*x8718)));
evalcond[2]=((((-1.0)*gconst1*r11*x8716))+(((-1.0)*r12*x8719))+((r10*x8717)));
evalcond[3]=((-1.0)+(((-1.0)*gconst2*r10*x8719))+(((-1.0)*r12*x8716))+((r11*x8718)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst1*r21*x8716))+(((-1.0)*r22*x8719))+((r20*x8717)));
evalcond[5]=((((-1.0)*r02*x8719))+(((-1.0)*sj1*sj2))+((r00*x8717))+(((-1.0)*gconst1*r01*x8716))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8720=(gconst1*r11);
IkReal x8721=(gconst2*r10);
CheckValue<IkReal> x8722=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r12*r12)))+(((-1.0)*(x8720*x8720)))+(((2.0)*x8720*x8721))+(((-1.0)*(x8721*x8721))))),-1);
if(!x8722.valid){
continue;
}
CheckValue<IkReal> x8723 = IKatan2WithCheck(IkReal((x8721+(((-1.0)*x8720)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x8723.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8722.value)))+(x8723.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8724=IKsin(j4);
IkReal x8725=IKcos(j4);
IkReal x8726=((1.0)*x8725);
IkReal x8727=(gconst2*x8725);
IkReal x8728=(gconst1*x8724);
IkReal x8729=((1.0)*x8724);
evalcond[0]=(((r21*x8728))+(((-1.0)*r22*x8726))+(((-1.0)*gconst2*r20*x8729)));
evalcond[1]=((((-1.0)*gconst2*r00*x8729))+(((-1.0)*r02*x8726))+((r01*x8728)));
evalcond[2]=(((r10*x8727))+(((-1.0)*gconst1*r11*x8726))+(((-1.0)*r12*x8729)));
evalcond[3]=((-1.0)+((r11*x8728))+(((-1.0)*gconst2*r10*x8729))+(((-1.0)*r12*x8726)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r20*x8727))+(((-1.0)*r22*x8729))+(((-1.0)*gconst1*r21*x8726)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*gconst1*r01*x8726))+(((-1.0)*r02*x8729))+((cj1*cj2))+((r00*x8727)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8730 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8730.valid){
continue;
}
CheckValue<IkReal> x8731=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x8731.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8730.value)+(((1.5707963267949)*(x8731.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8732=IKsin(j4);
IkReal x8733=IKcos(j4);
IkReal x8734=((1.0)*x8733);
IkReal x8735=(gconst2*x8733);
IkReal x8736=(gconst1*x8732);
IkReal x8737=((1.0)*x8732);
evalcond[0]=(((r21*x8736))+(((-1.0)*r22*x8734))+(((-1.0)*gconst2*r20*x8737)));
evalcond[1]=((((-1.0)*gconst2*r00*x8737))+(((-1.0)*r02*x8734))+((r01*x8736)));
evalcond[2]=(((r10*x8735))+(((-1.0)*gconst1*r11*x8734))+(((-1.0)*r12*x8737)));
evalcond[3]=((-1.0)+((r11*x8736))+(((-1.0)*gconst2*r10*x8737))+(((-1.0)*r12*x8734)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r20*x8735))+(((-1.0)*r22*x8737))+(((-1.0)*gconst1*r21*x8734)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*gconst1*r01*x8734))+(((-1.0)*r02*x8737))+((cj1*cj2))+((r00*x8735)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8738=((-1.0)*r20);
IkReal x8739=x8286;
CheckValue<IkReal> x8741 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8738),IKFAST_ATAN2_MAGTHRESH);
if(!x8741.valid){
continue;
}
IkReal x8740=((-1.0)*(x8741.value));
sj5=gconst1;
cj5=gconst2;
j5=x8740;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x8740;
IkReal gconst1=(r21*x8739);
IkReal gconst2=(x8738*x8739);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x8742=((-1.0)*r20);
IkReal x8743=x8286;
CheckValue<IkReal> x8745 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8742),IKFAST_ATAN2_MAGTHRESH);
if(!x8745.valid){
continue;
}
IkReal x8744=((-1.0)*(x8745.value));
sj5=gconst1;
cj5=gconst2;
j5=x8744;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x8744;
IkReal gconst1=(r21*x8743);
IkReal gconst2=(x8742*x8743);
IkReal x8746=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x8750=IKPowWithIntegerCheck(x8746,-1);
if(!x8750.valid){
continue;
}
IkReal x8747=x8750.value;
IkReal x8748=((1.0)*x8747);
IkReal x8749=((((-1.0)*(r02*r02)))+(((-2.0)*r00*r01*r20*r21*x8747))+(((-1.0)*x8748*(r00*r00)*(r20*r20)))+(((-1.0)*x8748*(r01*r01)*(r21*r21))));
j4eval[0]=x8749;
j4eval[1]=IKsign(x8749);
j4eval[2]=r02;
j4eval[3]=x8746;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8751=((-1.0)*r20);
IkReal x8752=x8286;
CheckValue<IkReal> x8754 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8751),IKFAST_ATAN2_MAGTHRESH);
if(!x8754.valid){
continue;
}
IkReal x8753=((-1.0)*(x8754.value));
sj5=gconst1;
cj5=gconst2;
j5=x8753;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x8753;
IkReal gconst1=(r21*x8752);
IkReal gconst2=(x8751*x8752);
IkReal x8755=r22*r22;
IkReal x8756=(cj1*r02*sj2);
IkReal x8757=(cj2*r02*sj1);
CheckValue<IkReal> x8761=IKPowWithIntegerCheck(((-1.0)+x8755),-1);
if(!x8761.valid){
continue;
}
IkReal x8758=x8761.value;
if((((1.0)+(((-1.0)*x8755)))) < -0.00001)
continue;
IkReal x8759=IKsqrt(((1.0)+(((-1.0)*x8755))));
IkReal x8760=((1.0)*r22*x8758*x8759);
j4eval[0]=((IKabs(((((-1.0)*x8757*x8760))+(((-1.0)*x8756*x8760)))))+(IKabs((x8756+x8757))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8762=(cj2*sj1);
IkReal x8763=(cj1*sj2);
IkReal x8764=(gconst2*r00);
IkReal x8765=((1.0)*gconst1*r01);
CheckValue<IkReal> x8766 = IKatan2WithCheck(IkReal(((((-1.0)*x8762*x8765))+((x8762*x8764))+(((-1.0)*x8763*x8765))+((x8763*x8764)))),IkReal((((r02*x8763))+((r02*x8762)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8766.valid){
continue;
}
CheckValue<IkReal> x8767=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x8767.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8766.value)+(((1.5707963267949)*(x8767.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8768=IKsin(j4);
IkReal x8769=IKcos(j4);
IkReal x8770=(gconst1*r11);
IkReal x8771=(gconst1*r21);
IkReal x8772=(gconst1*r01);
IkReal x8773=((1.0)*x8769);
IkReal x8774=(gconst2*x8769);
IkReal x8775=((1.0)*x8768);
evalcond[0]=((((-1.0)*gconst2*r20*x8775))+(((-1.0)*r22*x8773))+((x8768*x8771)));
evalcond[1]=((((-1.0)*gconst2*r10*x8775))+(((-1.0)*r12*x8773))+((x8768*x8770)));
evalcond[2]=((((-1.0)*r02*x8775))+((r00*x8774))+(((-1.0)*x8772*x8773)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x8773))+(((-1.0)*gconst2*r00*x8775))+((x8768*x8772)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x8775))+((r20*x8774))+(((-1.0)*x8771*x8773)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x8775))+((r10*x8774))+(((-1.0)*x8770*x8773)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8776=(gconst2*r00);
IkReal x8777=(gconst1*r01);
CheckValue<IkReal> x8778 = IKatan2WithCheck(IkReal((x8776+(((-1.0)*x8777)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x8778.valid){
continue;
}
CheckValue<IkReal> x8779=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x8777*x8777)))+(((-1.0)*(r02*r02)))+(((2.0)*x8776*x8777))+(((-1.0)*(x8776*x8776))))),-1);
if(!x8779.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8778.value)+(((1.5707963267949)*(x8779.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8780=IKsin(j4);
IkReal x8781=IKcos(j4);
IkReal x8782=(gconst1*r11);
IkReal x8783=(gconst1*r21);
IkReal x8784=(gconst1*r01);
IkReal x8785=((1.0)*x8781);
IkReal x8786=(gconst2*x8781);
IkReal x8787=((1.0)*x8780);
evalcond[0]=(((x8780*x8783))+(((-1.0)*r22*x8785))+(((-1.0)*gconst2*r20*x8787)));
evalcond[1]=(((x8780*x8782))+(((-1.0)*gconst2*r10*x8787))+(((-1.0)*r12*x8785)));
evalcond[2]=((((-1.0)*x8784*x8785))+(((-1.0)*r02*x8787))+((r00*x8786)));
evalcond[3]=((-1.0)+(((-1.0)*gconst2*r00*x8787))+((x8780*x8784))+(((-1.0)*r02*x8785)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x8783*x8785))+(((-1.0)*r22*x8787))+((r20*x8786)));
evalcond[5]=(((r10*x8786))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x8782*x8785))+(((-1.0)*r12*x8787)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8788=((1.0)*gconst2);
CheckValue<IkReal> x8789=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x8788)))),-1);
if(!x8789.valid){
continue;
}
CheckValue<IkReal> x8790 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x8788))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8790.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8789.value)))+(x8790.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8791=IKsin(j4);
IkReal x8792=IKcos(j4);
IkReal x8793=(gconst1*r11);
IkReal x8794=(gconst1*r21);
IkReal x8795=(gconst1*r01);
IkReal x8796=((1.0)*x8792);
IkReal x8797=(gconst2*x8792);
IkReal x8798=((1.0)*x8791);
evalcond[0]=((((-1.0)*gconst2*r20*x8798))+((x8791*x8794))+(((-1.0)*r22*x8796)));
evalcond[1]=((((-1.0)*r12*x8796))+(((-1.0)*gconst2*r10*x8798))+((x8791*x8793)));
evalcond[2]=((((-1.0)*x8795*x8796))+(((-1.0)*r02*x8798))+((r00*x8797)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x8796))+(((-1.0)*gconst2*r00*x8798))+((x8791*x8795)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x8794*x8796))+((r20*x8797))+(((-1.0)*r22*x8798)));
evalcond[5]=(((r10*x8797))+(((-1.0)*r12*x8798))+(((-1.0)*x8793*x8796))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8799=((-1.0)*r20);
IkReal x8800=x8286;
CheckValue<IkReal> x8802 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8799),IKFAST_ATAN2_MAGTHRESH);
if(!x8802.valid){
continue;
}
IkReal x8801=((-1.0)*(x8802.value));
sj5=gconst1;
cj5=gconst2;
j5=x8801;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x8801;
IkReal gconst1=(r21*x8800);
IkReal gconst2=(x8799*x8800);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8803=((-1.0)*r20);
IkReal x8804=x8286;
CheckValue<IkReal> x8806 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8803),IKFAST_ATAN2_MAGTHRESH);
if(!x8806.valid){
continue;
}
IkReal x8805=((-1.0)*(x8806.value));
sj5=gconst1;
cj5=gconst2;
j5=x8805;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x8805;
IkReal gconst1=(r21*x8804);
IkReal gconst2=(x8803*x8804);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8807=((-1.0)*r20);
IkReal x8808=x8286;
CheckValue<IkReal> x8810 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8807),IKFAST_ATAN2_MAGTHRESH);
if(!x8810.valid){
continue;
}
IkReal x8809=((-1.0)*(x8810.value));
sj5=gconst1;
cj5=gconst2;
j5=x8809;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x8809;
IkReal gconst1=(r21*x8808);
IkReal gconst2=(x8807*x8808);
IkReal x8811=r22*r22;
IkReal x8812=(cj1*r02*sj2);
IkReal x8813=(cj2*r02*sj1);
CheckValue<IkReal> x8817=IKPowWithIntegerCheck(((-1.0)+x8811),-1);
if(!x8817.valid){
continue;
}
IkReal x8814=x8817.value;
if((((1.0)+(((-1.0)*x8811)))) < -0.00001)
continue;
IkReal x8815=IKsqrt(((1.0)+(((-1.0)*x8811))));
IkReal x8816=((1.0)*r22*x8814*x8815);
j4eval[0]=((IKabs((x8813+x8812)))+(IKabs(((((-1.0)*x8813*x8816))+(((-1.0)*x8812*x8816))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8818=(cj2*sj1);
IkReal x8819=(cj1*sj2);
IkReal x8820=(gconst2*r00);
IkReal x8821=((1.0)*gconst1*r01);
CheckValue<IkReal> x8822 = IKatan2WithCheck(IkReal((((x8819*x8820))+(((-1.0)*x8818*x8821))+((x8818*x8820))+(((-1.0)*x8819*x8821)))),IkReal((((r02*x8819))+((r02*x8818)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8822.valid){
continue;
}
CheckValue<IkReal> x8823=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x8823.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8822.value)+(((1.5707963267949)*(x8823.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8824=IKsin(j4);
IkReal x8825=IKcos(j4);
IkReal x8826=(gconst1*r11);
IkReal x8827=(gconst1*r21);
IkReal x8828=(gconst1*r01);
IkReal x8829=((1.0)*x8825);
IkReal x8830=(gconst2*x8825);
IkReal x8831=((1.0)*x8824);
evalcond[0]=(((x8824*x8827))+(((-1.0)*gconst2*r20*x8831))+(((-1.0)*r22*x8829)));
evalcond[1]=(((x8824*x8826))+(((-1.0)*r12*x8829))+(((-1.0)*gconst2*r10*x8831)));
evalcond[2]=((((-1.0)*r02*x8831))+((r00*x8830))+(((-1.0)*x8828*x8829)));
evalcond[3]=((1.0)+((x8824*x8828))+(((-1.0)*r02*x8829))+(((-1.0)*gconst2*r00*x8831)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x8827*x8829))+((cj1*sj2))+((r20*x8830))+(((-1.0)*r22*x8831)));
evalcond[5]=((((-1.0)*x8826*x8829))+(((-1.0)*sj1*sj2))+((r10*x8830))+((cj1*cj2))+(((-1.0)*r12*x8831)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8832=(gconst1*r01);
IkReal x8833=(gconst2*r00);
CheckValue<IkReal> x8834 = IKatan2WithCheck(IkReal((x8833+(((-1.0)*x8832)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x8834.valid){
continue;
}
CheckValue<IkReal> x8835=IKPowWithIntegerCheck(IKsign(((((-2.0)*x8832*x8833))+(x8833*x8833)+(r02*r02)+(x8832*x8832))),-1);
if(!x8835.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8834.value)+(((1.5707963267949)*(x8835.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8836=IKsin(j4);
IkReal x8837=IKcos(j4);
IkReal x8838=(gconst1*r11);
IkReal x8839=(gconst1*r21);
IkReal x8840=(gconst1*r01);
IkReal x8841=((1.0)*x8837);
IkReal x8842=(gconst2*x8837);
IkReal x8843=((1.0)*x8836);
evalcond[0]=(((x8836*x8839))+(((-1.0)*gconst2*r20*x8843))+(((-1.0)*r22*x8841)));
evalcond[1]=(((x8836*x8838))+(((-1.0)*gconst2*r10*x8843))+(((-1.0)*r12*x8841)));
evalcond[2]=((((-1.0)*x8840*x8841))+(((-1.0)*r02*x8843))+((r00*x8842)));
evalcond[3]=((1.0)+(((-1.0)*r02*x8841))+(((-1.0)*gconst2*r00*x8843))+((x8836*x8840)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r20*x8842))+(((-1.0)*r22*x8843))+(((-1.0)*x8839*x8841)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*x8838*x8841))+((r10*x8842))+((cj1*cj2))+(((-1.0)*r12*x8843)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8844 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8844.valid){
continue;
}
CheckValue<IkReal> x8845=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x8845.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8844.value)+(((1.5707963267949)*(x8845.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8846=IKsin(j4);
IkReal x8847=IKcos(j4);
IkReal x8848=(gconst1*r11);
IkReal x8849=(gconst1*r21);
IkReal x8850=(gconst1*r01);
IkReal x8851=((1.0)*x8847);
IkReal x8852=(gconst2*x8847);
IkReal x8853=((1.0)*x8846);
evalcond[0]=(((x8846*x8849))+(((-1.0)*r22*x8851))+(((-1.0)*gconst2*r20*x8853)));
evalcond[1]=(((x8846*x8848))+(((-1.0)*gconst2*r10*x8853))+(((-1.0)*r12*x8851)));
evalcond[2]=((((-1.0)*x8850*x8851))+((r00*x8852))+(((-1.0)*r02*x8853)));
evalcond[3]=((1.0)+(((-1.0)*gconst2*r00*x8853))+((x8846*x8850))+(((-1.0)*r02*x8851)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x8849*x8851))+(((-1.0)*r22*x8853))+((cj1*sj2))+((r20*x8852)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*x8848*x8851))+(((-1.0)*r12*x8853))+((cj1*cj2))+((r10*x8852)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8854=((-1.0)*r20);
IkReal x8855=((-1.0)*px);
CheckValue<IkReal> x8857 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8854),IKFAST_ATAN2_MAGTHRESH);
if(!x8857.valid){
continue;
}
IkReal x8856=((-1.0)*(x8857.value));
sj5=gconst1;
cj5=gconst2;
j5=x8856;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8855);
rxp1_1=(px*r21);
rxp1_2=(r11*x8855);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x8856;
IkReal gconst1=r21;
IkReal gconst2=x8854;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8858=((-1.0)*r20);
IkReal x8859=((-1.0)*px);
CheckValue<IkReal> x8861 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8858),IKFAST_ATAN2_MAGTHRESH);
if(!x8861.valid){
continue;
}
IkReal x8860=((-1.0)*(x8861.value));
sj5=gconst1;
cj5=gconst2;
j5=x8860;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8859);
rxp1_1=(px*r21);
rxp1_2=(r11*x8859);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x8860;
IkReal gconst1=r21;
IkReal gconst2=x8858;
j4eval[0]=((-1.0)+(((-1.0)*(r21*r21)))+(r10*r10));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8862=((-1.0)*r20);
IkReal x8863=((-1.0)*px);
CheckValue<IkReal> x8865 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8862),IKFAST_ATAN2_MAGTHRESH);
if(!x8865.valid){
continue;
}
IkReal x8864=((-1.0)*(x8865.value));
sj5=gconst1;
cj5=gconst2;
j5=x8864;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8863);
rxp1_1=(px*r21);
rxp1_2=(r11*x8863);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x8864;
IkReal gconst1=r21;
IkReal gconst2=x8862;
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8868=IKPowWithIntegerCheck(((((-1.0)*gconst1*r11))+((gconst2*r10))),-1);
if(!x8868.valid){
continue;
}
IkReal x8866=x8868.value;
IkReal x8867=(sj0*x8866);
cj4array[0]=(((cj1*cj2*x8867))+(((-1.0)*sj1*sj2*x8867)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8869=IKsin(j4);
IkReal x8870=IKcos(j4);
IkReal x8871=(gconst1*x8869);
IkReal x8872=((1.0)*x8870);
IkReal x8873=((1.0)*gconst2*x8869);
evalcond[0]=((-1.0)*r02*x8869);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x8872)));
evalcond[2]=(((r21*x8871))+(((-1.0)*r20*x8873)));
evalcond[3]=(((r11*x8871))+(((-1.0)*r10*x8873)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((gconst2*r20*x8870))+(((-1.0)*gconst1*r21*x8872)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8876=IKPowWithIntegerCheck((((gconst2*r20))+(((-1.0)*gconst1*r21))),-1);
if(!x8876.valid){
continue;
}
IkReal x8874=x8876.value;
IkReal x8875=((1.0)*x8874);
cj4array[0]=((((-1.0)*cj1*sj2*x8875))+(((-1.0)*cj2*sj1*x8875)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8877=IKsin(j4);
IkReal x8878=IKcos(j4);
IkReal x8879=(gconst2*r10);
IkReal x8880=((1.0)*sj0);
IkReal x8881=(gconst1*r11);
IkReal x8882=((1.0)*x8877);
IkReal x8883=((1.0)*x8878);
evalcond[0]=((-1.0)*r02*x8877);
evalcond[1]=((((-1.0)*r02*x8883))+(((-1.0)*x8880)));
evalcond[2]=(((gconst1*r21*x8877))+(((-1.0)*gconst2*r20*x8882)));
evalcond[3]=(((x8877*x8881))+(((-1.0)*x8879*x8882)));
evalcond[4]=((((-1.0)*x8881*x8883))+(((-1.0)*cj1*cj2*x8880))+((sj0*sj1*sj2))+((x8878*x8879)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8884=IKPowWithIntegerCheck(r02,-1);
if(!x8884.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x8884.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8885=IKsin(j4);
IkReal x8886=IKcos(j4);
IkReal x8887=(gconst2*r10);
IkReal x8888=(gconst1*r11);
IkReal x8889=(gconst1*r21);
IkReal x8890=(gconst2*r20);
IkReal x8891=((1.0)*x8885);
IkReal x8892=((1.0)*x8886);
evalcond[0]=((-1.0)*r02*x8885);
evalcond[1]=((((-1.0)*x8890*x8891))+((x8885*x8889)));
evalcond[2]=((((-1.0)*x8887*x8891))+((x8885*x8888)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x8889*x8892))+((cj1*sj2))+((x8886*x8890)));
evalcond[4]=((((-1.0)*cj1*cj2*sj0))+((sj0*sj1*sj2))+((x8886*x8887))+(((-1.0)*x8888*x8892)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8893=(cj2*sj1);
IkReal x8894=(cj1*sj2);
IkReal x8895=(gconst1*r21);
IkReal x8896=((1.0)*gconst2*r20);
CheckValue<IkReal> x8897 = IKatan2WithCheck(IkReal((((r22*x8893))+((r22*x8894)))),IkReal((((x8893*x8895))+(((-1.0)*x8894*x8896))+((x8894*x8895))+(((-1.0)*x8893*x8896)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8897.valid){
continue;
}
CheckValue<IkReal> x8898=IKPowWithIntegerCheck(IKsign(((((-2.0)*gconst2*r20*x8895))+(r22*r22)+(x8895*x8895)+(((gconst2*gconst2)*(r20*r20))))),-1);
if(!x8898.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8897.value)+(((1.5707963267949)*(x8898.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8899=IKsin(j4);
IkReal x8900=IKcos(j4);
IkReal x8901=(gconst1*r11);
IkReal x8902=(sj1*sj2);
IkReal x8903=(gconst1*r21);
IkReal x8904=(gconst1*r01);
IkReal x8905=((1.0)*x8900);
IkReal x8906=(gconst2*x8900);
IkReal x8907=((1.0)*cj1*cj2);
IkReal x8908=((1.0)*x8899);
evalcond[0]=((((-1.0)*gconst2*r20*x8908))+(((-1.0)*r22*x8905))+((x8899*x8903)));
evalcond[1]=(cj0+(((-1.0)*gconst2*r10*x8908))+(((-1.0)*r12*x8905))+((x8899*x8901)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*gconst2*r00*x8908))+(((-1.0)*r02*x8905))+((x8899*x8904)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x8903*x8905))+((r20*x8906))+((cj1*sj2))+(((-1.0)*r22*x8908)));
evalcond[4]=(((r00*x8906))+(((-1.0)*r02*x8908))+((cj0*x8902))+(((-1.0)*x8904*x8905))+(((-1.0)*cj0*x8907)));
evalcond[5]=(((r10*x8906))+((sj0*x8902))+(((-1.0)*x8901*x8905))+(((-1.0)*r12*x8908))+(((-1.0)*sj0*x8907)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8909=((1.0)*gconst2);
CheckValue<IkReal> x8910 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x8909))+((gconst1*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8910.valid){
continue;
}
CheckValue<IkReal> x8911=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x8909)))),-1);
if(!x8911.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8910.value)+(((1.5707963267949)*(x8911.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8912=IKsin(j4);
IkReal x8913=IKcos(j4);
IkReal x8914=(gconst1*r11);
IkReal x8915=(sj1*sj2);
IkReal x8916=(gconst1*r21);
IkReal x8917=(gconst1*r01);
IkReal x8918=((1.0)*x8913);
IkReal x8919=(gconst2*x8913);
IkReal x8920=((1.0)*cj1*cj2);
IkReal x8921=((1.0)*x8912);
evalcond[0]=((((-1.0)*gconst2*r20*x8921))+((x8912*x8916))+(((-1.0)*r22*x8918)));
evalcond[1]=((((-1.0)*gconst2*r10*x8921))+cj0+(((-1.0)*r12*x8918))+((x8912*x8914)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8918))+(((-1.0)*gconst2*r00*x8921))+((x8912*x8917)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x8921))+(((-1.0)*x8916*x8918))+((cj1*sj2))+((r20*x8919)));
evalcond[4]=(((r00*x8919))+(((-1.0)*r02*x8921))+(((-1.0)*cj0*x8920))+((cj0*x8915))+(((-1.0)*x8917*x8918)));
evalcond[5]=((((-1.0)*sj0*x8920))+(((-1.0)*r12*x8921))+(((-1.0)*x8914*x8918))+((sj0*x8915))+((r10*x8919)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8922=((1.0)*gconst2);
CheckValue<IkReal> x8923 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst1*r21))+(((-1.0)*cj0*r20*x8922)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8923.valid){
continue;
}
CheckValue<IkReal> x8924=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x8922)))),-1);
if(!x8924.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8923.value)+(((1.5707963267949)*(x8924.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8925=IKsin(j4);
IkReal x8926=IKcos(j4);
IkReal x8927=(gconst1*r11);
IkReal x8928=(sj1*sj2);
IkReal x8929=(gconst1*r21);
IkReal x8930=(gconst1*r01);
IkReal x8931=((1.0)*x8926);
IkReal x8932=(gconst2*x8926);
IkReal x8933=((1.0)*cj1*cj2);
IkReal x8934=((1.0)*x8925);
evalcond[0]=(((x8925*x8929))+(((-1.0)*r22*x8931))+(((-1.0)*gconst2*r20*x8934)));
evalcond[1]=(((x8925*x8927))+(((-1.0)*r12*x8931))+cj0+(((-1.0)*gconst2*r10*x8934)));
evalcond[2]=(((x8925*x8930))+(((-1.0)*sj0))+(((-1.0)*gconst2*r00*x8934))+(((-1.0)*r02*x8931)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x8934))+((cj1*sj2))+((r20*x8932))+(((-1.0)*x8929*x8931)));
evalcond[4]=(((cj0*x8928))+(((-1.0)*x8930*x8931))+(((-1.0)*r02*x8934))+((r00*x8932))+(((-1.0)*cj0*x8933)));
evalcond[5]=((((-1.0)*r12*x8934))+(((-1.0)*sj0*x8933))+(((-1.0)*x8927*x8931))+((r10*x8932))+((sj0*x8928)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8935=((-1.0)*r20);
IkReal x8936=x8286;
CheckValue<IkReal> x8938 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8935),IKFAST_ATAN2_MAGTHRESH);
if(!x8938.valid){
continue;
}
IkReal x8937=((-1.0)*(x8938.value));
sj5=gconst1;
cj5=gconst2;
j5=x8937;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8937;
IkReal gconst1=(r21*x8936);
IkReal gconst2=(x8935*x8936);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8939=((-1.0)*r20);
IkReal x8940=x8286;
CheckValue<IkReal> x8942 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8939),IKFAST_ATAN2_MAGTHRESH);
if(!x8942.valid){
continue;
}
IkReal x8941=((-1.0)*(x8942.value));
sj5=gconst1;
cj5=gconst2;
j5=x8941;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8941;
IkReal gconst1=(r21*x8940);
IkReal gconst2=(x8939*x8940);
CheckValue<IkReal> x8950=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x8950.valid){
continue;
}
IkReal x8943=x8950.value;
IkReal x8944=(sj3*x8943);
IkReal x8945=(r11*x8944);
IkReal x8946=(r00*x8944);
IkReal x8947=(r01*x8944);
IkReal x8948=(r10*x8944);
IkReal x8949=(r20*r21*x8944);
j4eval[0]=IKsign((((r02*r12*sj3))+((r10*r20*r21*x8947))+((r10*x8946*(r20*r20)))+((r01*x8945*(r21*r21)))+((r00*r20*r21*x8945))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8951=gconst2*gconst2;
IkReal x8952=gconst1*gconst1;
IkReal x8953=((1.0)*cj3);
IkReal x8954=((1.0)*sj3);
IkReal x8955=(r11*sj3);
IkReal x8956=(r10*sj3);
IkReal x8957=(gconst1*gconst2*r00);
IkReal x8958=(gconst1*gconst2*r01);
IkReal x8959=(r00*x8951);
IkReal x8960=(r01*x8952);
CheckValue<IkReal> x8961 = IKatan2WithCheck(IkReal((((gconst2*r02*x8955))+((gconst1*r02*x8956)))),IkReal((((x8956*x8960))+(((-1.0)*r11*x8954*x8959))+(((-1.0)*r10*x8954*x8957))+((x8955*x8958)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8961.valid){
continue;
}
CheckValue<IkReal> x8962=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r12*x8953))+(((-1.0)*r10*x8953*x8959))+((cj3*r10*x8958))+((cj3*r11*x8957))+(((-1.0)*r11*x8953*x8960)))),-1);
if(!x8962.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8961.value)+(((1.5707963267949)*(x8962.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x8963=IKsin(j4);
IkReal x8964=IKcos(j4);
IkReal x8965=(sj1*sj2);
IkReal x8966=(gconst1*sj3);
IkReal x8967=(cj3*gconst1);
IkReal x8968=(cj3*gconst2);
IkReal x8969=((1.0)*cj2);
IkReal x8970=(cj1*sj2);
IkReal x8971=(gconst2*sj3);
IkReal x8972=(cj1*x8969);
IkReal x8973=((1.0)*x8964);
IkReal x8974=((1.0)*x8963);
IkReal x8975=(gconst1*x8963);
IkReal x8976=(cj3*x8963);
IkReal x8977=(x8964*x8971);
evalcond[0]=(((r21*x8975))+(((-1.0)*gconst2*r20*x8974))+(((-1.0)*r22*x8973)));
evalcond[1]=(((r01*x8975))+(((-1.0)*r02*x8973))+(((-1.0)*gconst2*r00*x8974)));
evalcond[2]=((1.0)+((r11*x8975))+(((-1.0)*gconst2*r10*x8974))+(((-1.0)*r12*x8973)));
evalcond[3]=(((r11*x8971))+((r12*x8976))+(((-1.0)*r10*x8968*x8973))+((r11*x8964*x8967))+((r10*x8966)));
evalcond[4]=(((r11*x8968))+(((-1.0)*r12*sj3*x8974))+((r10*x8977))+((r10*x8967))+(((-1.0)*r11*x8966*x8973)));
evalcond[5]=(((r21*x8971))+((cj2*sj1))+x8970+((r21*x8964*x8967))+((r20*x8966))+((r22*x8976))+(((-1.0)*r20*x8968*x8973)));
evalcond[6]=(((r01*x8964*x8967))+(((-1.0)*x8972))+x8965+((r01*x8971))+((r00*x8966))+(((-1.0)*r00*x8968*x8973))+((r02*x8976)));
evalcond[7]=((((-1.0)*r21*x8966*x8973))+((r20*x8977))+(((-1.0)*x8972))+x8965+(((-1.0)*r22*sj3*x8974))+((r20*x8967))+((r21*x8968)));
evalcond[8]=((((-1.0)*r01*x8966*x8973))+(((-1.0)*r02*sj3*x8974))+(((-1.0)*sj1*x8969))+((r00*x8977))+((r00*x8967))+((r01*x8968))+(((-1.0)*x8970)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8978=gconst2*gconst2;
IkReal x8979=gconst1*gconst1;
IkReal x8980=(gconst2*r11);
IkReal x8981=(cj3*r02);
IkReal x8982=(gconst1*r01);
IkReal x8983=(cj3*r10);
IkReal x8984=(r10*sj3);
IkReal x8985=((1.0)*gconst1*r00);
IkReal x8986=(r01*x8979);
IkReal x8987=(r00*x8978);
CheckValue<IkReal> x8988 = IKatan2WithCheck(IkReal((((gconst1*r10*x8981))+((x8980*x8981)))),IkReal((((x8983*x8986))+(((-1.0)*gconst2*x8983*x8985))+(((-1.0)*cj3*r11*x8987))+((cj3*x8980*x8982)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8988.valid){
continue;
}
CheckValue<IkReal> x8989=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+(((-1.0)*sj3*x8980*x8985))+(((-1.0)*gconst2*x8982*x8984))+((x8984*x8987))+((r11*sj3*x8986)))),-1);
if(!x8989.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8988.value)+(((1.5707963267949)*(x8989.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x8990=IKsin(j4);
IkReal x8991=IKcos(j4);
IkReal x8992=(sj1*sj2);
IkReal x8993=(gconst1*sj3);
IkReal x8994=(cj3*gconst1);
IkReal x8995=(cj3*gconst2);
IkReal x8996=((1.0)*cj2);
IkReal x8997=(cj1*sj2);
IkReal x8998=(gconst2*sj3);
IkReal x8999=(cj1*x8996);
IkReal x9000=((1.0)*x8991);
IkReal x9001=((1.0)*x8990);
IkReal x9002=(gconst1*x8990);
IkReal x9003=(cj3*x8990);
IkReal x9004=(x8991*x8998);
evalcond[0]=((((-1.0)*r22*x9000))+((r21*x9002))+(((-1.0)*gconst2*r20*x9001)));
evalcond[1]=((((-1.0)*r02*x9000))+(((-1.0)*gconst2*r00*x9001))+((r01*x9002)));
evalcond[2]=((1.0)+(((-1.0)*gconst2*r10*x9001))+(((-1.0)*r12*x9000))+((r11*x9002)));
evalcond[3]=((((-1.0)*r10*x8995*x9000))+((r11*x8998))+((r11*x8991*x8994))+((r10*x8993))+((r12*x9003)));
evalcond[4]=(((r11*x8995))+(((-1.0)*r11*x8993*x9000))+((r10*x8994))+((r10*x9004))+(((-1.0)*r12*sj3*x9001)));
evalcond[5]=(((cj2*sj1))+((r21*x8998))+((r22*x9003))+((r20*x8993))+x8997+(((-1.0)*r20*x8995*x9000))+((r21*x8991*x8994)));
evalcond[6]=(((r01*x8991*x8994))+x8992+((r02*x9003))+(((-1.0)*x8999))+((r01*x8998))+((r00*x8993))+(((-1.0)*r00*x8995*x9000)));
evalcond[7]=(((r21*x8995))+((r20*x8994))+x8992+(((-1.0)*x8999))+(((-1.0)*r21*x8993*x9000))+(((-1.0)*r22*sj3*x9001))+((r20*x9004)));
evalcond[8]=((((-1.0)*r01*x8993*x9000))+(((-1.0)*r02*sj3*x9001))+((r01*x8995))+((r00*x8994))+(((-1.0)*x8997))+(((-1.0)*sj1*x8996))+((r00*x9004)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9005=((1.0)*gconst2);
CheckValue<IkReal> x9006 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst1*r21))+(((-1.0)*r20*x9005)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9006.valid){
continue;
}
CheckValue<IkReal> x9007=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x9005)))),-1);
if(!x9007.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9006.value)+(((1.5707963267949)*(x9007.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9008=IKsin(j4);
IkReal x9009=IKcos(j4);
IkReal x9010=(sj1*sj2);
IkReal x9011=(gconst1*sj3);
IkReal x9012=(cj3*gconst1);
IkReal x9013=(cj3*gconst2);
IkReal x9014=((1.0)*cj2);
IkReal x9015=(cj1*sj2);
IkReal x9016=(gconst2*sj3);
IkReal x9017=(cj1*x9014);
IkReal x9018=((1.0)*x9009);
IkReal x9019=((1.0)*x9008);
IkReal x9020=(gconst1*x9008);
IkReal x9021=(cj3*x9008);
IkReal x9022=(x9009*x9016);
evalcond[0]=((((-1.0)*gconst2*r20*x9019))+(((-1.0)*r22*x9018))+((r21*x9020)));
evalcond[1]=(((r01*x9020))+(((-1.0)*r02*x9018))+(((-1.0)*gconst2*r00*x9019)));
evalcond[2]=((1.0)+(((-1.0)*r12*x9018))+((r11*x9020))+(((-1.0)*gconst2*r10*x9019)));
evalcond[3]=((((-1.0)*r10*x9013*x9018))+((r11*x9009*x9012))+((r10*x9011))+((r12*x9021))+((r11*x9016)));
evalcond[4]=((((-1.0)*r11*x9011*x9018))+((r10*x9022))+((r10*x9012))+(((-1.0)*r12*sj3*x9019))+((r11*x9013)));
evalcond[5]=(((cj2*sj1))+((r22*x9021))+x9015+(((-1.0)*r20*x9013*x9018))+((r21*x9009*x9012))+((r20*x9011))+((r21*x9016)));
evalcond[6]=((((-1.0)*x9017))+(((-1.0)*r00*x9013*x9018))+x9010+((r02*x9021))+((r01*x9009*x9012))+((r01*x9016))+((r00*x9011)));
evalcond[7]=((((-1.0)*x9017))+(((-1.0)*r22*sj3*x9019))+x9010+((r20*x9012))+((r20*x9022))+((r21*x9013))+(((-1.0)*r21*x9011*x9018)));
evalcond[8]=((((-1.0)*x9015))+((r00*x9022))+(((-1.0)*r02*sj3*x9019))+((r01*x9013))+((r00*x9012))+(((-1.0)*r01*x9011*x9018))+(((-1.0)*sj1*x9014)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9023=((-1.0)*r20);
IkReal x9024=x8286;
CheckValue<IkReal> x9026 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9023),IKFAST_ATAN2_MAGTHRESH);
if(!x9026.valid){
continue;
}
IkReal x9025=((-1.0)*(x9026.value));
sj5=gconst1;
cj5=gconst2;
j5=x9025;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9025;
IkReal gconst1=(r21*x9024);
IkReal gconst2=(x9023*x9024);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9027=((-1.0)*r20);
IkReal x9028=x8286;
CheckValue<IkReal> x9030 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9027),IKFAST_ATAN2_MAGTHRESH);
if(!x9030.valid){
continue;
}
IkReal x9029=((-1.0)*(x9030.value));
sj5=gconst1;
cj5=gconst2;
j5=x9029;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9029;
IkReal gconst1=(r21*x9028);
IkReal gconst2=(x9027*x9028);
CheckValue<IkReal> x9038=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9038.valid){
continue;
}
IkReal x9031=x9038.value;
IkReal x9032=(sj3*x9031);
IkReal x9033=(r11*x9032);
IkReal x9034=(r00*x9032);
IkReal x9035=(r01*x9032);
IkReal x9036=(r10*x9032);
IkReal x9037=(r20*r21*x9032);
j4eval[0]=IKsign((((r02*r12*sj3))+((r00*r20*r21*x9033))+((r10*r20*r21*x9035))+((r10*x9034*(r20*r20)))+((r01*x9033*(r21*r21)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9039=gconst2*gconst2;
IkReal x9040=gconst1*gconst1;
IkReal x9041=((1.0)*cj3);
IkReal x9042=((1.0)*sj3);
IkReal x9043=(r11*sj3);
IkReal x9044=(r10*sj3);
IkReal x9045=(gconst1*gconst2*r00);
IkReal x9046=(gconst1*gconst2*r01);
IkReal x9047=(r00*x9039);
IkReal x9048=(r01*x9040);
CheckValue<IkReal> x9049 = IKatan2WithCheck(IkReal((((gconst2*r02*x9043))+((gconst1*r02*x9044)))),IkReal((((x9044*x9048))+(((-1.0)*r10*x9042*x9045))+((x9043*x9046))+(((-1.0)*r11*x9042*x9047)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9049.valid){
continue;
}
CheckValue<IkReal> x9050=IKPowWithIntegerCheck(IKsign((((cj3*r11*x9045))+(((-1.0)*r11*x9041*x9048))+(((-1.0)*r02*r12*x9041))+(((-1.0)*r10*x9041*x9047))+((cj3*r10*x9046)))),-1);
if(!x9050.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9049.value)+(((1.5707963267949)*(x9050.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9051=IKsin(j4);
IkReal x9052=IKcos(j4);
IkReal x9053=(cj2*sj1);
IkReal x9054=(cj1*sj2);
IkReal x9055=(gconst1*sj3);
IkReal x9056=(cj3*gconst1);
IkReal x9057=(sj1*sj2);
IkReal x9058=(cj3*gconst2);
IkReal x9059=(cj1*cj2);
IkReal x9060=(gconst2*sj3);
IkReal x9061=((1.0)*x9052);
IkReal x9062=((1.0)*x9051);
IkReal x9063=(gconst1*x9051);
IkReal x9064=(cj3*x9051);
IkReal x9065=(x9053+x9054);
IkReal x9066=(x9052*x9060);
evalcond[0]=((((-1.0)*gconst2*r20*x9062))+((r21*x9063))+(((-1.0)*r22*x9061)));
evalcond[1]=(((r01*x9063))+(((-1.0)*gconst2*r00*x9062))+(((-1.0)*r02*x9061)));
evalcond[2]=((-1.0)+((r11*x9063))+(((-1.0)*gconst2*r10*x9062))+(((-1.0)*r12*x9061)));
evalcond[3]=(((r11*x9060))+((r11*x9052*x9056))+((r12*x9064))+(((-1.0)*r10*x9058*x9061))+((r10*x9055)));
evalcond[4]=(((r10*x9066))+((r11*x9058))+((r10*x9056))+(((-1.0)*r12*sj3*x9062))+(((-1.0)*r11*x9055*x9061)));
evalcond[5]=(((r22*x9064))+(((-1.0)*r20*x9058*x9061))+((r21*x9052*x9056))+((r20*x9055))+x9065+((r21*x9060)));
evalcond[6]=(((r01*x9052*x9056))+((r01*x9060))+((r02*x9064))+((r00*x9055))+x9059+(((-1.0)*r00*x9058*x9061))+(((-1.0)*x9057)));
evalcond[7]=(((r00*x9066))+((r00*x9056))+((r01*x9058))+(((-1.0)*r02*sj3*x9062))+x9065+(((-1.0)*r01*x9055*x9061)));
evalcond[8]=((((-1.0)*r22*sj3*x9062))+(((-1.0)*r21*x9055*x9061))+((r20*x9056))+x9057+((r20*x9066))+((r21*x9058))+(((-1.0)*x9059)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9067=gconst2*gconst2;
IkReal x9068=gconst1*gconst1;
IkReal x9069=(gconst2*r11);
IkReal x9070=(cj3*r02);
IkReal x9071=(gconst1*r01);
IkReal x9072=(cj3*r10);
IkReal x9073=(r10*sj3);
IkReal x9074=((1.0)*gconst1*r00);
IkReal x9075=(r01*x9068);
IkReal x9076=(r00*x9067);
CheckValue<IkReal> x9077 = IKatan2WithCheck(IkReal((((x9069*x9070))+((gconst1*r10*x9070)))),IkReal(((((-1.0)*gconst2*x9072*x9074))+(((-1.0)*cj3*r11*x9076))+((cj3*x9069*x9071))+((x9072*x9075)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9077.valid){
continue;
}
CheckValue<IkReal> x9078=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst2*x9071*x9073))+((r02*r12*sj3))+((x9073*x9076))+((r11*sj3*x9075))+(((-1.0)*sj3*x9069*x9074)))),-1);
if(!x9078.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9077.value)+(((1.5707963267949)*(x9078.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9079=IKsin(j4);
IkReal x9080=IKcos(j4);
IkReal x9081=(cj2*sj1);
IkReal x9082=(cj1*sj2);
IkReal x9083=(gconst1*sj3);
IkReal x9084=(cj3*gconst1);
IkReal x9085=(sj1*sj2);
IkReal x9086=(cj3*gconst2);
IkReal x9087=(cj1*cj2);
IkReal x9088=(gconst2*sj3);
IkReal x9089=((1.0)*x9080);
IkReal x9090=((1.0)*x9079);
IkReal x9091=(gconst1*x9079);
IkReal x9092=(cj3*x9079);
IkReal x9093=(x9082+x9081);
IkReal x9094=(x9080*x9088);
evalcond[0]=((((-1.0)*gconst2*r20*x9090))+((r21*x9091))+(((-1.0)*r22*x9089)));
evalcond[1]=((((-1.0)*gconst2*r00*x9090))+((r01*x9091))+(((-1.0)*r02*x9089)));
evalcond[2]=((-1.0)+((r11*x9091))+(((-1.0)*gconst2*r10*x9090))+(((-1.0)*r12*x9089)));
evalcond[3]=(((r11*x9088))+((r10*x9083))+((r12*x9092))+(((-1.0)*r10*x9086*x9089))+((r11*x9080*x9084)));
evalcond[4]=((((-1.0)*r12*sj3*x9090))+((r10*x9094))+((r11*x9086))+((r10*x9084))+(((-1.0)*r11*x9083*x9089)));
evalcond[5]=(((r20*x9083))+(((-1.0)*r20*x9086*x9089))+((r21*x9080*x9084))+x9093+((r21*x9088))+((r22*x9092)));
evalcond[6]=((((-1.0)*r00*x9086*x9089))+((r01*x9080*x9084))+((r01*x9088))+((r00*x9083))+x9087+(((-1.0)*x9085))+((r02*x9092)));
evalcond[7]=(((r01*x9086))+((r00*x9094))+(((-1.0)*r01*x9083*x9089))+((r00*x9084))+x9093+(((-1.0)*r02*sj3*x9090)));
evalcond[8]=(((r20*x9084))+((r20*x9094))+(((-1.0)*r22*sj3*x9090))+(((-1.0)*r21*x9083*x9089))+x9085+((r21*x9086))+(((-1.0)*x9087)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9095 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9095.valid){
continue;
}
CheckValue<IkReal> x9096=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x9096.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9095.value)+(((1.5707963267949)*(x9096.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9097=IKsin(j4);
IkReal x9098=IKcos(j4);
IkReal x9099=(cj2*sj1);
IkReal x9100=(cj1*sj2);
IkReal x9101=(gconst1*sj3);
IkReal x9102=(cj3*gconst1);
IkReal x9103=(sj1*sj2);
IkReal x9104=(cj3*gconst2);
IkReal x9105=(cj1*cj2);
IkReal x9106=(gconst2*sj3);
IkReal x9107=((1.0)*x9098);
IkReal x9108=((1.0)*x9097);
IkReal x9109=(gconst1*x9097);
IkReal x9110=(cj3*x9097);
IkReal x9111=(x9100+x9099);
IkReal x9112=(x9098*x9106);
evalcond[0]=((((-1.0)*r22*x9107))+((r21*x9109))+(((-1.0)*gconst2*r20*x9108)));
evalcond[1]=((((-1.0)*r02*x9107))+(((-1.0)*gconst2*r00*x9108))+((r01*x9109)));
evalcond[2]=((-1.0)+(((-1.0)*gconst2*r10*x9108))+(((-1.0)*r12*x9107))+((r11*x9109)));
evalcond[3]=(((r12*x9110))+((r10*x9101))+((r11*x9098*x9102))+((r11*x9106))+(((-1.0)*r10*x9104*x9107)));
evalcond[4]=(((r10*x9102))+(((-1.0)*r11*x9101*x9107))+(((-1.0)*r12*sj3*x9108))+((r11*x9104))+((r10*x9112)));
evalcond[5]=(x9111+((r21*x9106))+((r21*x9098*x9102))+((r22*x9110))+(((-1.0)*r20*x9104*x9107))+((r20*x9101)));
evalcond[6]=((((-1.0)*x9103))+x9105+(((-1.0)*r00*x9104*x9107))+((r01*x9098*x9102))+((r01*x9106))+((r02*x9110))+((r00*x9101)));
evalcond[7]=((((-1.0)*r01*x9101*x9107))+(((-1.0)*r02*sj3*x9108))+x9111+((r00*x9112))+((r01*x9104))+((r00*x9102)));
evalcond[8]=((((-1.0)*x9105))+(((-1.0)*r21*x9101*x9107))+x9103+((r20*x9112))+((r21*x9104))+(((-1.0)*r22*sj3*x9108))+((r20*x9102)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9113=((-1.0)*r20);
IkReal x9114=x8286;
CheckValue<IkReal> x9116 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9113),IKFAST_ATAN2_MAGTHRESH);
if(!x9116.valid){
continue;
}
IkReal x9115=((-1.0)*(x9116.value));
sj5=gconst1;
cj5=gconst2;
j5=x9115;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9115;
IkReal gconst1=(r21*x9114);
IkReal gconst2=(x9113*x9114);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9117=((-1.0)*r20);
IkReal x9118=x8286;
CheckValue<IkReal> x9120 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9117),IKFAST_ATAN2_MAGTHRESH);
if(!x9120.valid){
continue;
}
IkReal x9119=((-1.0)*(x9120.value));
sj5=gconst1;
cj5=gconst2;
j5=x9119;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9119;
IkReal gconst1=(r21*x9118);
IkReal gconst2=(x9117*x9118);
CheckValue<IkReal> x9128=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9128.valid){
continue;
}
IkReal x9121=x9128.value;
IkReal x9122=(sj3*x9121);
IkReal x9123=(r11*x9122);
IkReal x9124=(r00*x9122);
IkReal x9125=(r01*x9122);
IkReal x9126=(r10*x9122);
IkReal x9127=(r20*r21*x9122);
j4eval[0]=IKsign((((r02*r12*sj3))+((r00*r20*r21*x9123))+((r10*x9124*(r20*r20)))+((r01*x9123*(r21*r21)))+((r10*r20*r21*x9125))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9129=gconst1*gconst1;
IkReal x9130=gconst2*gconst2;
IkReal x9131=((1.0)*cj3);
IkReal x9132=(gconst2*r10);
IkReal x9133=(r01*sj3);
IkReal x9134=(gconst1*r00*sj3);
IkReal x9135=(gconst1*gconst2*r11);
IkReal x9136=(r10*x9130);
IkReal x9137=(r11*x9129);
CheckValue<IkReal> x9138 = IKatan2WithCheck(IkReal((((r12*x9134))+((gconst2*r12*x9133)))),IkReal((((r00*sj3*x9137))+(((-1.0)*x9132*x9134))+(((-1.0)*x9133*x9136))+((x9133*x9135)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9138.valid){
continue;
}
CheckValue<IkReal> x9139=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x9131*x9136))+((cj3*gconst1*r01*x9132))+(((-1.0)*r01*x9131*x9137))+(((-1.0)*r02*r12*x9131))+((cj3*r00*x9135)))),-1);
if(!x9139.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9138.value)+(((1.5707963267949)*(x9139.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9140=IKsin(j4);
IkReal x9141=IKcos(j4);
IkReal x9142=(sj1*sj2);
IkReal x9143=(gconst1*sj3);
IkReal x9144=(cj3*gconst1);
IkReal x9145=(cj3*gconst2);
IkReal x9146=((1.0)*cj2);
IkReal x9147=(cj1*sj2);
IkReal x9148=(gconst2*sj3);
IkReal x9149=(cj1*x9146);
IkReal x9150=((1.0)*x9141);
IkReal x9151=((1.0)*x9140);
IkReal x9152=(gconst1*x9140);
IkReal x9153=(cj3*x9140);
IkReal x9154=(x9141*x9148);
evalcond[0]=((((-1.0)*gconst2*r20*x9151))+(((-1.0)*r22*x9150))+((r21*x9152)));
evalcond[1]=(((r11*x9152))+(((-1.0)*r12*x9150))+(((-1.0)*gconst2*r10*x9151)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x9150))+(((-1.0)*gconst2*r00*x9151))+((r01*x9152)));
evalcond[3]=(((r02*x9153))+((r01*x9148))+((r00*x9143))+(((-1.0)*r00*x9145*x9150))+((r01*x9141*x9144)));
evalcond[4]=(((r01*x9145))+((r00*x9144))+(((-1.0)*r01*x9143*x9150))+(((-1.0)*r02*sj3*x9151))+((r00*x9154)));
evalcond[5]=(((cj2*sj1))+((r22*x9153))+((r20*x9143))+x9147+((r21*x9148))+((r21*x9141*x9144))+(((-1.0)*r20*x9145*x9150)));
evalcond[6]=(((r10*x9143))+(((-1.0)*x9149))+x9142+((r11*x9141*x9144))+((r12*x9153))+(((-1.0)*r10*x9145*x9150))+((r11*x9148)));
evalcond[7]=((((-1.0)*x9149))+((r20*x9144))+x9142+((r21*x9145))+(((-1.0)*r22*sj3*x9151))+((r20*x9154))+(((-1.0)*r21*x9143*x9150)));
evalcond[8]=((((-1.0)*r11*x9143*x9150))+(((-1.0)*x9147))+((r10*x9144))+(((-1.0)*r12*sj3*x9151))+(((-1.0)*sj1*x9146))+((r11*x9145))+((r10*x9154)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9155=gconst2*gconst2;
IkReal x9156=gconst1*gconst1;
IkReal x9157=(gconst1*r00);
IkReal x9158=(r11*sj3);
IkReal x9159=((1.0)*gconst2);
IkReal x9160=(cj3*r12);
IkReal x9161=(cj3*r11);
IkReal x9162=(gconst2*r01);
IkReal x9163=(cj3*r10);
IkReal x9164=(r10*sj3);
CheckValue<IkReal> x9165=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+(((-1.0)*gconst1*r01*x9159*x9164))+((r01*x9156*x9158))+((r00*x9155*x9164))+(((-1.0)*x9157*x9158*x9159)))),-1);
if(!x9165.valid){
continue;
}
CheckValue<IkReal> x9166 = IKatan2WithCheck(IkReal((((x9160*x9162))+((x9157*x9160)))),IkReal((((gconst1*x9161*x9162))+((r00*x9156*x9161))+(((-1.0)*r01*x9155*x9163))+(((-1.0)*x9157*x9159*x9163)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9166.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9165.value)))+(x9166.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9167=IKsin(j4);
IkReal x9168=IKcos(j4);
IkReal x9169=(sj1*sj2);
IkReal x9170=(gconst1*sj3);
IkReal x9171=(cj3*gconst1);
IkReal x9172=(cj3*gconst2);
IkReal x9173=((1.0)*cj2);
IkReal x9174=(cj1*sj2);
IkReal x9175=(gconst2*sj3);
IkReal x9176=(cj1*x9173);
IkReal x9177=((1.0)*x9168);
IkReal x9178=((1.0)*x9167);
IkReal x9179=(gconst1*x9167);
IkReal x9180=(cj3*x9167);
IkReal x9181=(x9168*x9175);
evalcond[0]=((((-1.0)*gconst2*r20*x9178))+((r21*x9179))+(((-1.0)*r22*x9177)));
evalcond[1]=((((-1.0)*gconst2*r10*x9178))+(((-1.0)*r12*x9177))+((r11*x9179)));
evalcond[2]=((-1.0)+(((-1.0)*gconst2*r00*x9178))+((r01*x9179))+(((-1.0)*r02*x9177)));
evalcond[3]=(((r02*x9180))+((r00*x9170))+((r01*x9175))+((r01*x9168*x9171))+(((-1.0)*r00*x9172*x9177)));
evalcond[4]=(((r00*x9181))+(((-1.0)*r01*x9170*x9177))+((r00*x9171))+((r01*x9172))+(((-1.0)*r02*sj3*x9178)));
evalcond[5]=(((cj2*sj1))+((r21*x9168*x9171))+x9174+((r20*x9170))+((r21*x9175))+(((-1.0)*r20*x9172*x9177))+((r22*x9180)));
evalcond[6]=(((r10*x9170))+((r12*x9180))+((r11*x9168*x9171))+x9169+(((-1.0)*x9176))+(((-1.0)*r10*x9172*x9177))+((r11*x9175)));
evalcond[7]=(x9169+(((-1.0)*x9176))+((r20*x9181))+(((-1.0)*r21*x9170*x9177))+((r20*x9171))+((r21*x9172))+(((-1.0)*r22*sj3*x9178)));
evalcond[8]=(((r10*x9171))+(((-1.0)*x9174))+((r10*x9181))+((r11*x9172))+(((-1.0)*r12*sj3*x9178))+(((-1.0)*sj1*x9173))+(((-1.0)*r11*x9170*x9177)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9182=((1.0)*gconst2);
CheckValue<IkReal> x9183=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x9182)))),-1);
if(!x9183.valid){
continue;
}
CheckValue<IkReal> x9184 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x9182))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9184.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9183.value)))+(x9184.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9185=IKsin(j4);
IkReal x9186=IKcos(j4);
IkReal x9187=(sj1*sj2);
IkReal x9188=(gconst1*sj3);
IkReal x9189=(cj3*gconst1);
IkReal x9190=(cj3*gconst2);
IkReal x9191=((1.0)*cj2);
IkReal x9192=(cj1*sj2);
IkReal x9193=(gconst2*sj3);
IkReal x9194=(cj1*x9191);
IkReal x9195=((1.0)*x9186);
IkReal x9196=((1.0)*x9185);
IkReal x9197=(gconst1*x9185);
IkReal x9198=(cj3*x9185);
IkReal x9199=(x9186*x9193);
evalcond[0]=((((-1.0)*gconst2*r20*x9196))+(((-1.0)*r22*x9195))+((r21*x9197)));
evalcond[1]=((((-1.0)*gconst2*r10*x9196))+(((-1.0)*r12*x9195))+((r11*x9197)));
evalcond[2]=((-1.0)+((r01*x9197))+(((-1.0)*r02*x9195))+(((-1.0)*gconst2*r00*x9196)));
evalcond[3]=(((r00*x9188))+((r01*x9193))+((r02*x9198))+((r01*x9186*x9189))+(((-1.0)*r00*x9190*x9195)));
evalcond[4]=(((r00*x9189))+((r01*x9190))+((r00*x9199))+(((-1.0)*r02*sj3*x9196))+(((-1.0)*r01*x9188*x9195)));
evalcond[5]=(((cj2*sj1))+((r21*x9186*x9189))+((r22*x9198))+x9192+((r21*x9193))+((r20*x9188))+(((-1.0)*r20*x9190*x9195)));
evalcond[6]=(x9187+((r10*x9188))+(((-1.0)*r10*x9190*x9195))+((r12*x9198))+(((-1.0)*x9194))+((r11*x9193))+((r11*x9186*x9189)));
evalcond[7]=(x9187+(((-1.0)*r21*x9188*x9195))+((r21*x9190))+((r20*x9189))+(((-1.0)*r22*sj3*x9196))+((r20*x9199))+(((-1.0)*x9194)));
evalcond[8]=(((r10*x9189))+((r10*x9199))+(((-1.0)*r12*sj3*x9196))+(((-1.0)*r11*x9188*x9195))+(((-1.0)*x9192))+(((-1.0)*sj1*x9191))+((r11*x9190)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9200=((-1.0)*r20);
IkReal x9201=x8286;
CheckValue<IkReal> x9203 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9200),IKFAST_ATAN2_MAGTHRESH);
if(!x9203.valid){
continue;
}
IkReal x9202=((-1.0)*(x9203.value));
sj5=gconst1;
cj5=gconst2;
j5=x9202;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9202;
IkReal gconst1=(r21*x9201);
IkReal gconst2=(x9200*x9201);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9204=((-1.0)*r20);
IkReal x9205=x8286;
CheckValue<IkReal> x9207 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9204),IKFAST_ATAN2_MAGTHRESH);
if(!x9207.valid){
continue;
}
IkReal x9206=((-1.0)*(x9207.value));
sj5=gconst1;
cj5=gconst2;
j5=x9206;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9206;
IkReal gconst1=(r21*x9205);
IkReal gconst2=(x9204*x9205);
CheckValue<IkReal> x9215=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9215.valid){
continue;
}
IkReal x9208=x9215.value;
IkReal x9209=(sj3*x9208);
IkReal x9210=(r11*x9209);
IkReal x9211=(r00*x9209);
IkReal x9212=(r01*x9209);
IkReal x9213=(r10*x9209);
IkReal x9214=(r20*r21*x9209);
j4eval[0]=IKsign((((r02*r12*sj3))+((r00*r20*r21*x9210))+((r10*x9211*(r20*r20)))+((r01*x9210*(r21*r21)))+((r10*r20*r21*x9212))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9216=gconst1*gconst1;
IkReal x9217=gconst2*gconst2;
IkReal x9218=((1.0)*cj3);
IkReal x9219=(gconst2*r10);
IkReal x9220=(r01*sj3);
IkReal x9221=(gconst1*r00*sj3);
IkReal x9222=(gconst1*gconst2*r11);
IkReal x9223=(r10*x9217);
IkReal x9224=(r11*x9216);
CheckValue<IkReal> x9225 = IKatan2WithCheck(IkReal((((r12*x9221))+((gconst2*r12*x9220)))),IkReal((((r00*sj3*x9224))+((x9220*x9222))+(((-1.0)*x9219*x9221))+(((-1.0)*x9220*x9223)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9225.valid){
continue;
}
CheckValue<IkReal> x9226=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x9218*x9224))+((cj3*gconst1*r01*x9219))+(((-1.0)*r02*r12*x9218))+(((-1.0)*r00*x9218*x9223))+((cj3*r00*x9222)))),-1);
if(!x9226.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9225.value)+(((1.5707963267949)*(x9226.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9227=IKsin(j4);
IkReal x9228=IKcos(j4);
IkReal x9229=(cj2*sj1);
IkReal x9230=(cj1*sj2);
IkReal x9231=(gconst1*sj3);
IkReal x9232=(cj3*gconst1);
IkReal x9233=(sj1*sj2);
IkReal x9234=(cj3*gconst2);
IkReal x9235=(cj1*cj2);
IkReal x9236=(gconst2*sj3);
IkReal x9237=((1.0)*x9228);
IkReal x9238=((1.0)*x9227);
IkReal x9239=(gconst1*x9227);
IkReal x9240=(cj3*x9227);
IkReal x9241=(x9230+x9229);
IkReal x9242=(x9228*x9236);
evalcond[0]=(((r21*x9239))+(((-1.0)*gconst2*r20*x9238))+(((-1.0)*r22*x9237)));
evalcond[1]=((((-1.0)*r12*x9237))+(((-1.0)*gconst2*r10*x9238))+((r11*x9239)));
evalcond[2]=((1.0)+(((-1.0)*gconst2*r00*x9238))+((r01*x9239))+(((-1.0)*r02*x9237)));
evalcond[3]=(((r01*x9228*x9232))+((r02*x9240))+((r01*x9236))+((r00*x9231))+(((-1.0)*r00*x9234*x9237)));
evalcond[4]=((((-1.0)*r02*sj3*x9238))+(((-1.0)*r01*x9231*x9237))+((r00*x9242))+((r01*x9234))+((r00*x9232)));
evalcond[5]=(((r21*x9228*x9232))+x9241+((r21*x9236))+((r22*x9240))+((r20*x9231))+(((-1.0)*r20*x9234*x9237)));
evalcond[6]=(((r11*x9228*x9232))+(((-1.0)*r10*x9234*x9237))+x9235+((r12*x9240))+((r11*x9236))+((r10*x9231))+(((-1.0)*x9233)));
evalcond[7]=((((-1.0)*r11*x9231*x9237))+x9241+((r10*x9242))+((r11*x9234))+((r10*x9232))+(((-1.0)*r12*sj3*x9238)));
evalcond[8]=(x9233+((r21*x9234))+(((-1.0)*r22*sj3*x9238))+(((-1.0)*r21*x9231*x9237))+((r20*x9232))+((r20*x9242))+(((-1.0)*x9235)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9243=gconst2*gconst2;
IkReal x9244=gconst1*gconst1;
IkReal x9245=(gconst1*r00);
IkReal x9246=(r11*sj3);
IkReal x9247=((1.0)*gconst2);
IkReal x9248=(cj3*r12);
IkReal x9249=(cj3*r11);
IkReal x9250=(gconst2*r01);
IkReal x9251=(cj3*r10);
IkReal x9252=(r10*sj3);
CheckValue<IkReal> x9253 = IKatan2WithCheck(IkReal((((x9245*x9248))+((x9248*x9250)))),IkReal(((((-1.0)*r01*x9243*x9251))+((r00*x9244*x9249))+((gconst1*x9249*x9250))+(((-1.0)*x9245*x9247*x9251)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9253.valid){
continue;
}
CheckValue<IkReal> x9254=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+((r00*x9243*x9252))+(((-1.0)*x9245*x9246*x9247))+(((-1.0)*gconst1*r01*x9247*x9252))+((r01*x9244*x9246)))),-1);
if(!x9254.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9253.value)+(((1.5707963267949)*(x9254.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9255=IKsin(j4);
IkReal x9256=IKcos(j4);
IkReal x9257=(cj2*sj1);
IkReal x9258=(cj1*sj2);
IkReal x9259=(gconst1*sj3);
IkReal x9260=(cj3*gconst1);
IkReal x9261=(sj1*sj2);
IkReal x9262=(cj3*gconst2);
IkReal x9263=(cj1*cj2);
IkReal x9264=(gconst2*sj3);
IkReal x9265=((1.0)*x9256);
IkReal x9266=((1.0)*x9255);
IkReal x9267=(gconst1*x9255);
IkReal x9268=(cj3*x9255);
IkReal x9269=(x9258+x9257);
IkReal x9270=(x9256*x9264);
evalcond[0]=((((-1.0)*gconst2*r20*x9266))+(((-1.0)*r22*x9265))+((r21*x9267)));
evalcond[1]=((((-1.0)*gconst2*r10*x9266))+(((-1.0)*r12*x9265))+((r11*x9267)));
evalcond[2]=((1.0)+(((-1.0)*gconst2*r00*x9266))+((r01*x9267))+(((-1.0)*r02*x9265)));
evalcond[3]=((((-1.0)*r00*x9262*x9265))+((r01*x9264))+((r01*x9256*x9260))+((r00*x9259))+((r02*x9268)));
evalcond[4]=((((-1.0)*r02*sj3*x9266))+((r00*x9270))+((r01*x9262))+((r00*x9260))+(((-1.0)*r01*x9259*x9265)));
evalcond[5]=(((r22*x9268))+x9269+((r21*x9256*x9260))+(((-1.0)*r20*x9262*x9265))+((r21*x9264))+((r20*x9259)));
evalcond[6]=(((r12*x9268))+x9263+((r11*x9256*x9260))+(((-1.0)*r10*x9262*x9265))+((r10*x9259))+(((-1.0)*x9261))+((r11*x9264)));
evalcond[7]=(x9269+(((-1.0)*r11*x9259*x9265))+((r10*x9270))+(((-1.0)*r12*sj3*x9266))+((r10*x9260))+((r11*x9262)));
evalcond[8]=((((-1.0)*r22*sj3*x9266))+(((-1.0)*r21*x9259*x9265))+x9261+((r20*x9260))+((r20*x9270))+(((-1.0)*x9263))+((r21*x9262)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9271 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9271.valid){
continue;
}
CheckValue<IkReal> x9272=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9272.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9271.value)+(((1.5707963267949)*(x9272.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9273=IKsin(j4);
IkReal x9274=IKcos(j4);
IkReal x9275=(cj2*sj1);
IkReal x9276=(cj1*sj2);
IkReal x9277=(gconst1*sj3);
IkReal x9278=(cj3*gconst1);
IkReal x9279=(sj1*sj2);
IkReal x9280=(cj3*gconst2);
IkReal x9281=(cj1*cj2);
IkReal x9282=(gconst2*sj3);
IkReal x9283=((1.0)*x9274);
IkReal x9284=((1.0)*x9273);
IkReal x9285=(gconst1*x9273);
IkReal x9286=(cj3*x9273);
IkReal x9287=(x9275+x9276);
IkReal x9288=(x9274*x9282);
evalcond[0]=((((-1.0)*gconst2*r20*x9284))+(((-1.0)*r22*x9283))+((r21*x9285)));
evalcond[1]=((((-1.0)*r12*x9283))+((r11*x9285))+(((-1.0)*gconst2*r10*x9284)));
evalcond[2]=((1.0)+(((-1.0)*gconst2*r00*x9284))+((r01*x9285))+(((-1.0)*r02*x9283)));
evalcond[3]=(((r02*x9286))+((r01*x9274*x9278))+((r01*x9282))+((r00*x9277))+(((-1.0)*r00*x9280*x9283)));
evalcond[4]=((((-1.0)*r02*sj3*x9284))+((r01*x9280))+((r00*x9288))+((r00*x9278))+(((-1.0)*r01*x9277*x9283)));
evalcond[5]=(((r21*x9274*x9278))+((r22*x9286))+x9287+((r20*x9277))+((r21*x9282))+(((-1.0)*r20*x9280*x9283)));
evalcond[6]=((((-1.0)*r10*x9280*x9283))+((r11*x9282))+x9281+((r10*x9277))+((r11*x9274*x9278))+(((-1.0)*x9279))+((r12*x9286)));
evalcond[7]=(((r11*x9280))+x9287+(((-1.0)*r12*sj3*x9284))+((r10*x9288))+((r10*x9278))+(((-1.0)*r11*x9277*x9283)));
evalcond[8]=(x9279+((r20*x9278))+((r20*x9288))+(((-1.0)*x9281))+((r21*x9280))+(((-1.0)*r21*x9277*x9283))+(((-1.0)*r22*sj3*x9284)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x9289=((-1.0)*r20);
IkReal x9290=((-1.0)*px);
CheckValue<IkReal> x9292 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9289),IKFAST_ATAN2_MAGTHRESH);
if(!x9292.valid){
continue;
}
IkReal x9291=((-1.0)*(x9292.value));
sj5=gconst1;
cj5=gconst2;
j5=x9291;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9290);
rxp1_1=(px*r21);
rxp1_2=(r11*x9290);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9291;
IkReal gconst1=r21;
IkReal gconst2=x9289;
j4eval[0]=(((r11*r21))+((r10*r20)));
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9293=((-1.0)*r20);
IkReal x9294=((-1.0)*px);
CheckValue<IkReal> x9296 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9293),IKFAST_ATAN2_MAGTHRESH);
if(!x9296.valid){
continue;
}
IkReal x9295=((-1.0)*(x9296.value));
sj5=gconst1;
cj5=gconst2;
j5=x9295;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9294);
rxp1_1=(px*r21);
rxp1_2=(r11*x9294);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9295;
IkReal gconst1=r21;
IkReal gconst2=x9293;
j4eval[0]=(((r11*r21))+((r10*r20)));
j4eval[1]=(((cj3*(r21*r21)))+cj3+(((-1.0)*cj3*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9297=((-1.0)*r20);
IkReal x9298=((-1.0)*px);
CheckValue<IkReal> x9300 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9297),IKFAST_ATAN2_MAGTHRESH);
if(!x9300.valid){
continue;
}
IkReal x9299=((-1.0)*(x9300.value));
sj5=gconst1;
cj5=gconst2;
j5=x9299;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9298);
rxp1_1=(px*r21);
rxp1_2=(r11*x9298);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9299;
IkReal gconst1=r21;
IkReal gconst2=x9297;
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9301=((-1.0)*r20);
IkReal x9302=((-1.0)*px);
CheckValue<IkReal> x9304 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9301),IKFAST_ATAN2_MAGTHRESH);
if(!x9304.valid){
continue;
}
IkReal x9303=((-1.0)*(x9304.value));
sj5=gconst1;
cj5=gconst2;
j5=x9303;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9302);
rxp1_1=(px*r21);
rxp1_2=(r11*x9302);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst0=x9303;
IkReal gconst1=r21;
IkReal gconst2=x9301;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9305=((-1.0)*r20);
IkReal x9306=((-1.0)*px);
CheckValue<IkReal> x9308 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9305),IKFAST_ATAN2_MAGTHRESH);
if(!x9308.valid){
continue;
}
IkReal x9307=((-1.0)*(x9308.value));
sj5=gconst1;
cj5=gconst2;
j5=x9307;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9306);
rxp1_1=(px*r21);
rxp1_2=(r11*x9306);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst0=x9307;
IkReal gconst1=r21;
IkReal gconst2=x9305;
j4eval[0]=((-1.0)+(((-1.0)*(r21*r21)))+(r10*r10));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9309=((-1.0)*r20);
IkReal x9310=((-1.0)*px);
CheckValue<IkReal> x9312 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9309),IKFAST_ATAN2_MAGTHRESH);
if(!x9312.valid){
continue;
}
IkReal x9311=((-1.0)*(x9312.value));
sj5=gconst1;
cj5=gconst2;
j5=x9311;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9310);
rxp1_1=(px*r21);
rxp1_2=(r11*x9310);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst0=x9311;
IkReal gconst1=r21;
IkReal gconst2=x9309;
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9315=IKPowWithIntegerCheck(((((-1.0)*gconst1*r11))+((gconst2*r10))),-1);
if(!x9315.valid){
continue;
}
IkReal x9313=x9315.value;
IkReal x9314=(sj0*x9313);
cj4array[0]=(((cj1*sj2*x9314))+((cj2*sj1*x9314)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9316=IKsin(j4);
IkReal x9317=IKcos(j4);
IkReal x9318=(gconst1*x9316);
IkReal x9319=((1.0)*x9317);
IkReal x9320=((1.0)*gconst2*x9316);
evalcond[0]=((-1.0)*r02*x9316);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x9319)));
evalcond[2]=(((r21*x9318))+(((-1.0)*r20*x9320)));
evalcond[3]=((((-1.0)*r10*x9320))+((r11*x9318)));
evalcond[4]=((((-1.0)*gconst1*r21*x9319))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((gconst2*r20*x9317)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9322=IKPowWithIntegerCheck((((gconst2*r20))+(((-1.0)*gconst1*r21))),-1);
if(!x9322.valid){
continue;
}
IkReal x9321=x9322.value;
cj4array[0]=((((-1.0)*sj1*sj2*x9321))+((cj1*cj2*x9321)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9323=IKsin(j4);
IkReal x9324=IKcos(j4);
IkReal x9325=(gconst2*r10);
IkReal x9326=((1.0)*sj0);
IkReal x9327=((1.0)*x9323);
IkReal x9328=(gconst1*x9323);
IkReal x9329=((1.0)*x9324);
evalcond[0]=((-1.0)*r02*x9323);
evalcond[1]=((((-1.0)*x9326))+(((-1.0)*r02*x9329)));
evalcond[2]=((((-1.0)*gconst2*r20*x9327))+((r21*x9328)));
evalcond[3]=(((r11*x9328))+(((-1.0)*x9325*x9327)));
evalcond[4]=(((x9324*x9325))+(((-1.0)*cj2*sj1*x9326))+(((-1.0)*gconst1*r11*x9329))+(((-1.0)*cj1*sj2*x9326)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9330=IKPowWithIntegerCheck(r02,-1);
if(!x9330.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x9330.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9331=IKsin(j4);
IkReal x9332=IKcos(j4);
IkReal x9333=(gconst2*r10);
IkReal x9334=((1.0)*sj0);
IkReal x9335=(gconst1*r11);
IkReal x9336=(gconst1*r21);
IkReal x9337=(gconst2*r20);
IkReal x9338=((1.0)*x9331);
IkReal x9339=((1.0)*x9332);
evalcond[0]=((-1.0)*r02*x9331);
evalcond[1]=((((-1.0)*x9337*x9338))+((x9331*x9336)));
evalcond[2]=(((x9331*x9335))+(((-1.0)*x9333*x9338)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x9332*x9337))+(((-1.0)*x9336*x9339)));
evalcond[4]=((((-1.0)*cj2*sj1*x9334))+((x9332*x9333))+(((-1.0)*x9335*x9339))+(((-1.0)*cj1*sj2*x9334)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9340=((-1.0)*r20);
IkReal x9341=((-1.0)*px);
CheckValue<IkReal> x9343 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9340),IKFAST_ATAN2_MAGTHRESH);
if(!x9343.valid){
continue;
}
IkReal x9342=((-1.0)*(x9343.value));
sj5=gconst1;
cj5=gconst2;
j5=x9342;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9341);
rxp1_1=(px*r21);
rxp1_2=(r11*x9341);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst0=x9342;
IkReal gconst1=r21;
IkReal gconst2=x9340;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9344=((-1.0)*r20);
IkReal x9345=((-1.0)*px);
CheckValue<IkReal> x9347 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9344),IKFAST_ATAN2_MAGTHRESH);
if(!x9347.valid){
continue;
}
IkReal x9346=((-1.0)*(x9347.value));
sj5=gconst1;
cj5=gconst2;
j5=x9346;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9345);
rxp1_1=(px*r21);
rxp1_2=(r11*x9345);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst0=x9346;
IkReal gconst1=r21;
IkReal gconst2=x9344;
j4eval[0]=((1.0)+(r21*r21)+(((-1.0)*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9348=((-1.0)*r20);
IkReal x9349=((-1.0)*px);
CheckValue<IkReal> x9351 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9348),IKFAST_ATAN2_MAGTHRESH);
if(!x9351.valid){
continue;
}
IkReal x9350=((-1.0)*(x9351.value));
sj5=gconst1;
cj5=gconst2;
j5=x9350;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9349);
rxp1_1=(px*r21);
rxp1_2=(r11*x9349);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst0=x9350;
IkReal gconst1=r21;
IkReal gconst2=x9348;
j4eval[0]=(((r11*r21))+((r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9354=IKPowWithIntegerCheck((((gconst1*r11))+(((-1.0)*gconst2*r10))),-1);
if(!x9354.valid){
continue;
}
IkReal x9352=x9354.value;
IkReal x9353=(sj0*x9352);
cj4array[0]=(((cj1*sj2*x9353))+((cj2*sj1*x9353)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9355=IKsin(j4);
IkReal x9356=IKcos(j4);
IkReal x9357=((1.0)*gconst2);
IkReal x9358=(gconst1*r21);
evalcond[0]=(r02*x9355);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x9356)));
evalcond[2]=((((-1.0)*r20*x9355*x9357))+((x9355*x9358)));
evalcond[3]=(((gconst1*r11*x9355))+(((-1.0)*r10*x9355*x9357)));
evalcond[4]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r20*x9356*x9357))+((x9356*x9358)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9360=IKPowWithIntegerCheck(((((-1.0)*gconst2*r20))+((gconst1*r21))),-1);
if(!x9360.valid){
continue;
}
IkReal x9359=x9360.value;
cj4array[0]=(((cj1*cj2*x9359))+(((-1.0)*sj1*sj2*x9359)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9361=IKsin(j4);
IkReal x9362=IKcos(j4);
IkReal x9363=((1.0)*sj0);
IkReal x9364=(gconst1*x9361);
IkReal x9365=((1.0)*x9362);
IkReal x9366=((1.0)*gconst2*x9361);
evalcond[0]=(r02*x9361);
evalcond[1]=((((-1.0)*x9363))+(((-1.0)*r02*x9365)));
evalcond[2]=(((r21*x9364))+(((-1.0)*r20*x9366)));
evalcond[3]=((((-1.0)*r10*x9366))+((r11*x9364)));
evalcond[4]=((((-1.0)*cj2*sj1*x9363))+(((-1.0)*cj1*sj2*x9363))+((gconst1*r11*x9362))+(((-1.0)*gconst2*r10*x9365)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9367=IKPowWithIntegerCheck(r02,-1);
if(!x9367.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x9367.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9368=IKsin(j4);
IkReal x9369=IKcos(j4);
IkReal x9370=(gconst1*r21);
IkReal x9371=((1.0)*sj0);
IkReal x9372=(gconst1*r11);
IkReal x9373=((1.0)*gconst2*r10);
IkReal x9374=((1.0)*gconst2*r20);
evalcond[0]=(r02*x9368);
evalcond[1]=(((x9368*x9370))+(((-1.0)*x9368*x9374)));
evalcond[2]=(((x9368*x9372))+(((-1.0)*x9368*x9373)));
evalcond[3]=((((-1.0)*x9369*x9374))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x9369*x9370)));
evalcond[4]=((((-1.0)*x9369*x9373))+(((-1.0)*cj2*sj1*x9371))+(((-1.0)*cj1*sj2*x9371))+((x9369*x9372)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9376=IKPowWithIntegerCheck(r02,-1);
if(!x9376.valid){
continue;
}
IkReal x9375=x9376.value;
CheckValue<IkReal> x9377=IKPowWithIntegerCheck(cj3,-1);
if(!x9377.valid){
continue;
}
if( IKabs((x9375*(x9377.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x9375)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x9375*(x9377.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x9375))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x9375*(x9377.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x9375));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9378=IKsin(j4);
IkReal x9379=IKcos(j4);
IkReal x9380=(gconst2*r10);
IkReal x9381=(gconst1*r11);
IkReal x9382=(sj1*sj2);
IkReal x9383=(gconst2*r20);
IkReal x9384=(cj2*sj1);
IkReal x9385=((1.0)*sj0);
IkReal x9386=(gconst1*r20);
IkReal x9387=(gconst2*r11);
IkReal x9388=(gconst1*r21);
IkReal x9389=((1.0)*cj0);
IkReal x9390=(gconst1*r10);
IkReal x9391=(cj1*sj2);
IkReal x9392=(gconst2*r21);
IkReal x9393=(sj3*x9379);
IkReal x9394=((1.0)*cj1*cj2);
IkReal x9395=(cj3*x9379);
IkReal x9396=(r02*x9378);
IkReal x9397=((1.0)*x9378);
evalcond[0]=((((-1.0)*x9385))+(((-1.0)*r02*x9379)));
evalcond[1]=((((-1.0)*x9383*x9397))+((x9378*x9388)));
evalcond[2]=((((-1.0)*x9380*x9397))+cj0+((x9378*x9381)));
evalcond[3]=((((-1.0)*cj1*cj2*x9389))+((cj3*x9396))+((cj0*x9382)));
evalcond[4]=((((-1.0)*sj3*x9396))+(((-1.0)*x9384*x9389))+(((-1.0)*x9389*x9391)));
evalcond[5]=(((x9388*x9395))+((sj3*x9386))+x9384+x9391+((sj3*x9392))+(((-1.0)*x9383*x9395)));
evalcond[6]=(((cj3*x9386))+(((-1.0)*x9388*x9393))+x9382+((x9383*x9393))+(((-1.0)*x9394))+((cj3*x9392)));
evalcond[7]=((((-1.0)*cj1*cj2*x9385))+((sj3*x9387))+((sj0*x9382))+((sj3*x9390))+((x9381*x9395))+(((-1.0)*x9380*x9395)));
evalcond[8]=(((cj3*x9387))+(((-1.0)*x9385*x9391))+(((-1.0)*x9384*x9385))+((x9380*x9393))+(((-1.0)*x9381*x9393))+((cj3*x9390)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9398=((1.0)*sj3);
IkReal x9399=((1.0)*gconst2);
CheckValue<IkReal> x9400=IKPowWithIntegerCheck(((((-1.0)*r10*x9399))+((gconst1*r11))),-1);
if(!x9400.valid){
continue;
}
CheckValue<IkReal> x9401=IKPowWithIntegerCheck((((cj3*gconst1*r21))+(((-1.0)*cj3*r20*x9399))),-1);
if(!x9401.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x9400.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x9401.value)*(((((-1.0)*gconst2*r21*x9398))+(((-1.0)*gconst1*r20*x9398))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x9400.value)))+IKsqr(((x9401.value)*(((((-1.0)*gconst2*r21*x9398))+(((-1.0)*gconst1*r20*x9398))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x9400.value)), ((x9401.value)*(((((-1.0)*gconst2*r21*x9398))+(((-1.0)*gconst1*r20*x9398))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9402=IKsin(j4);
IkReal x9403=IKcos(j4);
IkReal x9404=(gconst2*r10);
IkReal x9405=(gconst1*r11);
IkReal x9406=(sj1*sj2);
IkReal x9407=(gconst2*r20);
IkReal x9408=(cj2*sj1);
IkReal x9409=((1.0)*sj0);
IkReal x9410=(gconst1*r20);
IkReal x9411=(gconst2*r11);
IkReal x9412=(gconst1*r21);
IkReal x9413=((1.0)*cj0);
IkReal x9414=(gconst1*r10);
IkReal x9415=(cj1*sj2);
IkReal x9416=(gconst2*r21);
IkReal x9417=(sj3*x9403);
IkReal x9418=((1.0)*cj1*cj2);
IkReal x9419=(cj3*x9403);
IkReal x9420=(r02*x9402);
IkReal x9421=((1.0)*x9402);
evalcond[0]=((((-1.0)*x9409))+(((-1.0)*r02*x9403)));
evalcond[1]=(((x9402*x9412))+(((-1.0)*x9407*x9421)));
evalcond[2]=(cj0+((x9402*x9405))+(((-1.0)*x9404*x9421)));
evalcond[3]=(((cj0*x9406))+((cj3*x9420))+(((-1.0)*cj1*cj2*x9413)));
evalcond[4]=((((-1.0)*x9408*x9413))+(((-1.0)*sj3*x9420))+(((-1.0)*x9413*x9415)));
evalcond[5]=(((x9412*x9419))+(((-1.0)*x9407*x9419))+x9408+x9415+((sj3*x9416))+((sj3*x9410)));
evalcond[6]=((((-1.0)*x9412*x9417))+(((-1.0)*x9418))+x9406+((x9407*x9417))+((cj3*x9410))+((cj3*x9416)));
evalcond[7]=((((-1.0)*cj1*cj2*x9409))+((sj0*x9406))+((x9405*x9419))+((sj3*x9411))+((sj3*x9414))+(((-1.0)*x9404*x9419)));
evalcond[8]=((((-1.0)*x9408*x9409))+((x9404*x9417))+(((-1.0)*x9405*x9417))+(((-1.0)*x9409*x9415))+((cj3*x9411))+((cj3*x9414)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9422=IKPowWithIntegerCheck((((gconst1*r11))+(((-1.0)*gconst2*r10))),-1);
if(!x9422.valid){
continue;
}
CheckValue<IkReal> x9423=IKPowWithIntegerCheck(r02,-1);
if(!x9423.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x9422.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*(x9423.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x9422.value)))+IKsqr(((-1.0)*sj0*(x9423.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x9422.value)), ((-1.0)*sj0*(x9423.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9424=IKsin(j4);
IkReal x9425=IKcos(j4);
IkReal x9426=(gconst2*r10);
IkReal x9427=(gconst1*r11);
IkReal x9428=(sj1*sj2);
IkReal x9429=(gconst2*r20);
IkReal x9430=(cj2*sj1);
IkReal x9431=((1.0)*sj0);
IkReal x9432=(gconst1*r20);
IkReal x9433=(gconst2*r11);
IkReal x9434=(gconst1*r21);
IkReal x9435=((1.0)*cj0);
IkReal x9436=(gconst1*r10);
IkReal x9437=(cj1*sj2);
IkReal x9438=(gconst2*r21);
IkReal x9439=(sj3*x9425);
IkReal x9440=((1.0)*cj1*cj2);
IkReal x9441=(cj3*x9425);
IkReal x9442=(r02*x9424);
IkReal x9443=((1.0)*x9424);
evalcond[0]=((((-1.0)*x9431))+(((-1.0)*r02*x9425)));
evalcond[1]=(((x9424*x9434))+(((-1.0)*x9429*x9443)));
evalcond[2]=(cj0+((x9424*x9427))+(((-1.0)*x9426*x9443)));
evalcond[3]=((((-1.0)*cj1*cj2*x9435))+((cj3*x9442))+((cj0*x9428)));
evalcond[4]=((((-1.0)*sj3*x9442))+(((-1.0)*x9435*x9437))+(((-1.0)*x9430*x9435)));
evalcond[5]=(((sj3*x9438))+((sj3*x9432))+(((-1.0)*x9429*x9441))+((x9434*x9441))+x9437+x9430);
evalcond[6]=(((x9429*x9439))+(((-1.0)*x9434*x9439))+(((-1.0)*x9440))+((cj3*x9438))+((cj3*x9432))+x9428);
evalcond[7]=((((-1.0)*cj1*cj2*x9431))+((sj3*x9436))+((sj3*x9433))+((x9427*x9441))+((sj0*x9428))+(((-1.0)*x9426*x9441)));
evalcond[8]=((((-1.0)*x9431*x9437))+((x9426*x9439))+((cj3*x9436))+((cj3*x9433))+(((-1.0)*x9427*x9439))+(((-1.0)*x9430*x9431)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9444=gconst1*gconst1;
IkReal x9445=r21*r21;
IkReal x9446=gconst2*gconst2;
IkReal x9447=r20*r20;
IkReal x9448=(gconst2*r20);
IkReal x9449=(cj1*cj2);
IkReal x9450=(sj1*sj2);
IkReal x9451=(gconst1*r21);
IkReal x9452=(cj3*gconst2);
IkReal x9453=(cj3*r20);
CheckValue<IkReal> x9454=IKPowWithIntegerCheck(IKsign((((sj3*(r22*r22)))+(((-2.0)*sj3*x9448*x9451))+((sj3*x9446*x9447))+((sj3*x9444*x9445)))),-1);
if(!x9454.valid){
continue;
}
CheckValue<IkReal> x9455 = IKatan2WithCheck(IkReal((((r21*r22*x9452))+((gconst1*r22*x9453))+((r22*x9450))+(((-1.0)*r22*x9449)))),IkReal(((((-1.0)*r21*x9446*x9453))+((x9448*x9449))+(((-1.0)*x9449*x9451))+((x9450*x9451))+((r21*x9444*x9453))+(((-1.0)*x9448*x9450))+((gconst1*x9445*x9452))+(((-1.0)*gconst1*x9447*x9452)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9455.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9454.value)))+(x9455.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9456=IKsin(j4);
IkReal x9457=IKcos(j4);
IkReal x9458=(cj3*gconst1);
IkReal x9459=(gconst1*r01);
IkReal x9460=(gconst1*r11);
IkReal x9461=(sj1*sj2);
IkReal x9462=(cj3*gconst2);
IkReal x9463=(gconst1*sj3);
IkReal x9464=(gconst2*sj3);
IkReal x9465=((1.0)*sj0);
IkReal x9466=(cj1*sj2);
IkReal x9467=((1.0)*x9457);
IkReal x9468=((1.0)*x9456);
IkReal x9469=((1.0)*cj1*cj2);
IkReal x9470=(cj3*x9456);
IkReal x9471=((1.0)*cj2*sj1);
IkReal x9472=(x9457*x9464);
evalcond[0]=((((-1.0)*gconst2*r20*x9468))+((gconst1*r21*x9456))+(((-1.0)*r22*x9467)));
evalcond[1]=(((x9456*x9460))+cj0+(((-1.0)*r12*x9467))+(((-1.0)*gconst2*r10*x9468)));
evalcond[2]=((((-1.0)*x9465))+(((-1.0)*gconst2*r00*x9468))+(((-1.0)*r02*x9467))+((x9456*x9459)));
evalcond[3]=(((cj2*sj1))+((r22*x9470))+((r21*x9464))+(((-1.0)*r20*x9462*x9467))+((r20*x9463))+x9466+((r21*x9457*x9458)));
evalcond[4]=((((-1.0)*x9469))+(((-1.0)*r22*sj3*x9468))+((r21*x9462))+x9461+((r20*x9472))+((r20*x9458))+(((-1.0)*r21*x9463*x9467)));
evalcond[5]=(((r01*x9464))+((r00*x9463))+((r01*x9457*x9458))+(((-1.0)*cj0*x9469))+((cj0*x9461))+((r02*x9470))+(((-1.0)*r00*x9462*x9467)));
evalcond[6]=(((r10*x9463))+((sj0*x9461))+((r11*x9457*x9458))+(((-1.0)*cj1*cj2*x9465))+(((-1.0)*r10*x9462*x9467))+((r11*x9464))+((r12*x9470)));
evalcond[7]=(((r00*x9458))+((r00*x9472))+((r01*x9462))+(((-1.0)*cj0*x9471))+(((-1.0)*r02*sj3*x9468))+(((-1.0)*sj3*x9459*x9467))+(((-1.0)*cj0*x9466)));
evalcond[8]=(((r10*x9458))+((r10*x9472))+(((-1.0)*cj2*sj1*x9465))+(((-1.0)*sj3*x9460*x9467))+(((-1.0)*r12*sj3*x9468))+((r11*x9462))+(((-1.0)*x9465*x9466)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9473=((1.0)*gconst2);
CheckValue<IkReal> x9474=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x9473)))),-1);
if(!x9474.valid){
continue;
}
CheckValue<IkReal> x9475 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x9473))+((gconst1*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9475.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9474.value)))+(x9475.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9476=IKsin(j4);
IkReal x9477=IKcos(j4);
IkReal x9478=(cj3*gconst1);
IkReal x9479=(gconst1*r01);
IkReal x9480=(gconst1*r11);
IkReal x9481=(sj1*sj2);
IkReal x9482=(cj3*gconst2);
IkReal x9483=(gconst1*sj3);
IkReal x9484=(gconst2*sj3);
IkReal x9485=((1.0)*sj0);
IkReal x9486=(cj1*sj2);
IkReal x9487=((1.0)*x9477);
IkReal x9488=((1.0)*x9476);
IkReal x9489=((1.0)*cj1*cj2);
IkReal x9490=(cj3*x9476);
IkReal x9491=((1.0)*cj2*sj1);
IkReal x9492=(x9477*x9484);
evalcond[0]=(((gconst1*r21*x9476))+(((-1.0)*r22*x9487))+(((-1.0)*gconst2*r20*x9488)));
evalcond[1]=(((x9476*x9480))+cj0+(((-1.0)*gconst2*r10*x9488))+(((-1.0)*r12*x9487)));
evalcond[2]=((((-1.0)*gconst2*r00*x9488))+(((-1.0)*r02*x9487))+(((-1.0)*x9485))+((x9476*x9479)));
evalcond[3]=(((cj2*sj1))+((r21*x9484))+((r22*x9490))+((r20*x9483))+(((-1.0)*r20*x9482*x9487))+((r21*x9477*x9478))+x9486);
evalcond[4]=(((r21*x9482))+(((-1.0)*r21*x9483*x9487))+(((-1.0)*x9489))+x9481+((r20*x9478))+((r20*x9492))+(((-1.0)*r22*sj3*x9488)));
evalcond[5]=(((r02*x9490))+(((-1.0)*cj0*x9489))+((r01*x9484))+((r00*x9483))+((cj0*x9481))+((r01*x9477*x9478))+(((-1.0)*r00*x9482*x9487)));
evalcond[6]=(((r12*x9490))+((sj0*x9481))+(((-1.0)*r10*x9482*x9487))+((r11*x9484))+((r11*x9477*x9478))+((r10*x9483))+(((-1.0)*cj1*cj2*x9485)));
evalcond[7]=(((r01*x9482))+((r00*x9478))+(((-1.0)*r02*sj3*x9488))+(((-1.0)*sj3*x9479*x9487))+((r00*x9492))+(((-1.0)*cj0*x9486))+(((-1.0)*cj0*x9491)));
evalcond[8]=(((r10*x9478))+((r10*x9492))+(((-1.0)*x9485*x9486))+((r11*x9482))+(((-1.0)*sj3*x9480*x9487))+(((-1.0)*cj2*sj1*x9485))+(((-1.0)*r12*sj3*x9488)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9493=((1.0)*gconst2);
CheckValue<IkReal> x9494=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x9493)))),-1);
if(!x9494.valid){
continue;
}
CheckValue<IkReal> x9495 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst1*r21))+(((-1.0)*cj0*r20*x9493)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9495.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9494.value)))+(x9495.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9496=IKsin(j4);
IkReal x9497=IKcos(j4);
IkReal x9498=(cj3*gconst1);
IkReal x9499=(gconst1*r01);
IkReal x9500=(gconst1*r11);
IkReal x9501=(sj1*sj2);
IkReal x9502=(cj3*gconst2);
IkReal x9503=(gconst1*sj3);
IkReal x9504=(gconst2*sj3);
IkReal x9505=((1.0)*sj0);
IkReal x9506=(cj1*sj2);
IkReal x9507=((1.0)*x9497);
IkReal x9508=((1.0)*x9496);
IkReal x9509=((1.0)*cj1*cj2);
IkReal x9510=(cj3*x9496);
IkReal x9511=((1.0)*cj2*sj1);
IkReal x9512=(x9497*x9504);
evalcond[0]=(((gconst1*r21*x9496))+(((-1.0)*r22*x9507))+(((-1.0)*gconst2*r20*x9508)));
evalcond[1]=(cj0+((x9496*x9500))+(((-1.0)*r12*x9507))+(((-1.0)*gconst2*r10*x9508)));
evalcond[2]=(((x9496*x9499))+(((-1.0)*gconst2*r00*x9508))+(((-1.0)*r02*x9507))+(((-1.0)*x9505)));
evalcond[3]=(((cj2*sj1))+((r21*x9497*x9498))+((r21*x9504))+((r20*x9503))+((r22*x9510))+(((-1.0)*r20*x9502*x9507))+x9506);
evalcond[4]=(((r21*x9502))+(((-1.0)*r21*x9503*x9507))+x9501+(((-1.0)*r22*sj3*x9508))+(((-1.0)*x9509))+((r20*x9498))+((r20*x9512)));
evalcond[5]=((((-1.0)*r00*x9502*x9507))+((cj0*x9501))+(((-1.0)*cj0*x9509))+((r01*x9497*x9498))+((r01*x9504))+((r02*x9510))+((r00*x9503)));
evalcond[6]=(((r10*x9503))+(((-1.0)*r10*x9502*x9507))+((r11*x9504))+((r12*x9510))+(((-1.0)*cj1*cj2*x9505))+((r11*x9497*x9498))+((sj0*x9501)));
evalcond[7]=(((r00*x9512))+(((-1.0)*r02*sj3*x9508))+(((-1.0)*sj3*x9499*x9507))+((r00*x9498))+(((-1.0)*cj0*x9506))+(((-1.0)*cj0*x9511))+((r01*x9502)));
evalcond[8]=((((-1.0)*x9505*x9506))+(((-1.0)*sj3*x9500*x9507))+((r10*x9498))+((r11*x9502))+(((-1.0)*cj2*sj1*x9505))+(((-1.0)*r12*sj3*x9508))+((r10*x9512)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x9513=((-1.0)*r21);
IkReal x9515 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x9515)==0){
continue;
}
IkReal x9514=pow(x9515,-0.5);
CheckValue<IkReal> x9516 = IKatan2WithCheck(IkReal(x9513),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9516.valid){
continue;
}
IkReal gconst3=((3.14159265358979)+(((-1.0)*(x9516.value))));
IkReal gconst4=(x9513*x9514);
IkReal gconst5=((1.0)*r20*x9514);
CheckValue<IkReal> x9517 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9517.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x9517.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9518=((-1.0)*r21);
CheckValue<IkReal> x9521 = IKatan2WithCheck(IkReal(x9518),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9521.valid){
continue;
}
IkReal x9519=((1.0)*(x9521.value));
IkReal x9520=x9514;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9519)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9519)));
IkReal gconst4=(x9518*x9520);
IkReal gconst5=((1.0)*r20*x9520);
IkReal x9522=r22*r22;
IkReal x9523=((1.0)*x9522);
CheckValue<IkReal> x9527=IKPowWithIntegerCheck(((-1.0)+x9522),-1);
if(!x9527.valid){
continue;
}
IkReal x9524=x9527.value;
if((((1.0)+(((-1.0)*x9523)))) < -0.00001)
continue;
IkReal x9525=IKsqrt(((1.0)+(((-1.0)*x9523))));
IkReal x9526=(cj0*x9524*x9525);
j4eval[0]=((IKabs((cj0*r22)))+(IKabs((x9526+(((-1.0)*x9523*x9526))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9528=((-1.0)*r21);
CheckValue<IkReal> x9531 = IKatan2WithCheck(IkReal(x9528),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9531.valid){
continue;
}
IkReal x9529=((1.0)*(x9531.value));
IkReal x9530=x9514;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9529)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9529)));
IkReal gconst4=(x9528*x9530);
IkReal gconst5=((1.0)*r20*x9530);
IkReal x9532=r22*r22;
IkReal x9533=((1.0)*x9532);
CheckValue<IkReal> x9537=IKPowWithIntegerCheck(((-1.0)+x9532),-1);
if(!x9537.valid){
continue;
}
IkReal x9534=x9537.value;
if((((1.0)+(((-1.0)*x9533)))) < -0.00001)
continue;
IkReal x9535=IKsqrt(((1.0)+(((-1.0)*x9533))));
IkReal x9536=(sj0*x9534*x9535);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*x9533*x9536))+x9536))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x9538=((-1.0)*r21);
CheckValue<IkReal> x9541 = IKatan2WithCheck(IkReal(x9538),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9541.valid){
continue;
}
IkReal x9539=((1.0)*(x9541.value));
IkReal x9540=x9514;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9539)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9539)));
IkReal gconst4=(x9538*x9540);
IkReal gconst5=((1.0)*r20*x9540);
IkReal x9542=r22*r22;
IkReal x9543=(r12*sj0);
IkReal x9544=(cj0*r02);
CheckValue<IkReal> x9548=IKPowWithIntegerCheck(((-1.0)+x9542),-1);
if(!x9548.valid){
continue;
}
IkReal x9545=x9548.value;
if((((1.0)+(((-1.0)*x9542)))) < -0.00001)
continue;
IkReal x9546=IKsqrt(((1.0)+(((-1.0)*x9542))));
IkReal x9547=(r22*x9545*x9546);
j4eval[0]=0;
j4eval[1]=((IKabs(((((-1.0)*x9543))+(((-1.0)*x9544)))))+(IKabs((((x9544*x9547))+((x9543*x9547))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x9549=((-1.0)*r21);
CheckValue<IkReal> x9552 = IKatan2WithCheck(IkReal(x9549),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9552.valid){
continue;
}
IkReal x9550=((1.0)*(x9552.value));
IkReal x9551=x9514;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9550)));
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9550)));
IkReal gconst4=(x9549*x9551);
IkReal gconst5=((1.0)*r20*x9551);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9553=((-1.0)*r21);
CheckValue<IkReal> x9556 = IKatan2WithCheck(IkReal(x9553),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9556.valid){
continue;
}
IkReal x9554=((1.0)*(x9556.value));
IkReal x9555=x9514;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9554)));
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9554)));
IkReal gconst4=(x9553*x9555);
IkReal gconst5=((1.0)*r20*x9555);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x9557=((-1.0)*r21);
CheckValue<IkReal> x9560 = IKatan2WithCheck(IkReal(x9557),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9560.valid){
continue;
}
IkReal x9558=((1.0)*(x9560.value));
IkReal x9559=x9514;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9558)));
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9558)));
IkReal gconst4=(x9557*x9559);
IkReal gconst5=((1.0)*r20*x9559);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x9561=((-1.0)*r21);
CheckValue<IkReal> x9564 = IKatan2WithCheck(IkReal(x9561),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9564.valid){
continue;
}
IkReal x9562=((1.0)*(x9564.value));
IkReal x9563=x9514;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9562)));
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9562)));
IkReal gconst4=(x9561*x9563);
IkReal gconst5=((1.0)*r20*x9563);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9565=((-1.0)*r21);
CheckValue<IkReal> x9568 = IKatan2WithCheck(IkReal(x9565),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9568.valid){
continue;
}
IkReal x9566=((1.0)*(x9568.value));
IkReal x9567=x9514;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9566)));
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9566)));
IkReal gconst4=(x9565*x9567);
IkReal gconst5=((1.0)*r20*x9567);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9569=((-1.0)*r21);
CheckValue<IkReal> x9572 = IKatan2WithCheck(IkReal(x9569),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9572.valid){
continue;
}
IkReal x9570=((1.0)*(x9572.value));
IkReal x9571=x9514;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9570)));
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9570)));
IkReal gconst4=(x9569*x9571);
IkReal gconst5=((1.0)*r20*x9571);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9573=(gconst5*r10);
IkReal x9574=(gconst4*r11);
CheckValue<IkReal> x9575=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x9573*x9573)+(((-2.0)*x9573*x9574))+(x9574*x9574))),-1);
if(!x9575.valid){
continue;
}
CheckValue<IkReal> x9576 = IKatan2WithCheck(IkReal(((((-1.0)*x9574))+x9573)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x9576.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9575.value)))+(x9576.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9577=IKsin(j4);
IkReal x9578=IKcos(j4);
IkReal x9579=(gconst4*r11);
IkReal x9580=((1.0)*cj1);
IkReal x9581=(gconst5*r10);
IkReal x9582=(gconst4*r01);
IkReal x9583=(gconst5*r00);
IkReal x9584=(gconst4*r21);
IkReal x9585=(gconst5*r20);
IkReal x9586=((1.0)*x9578);
IkReal x9587=((1.0)*x9577);
evalcond[0]=((((-1.0)*r22*x9586))+(((-1.0)*x9585*x9587))+((x9577*x9584)));
evalcond[1]=((((-1.0)*x9583*x9587))+((x9577*x9582))+(((-1.0)*r02*x9586)));
evalcond[2]=(((x9578*x9581))+(((-1.0)*r12*x9587))+(((-1.0)*x9579*x9586)));
evalcond[3]=((1.0)+((x9577*x9579))+(((-1.0)*x9581*x9587))+(((-1.0)*r12*x9586)));
evalcond[4]=((((-1.0)*r22*x9587))+(((-1.0)*cj2*x9580))+((sj1*sj2))+(((-1.0)*x9584*x9586))+((x9578*x9585)));
evalcond[5]=((((-1.0)*sj2*x9580))+(((-1.0)*cj2*sj1))+((x9578*x9583))+(((-1.0)*x9582*x9586))+(((-1.0)*r02*x9587)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9588=((1.0)*gconst5);
CheckValue<IkReal> x9589 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x9588))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9589.valid){
continue;
}
CheckValue<IkReal> x9590=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x9588)))),-1);
if(!x9590.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9589.value)+(((1.5707963267949)*(x9590.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9591=IKsin(j4);
IkReal x9592=IKcos(j4);
IkReal x9593=(gconst4*r11);
IkReal x9594=((1.0)*cj1);
IkReal x9595=(gconst5*r10);
IkReal x9596=(gconst4*r01);
IkReal x9597=(gconst5*r00);
IkReal x9598=(gconst4*r21);
IkReal x9599=(gconst5*r20);
IkReal x9600=((1.0)*x9592);
IkReal x9601=((1.0)*x9591);
evalcond[0]=((((-1.0)*r22*x9600))+((x9591*x9598))+(((-1.0)*x9599*x9601)));
evalcond[1]=((((-1.0)*x9597*x9601))+(((-1.0)*r02*x9600))+((x9591*x9596)));
evalcond[2]=((((-1.0)*r12*x9601))+((x9592*x9595))+(((-1.0)*x9593*x9600)));
evalcond[3]=((1.0)+(((-1.0)*x9595*x9601))+(((-1.0)*r12*x9600))+((x9591*x9593)));
evalcond[4]=((((-1.0)*r22*x9601))+(((-1.0)*cj2*x9594))+((sj1*sj2))+(((-1.0)*x9598*x9600))+((x9592*x9599)));
evalcond[5]=((((-1.0)*x9596*x9600))+(((-1.0)*sj2*x9594))+(((-1.0)*cj2*sj1))+(((-1.0)*r02*x9601))+((x9592*x9597)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9602 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9602.valid){
continue;
}
CheckValue<IkReal> x9603=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x9603.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9602.value)+(((1.5707963267949)*(x9603.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9604=IKsin(j4);
IkReal x9605=IKcos(j4);
IkReal x9606=(gconst4*r11);
IkReal x9607=((1.0)*cj1);
IkReal x9608=(gconst5*r10);
IkReal x9609=(gconst4*r01);
IkReal x9610=(gconst5*r00);
IkReal x9611=(gconst4*r21);
IkReal x9612=(gconst5*r20);
IkReal x9613=((1.0)*x9605);
IkReal x9614=((1.0)*x9604);
evalcond[0]=((((-1.0)*x9612*x9614))+(((-1.0)*r22*x9613))+((x9604*x9611)));
evalcond[1]=(((x9604*x9609))+(((-1.0)*r02*x9613))+(((-1.0)*x9610*x9614)));
evalcond[2]=((((-1.0)*r12*x9614))+((x9605*x9608))+(((-1.0)*x9606*x9613)));
evalcond[3]=((1.0)+(((-1.0)*r12*x9613))+((x9604*x9606))+(((-1.0)*x9608*x9614)));
evalcond[4]=((((-1.0)*r22*x9614))+(((-1.0)*cj2*x9607))+((sj1*sj2))+(((-1.0)*x9611*x9613))+((x9605*x9612)));
evalcond[5]=((((-1.0)*x9609*x9613))+(((-1.0)*sj2*x9607))+(((-1.0)*cj2*sj1))+(((-1.0)*r02*x9614))+((x9605*x9610)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x9615=((-1.0)*r21);
CheckValue<IkReal> x9618 = IKatan2WithCheck(IkReal(x9615),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9618.valid){
continue;
}
IkReal x9616=((1.0)*(x9618.value));
IkReal x9617=x9514;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9616)));
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9616)));
IkReal gconst4=(x9615*x9617);
IkReal gconst5=((1.0)*r20*x9617);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9619=((-1.0)*r21);
CheckValue<IkReal> x9622 = IKatan2WithCheck(IkReal(x9619),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9622.valid){
continue;
}
IkReal x9620=((1.0)*(x9622.value));
IkReal x9621=x9514;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9620)));
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9620)));
IkReal gconst4=(x9619*x9621);
IkReal gconst5=((1.0)*r20*x9621);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9623=((-1.0)*r21);
CheckValue<IkReal> x9626 = IKatan2WithCheck(IkReal(x9623),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9626.valid){
continue;
}
IkReal x9624=((1.0)*(x9626.value));
IkReal x9625=x9514;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9624)));
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9624)));
IkReal gconst4=(x9623*x9625);
IkReal gconst5=((1.0)*r20*x9625);
IkReal x9627=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9631=IKPowWithIntegerCheck(x9627,-1);
if(!x9631.valid){
continue;
}
IkReal x9628=x9631.value;
IkReal x9629=((1.0)*x9628);
IkReal x9630=((((-1.0)*x9629*(r11*r11)*(r21*r21)))+(((-1.0)*(r12*r12)))+(((-1.0)*x9629*(r10*r10)*(r20*r20)))+(((-2.0)*r10*r11*r20*r21*x9628)));
j4eval[0]=x9630;
j4eval[1]=r12;
j4eval[2]=x9627;
j4eval[3]=IKsign(x9630);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9632=(gconst5*r10);
IkReal x9633=(gconst4*r11);
CheckValue<IkReal> x9634 = IKatan2WithCheck(IkReal(((((-1.0)*x9632))+x9633)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x9634.valid){
continue;
}
CheckValue<IkReal> x9635=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r12*r12)))+(((-1.0)*(x9633*x9633)))+(((-1.0)*(x9632*x9632)))+(((2.0)*x9632*x9633)))),-1);
if(!x9635.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9634.value)+(((1.5707963267949)*(x9635.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9636=IKcos(j4);
IkReal x9637=IKsin(j4);
IkReal x9638=(gconst4*r11);
IkReal x9639=(gconst5*r10);
IkReal x9640=((1.0)*cj1);
IkReal x9641=(gconst5*r00);
IkReal x9642=(gconst5*r20);
IkReal x9643=((1.0)*x9636);
IkReal x9644=(gconst4*x9636);
IkReal x9645=((1.0)*x9637);
IkReal x9646=(gconst4*x9637);
evalcond[0]=((((-1.0)*x9639*x9643))+((r12*x9637))+((x9636*x9638)));
evalcond[1]=((((-1.0)*x9642*x9645))+((r21*x9646))+(((-1.0)*r22*x9643)));
evalcond[2]=((((-1.0)*x9641*x9645))+((r01*x9646))+(((-1.0)*r02*x9643)));
evalcond[3]=((1.0)+(((-1.0)*r12*x9643))+(((-1.0)*x9639*x9645))+((x9637*x9638)));
evalcond[4]=((((-1.0)*cj2*x9640))+((sj1*sj2))+((r22*x9637))+(((-1.0)*x9642*x9643))+((r21*x9644)));
evalcond[5]=((((-1.0)*sj2*x9640))+(((-1.0)*cj2*sj1))+(((-1.0)*x9641*x9643))+((r01*x9644))+((r02*x9637)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9647=((1.0)*gconst5);
CheckValue<IkReal> x9648=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x9647)))),-1);
if(!x9648.valid){
continue;
}
CheckValue<IkReal> x9649 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x9647))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9649.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9648.value)))+(x9649.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9650=IKcos(j4);
IkReal x9651=IKsin(j4);
IkReal x9652=(gconst4*r11);
IkReal x9653=(gconst5*r10);
IkReal x9654=((1.0)*cj1);
IkReal x9655=(gconst5*r00);
IkReal x9656=(gconst5*r20);
IkReal x9657=((1.0)*x9650);
IkReal x9658=(gconst4*x9650);
IkReal x9659=((1.0)*x9651);
IkReal x9660=(gconst4*x9651);
evalcond[0]=(((r12*x9651))+(((-1.0)*x9653*x9657))+((x9650*x9652)));
evalcond[1]=(((r21*x9660))+(((-1.0)*x9656*x9659))+(((-1.0)*r22*x9657)));
evalcond[2]=((((-1.0)*x9655*x9659))+((r01*x9660))+(((-1.0)*r02*x9657)));
evalcond[3]=((1.0)+(((-1.0)*x9653*x9659))+(((-1.0)*r12*x9657))+((x9651*x9652)));
evalcond[4]=((((-1.0)*cj2*x9654))+((r21*x9658))+((sj1*sj2))+(((-1.0)*x9656*x9657))+((r22*x9651)));
evalcond[5]=((((-1.0)*sj2*x9654))+(((-1.0)*x9655*x9657))+(((-1.0)*cj2*sj1))+((r01*x9658))+((r02*x9651)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9661 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9661.valid){
continue;
}
CheckValue<IkReal> x9662=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x9662.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9661.value)+(((1.5707963267949)*(x9662.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9663=IKcos(j4);
IkReal x9664=IKsin(j4);
IkReal x9665=(gconst4*r11);
IkReal x9666=(gconst5*r10);
IkReal x9667=((1.0)*cj1);
IkReal x9668=(gconst5*r00);
IkReal x9669=(gconst5*r20);
IkReal x9670=((1.0)*x9663);
IkReal x9671=(gconst4*x9663);
IkReal x9672=((1.0)*x9664);
IkReal x9673=(gconst4*x9664);
evalcond[0]=((((-1.0)*x9666*x9670))+((x9663*x9665))+((r12*x9664)));
evalcond[1]=(((r21*x9673))+(((-1.0)*x9669*x9672))+(((-1.0)*r22*x9670)));
evalcond[2]=(((r01*x9673))+(((-1.0)*r02*x9670))+(((-1.0)*x9668*x9672)));
evalcond[3]=((1.0)+(((-1.0)*x9666*x9672))+((x9664*x9665))+(((-1.0)*r12*x9670)));
evalcond[4]=(((r21*x9671))+(((-1.0)*cj2*x9667))+((sj1*sj2))+((r22*x9664))+(((-1.0)*x9669*x9670)));
evalcond[5]=((((-1.0)*cj2*sj1))+((r01*x9671))+(((-1.0)*x9668*x9670))+((r02*x9664))+(((-1.0)*sj2*x9667)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x9674=((-1.0)*r21);
CheckValue<IkReal> x9677 = IKatan2WithCheck(IkReal(x9674),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9677.valid){
continue;
}
IkReal x9675=((1.0)*(x9677.value));
IkReal x9676=x9514;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9675)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9675)));
IkReal gconst4=(x9674*x9676);
IkReal gconst5=((1.0)*r20*x9676);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9678=((-1.0)*r21);
CheckValue<IkReal> x9681 = IKatan2WithCheck(IkReal(x9678),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9681.valid){
continue;
}
IkReal x9679=((1.0)*(x9681.value));
IkReal x9680=x9514;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9679)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9679)));
IkReal gconst4=(x9678*x9680);
IkReal gconst5=((1.0)*r20*x9680);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9682=((-1.0)*r21);
CheckValue<IkReal> x9685 = IKatan2WithCheck(IkReal(x9682),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9685.valid){
continue;
}
IkReal x9683=((1.0)*(x9685.value));
IkReal x9684=x9514;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9683)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9683)));
IkReal gconst4=(x9682*x9684);
IkReal gconst5=((1.0)*r20*x9684);
IkReal x9686=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9690=IKPowWithIntegerCheck(x9686,-1);
if(!x9690.valid){
continue;
}
IkReal x9687=x9690.value;
IkReal x9688=((1.0)*x9687);
IkReal x9689=((((-2.0)*r10*r11*r20*r21*x9687))+(((-1.0)*x9688*(r11*r11)*(r21*r21)))+(((-1.0)*x9688*(r10*r10)*(r20*r20)))+(((-1.0)*(r12*r12))));
j4eval[0]=x9689;
j4eval[1]=r12;
j4eval[2]=x9686;
j4eval[3]=IKsign(x9689);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9691=(gconst5*r10);
IkReal x9692=(gconst4*r11);
CheckValue<IkReal> x9693=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x9692*x9692)))+(((2.0)*x9691*x9692))+(((-1.0)*(r12*r12)))+(((-1.0)*(x9691*x9691))))),-1);
if(!x9693.valid){
continue;
}
CheckValue<IkReal> x9694 = IKatan2WithCheck(IkReal(((((-1.0)*x9691))+x9692)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x9694.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9693.value)))+(x9694.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9695=IKcos(j4);
IkReal x9696=IKsin(j4);
IkReal x9697=(gconst4*r11);
IkReal x9698=(gconst5*r10);
IkReal x9699=(gconst5*r00);
IkReal x9700=(gconst5*r20);
IkReal x9701=((1.0)*x9695);
IkReal x9702=(gconst4*x9695);
IkReal x9703=((1.0)*x9696);
IkReal x9704=(gconst4*x9696);
evalcond[0]=(((x9695*x9697))+(((-1.0)*x9698*x9701))+((r12*x9696)));
evalcond[1]=((((-1.0)*r22*x9701))+(((-1.0)*x9700*x9703))+((r21*x9704)));
evalcond[2]=((((-1.0)*r02*x9701))+((r01*x9704))+(((-1.0)*x9699*x9703)));
evalcond[3]=((1.0)+((x9696*x9697))+(((-1.0)*x9698*x9703))+(((-1.0)*r12*x9701)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x9696))+(((-1.0)*x9700*x9701))+((r21*x9702)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r02*x9696))+((r01*x9702))+(((-1.0)*x9699*x9701)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9705=((1.0)*gconst5);
CheckValue<IkReal> x9706 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*r20*x9705)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9706.valid){
continue;
}
CheckValue<IkReal> x9707=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x9705)))),-1);
if(!x9707.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9706.value)+(((1.5707963267949)*(x9707.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9708=IKcos(j4);
IkReal x9709=IKsin(j4);
IkReal x9710=(gconst4*r11);
IkReal x9711=(gconst5*r10);
IkReal x9712=(gconst5*r00);
IkReal x9713=(gconst5*r20);
IkReal x9714=((1.0)*x9708);
IkReal x9715=(gconst4*x9708);
IkReal x9716=((1.0)*x9709);
IkReal x9717=(gconst4*x9709);
evalcond[0]=(((r12*x9709))+(((-1.0)*x9711*x9714))+((x9708*x9710)));
evalcond[1]=(((r21*x9717))+(((-1.0)*r22*x9714))+(((-1.0)*x9713*x9716)));
evalcond[2]=((((-1.0)*r02*x9714))+(((-1.0)*x9712*x9716))+((r01*x9717)));
evalcond[3]=((1.0)+(((-1.0)*r12*x9714))+((x9709*x9710))+(((-1.0)*x9711*x9716)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r21*x9715))+(((-1.0)*x9713*x9714))+((r22*x9709)));
evalcond[5]=(((r02*x9709))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x9712*x9714))+((r01*x9715)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9718 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9718.valid){
continue;
}
CheckValue<IkReal> x9719=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x9719.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9718.value)+(((1.5707963267949)*(x9719.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9720=IKcos(j4);
IkReal x9721=IKsin(j4);
IkReal x9722=(gconst4*r11);
IkReal x9723=(gconst5*r10);
IkReal x9724=(gconst5*r00);
IkReal x9725=(gconst5*r20);
IkReal x9726=((1.0)*x9720);
IkReal x9727=(gconst4*x9720);
IkReal x9728=((1.0)*x9721);
IkReal x9729=(gconst4*x9721);
evalcond[0]=(((r12*x9721))+((x9720*x9722))+(((-1.0)*x9723*x9726)));
evalcond[1]=((((-1.0)*x9725*x9728))+(((-1.0)*r22*x9726))+((r21*x9729)));
evalcond[2]=(((r01*x9729))+(((-1.0)*x9724*x9728))+(((-1.0)*r02*x9726)));
evalcond[3]=((1.0)+(((-1.0)*r12*x9726))+(((-1.0)*x9723*x9728))+((x9721*x9722)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x9725*x9726))+((cj1*sj2))+((r21*x9727))+((r22*x9721)));
evalcond[5]=(((r01*x9727))+(((-1.0)*x9724*x9726))+((r02*x9721))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x9730=((-1.0)*r21);
CheckValue<IkReal> x9733 = IKatan2WithCheck(IkReal(x9730),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9733.valid){
continue;
}
IkReal x9731=((1.0)*(x9733.value));
IkReal x9732=x9514;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9731)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9731)));
IkReal gconst4=(x9730*x9732);
IkReal gconst5=((1.0)*r20*x9732);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9734=((-1.0)*r21);
CheckValue<IkReal> x9737 = IKatan2WithCheck(IkReal(x9734),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9737.valid){
continue;
}
IkReal x9735=((1.0)*(x9737.value));
IkReal x9736=x9514;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9735)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9735)));
IkReal gconst4=(x9734*x9736);
IkReal gconst5=((1.0)*r20*x9736);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9738=((-1.0)*r21);
CheckValue<IkReal> x9741 = IKatan2WithCheck(IkReal(x9738),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9741.valid){
continue;
}
IkReal x9739=((1.0)*(x9741.value));
IkReal x9740=x9514;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9739)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9739)));
IkReal gconst4=(x9738*x9740);
IkReal gconst5=((1.0)*r20*x9740);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9742=(gconst5*r10);
IkReal x9743=(gconst4*r11);
CheckValue<IkReal> x9744 = IKatan2WithCheck(IkReal(((((-1.0)*x9743))+x9742)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x9744.valid){
continue;
}
CheckValue<IkReal> x9745=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x9742*x9743))+(x9743*x9743)+(x9742*x9742))),-1);
if(!x9745.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9744.value)+(((1.5707963267949)*(x9745.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9746=IKsin(j4);
IkReal x9747=IKcos(j4);
IkReal x9748=(gconst4*r11);
IkReal x9749=(gconst5*r10);
IkReal x9750=(gconst4*r01);
IkReal x9751=(gconst5*r00);
IkReal x9752=(gconst4*r21);
IkReal x9753=(gconst5*r20);
IkReal x9754=((1.0)*x9747);
IkReal x9755=((1.0)*x9746);
evalcond[0]=((((-1.0)*r22*x9754))+(((-1.0)*x9753*x9755))+((x9746*x9752)));
evalcond[1]=((((-1.0)*r02*x9754))+(((-1.0)*x9751*x9755))+((x9746*x9750)));
evalcond[2]=(((x9747*x9749))+(((-1.0)*x9748*x9754))+(((-1.0)*r12*x9755)));
evalcond[3]=((1.0)+(((-1.0)*x9749*x9755))+((x9746*x9748))+(((-1.0)*r12*x9754)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x9755))+((x9747*x9753))+(((-1.0)*x9752*x9754)));
evalcond[5]=((((-1.0)*r02*x9755))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x9747*x9751))+(((-1.0)*x9750*x9754)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9756=((1.0)*gconst5);
CheckValue<IkReal> x9757=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x9756)))),-1);
if(!x9757.valid){
continue;
}
CheckValue<IkReal> x9758 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x9756))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9758.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9757.value)))+(x9758.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9759=IKsin(j4);
IkReal x9760=IKcos(j4);
IkReal x9761=(gconst4*r11);
IkReal x9762=(gconst5*r10);
IkReal x9763=(gconst4*r01);
IkReal x9764=(gconst5*r00);
IkReal x9765=(gconst4*r21);
IkReal x9766=(gconst5*r20);
IkReal x9767=((1.0)*x9760);
IkReal x9768=((1.0)*x9759);
evalcond[0]=((((-1.0)*r22*x9767))+(((-1.0)*x9766*x9768))+((x9759*x9765)));
evalcond[1]=((((-1.0)*x9764*x9768))+(((-1.0)*r02*x9767))+((x9759*x9763)));
evalcond[2]=((((-1.0)*r12*x9768))+((x9760*x9762))+(((-1.0)*x9761*x9767)));
evalcond[3]=((1.0)+(((-1.0)*r12*x9767))+((x9759*x9761))+(((-1.0)*x9762*x9768)));
evalcond[4]=((((-1.0)*x9765*x9767))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x9768))+((x9760*x9766)));
evalcond[5]=((((-1.0)*x9763*x9767))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r02*x9768))+((x9760*x9764)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9769 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9769.valid){
continue;
}
CheckValue<IkReal> x9770=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x9770.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9769.value)+(((1.5707963267949)*(x9770.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9771=IKsin(j4);
IkReal x9772=IKcos(j4);
IkReal x9773=(gconst4*r11);
IkReal x9774=(gconst5*r10);
IkReal x9775=(gconst4*r01);
IkReal x9776=(gconst5*r00);
IkReal x9777=(gconst4*r21);
IkReal x9778=(gconst5*r20);
IkReal x9779=((1.0)*x9772);
IkReal x9780=((1.0)*x9771);
evalcond[0]=((((-1.0)*r22*x9779))+(((-1.0)*x9778*x9780))+((x9771*x9777)));
evalcond[1]=((((-1.0)*r02*x9779))+(((-1.0)*x9776*x9780))+((x9771*x9775)));
evalcond[2]=(((x9772*x9774))+(((-1.0)*r12*x9780))+(((-1.0)*x9773*x9779)));
evalcond[3]=((1.0)+(((-1.0)*x9774*x9780))+((x9771*x9773))+(((-1.0)*r12*x9779)));
evalcond[4]=(((x9772*x9778))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x9780))+(((-1.0)*x9777*x9779)));
evalcond[5]=(((x9772*x9776))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x9775*x9779))+(((-1.0)*r02*x9780)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r02);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal op[2+1], zeror[2];
int numroots;
op[0]=((1.0)+r12);
op[1]=((((-2.0)*gconst5*r10))+(((2.0)*gconst4*r11)));
op[2]=((1.0)+(((-1.0)*r12)));
polyroots2(op,zeror,numroots);
IkReal j4array[2], cj4array[2], sj4array[2], tempj4array[1];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ++ij4)
{
IkReal htj4 = zeror[ij4];
tempj4array[0]=((2.0)*(atan(htj4)));
for(int kj4 = 0; kj4 < 1; ++kj4)
{
j4array[numsolutions] = tempj4array[kj4];
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
numsolutions++;
}
}
bool j4valid[2]={true,true};
_nj4 = 2;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
    {
if( !j4valid[ij4] )
{
    continue;
}
    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
htj4 = IKtan(j4/2);

_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9781=gconst4*gconst4;
IkReal x9782=gconst5*gconst5;
IkReal x9783=(r10*r21);
IkReal x9784=((1.0)*cj3);
IkReal x9785=(r11*r21);
IkReal x9786=(r11*r20);
IkReal x9787=(r22*sj3);
IkReal x9788=(gconst4*r10);
IkReal x9789=((1.0)*sj3);
IkReal x9790=(cj3*gconst4*gconst5);
CheckValue<IkReal> x9791=IKPowWithIntegerCheck(IKsign((((x9786*x9790))+(((-1.0)*x9781*x9784*x9785))+((x9783*x9790))+(((-1.0)*r12*r22*x9784))+(((-1.0)*r10*r20*x9782*x9784)))),-1);
if(!x9791.valid){
continue;
}
CheckValue<IkReal> x9792 = IKatan2WithCheck(IkReal((((x9787*x9788))+((gconst5*r11*x9787)))),IkReal((((sj3*x9781*x9783))+(((-1.0)*x9782*x9786*x9789))+(((-1.0)*gconst5*r20*x9788*x9789))+((gconst4*gconst5*sj3*x9785)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9792.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9791.value)))+(x9792.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9793=IKsin(j4);
IkReal x9794=IKcos(j4);
IkReal x9795=(sj1*sj2);
IkReal x9796=(gconst5*sj3);
IkReal x9797=(cj3*gconst5);
IkReal x9798=(gconst4*r11);
IkReal x9799=((1.0)*cj1);
IkReal x9800=(gconst4*r01);
IkReal x9801=(cj2*sj1);
IkReal x9802=(gconst4*r21);
IkReal x9803=(gconst4*sj3);
IkReal x9804=(cj3*gconst4);
IkReal x9805=(cj2*x9799);
IkReal x9806=((1.0)*x9794);
IkReal x9807=((1.0)*x9793);
IkReal x9808=(cj3*x9793);
IkReal x9809=(cj3*x9794);
evalcond[0]=((((-1.0)*gconst5*r20*x9807))+(((-1.0)*r22*x9806))+((x9793*x9802)));
evalcond[1]=((((-1.0)*gconst5*r00*x9807))+(((-1.0)*r02*x9806))+((x9793*x9800)));
evalcond[2]=((1.0)+((x9793*x9798))+(((-1.0)*gconst5*r10*x9807))+(((-1.0)*r12*x9806)));
evalcond[3]=(((r10*x9803))+((r12*x9808))+((r11*x9796))+(((-1.0)*r10*x9797*x9806))+((x9798*x9809)));
evalcond[4]=(((r10*x9804))+((r11*x9797))+(((-1.0)*sj3*x9798*x9806))+((r10*x9794*x9796))+(((-1.0)*r12*sj3*x9807)));
evalcond[5]=((((-1.0)*r20*x9797*x9806))+((cj1*sj2))+((r22*x9808))+((x9802*x9809))+((r21*x9796))+((r20*x9803))+x9801);
evalcond[6]=(((r00*x9803))+(((-1.0)*x9805))+((x9800*x9809))+x9795+((r02*x9808))+((r01*x9796))+(((-1.0)*r00*x9797*x9806)));
evalcond[7]=((((-1.0)*x9805))+(((-1.0)*r22*sj3*x9807))+((r20*x9794*x9796))+x9795+((r21*x9797))+(((-1.0)*sj3*x9802*x9806))+((r20*x9804)));
evalcond[8]=(((r00*x9804))+(((-1.0)*x9801))+((r00*x9794*x9796))+(((-1.0)*sj3*x9800*x9806))+((r01*x9797))+(((-1.0)*r02*sj3*x9807))+(((-1.0)*sj2*x9799)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9810=((1.0)*gconst5);
CheckValue<IkReal> x9811 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*r20*x9810)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9811.valid){
continue;
}
CheckValue<IkReal> x9812=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x9810)))),-1);
if(!x9812.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9811.value)+(((1.5707963267949)*(x9812.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9813=IKsin(j4);
IkReal x9814=IKcos(j4);
IkReal x9815=(sj1*sj2);
IkReal x9816=(gconst5*sj3);
IkReal x9817=(cj3*gconst5);
IkReal x9818=(gconst4*r11);
IkReal x9819=((1.0)*cj1);
IkReal x9820=(gconst4*r01);
IkReal x9821=(cj2*sj1);
IkReal x9822=(gconst4*r21);
IkReal x9823=(gconst4*sj3);
IkReal x9824=(cj3*gconst4);
IkReal x9825=(cj2*x9819);
IkReal x9826=((1.0)*x9814);
IkReal x9827=((1.0)*x9813);
IkReal x9828=(cj3*x9813);
IkReal x9829=(cj3*x9814);
evalcond[0]=(((x9813*x9822))+(((-1.0)*gconst5*r20*x9827))+(((-1.0)*r22*x9826)));
evalcond[1]=((((-1.0)*r02*x9826))+((x9813*x9820))+(((-1.0)*gconst5*r00*x9827)));
evalcond[2]=((1.0)+(((-1.0)*gconst5*r10*x9827))+((x9813*x9818))+(((-1.0)*r12*x9826)));
evalcond[3]=(((x9818*x9829))+((r11*x9816))+((r12*x9828))+(((-1.0)*r10*x9817*x9826))+((r10*x9823)));
evalcond[4]=((((-1.0)*sj3*x9818*x9826))+((r10*x9814*x9816))+((r11*x9817))+(((-1.0)*r12*sj3*x9827))+((r10*x9824)));
evalcond[5]=(((r20*x9823))+((r21*x9816))+((cj1*sj2))+((r22*x9828))+(((-1.0)*r20*x9817*x9826))+((x9822*x9829))+x9821);
evalcond[6]=((((-1.0)*x9825))+(((-1.0)*r00*x9817*x9826))+((r00*x9823))+((x9820*x9829))+((r02*x9828))+x9815+((r01*x9816)));
evalcond[7]=(((r20*x9824))+((r20*x9814*x9816))+((r21*x9817))+(((-1.0)*x9825))+(((-1.0)*r22*sj3*x9827))+(((-1.0)*sj3*x9822*x9826))+x9815);
evalcond[8]=(((r00*x9824))+(((-1.0)*r02*sj3*x9827))+(((-1.0)*sj2*x9819))+((r00*x9814*x9816))+(((-1.0)*sj3*x9820*x9826))+(((-1.0)*x9821))+((r01*x9817)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9830 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9830.valid){
continue;
}
CheckValue<IkReal> x9831=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x9831.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9830.value)+(((1.5707963267949)*(x9831.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9832=IKsin(j4);
IkReal x9833=IKcos(j4);
IkReal x9834=(sj1*sj2);
IkReal x9835=(gconst5*sj3);
IkReal x9836=(cj3*gconst5);
IkReal x9837=(gconst4*r11);
IkReal x9838=((1.0)*cj1);
IkReal x9839=(gconst4*r01);
IkReal x9840=(cj2*sj1);
IkReal x9841=(gconst4*r21);
IkReal x9842=(gconst4*sj3);
IkReal x9843=(cj3*gconst4);
IkReal x9844=(cj2*x9838);
IkReal x9845=((1.0)*x9833);
IkReal x9846=((1.0)*x9832);
IkReal x9847=(cj3*x9832);
IkReal x9848=(cj3*x9833);
evalcond[0]=((((-1.0)*gconst5*r20*x9846))+(((-1.0)*r22*x9845))+((x9832*x9841)));
evalcond[1]=((((-1.0)*gconst5*r00*x9846))+(((-1.0)*r02*x9845))+((x9832*x9839)));
evalcond[2]=((1.0)+(((-1.0)*r12*x9845))+((x9832*x9837))+(((-1.0)*gconst5*r10*x9846)));
evalcond[3]=(((r11*x9835))+((r10*x9842))+(((-1.0)*r10*x9836*x9845))+((x9837*x9848))+((r12*x9847)));
evalcond[4]=((((-1.0)*r12*sj3*x9846))+((r11*x9836))+((r10*x9843))+((r10*x9833*x9835))+(((-1.0)*sj3*x9837*x9845)));
evalcond[5]=((((-1.0)*r20*x9836*x9845))+((r21*x9835))+((cj1*sj2))+((r20*x9842))+x9840+((r22*x9847))+((x9841*x9848)));
evalcond[6]=(((r02*x9847))+((x9839*x9848))+((r01*x9835))+(((-1.0)*r00*x9836*x9845))+(((-1.0)*x9844))+((r00*x9842))+x9834);
evalcond[7]=(((r21*x9836))+(((-1.0)*sj3*x9841*x9845))+((r20*x9843))+(((-1.0)*r22*sj3*x9846))+(((-1.0)*x9844))+x9834+((r20*x9833*x9835)));
evalcond[8]=((((-1.0)*x9840))+((r01*x9836))+(((-1.0)*sj3*x9839*x9845))+(((-1.0)*r02*sj3*x9846))+((r00*x9833*x9835))+(((-1.0)*sj2*x9838))+((r00*x9843)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9849=((-1.0)*r21);
CheckValue<IkReal> x9852 = IKatan2WithCheck(IkReal(x9849),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9852.valid){
continue;
}
IkReal x9850=((1.0)*(x9852.value));
IkReal x9851=x9514;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9850)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9850)));
IkReal gconst4=(x9849*x9851);
IkReal gconst5=((1.0)*r20*x9851);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9853=((-1.0)*r21);
CheckValue<IkReal> x9856 = IKatan2WithCheck(IkReal(x9853),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9856.valid){
continue;
}
IkReal x9854=((1.0)*(x9856.value));
IkReal x9855=x9514;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9854)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9854)));
IkReal gconst4=(x9853*x9855);
IkReal gconst5=((1.0)*r20*x9855);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x9857=((-1.0)*r21);
CheckValue<IkReal> x9860 = IKatan2WithCheck(IkReal(x9857),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9860.valid){
continue;
}
IkReal x9858=((1.0)*(x9860.value));
IkReal x9859=x9514;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9858)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9858)));
IkReal gconst4=(x9857*x9859);
IkReal gconst5=((1.0)*r20*x9859);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9861=((-1.0)*r21);
CheckValue<IkReal> x9864 = IKatan2WithCheck(IkReal(x9861),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9864.valid){
continue;
}
IkReal x9862=((1.0)*(x9864.value));
IkReal x9863=x9514;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9862)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9862)));
IkReal gconst4=(x9861*x9863);
IkReal gconst5=((1.0)*r20*x9863);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9865=((-1.0)*r21);
CheckValue<IkReal> x9868 = IKatan2WithCheck(IkReal(x9865),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9868.valid){
continue;
}
IkReal x9866=((1.0)*(x9868.value));
IkReal x9867=x9514;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9866)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9866)));
IkReal gconst4=(x9865*x9867);
IkReal gconst5=((1.0)*r20*x9867);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9869=((-1.0)*r21);
CheckValue<IkReal> x9872 = IKatan2WithCheck(IkReal(x9869),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9872.valid){
continue;
}
IkReal x9870=((1.0)*(x9872.value));
IkReal x9871=x9514;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9870)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9870)));
IkReal gconst4=(x9869*x9871);
IkReal gconst5=((1.0)*r20*x9871);
IkReal x9873=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9877=IKPowWithIntegerCheck(x9873,-1);
if(!x9877.valid){
continue;
}
IkReal x9874=x9877.value;
IkReal x9875=((1.0)*x9874);
IkReal x9876=((((-2.0)*r10*r11*r20*r21*x9874))+(((-1.0)*x9875*(r10*r10)*(r20*r20)))+(((-1.0)*(r12*r12)))+(((-1.0)*x9875*(r11*r11)*(r21*r21))));
j4eval[0]=x9876;
j4eval[1]=r12;
j4eval[2]=x9873;
j4eval[3]=IKsign(x9876);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9878=(gconst5*r10);
IkReal x9879=(gconst4*r11);
CheckValue<IkReal> x9880 = IKatan2WithCheck(IkReal(((((-1.0)*x9879))+x9878)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x9880.valid){
continue;
}
CheckValue<IkReal> x9881=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x9879*x9879)))+(((2.0)*x9878*x9879))+(((-1.0)*(r12*r12)))+(((-1.0)*(x9878*x9878))))),-1);
if(!x9881.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9880.value)+(((1.5707963267949)*(x9881.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9882=IKsin(j4);
IkReal x9883=IKcos(j4);
IkReal x9884=(gconst4*r11);
IkReal x9885=(gconst5*r10);
IkReal x9886=(gconst4*r01);
IkReal x9887=(gconst5*r00);
IkReal x9888=(gconst4*r21);
IkReal x9889=(gconst5*r20);
IkReal x9890=((1.0)*x9883);
IkReal x9891=((1.0)*x9882);
evalcond[0]=((((-1.0)*x9889*x9891))+(((-1.0)*r22*x9890))+((x9882*x9888)));
evalcond[1]=((((-1.0)*x9887*x9891))+(((-1.0)*r02*x9890))+((x9882*x9886)));
evalcond[2]=((((-1.0)*r12*x9891))+(((-1.0)*x9884*x9890))+((x9883*x9885)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x9890))+(((-1.0)*x9885*x9891))+((x9882*x9884)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r02*x9891))+(((-1.0)*x9886*x9890))+((x9883*x9887)));
evalcond[5]=((((-1.0)*x9888*x9890))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x9891))+((x9883*x9889)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9892=((1.0)*gconst5);
CheckValue<IkReal> x9893 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x9892))+((gconst4*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9893.valid){
continue;
}
CheckValue<IkReal> x9894=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x9892))+(((-1.0)*gconst4*r20)))),-1);
if(!x9894.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9893.value)+(((1.5707963267949)*(x9894.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9895=IKsin(j4);
IkReal x9896=IKcos(j4);
IkReal x9897=(gconst4*r11);
IkReal x9898=(gconst5*r10);
IkReal x9899=(gconst4*r01);
IkReal x9900=(gconst5*r00);
IkReal x9901=(gconst4*r21);
IkReal x9902=(gconst5*r20);
IkReal x9903=((1.0)*x9896);
IkReal x9904=((1.0)*x9895);
evalcond[0]=((((-1.0)*x9902*x9904))+((x9895*x9901))+(((-1.0)*r22*x9903)));
evalcond[1]=((((-1.0)*r02*x9903))+((x9895*x9899))+(((-1.0)*x9900*x9904)));
evalcond[2]=((((-1.0)*r12*x9904))+((x9896*x9898))+(((-1.0)*x9897*x9903)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x9903))+(((-1.0)*x9898*x9904))+((x9895*x9897)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r02*x9904))+((x9896*x9900))+(((-1.0)*x9899*x9903)));
evalcond[5]=((((-1.0)*x9901*x9903))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x9904))+((x9896*x9902)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9905=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x9905.valid){
continue;
}
CheckValue<IkReal> x9906 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9906.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9905.value)))+(x9906.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9907=IKsin(j4);
IkReal x9908=IKcos(j4);
IkReal x9909=(gconst4*r11);
IkReal x9910=(gconst5*r10);
IkReal x9911=(gconst4*r01);
IkReal x9912=(gconst5*r00);
IkReal x9913=(gconst4*r21);
IkReal x9914=(gconst5*r20);
IkReal x9915=((1.0)*x9908);
IkReal x9916=((1.0)*x9907);
evalcond[0]=(((x9907*x9913))+(((-1.0)*x9914*x9916))+(((-1.0)*r22*x9915)));
evalcond[1]=(((x9907*x9911))+(((-1.0)*x9912*x9916))+(((-1.0)*r02*x9915)));
evalcond[2]=((((-1.0)*x9909*x9915))+((x9908*x9910))+(((-1.0)*r12*x9916)));
evalcond[3]=((-1.0)+((x9907*x9909))+(((-1.0)*r12*x9915))+(((-1.0)*x9910*x9916)));
evalcond[4]=(((cj2*sj1))+((x9908*x9912))+((cj1*sj2))+(((-1.0)*r02*x9916))+(((-1.0)*x9911*x9915)));
evalcond[5]=(((x9908*x9914))+(((-1.0)*x9913*x9915))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x9916)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9917=((-1.0)*r21);
CheckValue<IkReal> x9920 = IKatan2WithCheck(IkReal(x9917),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9920.valid){
continue;
}
IkReal x9918=((1.0)*(x9920.value));
IkReal x9919=x9514;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9918)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9918)));
IkReal gconst4=(x9917*x9919);
IkReal gconst5=((1.0)*r20*x9919);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9921=((-1.0)*r21);
CheckValue<IkReal> x9924 = IKatan2WithCheck(IkReal(x9921),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9924.valid){
continue;
}
IkReal x9922=((1.0)*(x9924.value));
IkReal x9923=x9514;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9922)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9922)));
IkReal gconst4=(x9921*x9923);
IkReal gconst5=((1.0)*r20*x9923);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9925=((-1.0)*r21);
CheckValue<IkReal> x9928 = IKatan2WithCheck(IkReal(x9925),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9928.valid){
continue;
}
IkReal x9926=((1.0)*(x9928.value));
IkReal x9927=x9514;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9926)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9926)));
IkReal gconst4=(x9925*x9927);
IkReal gconst5=((1.0)*r20*x9927);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9929=(gconst5*r10);
IkReal x9930=(gconst4*r11);
CheckValue<IkReal> x9931=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x9930*x9930)+(((-2.0)*x9929*x9930))+(x9929*x9929))),-1);
if(!x9931.valid){
continue;
}
CheckValue<IkReal> x9932 = IKatan2WithCheck(IkReal(((((-1.0)*x9929))+x9930)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x9932.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9931.value)))+(x9932.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9933=IKcos(j4);
IkReal x9934=IKsin(j4);
IkReal x9935=(gconst4*r11);
IkReal x9936=(gconst5*r10);
IkReal x9937=(gconst5*r00);
IkReal x9938=(gconst5*r20);
IkReal x9939=((1.0)*x9933);
IkReal x9940=(gconst4*x9933);
IkReal x9941=((1.0)*x9934);
IkReal x9942=(gconst4*x9934);
evalcond[0]=(((r12*x9934))+((x9933*x9935))+(((-1.0)*x9936*x9939)));
evalcond[1]=((((-1.0)*r22*x9939))+(((-1.0)*x9938*x9941))+((r21*x9942)));
evalcond[2]=((((-1.0)*r02*x9939))+(((-1.0)*x9937*x9941))+((r01*x9942)));
evalcond[3]=((-1.0)+(((-1.0)*x9936*x9941))+(((-1.0)*r12*x9939))+((x9934*x9935)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x9937*x9939))+((r01*x9940))+((r02*x9934)));
evalcond[5]=((((-1.0)*x9938*x9939))+((r22*x9934))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x9940)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9943=((1.0)*gconst5);
CheckValue<IkReal> x9944 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x9943))+((gconst4*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9944.valid){
continue;
}
CheckValue<IkReal> x9945=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x9943))+(((-1.0)*gconst4*r20)))),-1);
if(!x9945.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9944.value)+(((1.5707963267949)*(x9945.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9946=IKcos(j4);
IkReal x9947=IKsin(j4);
IkReal x9948=(gconst4*r11);
IkReal x9949=(gconst5*r10);
IkReal x9950=(gconst5*r00);
IkReal x9951=(gconst5*r20);
IkReal x9952=((1.0)*x9946);
IkReal x9953=(gconst4*x9946);
IkReal x9954=((1.0)*x9947);
IkReal x9955=(gconst4*x9947);
evalcond[0]=(((r12*x9947))+((x9946*x9948))+(((-1.0)*x9949*x9952)));
evalcond[1]=((((-1.0)*r22*x9952))+((r21*x9955))+(((-1.0)*x9951*x9954)));
evalcond[2]=((((-1.0)*r02*x9952))+(((-1.0)*x9950*x9954))+((r01*x9955)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x9952))+((x9947*x9948))+(((-1.0)*x9949*x9954)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r02*x9947))+(((-1.0)*x9950*x9952))+((r01*x9953)));
evalcond[5]=(((r22*x9947))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x9953))+(((-1.0)*x9951*x9952)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9956=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x9956.valid){
continue;
}
CheckValue<IkReal> x9957 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9957.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9956.value)))+(x9957.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9958=IKcos(j4);
IkReal x9959=IKsin(j4);
IkReal x9960=(gconst4*r11);
IkReal x9961=(gconst5*r10);
IkReal x9962=(gconst5*r00);
IkReal x9963=(gconst5*r20);
IkReal x9964=((1.0)*x9958);
IkReal x9965=(gconst4*x9958);
IkReal x9966=((1.0)*x9959);
IkReal x9967=(gconst4*x9959);
evalcond[0]=((((-1.0)*x9961*x9964))+((x9958*x9960))+((r12*x9959)));
evalcond[1]=(((r21*x9967))+(((-1.0)*r22*x9964))+(((-1.0)*x9963*x9966)));
evalcond[2]=(((r01*x9967))+(((-1.0)*x9962*x9966))+(((-1.0)*r02*x9964)));
evalcond[3]=((-1.0)+((x9959*x9960))+(((-1.0)*x9961*x9966))+(((-1.0)*r12*x9964)));
evalcond[4]=(((cj2*sj1))+((r01*x9965))+((cj1*sj2))+(((-1.0)*x9962*x9964))+((r02*x9959)));
evalcond[5]=(((r21*x9965))+(((-1.0)*x9963*x9964))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x9959)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9968=((-1.0)*r21);
CheckValue<IkReal> x9971 = IKatan2WithCheck(IkReal(x9968),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9971.valid){
continue;
}
IkReal x9969=((1.0)*(x9971.value));
IkReal x9970=x9514;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9969)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9969)));
IkReal gconst4=(x9968*x9970);
IkReal gconst5=((1.0)*r20*x9970);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9972=((-1.0)*r21);
CheckValue<IkReal> x9975 = IKatan2WithCheck(IkReal(x9972),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9975.valid){
continue;
}
IkReal x9973=((1.0)*(x9975.value));
IkReal x9974=x9514;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9973)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9973)));
IkReal gconst4=(x9972*x9974);
IkReal gconst5=((1.0)*r20*x9974);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9976=((-1.0)*r21);
CheckValue<IkReal> x9979 = IKatan2WithCheck(IkReal(x9976),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9979.valid){
continue;
}
IkReal x9977=((1.0)*(x9979.value));
IkReal x9978=x9514;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9977)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9977)));
IkReal gconst4=(x9976*x9978);
IkReal gconst5=((1.0)*r20*x9978);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9980=(gconst5*r10);
IkReal x9981=(gconst4*r11);
CheckValue<IkReal> x9982=IKPowWithIntegerCheck(IKsign(((x9980*x9980)+(((-2.0)*x9980*x9981))+(r12*r12)+(x9981*x9981))),-1);
if(!x9982.valid){
continue;
}
CheckValue<IkReal> x9983 = IKatan2WithCheck(IkReal(((((-1.0)*x9980))+x9981)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x9983.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9982.value)))+(x9983.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9984=IKcos(j4);
IkReal x9985=IKsin(j4);
IkReal x9986=(gconst5*r10);
IkReal x9987=(gconst5*r00);
IkReal x9988=(gconst5*r20);
IkReal x9989=((1.0)*x9984);
IkReal x9990=(gconst4*x9985);
IkReal x9991=(gconst4*x9984);
IkReal x9992=((1.0)*x9985);
evalcond[0]=(((r11*x9991))+((r12*x9985))+(((-1.0)*x9986*x9989)));
evalcond[1]=((((-1.0)*r22*x9989))+(((-1.0)*x9988*x9992))+((r21*x9990)));
evalcond[2]=(((r01*x9990))+(((-1.0)*r02*x9989))+(((-1.0)*x9987*x9992)));
evalcond[3]=((-1.0)+((r11*x9990))+(((-1.0)*x9986*x9992))+(((-1.0)*r12*x9989)));
evalcond[4]=(((cj2*sj1))+((r22*x9985))+((cj1*sj2))+(((-1.0)*x9988*x9989))+((r21*x9991)));
evalcond[5]=(((r01*x9991))+(((-1.0)*sj1*sj2))+(((-1.0)*x9987*x9989))+((r02*x9985))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9993=((1.0)*gconst5);
CheckValue<IkReal> x9994 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x9993))+((gconst4*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9994.valid){
continue;
}
CheckValue<IkReal> x9995=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x9993))+(((-1.0)*gconst4*r20)))),-1);
if(!x9995.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9994.value)+(((1.5707963267949)*(x9995.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9996=IKcos(j4);
IkReal x9997=IKsin(j4);
IkReal x9998=(gconst5*r10);
IkReal x9999=(gconst5*r00);
IkReal x10000=(gconst5*r20);
IkReal x10001=((1.0)*x9996);
IkReal x10002=(gconst4*x9997);
IkReal x10003=(gconst4*x9996);
IkReal x10004=((1.0)*x9997);
evalcond[0]=(((r12*x9997))+((r11*x10003))+(((-1.0)*x10001*x9998)));
evalcond[1]=((((-1.0)*r22*x10001))+(((-1.0)*x10000*x10004))+((r21*x10002)));
evalcond[2]=((((-1.0)*x10004*x9999))+(((-1.0)*r02*x10001))+((r01*x10002)));
evalcond[3]=((-1.0)+(((-1.0)*x10004*x9998))+(((-1.0)*r12*x10001))+((r11*x10002)));
evalcond[4]=(((cj2*sj1))+((r22*x9997))+((cj1*sj2))+(((-1.0)*x10000*x10001))+((r21*x10003)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r01*x10003))+((r02*x9997))+(((-1.0)*x10001*x9999))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10005=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10005.valid){
continue;
}
CheckValue<IkReal> x10006 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10006.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10005.value)))+(x10006.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10007=IKcos(j4);
IkReal x10008=IKsin(j4);
IkReal x10009=(gconst5*r10);
IkReal x10010=(gconst5*r00);
IkReal x10011=(gconst5*r20);
IkReal x10012=((1.0)*x10007);
IkReal x10013=(gconst4*x10008);
IkReal x10014=(gconst4*x10007);
IkReal x10015=((1.0)*x10008);
evalcond[0]=(((r12*x10008))+(((-1.0)*x10009*x10012))+((r11*x10014)));
evalcond[1]=(((r21*x10013))+(((-1.0)*x10011*x10015))+(((-1.0)*r22*x10012)));
evalcond[2]=((((-1.0)*r02*x10012))+(((-1.0)*x10010*x10015))+((r01*x10013)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x10012))+(((-1.0)*x10009*x10015))+((r11*x10013)));
evalcond[4]=(((r21*x10014))+((cj2*sj1))+((r22*x10008))+((cj1*sj2))+(((-1.0)*x10011*x10012)));
evalcond[5]=(((r02*x10008))+(((-1.0)*sj1*sj2))+(((-1.0)*x10010*x10012))+((r01*x10014))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10016=((-1.0)*r21);
CheckValue<IkReal> x10019 = IKatan2WithCheck(IkReal(x10016),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10019.valid){
continue;
}
IkReal x10017=((1.0)*(x10019.value));
IkReal x10018=x9514;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10017)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10017)));
IkReal gconst4=(x10016*x10018);
IkReal gconst5=((1.0)*r20*x10018);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10020=((-1.0)*r21);
CheckValue<IkReal> x10023 = IKatan2WithCheck(IkReal(x10020),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10023.valid){
continue;
}
IkReal x10021=((1.0)*(x10023.value));
IkReal x10022=x9514;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10021)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10021)));
IkReal gconst4=(x10020*x10022);
IkReal gconst5=((1.0)*r20*x10022);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10024=((-1.0)*r21);
CheckValue<IkReal> x10027 = IKatan2WithCheck(IkReal(x10024),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10027.valid){
continue;
}
IkReal x10025=((1.0)*(x10027.value));
IkReal x10026=x9514;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10025)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10025)));
IkReal gconst4=(x10024*x10026);
IkReal gconst5=((1.0)*r20*x10026);
IkReal x10028=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10032=IKPowWithIntegerCheck(x10028,-1);
if(!x10032.valid){
continue;
}
IkReal x10029=x10032.value;
IkReal x10030=((1.0)*x10029);
IkReal x10031=((((-1.0)*x10030*(r10*r10)*(r20*r20)))+(((-1.0)*x10030*(r11*r11)*(r21*r21)))+(((-1.0)*(r12*r12)))+(((-2.0)*r10*r11*r20*r21*x10029)));
j4eval[0]=x10031;
j4eval[1]=r12;
j4eval[2]=x10028;
j4eval[3]=IKsign(x10031);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10033=(gconst5*r10);
IkReal x10034=(gconst4*r11);
CheckValue<IkReal> x10035=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x10033*x10033)))+(((2.0)*x10033*x10034))+(((-1.0)*(r12*r12)))+(((-1.0)*(x10034*x10034))))),-1);
if(!x10035.valid){
continue;
}
CheckValue<IkReal> x10036 = IKatan2WithCheck(IkReal(((((-1.0)*x10034))+x10033)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x10036.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10035.value)))+(x10036.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10037=IKsin(j4);
IkReal x10038=IKcos(j4);
IkReal x10039=(gconst4*r11);
IkReal x10040=(gconst5*r10);
IkReal x10041=(gconst5*r00);
IkReal x10042=(gconst5*r20);
IkReal x10043=((1.0)*x10038);
IkReal x10044=(gconst4*x10037);
IkReal x10045=((1.0)*x10037);
evalcond[0]=(((r21*x10044))+(((-1.0)*x10042*x10045))+(((-1.0)*r22*x10043)));
evalcond[1]=((((-1.0)*r02*x10043))+(((-1.0)*x10041*x10045))+((r01*x10044)));
evalcond[2]=((((-1.0)*r12*x10045))+(((-1.0)*x10039*x10043))+((x10038*x10040)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x10043))+((x10037*x10039))+(((-1.0)*x10040*x10045)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x10045))+(((-1.0)*gconst4*r21*x10043))+((x10038*x10042)));
evalcond[5]=((((-1.0)*r02*x10045))+(((-1.0)*sj1*sj2))+((cj1*cj2))+((x10038*x10041))+(((-1.0)*gconst4*r01*x10043)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10046=((1.0)*gconst5);
CheckValue<IkReal> x10047 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x10046))+((gconst4*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10047.valid){
continue;
}
CheckValue<IkReal> x10048=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10046))+(((-1.0)*gconst4*r20)))),-1);
if(!x10048.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10047.value)+(((1.5707963267949)*(x10048.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10049=IKsin(j4);
IkReal x10050=IKcos(j4);
IkReal x10051=(gconst4*r11);
IkReal x10052=(gconst5*r10);
IkReal x10053=(gconst5*r00);
IkReal x10054=(gconst5*r20);
IkReal x10055=((1.0)*x10050);
IkReal x10056=(gconst4*x10049);
IkReal x10057=((1.0)*x10049);
evalcond[0]=(((r21*x10056))+(((-1.0)*r22*x10055))+(((-1.0)*x10054*x10057)));
evalcond[1]=(((r01*x10056))+(((-1.0)*x10053*x10057))+(((-1.0)*r02*x10055)));
evalcond[2]=((((-1.0)*x10051*x10055))+(((-1.0)*r12*x10057))+((x10050*x10052)));
evalcond[3]=((-1.0)+((x10049*x10051))+(((-1.0)*r12*x10055))+(((-1.0)*x10052*x10057)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst4*r21*x10055))+(((-1.0)*r22*x10057))+((x10050*x10054)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*gconst4*r01*x10055))+((cj1*cj2))+(((-1.0)*r02*x10057))+((x10050*x10053)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10058=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10058.valid){
continue;
}
CheckValue<IkReal> x10059 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10059.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10058.value)))+(x10059.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10060=IKsin(j4);
IkReal x10061=IKcos(j4);
IkReal x10062=(gconst4*r11);
IkReal x10063=(gconst5*r10);
IkReal x10064=(gconst5*r00);
IkReal x10065=(gconst5*r20);
IkReal x10066=((1.0)*x10061);
IkReal x10067=(gconst4*x10060);
IkReal x10068=((1.0)*x10060);
evalcond[0]=(((r21*x10067))+(((-1.0)*r22*x10066))+(((-1.0)*x10065*x10068)));
evalcond[1]=((((-1.0)*x10064*x10068))+((r01*x10067))+(((-1.0)*r02*x10066)));
evalcond[2]=((((-1.0)*x10062*x10066))+(((-1.0)*r12*x10068))+((x10061*x10063)));
evalcond[3]=((-1.0)+((x10060*x10062))+(((-1.0)*r12*x10066))+(((-1.0)*x10063*x10068)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst4*r21*x10066))+((x10061*x10065))+(((-1.0)*r22*x10068)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*gconst4*r01*x10066))+((x10061*x10064))+((cj1*cj2))+(((-1.0)*r02*x10068)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x10069=((-1.0)*r21);
IkReal x10070=((-1.0)*px);
CheckValue<IkReal> x10072 = IKatan2WithCheck(IkReal(x10069),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10072.valid){
continue;
}
IkReal x10071=((1.0)*(x10072.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10071)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10070);
rxp1_1=(px*r21);
rxp1_2=(r11*x10070);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10071)));
IkReal gconst4=x10069;
IkReal gconst5=((1.0)*r20);
IkReal x10073=((1.0)*cj3);
IkReal x10074=(r10*r20);
IkReal x10075=(r11*r21);
j4eval[0]=((((-1.0)*x10074))+(((-1.0)*x10075)));
j4eval[1]=((((-1.0)*x10073*x10074))+(((-1.0)*x10073*x10075)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10076=((-1.0)*r21);
IkReal x10077=((-1.0)*px);
CheckValue<IkReal> x10079 = IKatan2WithCheck(IkReal(x10076),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10079.valid){
continue;
}
IkReal x10078=((1.0)*(x10079.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10078)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10077);
rxp1_1=(px*r21);
rxp1_2=(r11*x10077);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10078)));
IkReal gconst4=x10076;
IkReal gconst5=((1.0)*r20);
IkReal x10080=((1.0)*r11*r21);
IkReal x10081=((1.0)*r10*r20);
j4eval[0]=((((-1.0)*x10081))+(((-1.0)*x10080)));
j4eval[1]=(((sj3*x10081))+((sj3*x10080)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10082=((-1.0)*r21);
IkReal x10083=((-1.0)*px);
CheckValue<IkReal> x10085 = IKatan2WithCheck(IkReal(x10082),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10085.valid){
continue;
}
IkReal x10084=((1.0)*(x10085.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10084)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10083);
rxp1_1=(px*r21);
rxp1_2=(r11*x10083);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10084)));
IkReal gconst4=x10082;
IkReal gconst5=((1.0)*r20);
IkReal x10086=((1.0)*cj3);
j4eval[0]=cj3;
j4eval[1]=r02;
j4eval[2]=((((-1.0)*r11*r21*x10086))+(((-1.0)*r10*r20*x10086)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10087=((1.0)*r10);
CheckValue<IkReal> x10088=IKPowWithIntegerCheck(cj3,-1);
if(!x10088.valid){
continue;
}
CheckValue<IkReal> x10089=IKPowWithIntegerCheck(r02,-1);
if(!x10089.valid){
continue;
}
CheckValue<IkReal> x10090=IKPowWithIntegerCheck(((((-1.0)*cj3*gconst5*x10087))+((cj3*gconst4*r11))),-1);
if(!x10090.valid){
continue;
}
if( IKabs(((x10088.value)*(x10089.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10090.value)*(((((-1.0)*gconst5*r11*sj3))+(((-1.0)*gconst4*sj3*x10087)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x10088.value)*(x10089.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x10090.value)*(((((-1.0)*gconst5*r11*sj3))+(((-1.0)*gconst4*sj3*x10087))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x10088.value)*(x10089.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x10090.value)*(((((-1.0)*gconst5*r11*sj3))+(((-1.0)*gconst4*sj3*x10087))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10091=IKsin(j4);
IkReal x10092=IKcos(j4);
IkReal x10093=(cj2*sj1);
IkReal x10094=(cj1*sj2);
IkReal x10095=(gconst5*sj3);
IkReal x10096=(gconst4*r11);
IkReal x10097=(sj1*sj2);
IkReal x10098=((1.0)*gconst5);
IkReal x10099=(cj1*cj2);
IkReal x10100=(gconst4*r21);
IkReal x10101=(cj3*gconst4);
IkReal x10102=(gconst4*sj3);
IkReal x10103=(cj3*gconst5);
IkReal x10104=(r20*x10092);
IkReal x10105=(r10*x10092);
IkReal x10106=(cj3*x10092);
IkReal x10107=(r02*x10091);
IkReal x10108=(x10093+x10094);
IkReal x10109=((1.0)*sj3*x10092);
evalcond[0]=((-1.0)*r02*x10092);
evalcond[1]=((((-1.0)*r20*x10091*x10098))+((x10091*x10100)));
evalcond[2]=(x10099+((cj3*x10107))+(((-1.0)*x10097)));
evalcond[3]=(x10108+(((-1.0)*sj3*x10107)));
evalcond[4]=((-1.0)+((x10091*x10096))+(((-1.0)*r10*x10091*x10098)));
evalcond[5]=(((r11*x10095))+((x10096*x10106))+((r10*x10102))+(((-1.0)*cj3*x10098*x10105)));
evalcond[6]=(((x10095*x10105))+((r11*x10103))+((r10*x10101))+(((-1.0)*x10096*x10109)));
evalcond[7]=(((r20*x10102))+x10108+((r21*x10095))+(((-1.0)*cj3*x10098*x10104))+((x10100*x10106)));
evalcond[8]=(((r21*x10103))+((r20*x10101))+((x10095*x10104))+(((-1.0)*x10100*x10109))+x10097+(((-1.0)*x10099)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10110=((1.0)*gconst5);
IkReal x10111=(gconst4*r11);
CheckValue<IkReal> x10112=IKPowWithIntegerCheck(((((-1.0)*r10*x10110))+x10111),-1);
if(!x10112.valid){
continue;
}
CheckValue<IkReal> x10113=IKPowWithIntegerCheck(((((-1.0)*sj3*x10111))+((gconst5*r10*sj3))),-1);
if(!x10113.valid){
continue;
}
if( IKabs(x10112.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10113.value)*(((((-1.0)*cj3*gconst4*r10))+(((-1.0)*cj3*r11*x10110)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x10112.value)+IKsqr(((x10113.value)*(((((-1.0)*cj3*gconst4*r10))+(((-1.0)*cj3*r11*x10110))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x10112.value, ((x10113.value)*(((((-1.0)*cj3*gconst4*r10))+(((-1.0)*cj3*r11*x10110))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10114=IKsin(j4);
IkReal x10115=IKcos(j4);
IkReal x10116=(cj2*sj1);
IkReal x10117=(cj1*sj2);
IkReal x10118=(gconst5*sj3);
IkReal x10119=(gconst4*r11);
IkReal x10120=(sj1*sj2);
IkReal x10121=((1.0)*gconst5);
IkReal x10122=(cj1*cj2);
IkReal x10123=(gconst4*r21);
IkReal x10124=(cj3*gconst4);
IkReal x10125=(gconst4*sj3);
IkReal x10126=(cj3*gconst5);
IkReal x10127=(r20*x10115);
IkReal x10128=(r10*x10115);
IkReal x10129=(cj3*x10115);
IkReal x10130=(r02*x10114);
IkReal x10131=(x10116+x10117);
IkReal x10132=((1.0)*sj3*x10115);
evalcond[0]=((-1.0)*r02*x10115);
evalcond[1]=(((x10114*x10123))+(((-1.0)*r20*x10114*x10121)));
evalcond[2]=(((cj3*x10130))+x10122+(((-1.0)*x10120)));
evalcond[3]=(x10131+(((-1.0)*sj3*x10130)));
evalcond[4]=((-1.0)+(((-1.0)*r10*x10114*x10121))+((x10114*x10119)));
evalcond[5]=((((-1.0)*cj3*x10121*x10128))+((r10*x10125))+((x10119*x10129))+((r11*x10118)));
evalcond[6]=((((-1.0)*x10119*x10132))+((x10118*x10128))+((r10*x10124))+((r11*x10126)));
evalcond[7]=((((-1.0)*cj3*x10121*x10127))+((r21*x10118))+((r20*x10125))+x10131+((x10123*x10129)));
evalcond[8]=((((-1.0)*x10123*x10132))+((r20*x10124))+((x10118*x10127))+((r21*x10126))+x10120+(((-1.0)*x10122)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10133=((1.0)*sj3);
IkReal x10134=(gconst4*r11);
IkReal x10135=((1.0)*gconst5*r10);
CheckValue<IkReal> x10136=IKPowWithIntegerCheck((x10134+(((-1.0)*x10135))),-1);
if(!x10136.valid){
continue;
}
CheckValue<IkReal> x10137=IKPowWithIntegerCheck((((cj3*x10134))+(((-1.0)*cj3*x10135))),-1);
if(!x10137.valid){
continue;
}
if( IKabs(x10136.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10137.value)*(((((-1.0)*gconst5*r11*x10133))+(((-1.0)*gconst4*r10*x10133)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x10136.value)+IKsqr(((x10137.value)*(((((-1.0)*gconst5*r11*x10133))+(((-1.0)*gconst4*r10*x10133))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x10136.value, ((x10137.value)*(((((-1.0)*gconst5*r11*x10133))+(((-1.0)*gconst4*r10*x10133))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10138=IKsin(j4);
IkReal x10139=IKcos(j4);
IkReal x10140=(cj2*sj1);
IkReal x10141=(cj1*sj2);
IkReal x10142=(gconst5*sj3);
IkReal x10143=(gconst4*r11);
IkReal x10144=(sj1*sj2);
IkReal x10145=((1.0)*gconst5);
IkReal x10146=(cj1*cj2);
IkReal x10147=(gconst4*r21);
IkReal x10148=(cj3*gconst4);
IkReal x10149=(gconst4*sj3);
IkReal x10150=(cj3*gconst5);
IkReal x10151=(r20*x10139);
IkReal x10152=(r10*x10139);
IkReal x10153=(cj3*x10139);
IkReal x10154=(r02*x10138);
IkReal x10155=(x10141+x10140);
IkReal x10156=((1.0)*sj3*x10139);
evalcond[0]=((-1.0)*r02*x10139);
evalcond[1]=((((-1.0)*r20*x10138*x10145))+((x10138*x10147)));
evalcond[2]=(x10146+(((-1.0)*x10144))+((cj3*x10154)));
evalcond[3]=((((-1.0)*sj3*x10154))+x10155);
evalcond[4]=((-1.0)+((x10138*x10143))+(((-1.0)*r10*x10138*x10145)));
evalcond[5]=(((r10*x10149))+((x10143*x10153))+(((-1.0)*cj3*x10145*x10152))+((r11*x10142)));
evalcond[6]=((((-1.0)*x10143*x10156))+((r10*x10148))+((x10142*x10152))+((r11*x10150)));
evalcond[7]=(((x10147*x10153))+((r21*x10142))+x10155+(((-1.0)*cj3*x10145*x10151))+((r20*x10149)));
evalcond[8]=(((r21*x10150))+((x10142*x10151))+x10144+(((-1.0)*x10146))+(((-1.0)*x10147*x10156))+((r20*x10148)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10157=gconst4*gconst4;
IkReal x10158=gconst5*gconst5;
IkReal x10159=(r10*r21);
IkReal x10160=((1.0)*cj3);
IkReal x10161=(r11*r21);
IkReal x10162=(r11*r20);
IkReal x10163=(r22*sj3);
IkReal x10164=(gconst4*r10);
IkReal x10165=((1.0)*sj3);
IkReal x10166=(cj3*gconst4*gconst5);
CheckValue<IkReal> x10167=IKPowWithIntegerCheck(IKsign(((((-1.0)*x10157*x10160*x10161))+(((-1.0)*r10*r20*x10158*x10160))+((x10162*x10166))+(((-1.0)*r12*r22*x10160))+((x10159*x10166)))),-1);
if(!x10167.valid){
continue;
}
CheckValue<IkReal> x10168 = IKatan2WithCheck(IkReal((((gconst5*r11*x10163))+((x10163*x10164)))),IkReal(((((-1.0)*gconst5*r20*x10164*x10165))+((gconst4*gconst5*sj3*x10161))+((sj3*x10157*x10159))+(((-1.0)*x10158*x10162*x10165)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10168.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10167.value)))+(x10168.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10169=IKsin(j4);
IkReal x10170=IKcos(j4);
IkReal x10171=(cj2*sj1);
IkReal x10172=(cj1*sj2);
IkReal x10173=(gconst5*sj3);
IkReal x10174=(gconst4*r11);
IkReal x10175=(sj1*sj2);
IkReal x10176=(gconst5*r10);
IkReal x10177=(cj1*cj2);
IkReal x10178=(gconst4*r01);
IkReal x10179=(gconst4*r21);
IkReal x10180=(gconst5*r00);
IkReal x10181=(gconst4*sj3);
IkReal x10182=(cj3*gconst5);
IkReal x10183=(cj3*gconst4);
IkReal x10184=((1.0)*x10170);
IkReal x10185=((1.0)*x10169);
IkReal x10186=(cj3*x10169);
IkReal x10187=(cj3*x10170);
IkReal x10188=(x10172+x10171);
evalcond[0]=(((x10169*x10179))+(((-1.0)*r22*x10184))+(((-1.0)*gconst5*r20*x10185)));
evalcond[1]=((((-1.0)*r02*x10184))+((x10169*x10178))+(((-1.0)*x10180*x10185)));
evalcond[2]=((-1.0)+(((-1.0)*x10176*x10185))+(((-1.0)*r12*x10184))+((x10169*x10174)));
evalcond[3]=(((r10*x10181))+((r11*x10173))+(((-1.0)*cj3*x10176*x10184))+((r12*x10186))+((x10174*x10187)));
evalcond[4]=(((r11*x10182))+((r10*x10183))+(((-1.0)*r12*sj3*x10185))+((r10*x10170*x10173))+(((-1.0)*sj3*x10174*x10184)));
evalcond[5]=((((-1.0)*r20*x10182*x10184))+((r22*x10186))+x10188+((r21*x10173))+((r20*x10181))+((x10179*x10187)));
evalcond[6]=(((x10178*x10187))+((r02*x10186))+(((-1.0)*x10175))+(((-1.0)*cj3*x10180*x10184))+x10177+((r01*x10173))+((r00*x10181)));
evalcond[7]=((((-1.0)*sj3*x10178*x10184))+(((-1.0)*r02*sj3*x10185))+x10188+((r00*x10183))+((r01*x10182))+((r00*x10170*x10173)));
evalcond[8]=((((-1.0)*sj3*x10179*x10184))+(((-1.0)*r22*sj3*x10185))+(((-1.0)*x10177))+((r20*x10170*x10173))+x10175+((r21*x10182))+((r20*x10183)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10189=((1.0)*gconst5);
CheckValue<IkReal> x10190 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*r00*x10189)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10190.valid){
continue;
}
CheckValue<IkReal> x10191=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10189))+(((-1.0)*gconst4*r20)))),-1);
if(!x10191.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10190.value)+(((1.5707963267949)*(x10191.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10192=IKsin(j4);
IkReal x10193=IKcos(j4);
IkReal x10194=(cj2*sj1);
IkReal x10195=(cj1*sj2);
IkReal x10196=(gconst5*sj3);
IkReal x10197=(gconst4*r11);
IkReal x10198=(sj1*sj2);
IkReal x10199=(gconst5*r10);
IkReal x10200=(cj1*cj2);
IkReal x10201=(gconst4*r01);
IkReal x10202=(gconst4*r21);
IkReal x10203=(gconst5*r00);
IkReal x10204=(gconst4*sj3);
IkReal x10205=(cj3*gconst5);
IkReal x10206=(cj3*gconst4);
IkReal x10207=((1.0)*x10193);
IkReal x10208=((1.0)*x10192);
IkReal x10209=(cj3*x10192);
IkReal x10210=(cj3*x10193);
IkReal x10211=(x10194+x10195);
evalcond[0]=((((-1.0)*r22*x10207))+((x10192*x10202))+(((-1.0)*gconst5*r20*x10208)));
evalcond[1]=((((-1.0)*r02*x10207))+(((-1.0)*x10203*x10208))+((x10192*x10201)));
evalcond[2]=((-1.0)+(((-1.0)*x10199*x10208))+((x10192*x10197))+(((-1.0)*r12*x10207)));
evalcond[3]=((((-1.0)*cj3*x10199*x10207))+((r11*x10196))+((r10*x10204))+((x10197*x10210))+((r12*x10209)));
evalcond[4]=(((r10*x10206))+((r10*x10193*x10196))+(((-1.0)*r12*sj3*x10208))+(((-1.0)*sj3*x10197*x10207))+((r11*x10205)));
evalcond[5]=(((r22*x10209))+((x10202*x10210))+((r21*x10196))+x10211+((r20*x10204))+(((-1.0)*r20*x10205*x10207)));
evalcond[6]=((((-1.0)*cj3*x10203*x10207))+((r02*x10209))+((x10201*x10210))+((r00*x10204))+(((-1.0)*x10198))+((r01*x10196))+x10200);
evalcond[7]=((((-1.0)*sj3*x10201*x10207))+((r00*x10206))+((r01*x10205))+(((-1.0)*r02*sj3*x10208))+x10211+((r00*x10193*x10196)));
evalcond[8]=((((-1.0)*x10200))+(((-1.0)*sj3*x10202*x10207))+((r21*x10205))+((r20*x10193*x10196))+x10198+((r20*x10206))+(((-1.0)*r22*sj3*x10208)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10212=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10212.valid){
continue;
}
CheckValue<IkReal> x10213 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10213.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10212.value)))+(x10213.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10214=IKsin(j4);
IkReal x10215=IKcos(j4);
IkReal x10216=(cj2*sj1);
IkReal x10217=(cj1*sj2);
IkReal x10218=(gconst5*sj3);
IkReal x10219=(gconst4*r11);
IkReal x10220=(sj1*sj2);
IkReal x10221=(gconst5*r10);
IkReal x10222=(cj1*cj2);
IkReal x10223=(gconst4*r01);
IkReal x10224=(gconst4*r21);
IkReal x10225=(gconst5*r00);
IkReal x10226=(gconst4*sj3);
IkReal x10227=(cj3*gconst5);
IkReal x10228=(cj3*gconst4);
IkReal x10229=((1.0)*x10215);
IkReal x10230=((1.0)*x10214);
IkReal x10231=(cj3*x10214);
IkReal x10232=(cj3*x10215);
IkReal x10233=(x10217+x10216);
evalcond[0]=((((-1.0)*gconst5*r20*x10230))+((x10214*x10224))+(((-1.0)*r22*x10229)));
evalcond[1]=((((-1.0)*r02*x10229))+(((-1.0)*x10225*x10230))+((x10214*x10223)));
evalcond[2]=((-1.0)+((x10214*x10219))+(((-1.0)*x10221*x10230))+(((-1.0)*r12*x10229)));
evalcond[3]=(((r10*x10226))+((r11*x10218))+((x10219*x10232))+(((-1.0)*cj3*x10221*x10229))+((r12*x10231)));
evalcond[4]=(((r10*x10228))+(((-1.0)*sj3*x10219*x10229))+(((-1.0)*r12*sj3*x10230))+((r11*x10227))+((r10*x10215*x10218)));
evalcond[5]=(((r22*x10231))+(((-1.0)*r20*x10227*x10229))+((r21*x10218))+x10233+((r20*x10226))+((x10224*x10232)));
evalcond[6]=(((x10223*x10232))+((r01*x10218))+((r02*x10231))+x10222+(((-1.0)*x10220))+((r00*x10226))+(((-1.0)*cj3*x10225*x10229)));
evalcond[7]=((((-1.0)*r02*sj3*x10230))+((r00*x10215*x10218))+x10233+(((-1.0)*sj3*x10223*x10229))+((r00*x10228))+((r01*x10227)));
evalcond[8]=(((r20*x10215*x10218))+(((-1.0)*sj3*x10224*x10229))+((r21*x10227))+(((-1.0)*r22*sj3*x10230))+x10220+(((-1.0)*x10222))+((r20*x10228)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10234=((-1.0)*r21);
CheckValue<IkReal> x10237 = IKatan2WithCheck(IkReal(x10234),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10237.valid){
continue;
}
IkReal x10235=((1.0)*(x10237.value));
IkReal x10236=x9514;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10235)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10235)));
IkReal gconst4=(x10234*x10236);
IkReal gconst5=((1.0)*r20*x10236);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10238=((-1.0)*r21);
CheckValue<IkReal> x10241 = IKatan2WithCheck(IkReal(x10238),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10241.valid){
continue;
}
IkReal x10239=((1.0)*(x10241.value));
IkReal x10240=x9514;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10239)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10239)));
IkReal gconst4=(x10238*x10240);
IkReal gconst5=((1.0)*r20*x10240);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10242=((-1.0)*r21);
CheckValue<IkReal> x10245 = IKatan2WithCheck(IkReal(x10242),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10245.valid){
continue;
}
IkReal x10243=((1.0)*(x10245.value));
IkReal x10244=x9514;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10243)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10243)));
IkReal gconst4=(x10242*x10244);
IkReal gconst5=((1.0)*r20*x10244);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10246=((-1.0)*r21);
CheckValue<IkReal> x10249 = IKatan2WithCheck(IkReal(x10246),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10249.valid){
continue;
}
IkReal x10247=((1.0)*(x10249.value));
IkReal x10248=x9514;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10247)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10247)));
IkReal gconst4=(x10246*x10248);
IkReal gconst5=((1.0)*r20*x10248);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10250=((-1.0)*r21);
CheckValue<IkReal> x10253 = IKatan2WithCheck(IkReal(x10250),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10253.valid){
continue;
}
IkReal x10251=((1.0)*(x10253.value));
IkReal x10252=x9514;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10251)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10251)));
IkReal gconst4=(x10250*x10252);
IkReal gconst5=((1.0)*r20*x10252);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10254=((-1.0)*r21);
CheckValue<IkReal> x10257 = IKatan2WithCheck(IkReal(x10254),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10257.valid){
continue;
}
IkReal x10255=((1.0)*(x10257.value));
IkReal x10256=x9514;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10255)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10255)));
IkReal gconst4=(x10254*x10256);
IkReal gconst5=((1.0)*r20*x10256);
IkReal x10258=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10262=IKPowWithIntegerCheck(x10258,-1);
if(!x10262.valid){
continue;
}
IkReal x10259=x10262.value;
IkReal x10260=((1.0)*x10259);
IkReal x10261=((((-2.0)*r00*r01*r20*r21*x10259))+(((-1.0)*(r02*r02)))+(((-1.0)*x10260*(r01*r01)*(r21*r21)))+(((-1.0)*x10260*(r00*r00)*(r20*r20))));
j4eval[0]=x10261;
j4eval[1]=r02;
j4eval[2]=x10258;
j4eval[3]=IKsign(x10261);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10263=(gconst5*r00);
IkReal x10264=(gconst4*r01);
CheckValue<IkReal> x10265=IKPowWithIntegerCheck(IKsign(((((2.0)*x10263*x10264))+(((-1.0)*(x10264*x10264)))+(((-1.0)*(r02*r02)))+(((-1.0)*(x10263*x10263))))),-1);
if(!x10265.valid){
continue;
}
CheckValue<IkReal> x10266 = IKatan2WithCheck(IkReal(((((-1.0)*x10264))+x10263)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x10266.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10265.value)))+(x10266.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10267=IKsin(j4);
IkReal x10268=IKcos(j4);
IkReal x10269=(gconst4*r11);
IkReal x10270=((1.0)*cj1);
IkReal x10271=(gconst5*r10);
IkReal x10272=(gconst4*r01);
IkReal x10273=(gconst5*r00);
IkReal x10274=(gconst4*r21);
IkReal x10275=(gconst5*r20);
IkReal x10276=((1.0)*x10268);
IkReal x10277=((1.0)*x10267);
evalcond[0]=((((-1.0)*r22*x10276))+((x10267*x10274))+(((-1.0)*x10275*x10277)));
evalcond[1]=(((x10267*x10269))+(((-1.0)*r12*x10276))+(((-1.0)*x10271*x10277)));
evalcond[2]=((((-1.0)*x10272*x10276))+(((-1.0)*r02*x10277))+((x10268*x10273)));
evalcond[3]=((-1.0)+(((-1.0)*x10273*x10277))+(((-1.0)*r02*x10276))+((x10267*x10272)));
evalcond[4]=((((-1.0)*x10274*x10276))+((sj1*sj2))+(((-1.0)*r22*x10277))+(((-1.0)*cj2*x10270))+((x10268*x10275)));
evalcond[5]=((((-1.0)*cj2*sj1))+(((-1.0)*sj2*x10270))+(((-1.0)*x10269*x10276))+(((-1.0)*r12*x10277))+((x10268*x10271)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10278=((1.0)*gconst5);
CheckValue<IkReal> x10279 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*r20*x10278)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10279.valid){
continue;
}
CheckValue<IkReal> x10280=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x10278))+(((-1.0)*gconst4*r10)))),-1);
if(!x10280.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10279.value)+(((1.5707963267949)*(x10280.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10281=IKsin(j4);
IkReal x10282=IKcos(j4);
IkReal x10283=(gconst4*r11);
IkReal x10284=((1.0)*cj1);
IkReal x10285=(gconst5*r10);
IkReal x10286=(gconst4*r01);
IkReal x10287=(gconst5*r00);
IkReal x10288=(gconst4*r21);
IkReal x10289=(gconst5*r20);
IkReal x10290=((1.0)*x10282);
IkReal x10291=((1.0)*x10281);
evalcond[0]=((((-1.0)*x10289*x10291))+(((-1.0)*r22*x10290))+((x10281*x10288)));
evalcond[1]=((((-1.0)*r12*x10290))+(((-1.0)*x10285*x10291))+((x10281*x10283)));
evalcond[2]=((((-1.0)*r02*x10291))+(((-1.0)*x10286*x10290))+((x10282*x10287)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x10290))+((x10281*x10286))+(((-1.0)*x10287*x10291)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*r22*x10291))+(((-1.0)*x10288*x10290))+(((-1.0)*cj2*x10284))+((x10282*x10289)));
evalcond[5]=((((-1.0)*x10283*x10290))+(((-1.0)*cj2*sj1))+(((-1.0)*r12*x10291))+(((-1.0)*sj2*x10284))+((x10282*x10285)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10292 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10292.valid){
continue;
}
CheckValue<IkReal> x10293=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10293.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10292.value)+(((1.5707963267949)*(x10293.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10294=IKsin(j4);
IkReal x10295=IKcos(j4);
IkReal x10296=(gconst4*r11);
IkReal x10297=((1.0)*cj1);
IkReal x10298=(gconst5*r10);
IkReal x10299=(gconst4*r01);
IkReal x10300=(gconst5*r00);
IkReal x10301=(gconst4*r21);
IkReal x10302=(gconst5*r20);
IkReal x10303=((1.0)*x10295);
IkReal x10304=((1.0)*x10294);
evalcond[0]=((((-1.0)*r22*x10303))+(((-1.0)*x10302*x10304))+((x10294*x10301)));
evalcond[1]=((((-1.0)*r12*x10303))+(((-1.0)*x10298*x10304))+((x10294*x10296)));
evalcond[2]=((((-1.0)*r02*x10304))+(((-1.0)*x10299*x10303))+((x10295*x10300)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x10303))+(((-1.0)*x10300*x10304))+((x10294*x10299)));
evalcond[4]=((((-1.0)*x10301*x10303))+(((-1.0)*r22*x10304))+((sj1*sj2))+(((-1.0)*cj2*x10297))+((x10295*x10302)));
evalcond[5]=((((-1.0)*r12*x10304))+(((-1.0)*sj2*x10297))+(((-1.0)*cj2*sj1))+((x10295*x10298))+(((-1.0)*x10296*x10303)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10305=((-1.0)*r21);
CheckValue<IkReal> x10308 = IKatan2WithCheck(IkReal(x10305),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10308.valid){
continue;
}
IkReal x10306=((1.0)*(x10308.value));
IkReal x10307=x9514;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10306)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10306)));
IkReal gconst4=(x10305*x10307);
IkReal gconst5=((1.0)*r20*x10307);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10309=((-1.0)*r21);
CheckValue<IkReal> x10312 = IKatan2WithCheck(IkReal(x10309),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10312.valid){
continue;
}
IkReal x10310=((1.0)*(x10312.value));
IkReal x10311=x9514;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10310)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10310)));
IkReal gconst4=(x10309*x10311);
IkReal gconst5=((1.0)*r20*x10311);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10313=((-1.0)*r21);
CheckValue<IkReal> x10316 = IKatan2WithCheck(IkReal(x10313),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10316.valid){
continue;
}
IkReal x10314=((1.0)*(x10316.value));
IkReal x10315=x9514;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10314)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10314)));
IkReal gconst4=(x10313*x10315);
IkReal gconst5=((1.0)*r20*x10315);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10317=(gconst4*r01);
IkReal x10318=(gconst5*r00);
CheckValue<IkReal> x10319=IKPowWithIntegerCheck(IKsign(((((-2.0)*x10317*x10318))+(x10317*x10317)+(r02*r02)+(x10318*x10318))),-1);
if(!x10319.valid){
continue;
}
CheckValue<IkReal> x10320 = IKatan2WithCheck(IkReal((x10317+(((-1.0)*x10318)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x10320.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10319.value)))+(x10320.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10321=IKcos(j4);
IkReal x10322=IKsin(j4);
IkReal x10323=(gconst4*r11);
IkReal x10324=(gconst5*r10);
IkReal x10325=((1.0)*cj1);
IkReal x10326=(gconst5*r00);
IkReal x10327=(gconst5*r20);
IkReal x10328=((1.0)*x10321);
IkReal x10329=(gconst4*x10321);
IkReal x10330=((1.0)*x10322);
IkReal x10331=(gconst4*x10322);
evalcond[0]=(((r02*x10322))+((r01*x10329))+(((-1.0)*x10326*x10328)));
evalcond[1]=((((-1.0)*r22*x10328))+((r21*x10331))+(((-1.0)*x10327*x10330)));
evalcond[2]=((((-1.0)*x10324*x10330))+((x10322*x10323))+(((-1.0)*r12*x10328)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x10328))+((r01*x10331))+(((-1.0)*x10326*x10330)));
evalcond[4]=(((r22*x10322))+(((-1.0)*cj2*x10325))+((sj1*sj2))+((r21*x10329))+(((-1.0)*x10327*x10328)));
evalcond[5]=((((-1.0)*x10324*x10328))+(((-1.0)*sj2*x10325))+(((-1.0)*cj2*sj1))+((x10321*x10323))+((r12*x10322)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10332=((1.0)*gconst5);
CheckValue<IkReal> x10333=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x10332))+(((-1.0)*gconst4*r10)))),-1);
if(!x10333.valid){
continue;
}
CheckValue<IkReal> x10334 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*r20*x10332)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10334.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10333.value)))+(x10334.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10335=IKcos(j4);
IkReal x10336=IKsin(j4);
IkReal x10337=(gconst4*r11);
IkReal x10338=(gconst5*r10);
IkReal x10339=((1.0)*cj1);
IkReal x10340=(gconst5*r00);
IkReal x10341=(gconst5*r20);
IkReal x10342=((1.0)*x10335);
IkReal x10343=(gconst4*x10335);
IkReal x10344=((1.0)*x10336);
IkReal x10345=(gconst4*x10336);
evalcond[0]=(((r02*x10336))+(((-1.0)*x10340*x10342))+((r01*x10343)));
evalcond[1]=((((-1.0)*x10341*x10344))+((r21*x10345))+(((-1.0)*r22*x10342)));
evalcond[2]=((((-1.0)*x10338*x10344))+(((-1.0)*r12*x10342))+((x10336*x10337)));
evalcond[3]=((-1.0)+(((-1.0)*x10340*x10344))+((r01*x10345))+(((-1.0)*r02*x10342)));
evalcond[4]=((((-1.0)*x10341*x10342))+((r22*x10336))+(((-1.0)*cj2*x10339))+((sj1*sj2))+((r21*x10343)));
evalcond[5]=((((-1.0)*x10338*x10342))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x10339))+((r12*x10336))+((x10335*x10337)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10346 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10346.valid){
continue;
}
CheckValue<IkReal> x10347=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10347.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10346.value)+(((1.5707963267949)*(x10347.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10348=IKcos(j4);
IkReal x10349=IKsin(j4);
IkReal x10350=(gconst4*r11);
IkReal x10351=(gconst5*r10);
IkReal x10352=((1.0)*cj1);
IkReal x10353=(gconst5*r00);
IkReal x10354=(gconst5*r20);
IkReal x10355=((1.0)*x10348);
IkReal x10356=(gconst4*x10348);
IkReal x10357=((1.0)*x10349);
IkReal x10358=(gconst4*x10349);
evalcond[0]=(((r01*x10356))+(((-1.0)*x10353*x10355))+((r02*x10349)));
evalcond[1]=(((r21*x10358))+(((-1.0)*r22*x10355))+(((-1.0)*x10354*x10357)));
evalcond[2]=(((x10349*x10350))+(((-1.0)*x10351*x10357))+(((-1.0)*r12*x10355)));
evalcond[3]=((-1.0)+((r01*x10358))+(((-1.0)*x10353*x10357))+(((-1.0)*r02*x10355)));
evalcond[4]=(((r21*x10356))+(((-1.0)*cj2*x10352))+((sj1*sj2))+((r22*x10349))+(((-1.0)*x10354*x10355)));
evalcond[5]=(((x10348*x10350))+(((-1.0)*cj2*sj1))+((r12*x10349))+(((-1.0)*x10351*x10355))+(((-1.0)*sj2*x10352)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10359=((-1.0)*r21);
CheckValue<IkReal> x10362 = IKatan2WithCheck(IkReal(x10359),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10362.valid){
continue;
}
IkReal x10360=((1.0)*(x10362.value));
IkReal x10361=x9514;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10360)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10360)));
IkReal gconst4=(x10359*x10361);
IkReal gconst5=((1.0)*r20*x10361);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10363=((-1.0)*r21);
CheckValue<IkReal> x10366 = IKatan2WithCheck(IkReal(x10363),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10366.valid){
continue;
}
IkReal x10364=((1.0)*(x10366.value));
IkReal x10365=x9514;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10364)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10364)));
IkReal gconst4=(x10363*x10365);
IkReal gconst5=((1.0)*r20*x10365);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10367=((-1.0)*r21);
CheckValue<IkReal> x10370 = IKatan2WithCheck(IkReal(x10367),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10370.valid){
continue;
}
IkReal x10368=((1.0)*(x10370.value));
IkReal x10369=x9514;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10368)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10368)));
IkReal gconst4=(x10367*x10369);
IkReal gconst5=((1.0)*r20*x10369);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10371=(gconst4*r01);
IkReal x10372=(gconst5*r00);
CheckValue<IkReal> x10373 = IKatan2WithCheck(IkReal((x10371+(((-1.0)*x10372)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x10373.valid){
continue;
}
CheckValue<IkReal> x10374=IKPowWithIntegerCheck(IKsign(((((-2.0)*x10371*x10372))+(r02*r02)+(x10372*x10372)+(x10371*x10371))),-1);
if(!x10374.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10373.value)+(((1.5707963267949)*(x10374.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10375=IKcos(j4);
IkReal x10376=IKsin(j4);
IkReal x10377=(gconst4*r11);
IkReal x10378=(gconst5*r10);
IkReal x10379=(gconst5*r00);
IkReal x10380=(gconst5*r20);
IkReal x10381=((1.0)*x10375);
IkReal x10382=(gconst4*x10375);
IkReal x10383=((1.0)*x10376);
IkReal x10384=(gconst4*x10376);
evalcond[0]=((((-1.0)*x10379*x10381))+((r02*x10376))+((r01*x10382)));
evalcond[1]=(((r21*x10384))+(((-1.0)*x10380*x10383))+(((-1.0)*r22*x10381)));
evalcond[2]=((((-1.0)*r12*x10381))+(((-1.0)*x10378*x10383))+((x10376*x10377)));
evalcond[3]=((-1.0)+(((-1.0)*x10379*x10383))+(((-1.0)*r02*x10381))+((r01*x10384)));
evalcond[4]=(((cj2*sj1))+((r22*x10376))+((r21*x10382))+((cj1*sj2))+(((-1.0)*x10380*x10381)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x10378*x10381))+((x10375*x10377))+((r12*x10376)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10385=((1.0)*gconst5);
CheckValue<IkReal> x10386=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x10385))+(((-1.0)*gconst4*r10)))),-1);
if(!x10386.valid){
continue;
}
CheckValue<IkReal> x10387 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10385))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10387.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10386.value)))+(x10387.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10388=IKcos(j4);
IkReal x10389=IKsin(j4);
IkReal x10390=(gconst4*r11);
IkReal x10391=(gconst5*r10);
IkReal x10392=(gconst5*r00);
IkReal x10393=(gconst5*r20);
IkReal x10394=((1.0)*x10388);
IkReal x10395=(gconst4*x10388);
IkReal x10396=((1.0)*x10389);
IkReal x10397=(gconst4*x10389);
evalcond[0]=(((r01*x10395))+(((-1.0)*x10392*x10394))+((r02*x10389)));
evalcond[1]=(((r21*x10397))+(((-1.0)*x10393*x10396))+(((-1.0)*r22*x10394)));
evalcond[2]=((((-1.0)*r12*x10394))+((x10389*x10390))+(((-1.0)*x10391*x10396)));
evalcond[3]=((-1.0)+((r01*x10397))+(((-1.0)*x10392*x10396))+(((-1.0)*r02*x10394)));
evalcond[4]=(((cj2*sj1))+((r21*x10395))+((cj1*sj2))+(((-1.0)*x10393*x10394))+((r22*x10389)));
evalcond[5]=(((r12*x10389))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x10391*x10394))+((x10388*x10390)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10398 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10398.valid){
continue;
}
CheckValue<IkReal> x10399=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10399.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10398.value)+(((1.5707963267949)*(x10399.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10400=IKcos(j4);
IkReal x10401=IKsin(j4);
IkReal x10402=(gconst4*r11);
IkReal x10403=(gconst5*r10);
IkReal x10404=(gconst5*r00);
IkReal x10405=(gconst5*r20);
IkReal x10406=((1.0)*x10400);
IkReal x10407=(gconst4*x10400);
IkReal x10408=((1.0)*x10401);
IkReal x10409=(gconst4*x10401);
evalcond[0]=(((r01*x10407))+((r02*x10401))+(((-1.0)*x10404*x10406)));
evalcond[1]=(((r21*x10409))+(((-1.0)*x10405*x10408))+(((-1.0)*r22*x10406)));
evalcond[2]=(((x10401*x10402))+(((-1.0)*r12*x10406))+(((-1.0)*x10403*x10408)));
evalcond[3]=((-1.0)+((r01*x10409))+(((-1.0)*x10404*x10408))+(((-1.0)*r02*x10406)));
evalcond[4]=(((cj2*sj1))+((r21*x10407))+((r22*x10401))+((cj1*sj2))+(((-1.0)*x10405*x10406)));
evalcond[5]=(((x10400*x10402))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r12*x10401))+(((-1.0)*x10403*x10406)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10410=((-1.0)*r21);
CheckValue<IkReal> x10413 = IKatan2WithCheck(IkReal(x10410),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10413.valid){
continue;
}
IkReal x10411=((1.0)*(x10413.value));
IkReal x10412=x9514;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10411)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10411)));
IkReal gconst4=(x10410*x10412);
IkReal gconst5=((1.0)*r20*x10412);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10414=((-1.0)*r21);
CheckValue<IkReal> x10417 = IKatan2WithCheck(IkReal(x10414),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10417.valid){
continue;
}
IkReal x10415=((1.0)*(x10417.value));
IkReal x10416=x9514;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10415)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10415)));
IkReal gconst4=(x10414*x10416);
IkReal gconst5=((1.0)*r20*x10416);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10418=((-1.0)*r21);
CheckValue<IkReal> x10421 = IKatan2WithCheck(IkReal(x10418),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10421.valid){
continue;
}
IkReal x10419=((1.0)*(x10421.value));
IkReal x10420=x9514;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10419)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10419)));
IkReal gconst4=(x10418*x10420);
IkReal gconst5=((1.0)*r20*x10420);
IkReal x10422=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10426=IKPowWithIntegerCheck(x10422,-1);
if(!x10426.valid){
continue;
}
IkReal x10423=x10426.value;
IkReal x10424=((1.0)*x10423);
IkReal x10425=((((-1.0)*x10424*(r01*r01)*(r21*r21)))+(((-1.0)*(r02*r02)))+(((-2.0)*r00*r01*r20*r21*x10423))+(((-1.0)*x10424*(r00*r00)*(r20*r20))));
j4eval[0]=x10425;
j4eval[1]=r02;
j4eval[2]=x10422;
j4eval[3]=IKsign(x10425);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10427=(gconst5*r00);
IkReal x10428=(gconst4*r01);
CheckValue<IkReal> x10429 = IKatan2WithCheck(IkReal((x10427+(((-1.0)*x10428)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x10429.valid){
continue;
}
CheckValue<IkReal> x10430=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x10427*x10427)))+(((2.0)*x10427*x10428))+(((-1.0)*(r02*r02)))+(((-1.0)*(x10428*x10428))))),-1);
if(!x10430.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10429.value)+(((1.5707963267949)*(x10430.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10431=IKsin(j4);
IkReal x10432=IKcos(j4);
IkReal x10433=(gconst4*r11);
IkReal x10434=(gconst5*r10);
IkReal x10435=(gconst4*r01);
IkReal x10436=(gconst5*r00);
IkReal x10437=(gconst4*r21);
IkReal x10438=(gconst5*r20);
IkReal x10439=((1.0)*x10432);
IkReal x10440=((1.0)*x10431);
evalcond[0]=((((-1.0)*x10438*x10440))+((x10431*x10437))+(((-1.0)*r22*x10439)));
evalcond[1]=((((-1.0)*x10434*x10440))+(((-1.0)*r12*x10439))+((x10431*x10433)));
evalcond[2]=((((-1.0)*r02*x10440))+((x10432*x10436))+(((-1.0)*x10435*x10439)));
evalcond[3]=((-1.0)+(((-1.0)*x10436*x10440))+((x10431*x10435))+(((-1.0)*r02*x10439)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x10437*x10439))+((x10432*x10438))+(((-1.0)*r22*x10440)));
evalcond[5]=((((-1.0)*r12*x10440))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x10433*x10439))+((x10432*x10434)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10441=((1.0)*gconst5);
CheckValue<IkReal> x10442 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10441))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10442.valid){
continue;
}
CheckValue<IkReal> x10443=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x10441))+(((-1.0)*gconst4*r10)))),-1);
if(!x10443.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10442.value)+(((1.5707963267949)*(x10443.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10444=IKsin(j4);
IkReal x10445=IKcos(j4);
IkReal x10446=(gconst4*r11);
IkReal x10447=(gconst5*r10);
IkReal x10448=(gconst4*r01);
IkReal x10449=(gconst5*r00);
IkReal x10450=(gconst4*r21);
IkReal x10451=(gconst5*r20);
IkReal x10452=((1.0)*x10445);
IkReal x10453=((1.0)*x10444);
evalcond[0]=((((-1.0)*r22*x10452))+(((-1.0)*x10451*x10453))+((x10444*x10450)));
evalcond[1]=((((-1.0)*x10447*x10453))+((x10444*x10446))+(((-1.0)*r12*x10452)));
evalcond[2]=(((x10445*x10449))+(((-1.0)*r02*x10453))+(((-1.0)*x10448*x10452)));
evalcond[3]=((-1.0)+(((-1.0)*x10449*x10453))+((x10444*x10448))+(((-1.0)*r02*x10452)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x10453))+((x10445*x10451))+(((-1.0)*x10450*x10452)));
evalcond[5]=(((x10445*x10447))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x10453))+(((-1.0)*x10446*x10452)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10454 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10454.valid){
continue;
}
CheckValue<IkReal> x10455=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10455.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10454.value)+(((1.5707963267949)*(x10455.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10456=IKsin(j4);
IkReal x10457=IKcos(j4);
IkReal x10458=(gconst4*r11);
IkReal x10459=(gconst5*r10);
IkReal x10460=(gconst4*r01);
IkReal x10461=(gconst5*r00);
IkReal x10462=(gconst4*r21);
IkReal x10463=(gconst5*r20);
IkReal x10464=((1.0)*x10457);
IkReal x10465=((1.0)*x10456);
evalcond[0]=((((-1.0)*r22*x10464))+(((-1.0)*x10463*x10465))+((x10456*x10462)));
evalcond[1]=((((-1.0)*x10459*x10465))+((x10456*x10458))+(((-1.0)*r12*x10464)));
evalcond[2]=((((-1.0)*r02*x10465))+(((-1.0)*x10460*x10464))+((x10457*x10461)));
evalcond[3]=((-1.0)+(((-1.0)*x10461*x10465))+(((-1.0)*r02*x10464))+((x10456*x10460)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x10465))+(((-1.0)*x10462*x10464))+((x10457*x10463)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x10458*x10464))+((x10457*x10459))+(((-1.0)*r12*x10465)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r12);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10466=gconst4*gconst4;
IkReal x10467=gconst5*gconst5;
IkReal x10468=(r01*r20);
IkReal x10469=(gconst4*sj3);
IkReal x10470=(r01*r21);
IkReal x10471=((1.0)*cj3);
IkReal x10472=(r00*r21);
IkReal x10473=(r00*r20);
IkReal x10474=(cj3*gconst4*gconst5);
IkReal x10475=((1.0)*x10467);
CheckValue<IkReal> x10476 = IKatan2WithCheck(IkReal((((r00*r22*x10469))+((gconst5*r01*r22*sj3)))),IkReal((((sj3*x10466*x10472))+((gconst5*x10469*x10470))+(((-1.0)*gconst5*x10469*x10473))+(((-1.0)*sj3*x10468*x10475)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10476.valid){
continue;
}
CheckValue<IkReal> x10477=IKPowWithIntegerCheck(IKsign((((x10472*x10474))+(((-1.0)*x10466*x10470*x10471))+(((-1.0)*r02*r22*x10471))+((x10468*x10474))+(((-1.0)*x10467*x10471*x10473)))),-1);
if(!x10477.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10476.value)+(((1.5707963267949)*(x10477.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10478=IKsin(j4);
IkReal x10479=IKcos(j4);
IkReal x10480=(sj1*sj2);
IkReal x10481=(gconst5*sj3);
IkReal x10482=(gconst4*r11);
IkReal x10483=(gconst5*r10);
IkReal x10484=((1.0)*cj1);
IkReal x10485=(gconst4*r01);
IkReal x10486=(cj2*sj1);
IkReal x10487=(gconst5*r00);
IkReal x10488=(gconst4*sj3);
IkReal x10489=(cj3*gconst5);
IkReal x10490=(cj3*gconst4);
IkReal x10491=(gconst4*r21);
IkReal x10492=(cj2*x10484);
IkReal x10493=((1.0)*x10479);
IkReal x10494=((1.0)*x10478);
IkReal x10495=(cj3*x10478);
IkReal x10496=(cj3*x10479);
evalcond[0]=((((-1.0)*gconst5*r20*x10494))+((x10478*x10491))+(((-1.0)*r22*x10493)));
evalcond[1]=(((x10478*x10482))+(((-1.0)*r12*x10493))+(((-1.0)*x10483*x10494)));
evalcond[2]=((-1.0)+((x10478*x10485))+(((-1.0)*r02*x10493))+(((-1.0)*x10487*x10494)));
evalcond[3]=(((r00*x10488))+(((-1.0)*cj3*x10487*x10493))+((x10485*x10496))+((r02*x10495))+((r01*x10481)));
evalcond[4]=(((r00*x10479*x10481))+(((-1.0)*r02*sj3*x10494))+(((-1.0)*sj3*x10485*x10493))+((r00*x10490))+((r01*x10489)));
evalcond[5]=(((r21*x10479*x10490))+((r21*x10481))+((cj1*sj2))+((r22*x10495))+(((-1.0)*r20*x10489*x10493))+x10486+((r20*x10488)));
evalcond[6]=((((-1.0)*cj3*x10483*x10493))+((r10*x10488))+((r12*x10495))+((r11*x10481))+((x10482*x10496))+(((-1.0)*x10492))+x10480);
evalcond[7]=((((-1.0)*r21*x10488*x10493))+((r21*x10489))+(((-1.0)*r22*sj3*x10494))+(((-1.0)*x10492))+x10480+((r20*x10490))+((r20*x10479*x10481)));
evalcond[8]=((((-1.0)*sj2*x10484))+((r10*x10490))+(((-1.0)*sj3*x10482*x10493))+(((-1.0)*x10486))+((r11*x10489))+(((-1.0)*r12*sj3*x10494))+((r10*x10479*x10481)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10497=((1.0)*gconst5);
CheckValue<IkReal> x10498=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x10497))+(((-1.0)*gconst4*r10)))),-1);
if(!x10498.valid){
continue;
}
CheckValue<IkReal> x10499 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10497))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10499.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10498.value)))+(x10499.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10500=IKsin(j4);
IkReal x10501=IKcos(j4);
IkReal x10502=(sj1*sj2);
IkReal x10503=(gconst5*sj3);
IkReal x10504=(gconst4*r11);
IkReal x10505=(gconst5*r10);
IkReal x10506=((1.0)*cj1);
IkReal x10507=(gconst4*r01);
IkReal x10508=(cj2*sj1);
IkReal x10509=(gconst5*r00);
IkReal x10510=(gconst4*sj3);
IkReal x10511=(cj3*gconst5);
IkReal x10512=(cj3*gconst4);
IkReal x10513=(gconst4*r21);
IkReal x10514=(cj2*x10506);
IkReal x10515=((1.0)*x10501);
IkReal x10516=((1.0)*x10500);
IkReal x10517=(cj3*x10500);
IkReal x10518=(cj3*x10501);
evalcond[0]=((((-1.0)*r22*x10515))+((x10500*x10513))+(((-1.0)*gconst5*r20*x10516)));
evalcond[1]=((((-1.0)*x10505*x10516))+((x10500*x10504))+(((-1.0)*r12*x10515)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x10515))+((x10500*x10507))+(((-1.0)*x10509*x10516)));
evalcond[3]=(((r01*x10503))+((x10507*x10518))+((r00*x10510))+((r02*x10517))+(((-1.0)*cj3*x10509*x10515)));
evalcond[4]=((((-1.0)*r02*sj3*x10516))+((r01*x10511))+((r00*x10512))+((r00*x10501*x10503))+(((-1.0)*sj3*x10507*x10515)));
evalcond[5]=(((cj1*sj2))+((r20*x10510))+((r21*x10503))+(((-1.0)*r20*x10511*x10515))+((r21*x10501*x10512))+x10508+((r22*x10517)));
evalcond[6]=(((r12*x10517))+((r10*x10510))+(((-1.0)*x10514))+x10502+((r11*x10503))+((x10504*x10518))+(((-1.0)*cj3*x10505*x10515)));
evalcond[7]=((((-1.0)*r22*sj3*x10516))+((r20*x10512))+((r20*x10501*x10503))+(((-1.0)*x10514))+x10502+(((-1.0)*r21*x10510*x10515))+((r21*x10511)));
evalcond[8]=((((-1.0)*sj3*x10504*x10515))+(((-1.0)*sj2*x10506))+((r10*x10512))+((r10*x10501*x10503))+(((-1.0)*x10508))+(((-1.0)*r12*sj3*x10516))+((r11*x10511)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10519 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10519.valid){
continue;
}
CheckValue<IkReal> x10520=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10520.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10519.value)+(((1.5707963267949)*(x10520.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10521=IKsin(j4);
IkReal x10522=IKcos(j4);
IkReal x10523=(sj1*sj2);
IkReal x10524=(gconst5*sj3);
IkReal x10525=(gconst4*r11);
IkReal x10526=(gconst5*r10);
IkReal x10527=((1.0)*cj1);
IkReal x10528=(gconst4*r01);
IkReal x10529=(cj2*sj1);
IkReal x10530=(gconst5*r00);
IkReal x10531=(gconst4*sj3);
IkReal x10532=(cj3*gconst5);
IkReal x10533=(cj3*gconst4);
IkReal x10534=(gconst4*r21);
IkReal x10535=(cj2*x10527);
IkReal x10536=((1.0)*x10522);
IkReal x10537=((1.0)*x10521);
IkReal x10538=(cj3*x10521);
IkReal x10539=(cj3*x10522);
evalcond[0]=((((-1.0)*r22*x10536))+((x10521*x10534))+(((-1.0)*gconst5*r20*x10537)));
evalcond[1]=(((x10521*x10525))+(((-1.0)*r12*x10536))+(((-1.0)*x10526*x10537)));
evalcond[2]=((-1.0)+((x10521*x10528))+(((-1.0)*r02*x10536))+(((-1.0)*x10530*x10537)));
evalcond[3]=(((r02*x10538))+((x10528*x10539))+((r00*x10531))+((r01*x10524))+(((-1.0)*cj3*x10530*x10536)));
evalcond[4]=((((-1.0)*sj3*x10528*x10536))+((r01*x10532))+(((-1.0)*r02*sj3*x10537))+((r00*x10533))+((r00*x10522*x10524)));
evalcond[5]=(((r22*x10538))+((cj1*sj2))+((r21*x10522*x10533))+((r21*x10524))+(((-1.0)*r20*x10532*x10536))+x10529+((r20*x10531)));
evalcond[6]=((((-1.0)*x10535))+((r10*x10531))+((r12*x10538))+x10523+((r11*x10524))+(((-1.0)*cj3*x10526*x10536))+((x10525*x10539)));
evalcond[7]=((((-1.0)*x10535))+((r20*x10522*x10524))+(((-1.0)*r21*x10531*x10536))+(((-1.0)*r22*sj3*x10537))+((r21*x10532))+x10523+((r20*x10533)));
evalcond[8]=(((r10*x10522*x10524))+((r10*x10533))+(((-1.0)*sj2*x10527))+(((-1.0)*x10529))+((r11*x10532))+(((-1.0)*sj3*x10525*x10536))+(((-1.0)*r12*sj3*x10537)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10540=((-1.0)*r21);
CheckValue<IkReal> x10543 = IKatan2WithCheck(IkReal(x10540),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10543.valid){
continue;
}
IkReal x10541=((1.0)*(x10543.value));
IkReal x10542=x9514;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10541)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10541)));
IkReal gconst4=(x10540*x10542);
IkReal gconst5=((1.0)*r20*x10542);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10544=((-1.0)*r21);
CheckValue<IkReal> x10547 = IKatan2WithCheck(IkReal(x10544),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10547.valid){
continue;
}
IkReal x10545=((1.0)*(x10547.value));
IkReal x10546=x9514;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10545)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10545)));
IkReal gconst4=(x10544*x10546);
IkReal gconst5=((1.0)*r20*x10546);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10548=((-1.0)*r21);
CheckValue<IkReal> x10551 = IKatan2WithCheck(IkReal(x10548),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10551.valid){
continue;
}
IkReal x10549=((1.0)*(x10551.value));
IkReal x10550=x9514;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10549)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10549)));
IkReal gconst4=(x10548*x10550);
IkReal gconst5=((1.0)*r20*x10550);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10552=((-1.0)*r21);
CheckValue<IkReal> x10555 = IKatan2WithCheck(IkReal(x10552),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10555.valid){
continue;
}
IkReal x10553=((1.0)*(x10555.value));
IkReal x10554=x9514;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10553)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10553)));
IkReal gconst4=(x10552*x10554);
IkReal gconst5=((1.0)*r20*x10554);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10556=((-1.0)*r21);
CheckValue<IkReal> x10559 = IKatan2WithCheck(IkReal(x10556),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10559.valid){
continue;
}
IkReal x10557=((1.0)*(x10559.value));
IkReal x10558=x9514;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10557)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10557)));
IkReal gconst4=(x10556*x10558);
IkReal gconst5=((1.0)*r20*x10558);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10560=((-1.0)*r21);
CheckValue<IkReal> x10563 = IKatan2WithCheck(IkReal(x10560),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10563.valid){
continue;
}
IkReal x10561=((1.0)*(x10563.value));
IkReal x10562=x9514;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10561)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10561)));
IkReal gconst4=(x10560*x10562);
IkReal gconst5=((1.0)*r20*x10562);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10564=(gconst5*r00);
IkReal x10565=(gconst4*r01);
CheckValue<IkReal> x10566=IKPowWithIntegerCheck(IKsign(((((-2.0)*x10564*x10565))+(x10565*x10565)+(x10564*x10564)+(r02*r02))),-1);
if(!x10566.valid){
continue;
}
CheckValue<IkReal> x10567 = IKatan2WithCheck(IkReal(((((-1.0)*x10565))+x10564)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x10567.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10566.value)))+(x10567.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10568=IKsin(j4);
IkReal x10569=IKcos(j4);
IkReal x10570=(gconst4*r11);
IkReal x10571=(gconst5*r10);
IkReal x10572=(gconst4*r01);
IkReal x10573=(gconst5*r00);
IkReal x10574=(gconst4*r21);
IkReal x10575=(gconst5*r20);
IkReal x10576=((1.0)*x10569);
IkReal x10577=((1.0)*x10568);
evalcond[0]=((((-1.0)*r22*x10576))+(((-1.0)*x10575*x10577))+((x10568*x10574)));
evalcond[1]=((((-1.0)*x10571*x10577))+(((-1.0)*r12*x10576))+((x10568*x10570)));
evalcond[2]=(((x10569*x10573))+(((-1.0)*x10572*x10576))+(((-1.0)*r02*x10577)));
evalcond[3]=((1.0)+(((-1.0)*x10573*x10577))+((x10568*x10572))+(((-1.0)*r02*x10576)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r12*x10577))+((x10569*x10571))+(((-1.0)*x10570*x10576)));
evalcond[5]=((((-1.0)*r22*x10577))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x10574*x10576))+((x10569*x10575)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10578=((1.0)*gconst5);
CheckValue<IkReal> x10579=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r20))+(((-1.0)*r21*x10578)))),-1);
if(!x10579.valid){
continue;
}
CheckValue<IkReal> x10580 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*r10*x10578)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10580.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10579.value)))+(x10580.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10581=IKsin(j4);
IkReal x10582=IKcos(j4);
IkReal x10583=(gconst4*r11);
IkReal x10584=(gconst5*r10);
IkReal x10585=(gconst4*r01);
IkReal x10586=(gconst5*r00);
IkReal x10587=(gconst4*r21);
IkReal x10588=(gconst5*r20);
IkReal x10589=((1.0)*x10582);
IkReal x10590=((1.0)*x10581);
evalcond[0]=((((-1.0)*r22*x10589))+((x10581*x10587))+(((-1.0)*x10588*x10590)));
evalcond[1]=((((-1.0)*x10584*x10590))+((x10581*x10583))+(((-1.0)*r12*x10589)));
evalcond[2]=((((-1.0)*r02*x10590))+(((-1.0)*x10585*x10589))+((x10582*x10586)));
evalcond[3]=((1.0)+((x10581*x10585))+(((-1.0)*r02*x10589))+(((-1.0)*x10586*x10590)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r12*x10590))+((cj1*sj2))+(((-1.0)*x10583*x10589))+((x10582*x10584)));
evalcond[5]=((((-1.0)*x10587*x10589))+(((-1.0)*r22*x10590))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x10582*x10588)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10591=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x10591.valid){
continue;
}
CheckValue<IkReal> x10592 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10592.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10591.value)))+(x10592.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10593=IKsin(j4);
IkReal x10594=IKcos(j4);
IkReal x10595=(gconst4*r11);
IkReal x10596=(gconst5*r10);
IkReal x10597=(gconst4*r01);
IkReal x10598=(gconst5*r00);
IkReal x10599=(gconst4*r21);
IkReal x10600=(gconst5*r20);
IkReal x10601=((1.0)*x10594);
IkReal x10602=((1.0)*x10593);
evalcond[0]=((((-1.0)*x10600*x10602))+((x10593*x10599))+(((-1.0)*r22*x10601)));
evalcond[1]=((((-1.0)*r12*x10601))+((x10593*x10595))+(((-1.0)*x10596*x10602)));
evalcond[2]=(((x10594*x10598))+(((-1.0)*r02*x10602))+(((-1.0)*x10597*x10601)));
evalcond[3]=((1.0)+(((-1.0)*x10598*x10602))+((x10593*x10597))+(((-1.0)*r02*x10601)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r12*x10602))+(((-1.0)*x10595*x10601))+((cj1*sj2))+((x10594*x10596)));
evalcond[5]=(((x10594*x10600))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x10602))+(((-1.0)*x10599*x10601)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10603=((-1.0)*r21);
CheckValue<IkReal> x10606 = IKatan2WithCheck(IkReal(x10603),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10606.valid){
continue;
}
IkReal x10604=((1.0)*(x10606.value));
IkReal x10605=x9514;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10604)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10604)));
IkReal gconst4=(x10603*x10605);
IkReal gconst5=((1.0)*r20*x10605);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10607=((-1.0)*r21);
CheckValue<IkReal> x10610 = IKatan2WithCheck(IkReal(x10607),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10610.valid){
continue;
}
IkReal x10608=((1.0)*(x10610.value));
IkReal x10609=x9514;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10608)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10608)));
IkReal gconst4=(x10607*x10609);
IkReal gconst5=((1.0)*r20*x10609);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10611=((-1.0)*r21);
CheckValue<IkReal> x10614 = IKatan2WithCheck(IkReal(x10611),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10614.valid){
continue;
}
IkReal x10612=((1.0)*(x10614.value));
IkReal x10613=x9514;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10612)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10612)));
IkReal gconst4=(x10611*x10613);
IkReal gconst5=((1.0)*r20*x10613);
IkReal x10615=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10619=IKPowWithIntegerCheck(x10615,-1);
if(!x10619.valid){
continue;
}
IkReal x10616=x10619.value;
IkReal x10617=((1.0)*x10616);
IkReal x10618=((((-2.0)*r00*r01*r20*r21*x10616))+(((-1.0)*(r02*r02)))+(((-1.0)*x10617*(r00*r00)*(r20*r20)))+(((-1.0)*x10617*(r01*r01)*(r21*r21))));
j4eval[0]=x10618;
j4eval[1]=IKsign(x10618);
j4eval[2]=r02;
j4eval[3]=x10615;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10620=(gconst4*r01);
IkReal x10621=(gconst5*r00);
CheckValue<IkReal> x10622 = IKatan2WithCheck(IkReal(((((-1.0)*x10621))+x10620)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x10622.valid){
continue;
}
CheckValue<IkReal> x10623=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x10620*x10620)))+(((-1.0)*(r02*r02)))+(((2.0)*x10620*x10621))+(((-1.0)*(x10621*x10621))))),-1);
if(!x10623.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10622.value)+(((1.5707963267949)*(x10623.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10624=IKcos(j4);
IkReal x10625=IKsin(j4);
IkReal x10626=(gconst4*r11);
IkReal x10627=(gconst5*r10);
IkReal x10628=(gconst5*r00);
IkReal x10629=(gconst5*r20);
IkReal x10630=((1.0)*x10624);
IkReal x10631=(gconst4*x10624);
IkReal x10632=((1.0)*x10625);
IkReal x10633=(gconst4*x10625);
evalcond[0]=(((r01*x10631))+(((-1.0)*x10628*x10630))+((r02*x10625)));
evalcond[1]=((((-1.0)*x10629*x10632))+(((-1.0)*r22*x10630))+((r21*x10633)));
evalcond[2]=(((x10625*x10626))+(((-1.0)*x10627*x10632))+(((-1.0)*r12*x10630)));
evalcond[3]=((1.0)+(((-1.0)*r02*x10630))+((r01*x10633))+(((-1.0)*x10628*x10632)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x10627*x10630))+((r12*x10625))+((x10624*x10626)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x10625))+(((-1.0)*x10629*x10630))+((r21*x10631)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10634=((1.0)*gconst5);
CheckValue<IkReal> x10635 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*r10*x10634)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10635.valid){
continue;
}
CheckValue<IkReal> x10636=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10634))+(((-1.0)*gconst4*r20)))),-1);
if(!x10636.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10635.value)+(((1.5707963267949)*(x10636.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10637=IKcos(j4);
IkReal x10638=IKsin(j4);
IkReal x10639=(gconst4*r11);
IkReal x10640=(gconst5*r10);
IkReal x10641=(gconst5*r00);
IkReal x10642=(gconst5*r20);
IkReal x10643=((1.0)*x10637);
IkReal x10644=(gconst4*x10637);
IkReal x10645=((1.0)*x10638);
IkReal x10646=(gconst4*x10638);
evalcond[0]=((((-1.0)*x10641*x10643))+((r01*x10644))+((r02*x10638)));
evalcond[1]=(((r21*x10646))+(((-1.0)*r22*x10643))+(((-1.0)*x10642*x10645)));
evalcond[2]=(((x10638*x10639))+(((-1.0)*x10640*x10645))+(((-1.0)*r12*x10643)));
evalcond[3]=((1.0)+(((-1.0)*r02*x10643))+(((-1.0)*x10641*x10645))+((r01*x10646)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x10640*x10643))+((x10637*x10639))+((r12*x10638)));
evalcond[5]=(((r21*x10644))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x10638))+(((-1.0)*x10642*x10643)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10647=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x10647.valid){
continue;
}
CheckValue<IkReal> x10648 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10648.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10647.value)))+(x10648.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10649=IKcos(j4);
IkReal x10650=IKsin(j4);
IkReal x10651=(gconst4*r11);
IkReal x10652=(gconst5*r10);
IkReal x10653=(gconst5*r00);
IkReal x10654=(gconst5*r20);
IkReal x10655=((1.0)*x10649);
IkReal x10656=(gconst4*x10649);
IkReal x10657=((1.0)*x10650);
IkReal x10658=(gconst4*x10650);
evalcond[0]=((((-1.0)*x10653*x10655))+((r02*x10650))+((r01*x10656)));
evalcond[1]=((((-1.0)*r22*x10655))+(((-1.0)*x10654*x10657))+((r21*x10658)));
evalcond[2]=((((-1.0)*r12*x10655))+((x10650*x10651))+(((-1.0)*x10652*x10657)));
evalcond[3]=((1.0)+(((-1.0)*x10653*x10657))+(((-1.0)*r02*x10655))+((r01*x10658)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x10652*x10655))+((r12*x10650))+((x10649*x10651)));
evalcond[5]=((((-1.0)*x10654*x10655))+(((-1.0)*cj1*cj2))+((r22*x10650))+((sj1*sj2))+((r21*x10656)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10659=((-1.0)*r21);
CheckValue<IkReal> x10662 = IKatan2WithCheck(IkReal(x10659),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10662.valid){
continue;
}
IkReal x10660=((1.0)*(x10662.value));
IkReal x10661=x9514;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10660)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10660)));
IkReal gconst4=(x10659*x10661);
IkReal gconst5=((1.0)*r20*x10661);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10663=((-1.0)*r21);
CheckValue<IkReal> x10666 = IKatan2WithCheck(IkReal(x10663),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10666.valid){
continue;
}
IkReal x10664=((1.0)*(x10666.value));
IkReal x10665=x9514;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10664)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10664)));
IkReal gconst4=(x10663*x10665);
IkReal gconst5=((1.0)*r20*x10665);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10667=((-1.0)*r21);
CheckValue<IkReal> x10670 = IKatan2WithCheck(IkReal(x10667),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10670.valid){
continue;
}
IkReal x10668=((1.0)*(x10670.value));
IkReal x10669=x9514;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10668)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10668)));
IkReal gconst4=(x10667*x10669);
IkReal gconst5=((1.0)*r20*x10669);
IkReal x10671=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10675=IKPowWithIntegerCheck(x10671,-1);
if(!x10675.valid){
continue;
}
IkReal x10672=x10675.value;
IkReal x10673=((1.0)*x10672);
IkReal x10674=((((-2.0)*r00*r01*r20*r21*x10672))+(((-1.0)*x10673*(r00*r00)*(r20*r20)))+(((-1.0)*x10673*(r01*r01)*(r21*r21)))+(((-1.0)*(r02*r02))));
j4eval[0]=x10674;
j4eval[1]=IKsign(x10674);
j4eval[2]=r02;
j4eval[3]=x10671;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10676=(gconst4*r01);
IkReal x10677=(gconst5*r00);
CheckValue<IkReal> x10678=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x10676*x10676)))+(((2.0)*x10676*x10677))+(((-1.0)*(r02*r02)))+(((-1.0)*(x10677*x10677))))),-1);
if(!x10678.valid){
continue;
}
CheckValue<IkReal> x10679 = IKatan2WithCheck(IkReal(((((-1.0)*x10677))+x10676)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x10679.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10678.value)))+(x10679.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10680=IKcos(j4);
IkReal x10681=IKsin(j4);
IkReal x10682=(gconst5*r10);
IkReal x10683=(gconst5*r00);
IkReal x10684=(gconst5*r20);
IkReal x10685=((1.0)*x10680);
IkReal x10686=(gconst4*x10681);
IkReal x10687=(gconst4*x10680);
IkReal x10688=((1.0)*x10681);
evalcond[0]=((((-1.0)*x10683*x10685))+((r01*x10687))+((r02*x10681)));
evalcond[1]=((((-1.0)*r22*x10685))+(((-1.0)*x10684*x10688))+((r21*x10686)));
evalcond[2]=((((-1.0)*x10682*x10688))+(((-1.0)*r12*x10685))+((r11*x10686)));
evalcond[3]=((1.0)+(((-1.0)*x10683*x10688))+(((-1.0)*r02*x10685))+((r01*x10686)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x10684*x10685))+((cj1*sj2))+((r22*x10681))+((r21*x10687)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*x10682*x10685))+((r11*x10687))+((cj1*cj2))+((r12*x10681)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10689=((1.0)*gconst5);
CheckValue<IkReal> x10690=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10689))+(((-1.0)*gconst4*r20)))),-1);
if(!x10690.valid){
continue;
}
CheckValue<IkReal> x10691 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*r10*x10689)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10691.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10690.value)))+(x10691.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10692=IKcos(j4);
IkReal x10693=IKsin(j4);
IkReal x10694=(gconst5*r10);
IkReal x10695=(gconst5*r00);
IkReal x10696=(gconst5*r20);
IkReal x10697=((1.0)*x10692);
IkReal x10698=(gconst4*x10693);
IkReal x10699=(gconst4*x10692);
IkReal x10700=((1.0)*x10693);
evalcond[0]=(((r02*x10693))+(((-1.0)*x10695*x10697))+((r01*x10699)));
evalcond[1]=(((r21*x10698))+(((-1.0)*x10696*x10700))+(((-1.0)*r22*x10697)));
evalcond[2]=(((r11*x10698))+(((-1.0)*r12*x10697))+(((-1.0)*x10694*x10700)));
evalcond[3]=((1.0)+(((-1.0)*x10695*x10700))+(((-1.0)*r02*x10697))+((r01*x10698)));
evalcond[4]=(((cj2*sj1))+((r21*x10699))+((cj1*sj2))+(((-1.0)*x10696*x10697))+((r22*x10693)));
evalcond[5]=((((-1.0)*x10694*x10697))+((r11*x10699))+(((-1.0)*sj1*sj2))+((cj1*cj2))+((r12*x10693)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10701=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x10701.valid){
continue;
}
CheckValue<IkReal> x10702 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10702.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10701.value)))+(x10702.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10703=IKcos(j4);
IkReal x10704=IKsin(j4);
IkReal x10705=(gconst5*r10);
IkReal x10706=(gconst5*r00);
IkReal x10707=(gconst5*r20);
IkReal x10708=((1.0)*x10703);
IkReal x10709=(gconst4*x10704);
IkReal x10710=(gconst4*x10703);
IkReal x10711=((1.0)*x10704);
evalcond[0]=(((r01*x10710))+((r02*x10704))+(((-1.0)*x10706*x10708)));
evalcond[1]=((((-1.0)*r22*x10708))+((r21*x10709))+(((-1.0)*x10707*x10711)));
evalcond[2]=((((-1.0)*r12*x10708))+((r11*x10709))+(((-1.0)*x10705*x10711)));
evalcond[3]=((1.0)+(((-1.0)*x10706*x10711))+((r01*x10709))+(((-1.0)*r02*x10708)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x10704))+((r21*x10710))+(((-1.0)*x10707*x10708)));
evalcond[5]=(((r11*x10710))+(((-1.0)*sj1*sj2))+(((-1.0)*x10705*x10708))+((r12*x10704))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10712=((-1.0)*r21);
CheckValue<IkReal> x10715 = IKatan2WithCheck(IkReal(x10712),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10715.valid){
continue;
}
IkReal x10713=((1.0)*(x10715.value));
IkReal x10714=x9514;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10713)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10713)));
IkReal gconst4=(x10712*x10714);
IkReal gconst5=((1.0)*r20*x10714);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10716=((-1.0)*r21);
CheckValue<IkReal> x10719 = IKatan2WithCheck(IkReal(x10716),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10719.valid){
continue;
}
IkReal x10717=((1.0)*(x10719.value));
IkReal x10718=x9514;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10717)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10717)));
IkReal gconst4=(x10716*x10718);
IkReal gconst5=((1.0)*r20*x10718);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10720=((-1.0)*r21);
CheckValue<IkReal> x10723 = IKatan2WithCheck(IkReal(x10720),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10723.valid){
continue;
}
IkReal x10721=((1.0)*(x10723.value));
IkReal x10722=x9514;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10721)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10721)));
IkReal gconst4=(x10720*x10722);
IkReal gconst5=((1.0)*r20*x10722);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10724=(gconst5*r00);
IkReal x10725=(gconst4*r01);
CheckValue<IkReal> x10726 = IKatan2WithCheck(IkReal(((((-1.0)*x10725))+x10724)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x10726.valid){
continue;
}
CheckValue<IkReal> x10727=IKPowWithIntegerCheck(IKsign(((((-2.0)*x10724*x10725))+(r02*r02)+(x10724*x10724)+(x10725*x10725))),-1);
if(!x10727.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10726.value)+(((1.5707963267949)*(x10727.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10728=IKsin(j4);
IkReal x10729=IKcos(j4);
IkReal x10730=(gconst4*r11);
IkReal x10731=(gconst5*r10);
IkReal x10732=(gconst5*r00);
IkReal x10733=(gconst5*r20);
IkReal x10734=((1.0)*x10729);
IkReal x10735=(gconst4*x10728);
IkReal x10736=((1.0)*x10728);
evalcond[0]=((((-1.0)*r22*x10734))+(((-1.0)*x10733*x10736))+((r21*x10735)));
evalcond[1]=((((-1.0)*x10731*x10736))+(((-1.0)*r12*x10734))+((x10728*x10730)));
evalcond[2]=(((x10729*x10732))+(((-1.0)*r02*x10736))+(((-1.0)*gconst4*r01*x10734)));
evalcond[3]=((1.0)+(((-1.0)*r02*x10734))+(((-1.0)*x10732*x10736))+((r01*x10735)));
evalcond[4]=((((-1.0)*r22*x10736))+((cj2*sj1))+((x10729*x10733))+((cj1*sj2))+(((-1.0)*gconst4*r21*x10734)));
evalcond[5]=(((x10729*x10731))+(((-1.0)*x10730*x10734))+(((-1.0)*sj1*sj2))+(((-1.0)*r12*x10736))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10737=((1.0)*gconst5);
CheckValue<IkReal> x10738=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10737))+(((-1.0)*gconst4*r20)))),-1);
if(!x10738.valid){
continue;
}
CheckValue<IkReal> x10739 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*r10*x10737)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10739.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10738.value)))+(x10739.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10740=IKsin(j4);
IkReal x10741=IKcos(j4);
IkReal x10742=(gconst4*r11);
IkReal x10743=(gconst5*r10);
IkReal x10744=(gconst5*r00);
IkReal x10745=(gconst5*r20);
IkReal x10746=((1.0)*x10741);
IkReal x10747=(gconst4*x10740);
IkReal x10748=((1.0)*x10740);
evalcond[0]=((((-1.0)*x10745*x10748))+(((-1.0)*r22*x10746))+((r21*x10747)));
evalcond[1]=((((-1.0)*r12*x10746))+(((-1.0)*x10743*x10748))+((x10740*x10742)));
evalcond[2]=((((-1.0)*r02*x10748))+(((-1.0)*gconst4*r01*x10746))+((x10741*x10744)));
evalcond[3]=((1.0)+(((-1.0)*r02*x10746))+(((-1.0)*x10744*x10748))+((r01*x10747)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x10748))+(((-1.0)*gconst4*r21*x10746))+((x10741*x10745)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r12*x10748))+((cj1*cj2))+(((-1.0)*x10742*x10746))+((x10741*x10743)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10749=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x10749.valid){
continue;
}
CheckValue<IkReal> x10750 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10750.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10749.value)))+(x10750.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10751=IKsin(j4);
IkReal x10752=IKcos(j4);
IkReal x10753=(gconst4*r11);
IkReal x10754=(gconst5*r10);
IkReal x10755=(gconst5*r00);
IkReal x10756=(gconst5*r20);
IkReal x10757=((1.0)*x10752);
IkReal x10758=(gconst4*x10751);
IkReal x10759=((1.0)*x10751);
evalcond[0]=((((-1.0)*x10756*x10759))+(((-1.0)*r22*x10757))+((r21*x10758)));
evalcond[1]=(((x10751*x10753))+(((-1.0)*r12*x10757))+(((-1.0)*x10754*x10759)));
evalcond[2]=((((-1.0)*r02*x10759))+((x10752*x10755))+(((-1.0)*gconst4*r01*x10757)));
evalcond[3]=((1.0)+(((-1.0)*r02*x10757))+(((-1.0)*x10755*x10759))+((r01*x10758)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x10752*x10756))+(((-1.0)*r22*x10759))+(((-1.0)*gconst4*r21*x10757)));
evalcond[5]=((((-1.0)*sj1*sj2))+((x10752*x10754))+(((-1.0)*x10753*x10757))+(((-1.0)*r12*x10759))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x10760=((-1.0)*r21);
IkReal x10761=((-1.0)*r20);
CheckValue<IkReal> x10763 = IKatan2WithCheck(IkReal(x10760),IkReal(x10761),IKFAST_ATAN2_MAGTHRESH);
if(!x10763.valid){
continue;
}
IkReal x10762=((1.0)*(x10763.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10762)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x10761);
rxp0_2=(py*r00);
rxp1_0=(py*x10760);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10762)));
IkReal gconst4=x10760;
IkReal gconst5=((1.0)*r20);
IkReal x10764=((1.0)*r01*r21);
IkReal x10765=((1.0)*r00*r20);
j4eval[0]=((((-1.0)*x10764))+(((-1.0)*x10765)));
j4eval[1]=((((-1.0)*cj3*x10765))+(((-1.0)*cj3*x10764)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10766=((-1.0)*r21);
IkReal x10767=((-1.0)*r20);
CheckValue<IkReal> x10769 = IKatan2WithCheck(IkReal(x10766),IkReal(x10767),IKFAST_ATAN2_MAGTHRESH);
if(!x10769.valid){
continue;
}
IkReal x10768=((1.0)*(x10769.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10768)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x10767);
rxp0_2=(py*r00);
rxp1_0=(py*x10766);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10768)));
IkReal gconst4=x10766;
IkReal gconst5=((1.0)*r20);
IkReal x10770=((1.0)*r01*r21);
IkReal x10771=((1.0)*r00*r20);
j4eval[0]=((((-1.0)*x10770))+(((-1.0)*x10771)));
j4eval[1]=(((sj3*x10771))+((sj3*x10770)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10772=((-1.0)*r21);
IkReal x10773=((-1.0)*r20);
CheckValue<IkReal> x10775 = IKatan2WithCheck(IkReal(x10772),IkReal(x10773),IKFAST_ATAN2_MAGTHRESH);
if(!x10775.valid){
continue;
}
IkReal x10774=((1.0)*(x10775.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10774)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x10773);
rxp0_2=(py*r00);
rxp1_0=(py*x10772);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10774)));
IkReal gconst4=x10772;
IkReal gconst5=((1.0)*r20);
IkReal x10776=((1.0)*cj3);
j4eval[0]=cj3;
j4eval[1]=r12;
j4eval[2]=((((-1.0)*r01*r21*x10776))+(((-1.0)*r00*r20*x10776)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10777=((1.0)*gconst5);
CheckValue<IkReal> x10778=IKPowWithIntegerCheck(cj3,-1);
if(!x10778.valid){
continue;
}
CheckValue<IkReal> x10779=IKPowWithIntegerCheck(r12,-1);
if(!x10779.valid){
continue;
}
CheckValue<IkReal> x10780=IKPowWithIntegerCheck(((((-1.0)*cj3*r00*x10777))+((cj3*gconst4*r01))),-1);
if(!x10780.valid){
continue;
}
if( IKabs(((x10778.value)*(x10779.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10780.value)*(((((-1.0)*r01*sj3*x10777))+(((-1.0)*gconst4*r00*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x10778.value)*(x10779.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x10780.value)*(((((-1.0)*r01*sj3*x10777))+(((-1.0)*gconst4*r00*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x10778.value)*(x10779.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x10780.value)*(((((-1.0)*r01*sj3*x10777))+(((-1.0)*gconst4*r00*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10781=IKsin(j4);
IkReal x10782=IKcos(j4);
IkReal x10783=(cj2*sj1);
IkReal x10784=(cj1*sj2);
IkReal x10785=(sj1*sj2);
IkReal x10786=(gconst5*sj3);
IkReal x10787=(gconst5*r00);
IkReal x10788=(cj3*gconst5);
IkReal x10789=(gconst4*sj3);
IkReal x10790=(cj3*gconst4);
IkReal x10791=(cj1*cj2);
IkReal x10792=((1.0)*x10781);
IkReal x10793=(gconst4*x10781);
IkReal x10794=((1.0)*x10782);
IkReal x10795=(x10783+x10784);
IkReal x10796=(x10782*x10786);
IkReal x10797=(x10782*x10790);
evalcond[0]=((-1.0)*r12*x10782);
evalcond[1]=(((r21*x10793))+(((-1.0)*gconst5*r20*x10792)));
evalcond[2]=(((cj3*r12*x10781))+(((-1.0)*x10785))+x10791);
evalcond[3]=(x10795+(((-1.0)*r12*sj3*x10792)));
evalcond[4]=((1.0)+(((-1.0)*x10787*x10792))+((r01*x10793)));
evalcond[5]=((((-1.0)*cj3*x10787*x10794))+((r01*x10786))+((r00*x10789))+((r01*x10797)));
evalcond[6]=(((r01*x10788))+((r00*x10790))+((r00*x10796))+(((-1.0)*r01*x10789*x10794)));
evalcond[7]=(((r21*x10786))+((r21*x10797))+((r20*x10789))+x10795+(((-1.0)*r20*x10788*x10794)));
evalcond[8]=(((r21*x10788))+((r20*x10790))+((r20*x10796))+(((-1.0)*r21*x10789*x10794))+(((-1.0)*x10791))+x10785);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10798=((1.0)*gconst4);
IkReal x10799=(gconst5*r00);
CheckValue<IkReal> x10800=IKPowWithIntegerCheck((((gconst4*r01))+(((-1.0)*x10799))),-1);
if(!x10800.valid){
continue;
}
CheckValue<IkReal> x10801=IKPowWithIntegerCheck(((((-1.0)*r01*sj3*x10798))+((sj3*x10799))),-1);
if(!x10801.valid){
continue;
}
if( IKabs(((-1.0)*(x10800.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10801.value)*(((((-1.0)*cj3*gconst5*r01))+(((-1.0)*cj3*r00*x10798)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x10800.value)))+IKsqr(((x10801.value)*(((((-1.0)*cj3*gconst5*r01))+(((-1.0)*cj3*r00*x10798))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x10800.value)), ((x10801.value)*(((((-1.0)*cj3*gconst5*r01))+(((-1.0)*cj3*r00*x10798))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10802=IKsin(j4);
IkReal x10803=IKcos(j4);
IkReal x10804=(cj2*sj1);
IkReal x10805=(cj1*sj2);
IkReal x10806=(sj1*sj2);
IkReal x10807=(gconst5*sj3);
IkReal x10808=(gconst5*r00);
IkReal x10809=(cj3*gconst5);
IkReal x10810=(gconst4*sj3);
IkReal x10811=(cj3*gconst4);
IkReal x10812=(cj1*cj2);
IkReal x10813=((1.0)*x10802);
IkReal x10814=(gconst4*x10802);
IkReal x10815=((1.0)*x10803);
IkReal x10816=(x10804+x10805);
IkReal x10817=(x10803*x10807);
IkReal x10818=(x10803*x10811);
evalcond[0]=((-1.0)*r12*x10803);
evalcond[1]=((((-1.0)*gconst5*r20*x10813))+((r21*x10814)));
evalcond[2]=(((cj3*r12*x10802))+(((-1.0)*x10806))+x10812);
evalcond[3]=((((-1.0)*r12*sj3*x10813))+x10816);
evalcond[4]=((1.0)+(((-1.0)*x10808*x10813))+((r01*x10814)));
evalcond[5]=(((r01*x10807))+((r01*x10818))+(((-1.0)*cj3*x10808*x10815))+((r00*x10810)));
evalcond[6]=(((r01*x10809))+((r00*x10811))+((r00*x10817))+(((-1.0)*r01*x10810*x10815)));
evalcond[7]=(((r20*x10810))+((r21*x10807))+(((-1.0)*r20*x10809*x10815))+((r21*x10818))+x10816);
evalcond[8]=((((-1.0)*x10812))+(((-1.0)*r21*x10810*x10815))+((r20*x10811))+((r20*x10817))+((r21*x10809))+x10806);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10819=((1.0)*gconst5);
IkReal x10820=(gconst4*r01);
CheckValue<IkReal> x10821=IKPowWithIntegerCheck(((((-1.0)*r00*x10819))+x10820),-1);
if(!x10821.valid){
continue;
}
CheckValue<IkReal> x10822=IKPowWithIntegerCheck((((cj3*x10820))+(((-1.0)*cj3*r00*x10819))),-1);
if(!x10822.valid){
continue;
}
if( IKabs(((-1.0)*(x10821.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10822.value)*(((((-1.0)*r01*sj3*x10819))+(((-1.0)*gconst4*r00*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x10821.value)))+IKsqr(((x10822.value)*(((((-1.0)*r01*sj3*x10819))+(((-1.0)*gconst4*r00*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x10821.value)), ((x10822.value)*(((((-1.0)*r01*sj3*x10819))+(((-1.0)*gconst4*r00*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10823=IKsin(j4);
IkReal x10824=IKcos(j4);
IkReal x10825=(cj2*sj1);
IkReal x10826=(cj1*sj2);
IkReal x10827=(sj1*sj2);
IkReal x10828=(gconst5*sj3);
IkReal x10829=(gconst5*r00);
IkReal x10830=(cj3*gconst5);
IkReal x10831=(gconst4*sj3);
IkReal x10832=(cj3*gconst4);
IkReal x10833=(cj1*cj2);
IkReal x10834=((1.0)*x10823);
IkReal x10835=(gconst4*x10823);
IkReal x10836=((1.0)*x10824);
IkReal x10837=(x10825+x10826);
IkReal x10838=(x10824*x10828);
IkReal x10839=(x10824*x10832);
evalcond[0]=((-1.0)*r12*x10824);
evalcond[1]=((((-1.0)*gconst5*r20*x10834))+((r21*x10835)));
evalcond[2]=((((-1.0)*x10827))+((cj3*r12*x10823))+x10833);
evalcond[3]=((((-1.0)*r12*sj3*x10834))+x10837);
evalcond[4]=((1.0)+(((-1.0)*x10829*x10834))+((r01*x10835)));
evalcond[5]=(((r01*x10839))+(((-1.0)*cj3*x10829*x10836))+((r00*x10831))+((r01*x10828)));
evalcond[6]=((((-1.0)*r01*x10831*x10836))+((r01*x10830))+((r00*x10838))+((r00*x10832)));
evalcond[7]=(((r21*x10828))+(((-1.0)*r20*x10830*x10836))+((r20*x10831))+((r21*x10839))+x10837);
evalcond[8]=((((-1.0)*x10833))+((r20*x10838))+((r20*x10832))+(((-1.0)*r21*x10831*x10836))+((r21*x10830))+x10827);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10840=gconst4*gconst4;
IkReal x10841=gconst5*gconst5;
IkReal x10842=(r01*r20);
IkReal x10843=(gconst4*sj3);
IkReal x10844=(r01*r21);
IkReal x10845=((1.0)*cj3);
IkReal x10846=(r00*r21);
IkReal x10847=(r00*r20);
IkReal x10848=(cj3*gconst4*gconst5);
IkReal x10849=((1.0)*x10841);
CheckValue<IkReal> x10850=IKPowWithIntegerCheck(IKsign(((((-1.0)*x10841*x10845*x10847))+((x10842*x10848))+(((-1.0)*x10840*x10844*x10845))+(((-1.0)*r02*r22*x10845))+((x10846*x10848)))),-1);
if(!x10850.valid){
continue;
}
CheckValue<IkReal> x10851 = IKatan2WithCheck(IkReal((((r00*r22*x10843))+((gconst5*r01*r22*sj3)))),IkReal((((gconst5*x10843*x10844))+(((-1.0)*gconst5*x10843*x10847))+((sj3*x10840*x10846))+(((-1.0)*sj3*x10842*x10849)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10851.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10850.value)))+(x10851.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10852=IKsin(j4);
IkReal x10853=IKcos(j4);
IkReal x10854=(cj2*sj1);
IkReal x10855=(cj1*sj2);
IkReal x10856=(gconst5*sj3);
IkReal x10857=(gconst4*r11);
IkReal x10858=(sj1*sj2);
IkReal x10859=(gconst5*r10);
IkReal x10860=(cj1*cj2);
IkReal x10861=(gconst4*r01);
IkReal x10862=(gconst5*r00);
IkReal x10863=(gconst4*sj3);
IkReal x10864=(cj3*gconst5);
IkReal x10865=(cj3*gconst4);
IkReal x10866=(gconst4*r21);
IkReal x10867=((1.0)*x10853);
IkReal x10868=((1.0)*x10852);
IkReal x10869=(cj3*x10852);
IkReal x10870=(cj3*x10853);
IkReal x10871=(x10855+x10854);
evalcond[0]=((((-1.0)*r22*x10867))+(((-1.0)*gconst5*r20*x10868))+((x10852*x10866)));
evalcond[1]=((((-1.0)*r12*x10867))+(((-1.0)*x10859*x10868))+((x10852*x10857)));
evalcond[2]=((1.0)+(((-1.0)*x10862*x10868))+(((-1.0)*r02*x10867))+((x10852*x10861)));
evalcond[3]=((((-1.0)*cj3*x10862*x10867))+((r01*x10856))+((r00*x10863))+((x10861*x10870))+((r02*x10869)));
evalcond[4]=(((r00*x10853*x10856))+(((-1.0)*sj3*x10861*x10867))+((r00*x10865))+((r01*x10864))+(((-1.0)*r02*sj3*x10868)));
evalcond[5]=(((r21*x10856))+((r20*x10863))+(((-1.0)*r20*x10864*x10867))+((r22*x10869))+((r21*x10853*x10865))+x10871);
evalcond[6]=(((r11*x10856))+(((-1.0)*cj3*x10859*x10867))+((r12*x10869))+((r10*x10863))+((x10857*x10870))+(((-1.0)*x10858))+x10860);
evalcond[7]=(((r11*x10864))+(((-1.0)*sj3*x10857*x10867))+((r10*x10865))+(((-1.0)*r12*sj3*x10868))+((r10*x10853*x10856))+x10871);
evalcond[8]=(((r20*x10853*x10856))+(((-1.0)*r21*x10863*x10867))+(((-1.0)*r22*sj3*x10868))+((r21*x10864))+((r20*x10865))+(((-1.0)*x10860))+x10858);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10872=((1.0)*gconst5);
CheckValue<IkReal> x10873 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x10872))+((gconst4*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10873.valid){
continue;
}
CheckValue<IkReal> x10874=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10872))+(((-1.0)*gconst4*r20)))),-1);
if(!x10874.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10873.value)+(((1.5707963267949)*(x10874.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10875=IKsin(j4);
IkReal x10876=IKcos(j4);
IkReal x10877=(cj2*sj1);
IkReal x10878=(cj1*sj2);
IkReal x10879=(gconst5*sj3);
IkReal x10880=(gconst4*r11);
IkReal x10881=(sj1*sj2);
IkReal x10882=(gconst5*r10);
IkReal x10883=(cj1*cj2);
IkReal x10884=(gconst4*r01);
IkReal x10885=(gconst5*r00);
IkReal x10886=(gconst4*sj3);
IkReal x10887=(cj3*gconst5);
IkReal x10888=(cj3*gconst4);
IkReal x10889=(gconst4*r21);
IkReal x10890=((1.0)*x10876);
IkReal x10891=((1.0)*x10875);
IkReal x10892=(cj3*x10875);
IkReal x10893=(cj3*x10876);
IkReal x10894=(x10878+x10877);
evalcond[0]=((((-1.0)*gconst5*r20*x10891))+((x10875*x10889))+(((-1.0)*r22*x10890)));
evalcond[1]=((((-1.0)*x10882*x10891))+((x10875*x10880))+(((-1.0)*r12*x10890)));
evalcond[2]=((1.0)+(((-1.0)*r02*x10890))+(((-1.0)*x10885*x10891))+((x10875*x10884)));
evalcond[3]=(((r00*x10886))+(((-1.0)*cj3*x10885*x10890))+((r01*x10879))+((r02*x10892))+((x10884*x10893)));
evalcond[4]=((((-1.0)*r02*sj3*x10891))+((r00*x10888))+((r00*x10876*x10879))+(((-1.0)*sj3*x10884*x10890))+((r01*x10887)));
evalcond[5]=(((r21*x10879))+((r22*x10892))+(((-1.0)*r20*x10887*x10890))+((r21*x10876*x10888))+((r20*x10886))+x10894);
evalcond[6]=(((x10880*x10893))+(((-1.0)*cj3*x10882*x10890))+(((-1.0)*x10881))+((r11*x10879))+((r12*x10892))+((r10*x10886))+x10883);
evalcond[7]=(((r10*x10876*x10879))+(((-1.0)*sj3*x10880*x10890))+((r11*x10887))+(((-1.0)*r12*sj3*x10891))+((r10*x10888))+x10894);
evalcond[8]=((((-1.0)*x10883))+((r20*x10876*x10879))+((r21*x10887))+(((-1.0)*r22*sj3*x10891))+((r20*x10888))+(((-1.0)*r21*x10886*x10890))+x10881);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10895=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x10895.valid){
continue;
}
CheckValue<IkReal> x10896 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10896.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10895.value)))+(x10896.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10897=IKsin(j4);
IkReal x10898=IKcos(j4);
IkReal x10899=(cj2*sj1);
IkReal x10900=(cj1*sj2);
IkReal x10901=(gconst5*sj3);
IkReal x10902=(gconst4*r11);
IkReal x10903=(sj1*sj2);
IkReal x10904=(gconst5*r10);
IkReal x10905=(cj1*cj2);
IkReal x10906=(gconst4*r01);
IkReal x10907=(gconst5*r00);
IkReal x10908=(gconst4*sj3);
IkReal x10909=(cj3*gconst5);
IkReal x10910=(cj3*gconst4);
IkReal x10911=(gconst4*r21);
IkReal x10912=((1.0)*x10898);
IkReal x10913=((1.0)*x10897);
IkReal x10914=(cj3*x10897);
IkReal x10915=(cj3*x10898);
IkReal x10916=(x10900+x10899);
evalcond[0]=((((-1.0)*r22*x10912))+((x10897*x10911))+(((-1.0)*gconst5*r20*x10913)));
evalcond[1]=((((-1.0)*r12*x10912))+((x10897*x10902))+(((-1.0)*x10904*x10913)));
evalcond[2]=((1.0)+(((-1.0)*r02*x10912))+(((-1.0)*x10907*x10913))+((x10897*x10906)));
evalcond[3]=(((r01*x10901))+((r02*x10914))+((r00*x10908))+(((-1.0)*cj3*x10907*x10912))+((x10906*x10915)));
evalcond[4]=((((-1.0)*sj3*x10906*x10912))+(((-1.0)*r02*sj3*x10913))+((r01*x10909))+((r00*x10910))+((r00*x10898*x10901)));
evalcond[5]=(((r21*x10898*x10910))+((r20*x10908))+((r22*x10914))+(((-1.0)*r20*x10909*x10912))+((r21*x10901))+x10916);
evalcond[6]=((((-1.0)*cj3*x10904*x10912))+((r12*x10914))+((r10*x10908))+(((-1.0)*x10903))+x10905+((r11*x10901))+((x10902*x10915)));
evalcond[7]=((((-1.0)*sj3*x10902*x10912))+(((-1.0)*r12*sj3*x10913))+x10916+((r11*x10909))+((r10*x10910))+((r10*x10898*x10901)));
evalcond[8]=((((-1.0)*r21*x10908*x10912))+((r20*x10898*x10901))+((r21*x10909))+(((-1.0)*x10905))+x10903+(((-1.0)*r22*sj3*x10913))+((r20*x10910)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x10917=((-1.0)*r21);
IkReal x10918=((-1.0)*px);
CheckValue<IkReal> x10920 = IKatan2WithCheck(IkReal(x10917),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10920.valid){
continue;
}
IkReal x10919=((1.0)*(x10920.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10919)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10918);
rxp1_1=(px*r21);
rxp1_2=(r11*x10918);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10919)));
IkReal gconst4=x10917;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10921=((-1.0)*r21);
IkReal x10922=((-1.0)*px);
CheckValue<IkReal> x10924 = IKatan2WithCheck(IkReal(x10921),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10924.valid){
continue;
}
IkReal x10923=((1.0)*(x10924.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10923)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10922);
rxp1_1=(px*r21);
rxp1_2=(r11*x10922);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10923)));
IkReal gconst4=x10921;
IkReal gconst5=((1.0)*r20);
IkReal x10925=((1.0)*cj3);
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
j4eval[1]=((((-1.0)*x10925))+((x10925*(r10*r10)))+(((-1.0)*x10925*(r21*r21))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10926=((-1.0)*r21);
IkReal x10927=((-1.0)*px);
CheckValue<IkReal> x10929 = IKatan2WithCheck(IkReal(x10926),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10929.valid){
continue;
}
IkReal x10928=((1.0)*(x10929.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10928)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10927);
rxp1_1=(px*r21);
rxp1_2=(r11*x10927);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10928)));
IkReal gconst4=x10926;
IkReal gconst5=((1.0)*r20);
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10930=((-1.0)*r21);
IkReal x10931=((-1.0)*px);
CheckValue<IkReal> x10933 = IKatan2WithCheck(IkReal(x10930),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10933.valid){
continue;
}
IkReal x10932=((1.0)*(x10933.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10932)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10931);
rxp1_1=(px*r21);
rxp1_2=(r11*x10931);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10932)));
IkReal gconst4=x10930;
IkReal gconst5=((1.0)*r20);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10934=((-1.0)*r21);
IkReal x10935=((-1.0)*px);
CheckValue<IkReal> x10937 = IKatan2WithCheck(IkReal(x10934),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10937.valid){
continue;
}
IkReal x10936=((1.0)*(x10937.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10936)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10935);
rxp1_1=(px*r21);
rxp1_2=(r11*x10935);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10936)));
IkReal gconst4=x10934;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((1.0)+(((1.0)*(r21*r21)))+(((-1.0)*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10938=((-1.0)*r21);
IkReal x10939=((-1.0)*px);
CheckValue<IkReal> x10941 = IKatan2WithCheck(IkReal(x10938),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10941.valid){
continue;
}
IkReal x10940=((1.0)*(x10941.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10940)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10939);
rxp1_1=(px*r21);
rxp1_2=(r11*x10939);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10940)));
IkReal gconst4=x10938;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((((1.0)*r10*r20))+(((1.0)*r11*r21)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x10944=IKPowWithIntegerCheck((((gconst5*r10))+(((-1.0)*gconst4*r11))),-1);
if(!x10944.valid){
continue;
}
IkReal x10942=x10944.value;
IkReal x10943=(sj0*x10942);
cj4array[0]=(((cj1*sj2*x10943))+((cj2*sj1*x10943)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x10945=IKsin(j4);
IkReal x10946=IKcos(j4);
IkReal x10947=(gconst5*r20);
IkReal x10948=(gconst4*x10945);
IkReal x10949=((1.0)*x10946);
IkReal x10950=((1.0)*x10945);
evalcond[0]=((-1.0)*r02*x10945);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x10949)));
evalcond[2]=((((-1.0)*x10947*x10950))+((r21*x10948)));
evalcond[3]=(((r11*x10948))+(((-1.0)*gconst5*r10*x10950)));
evalcond[4]=((((-1.0)*gconst4*r21*x10949))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x10946*x10947)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x10952=IKPowWithIntegerCheck((((gconst5*r20))+(((-1.0)*gconst4*r21))),-1);
if(!x10952.valid){
continue;
}
IkReal x10951=x10952.value;
cj4array[0]=(((cj1*cj2*x10951))+(((-1.0)*sj1*sj2*x10951)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x10953=IKsin(j4);
IkReal x10954=IKcos(j4);
IkReal x10955=(gconst5*r10);
IkReal x10956=((1.0)*sj0);
IkReal x10957=(gconst4*x10953);
IkReal x10958=((1.0)*x10954);
IkReal x10959=((1.0)*x10953);
evalcond[0]=((-1.0)*r02*x10953);
evalcond[1]=((((-1.0)*x10956))+(((-1.0)*r02*x10958)));
evalcond[2]=(((r21*x10957))+(((-1.0)*gconst5*r20*x10959)));
evalcond[3]=((((-1.0)*x10955*x10959))+((r11*x10957)));
evalcond[4]=((((-1.0)*gconst4*r11*x10958))+(((-1.0)*cj1*sj2*x10956))+((x10954*x10955))+(((-1.0)*cj2*sj1*x10956)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x10960=IKPowWithIntegerCheck(r02,-1);
if(!x10960.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x10960.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x10961=IKsin(j4);
IkReal x10962=IKcos(j4);
IkReal x10963=((1.0)*sj0);
IkReal x10964=(gconst5*x10962);
IkReal x10965=(gconst4*x10961);
IkReal x10966=((1.0)*gconst4*x10962);
IkReal x10967=((1.0)*gconst5*x10961);
evalcond[0]=((-1.0)*r02*x10961);
evalcond[1]=((((-1.0)*r20*x10967))+((r21*x10965)));
evalcond[2]=(((r11*x10965))+(((-1.0)*r10*x10967)));
evalcond[3]=((((-1.0)*r21*x10966))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x10964)));
evalcond[4]=((((-1.0)*cj1*sj2*x10963))+((r10*x10964))+(((-1.0)*r11*x10966))+(((-1.0)*cj2*sj1*x10963)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10968=((-1.0)*r21);
IkReal x10969=((-1.0)*px);
CheckValue<IkReal> x10971 = IKatan2WithCheck(IkReal(x10968),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10971.valid){
continue;
}
IkReal x10970=((1.0)*(x10971.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10970)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10969);
rxp1_1=(px*r21);
rxp1_2=(r11*x10969);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10970)));
IkReal gconst4=x10968;
IkReal gconst5=((1.0)*r20);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10972=((-1.0)*r21);
IkReal x10973=((-1.0)*px);
CheckValue<IkReal> x10975 = IKatan2WithCheck(IkReal(x10972),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10975.valid){
continue;
}
IkReal x10974=((1.0)*(x10975.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10974)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10973);
rxp1_1=(px*r21);
rxp1_2=(r11*x10973);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10974)));
IkReal gconst4=x10972;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((-1.0)+(((-1.0)*(r21*r21)))+(((1.0)*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10976=((-1.0)*r21);
IkReal x10977=((-1.0)*px);
CheckValue<IkReal> x10979 = IKatan2WithCheck(IkReal(x10976),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10979.valid){
continue;
}
IkReal x10978=((1.0)*(x10979.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10978)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10977);
rxp1_1=(px*r21);
rxp1_2=(r11*x10977);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10978)));
IkReal gconst4=x10976;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x10982=IKPowWithIntegerCheck((((gconst4*r11))+(((-1.0)*gconst5*r10))),-1);
if(!x10982.valid){
continue;
}
IkReal x10980=x10982.value;
IkReal x10981=(sj0*x10980);
cj4array[0]=(((cj1*sj2*x10981))+((cj2*sj1*x10981)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x10983=IKsin(j4);
IkReal x10984=IKcos(j4);
IkReal x10985=(gconst5*r20);
IkReal x10986=(gconst4*x10983);
IkReal x10987=((1.0)*x10984);
IkReal x10988=((1.0)*x10983);
evalcond[0]=(r02*x10983);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x10987)));
evalcond[2]=(((r21*x10986))+(((-1.0)*x10985*x10988)));
evalcond[3]=(((r11*x10986))+(((-1.0)*gconst5*r10*x10988)));
evalcond[4]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x10985*x10987))+((gconst4*r21*x10984)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x10990=IKPowWithIntegerCheck((((gconst4*r21))+(((-1.0)*gconst5*r20))),-1);
if(!x10990.valid){
continue;
}
IkReal x10989=x10990.value;
cj4array[0]=((((-1.0)*sj1*sj2*x10989))+((cj1*cj2*x10989)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x10991=IKsin(j4);
IkReal x10992=IKcos(j4);
IkReal x10993=(gconst4*r11);
IkReal x10994=((1.0)*sj0);
IkReal x10995=(gconst5*r10);
IkReal x10996=((1.0)*x10992);
IkReal x10997=((1.0)*x10991);
evalcond[0]=(r02*x10991);
evalcond[1]=((((-1.0)*r02*x10996))+(((-1.0)*x10994)));
evalcond[2]=(((gconst4*r21*x10991))+(((-1.0)*gconst5*r20*x10997)));
evalcond[3]=((((-1.0)*x10995*x10997))+((x10991*x10993)));
evalcond[4]=((((-1.0)*x10995*x10996))+((x10992*x10993))+(((-1.0)*cj2*sj1*x10994))+(((-1.0)*cj1*sj2*x10994)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x10998=IKPowWithIntegerCheck(r02,-1);
if(!x10998.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x10998.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x10999=IKsin(j4);
IkReal x11000=IKcos(j4);
IkReal x11001=(gconst4*r11);
IkReal x11002=((1.0)*cj1);
IkReal x11003=(gconst4*r21);
IkReal x11004=((1.0)*gconst5*x11000);
IkReal x11005=((1.0)*gconst5*x10999);
evalcond[0]=(r02*x10999);
evalcond[1]=((((-1.0)*r20*x11005))+((x10999*x11003)));
evalcond[2]=((((-1.0)*r10*x11005))+((x10999*x11001)));
evalcond[3]=(((sj1*sj2))+((x11000*x11003))+(((-1.0)*r20*x11004))+(((-1.0)*cj2*x11002)));
evalcond[4]=((((-1.0)*r10*x11004))+(((-1.0)*cj2*sj0*sj1))+((x11000*x11001))+(((-1.0)*sj0*sj2*x11002)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11007=IKPowWithIntegerCheck(r02,-1);
if(!x11007.valid){
continue;
}
IkReal x11006=x11007.value;
CheckValue<IkReal> x11008=IKPowWithIntegerCheck(cj3,-1);
if(!x11008.valid){
continue;
}
if( IKabs((x11006*(x11008.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x11006)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x11006*(x11008.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x11006))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x11006*(x11008.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x11006));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11009=IKsin(j4);
IkReal x11010=IKcos(j4);
IkReal x11011=(gconst5*sj3);
IkReal x11012=(gconst4*r11);
IkReal x11013=(sj1*sj2);
IkReal x11014=((1.0)*gconst5);
IkReal x11015=(cj2*sj1);
IkReal x11016=((1.0)*sj0);
IkReal x11017=((1.0)*cj0);
IkReal x11018=(gconst4*r21);
IkReal x11019=(cj1*sj2);
IkReal x11020=(cj3*gconst4);
IkReal x11021=(gconst4*sj3);
IkReal x11022=(cj3*gconst5);
IkReal x11023=(r20*x11010);
IkReal x11024=((1.0)*cj1*cj2);
IkReal x11025=(r10*x11010);
IkReal x11026=(cj3*x11010);
IkReal x11027=(r02*x11009);
IkReal x11028=((1.0)*sj3*x11010);
evalcond[0]=((((-1.0)*x11016))+(((-1.0)*r02*x11010)));
evalcond[1]=((((-1.0)*r20*x11009*x11014))+((x11009*x11018)));
evalcond[2]=(cj0+(((-1.0)*r10*x11009*x11014))+((x11009*x11012)));
evalcond[3]=(((cj3*x11027))+(((-1.0)*cj1*cj2*x11017))+((cj0*x11013)));
evalcond[4]=((((-1.0)*x11015*x11017))+(((-1.0)*sj3*x11027))+(((-1.0)*x11017*x11019)));
evalcond[5]=(((r20*x11021))+x11019+x11015+((x11018*x11026))+((r21*x11011))+(((-1.0)*cj3*x11014*x11023)));
evalcond[6]=(((r20*x11020))+((r21*x11022))+(((-1.0)*x11018*x11028))+x11013+((x11011*x11023))+(((-1.0)*x11024)));
evalcond[7]=(((sj0*x11013))+((x11012*x11026))+((r10*x11021))+(((-1.0)*cj1*cj2*x11016))+((r11*x11011))+(((-1.0)*cj3*x11014*x11025)));
evalcond[8]=((((-1.0)*x11012*x11028))+(((-1.0)*x11015*x11016))+((r10*x11020))+((x11011*x11025))+((r11*x11022))+(((-1.0)*x11016*x11019)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11029=((1.0)*gconst5);
CheckValue<IkReal> x11030=IKPowWithIntegerCheck((((gconst4*r11))+(((-1.0)*r10*x11029))),-1);
if(!x11030.valid){
continue;
}
CheckValue<IkReal> x11031=IKPowWithIntegerCheck(((((-1.0)*cj3*r20*x11029))+((cj3*gconst4*r21))),-1);
if(!x11031.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x11030.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11031.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*r21*sj3*x11029))+(((-1.0)*gconst4*r20*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x11030.value)))+IKsqr(((x11031.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*r21*sj3*x11029))+(((-1.0)*gconst4*r20*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x11030.value)), ((x11031.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*r21*sj3*x11029))+(((-1.0)*gconst4*r20*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11032=IKsin(j4);
IkReal x11033=IKcos(j4);
IkReal x11034=(gconst5*sj3);
IkReal x11035=(gconst4*r11);
IkReal x11036=(sj1*sj2);
IkReal x11037=((1.0)*gconst5);
IkReal x11038=(cj2*sj1);
IkReal x11039=((1.0)*sj0);
IkReal x11040=((1.0)*cj0);
IkReal x11041=(gconst4*r21);
IkReal x11042=(cj1*sj2);
IkReal x11043=(cj3*gconst4);
IkReal x11044=(gconst4*sj3);
IkReal x11045=(cj3*gconst5);
IkReal x11046=(r20*x11033);
IkReal x11047=((1.0)*cj1*cj2);
IkReal x11048=(r10*x11033);
IkReal x11049=(cj3*x11033);
IkReal x11050=(r02*x11032);
IkReal x11051=((1.0)*sj3*x11033);
evalcond[0]=((((-1.0)*r02*x11033))+(((-1.0)*x11039)));
evalcond[1]=(((x11032*x11041))+(((-1.0)*r20*x11032*x11037)));
evalcond[2]=(cj0+(((-1.0)*r10*x11032*x11037))+((x11032*x11035)));
evalcond[3]=(((cj3*x11050))+(((-1.0)*cj1*cj2*x11040))+((cj0*x11036)));
evalcond[4]=((((-1.0)*sj3*x11050))+(((-1.0)*x11038*x11040))+(((-1.0)*x11040*x11042)));
evalcond[5]=(((r20*x11044))+((r21*x11034))+((x11041*x11049))+x11042+x11038+(((-1.0)*cj3*x11037*x11046)));
evalcond[6]=((((-1.0)*x11047))+((r20*x11043))+((x11034*x11046))+x11036+(((-1.0)*x11041*x11051))+((r21*x11045)));
evalcond[7]=(((r10*x11044))+(((-1.0)*cj1*cj2*x11039))+((x11035*x11049))+((sj0*x11036))+(((-1.0)*cj3*x11037*x11048))+((r11*x11034)));
evalcond[8]=(((r11*x11045))+((r10*x11043))+((x11034*x11048))+(((-1.0)*x11035*x11051))+(((-1.0)*x11038*x11039))+(((-1.0)*x11039*x11042)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11052=IKPowWithIntegerCheck((((gconst4*r11))+(((-1.0)*gconst5*r10))),-1);
if(!x11052.valid){
continue;
}
CheckValue<IkReal> x11053=IKPowWithIntegerCheck(r02,-1);
if(!x11053.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x11052.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*(x11053.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x11052.value)))+IKsqr(((-1.0)*sj0*(x11053.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x11052.value)), ((-1.0)*sj0*(x11053.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11054=IKsin(j4);
IkReal x11055=IKcos(j4);
IkReal x11056=(gconst5*sj3);
IkReal x11057=(gconst4*r11);
IkReal x11058=(sj1*sj2);
IkReal x11059=((1.0)*gconst5);
IkReal x11060=(cj2*sj1);
IkReal x11061=((1.0)*sj0);
IkReal x11062=((1.0)*cj0);
IkReal x11063=(gconst4*r21);
IkReal x11064=(cj1*sj2);
IkReal x11065=(cj3*gconst4);
IkReal x11066=(gconst4*sj3);
IkReal x11067=(cj3*gconst5);
IkReal x11068=(r20*x11055);
IkReal x11069=((1.0)*cj1*cj2);
IkReal x11070=(r10*x11055);
IkReal x11071=(cj3*x11055);
IkReal x11072=(r02*x11054);
IkReal x11073=((1.0)*sj3*x11055);
evalcond[0]=((((-1.0)*x11061))+(((-1.0)*r02*x11055)));
evalcond[1]=(((x11054*x11063))+(((-1.0)*r20*x11054*x11059)));
evalcond[2]=((((-1.0)*r10*x11054*x11059))+cj0+((x11054*x11057)));
evalcond[3]=((((-1.0)*cj1*cj2*x11062))+((cj0*x11058))+((cj3*x11072)));
evalcond[4]=((((-1.0)*sj3*x11072))+(((-1.0)*x11060*x11062))+(((-1.0)*x11062*x11064)));
evalcond[5]=(((r20*x11066))+x11060+x11064+((x11063*x11071))+(((-1.0)*cj3*x11059*x11068))+((r21*x11056)));
evalcond[6]=((((-1.0)*x11069))+((r20*x11065))+(((-1.0)*x11063*x11073))+x11058+((r21*x11067))+((x11056*x11068)));
evalcond[7]=(((sj0*x11058))+((r10*x11066))+(((-1.0)*cj1*cj2*x11061))+((x11057*x11071))+(((-1.0)*cj3*x11059*x11070))+((r11*x11056)));
evalcond[8]=(((x11056*x11070))+(((-1.0)*x11057*x11073))+(((-1.0)*x11060*x11061))+((r10*x11065))+(((-1.0)*x11061*x11064))+((r11*x11067)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11074=((1.0)*sj0);
IkReal x11075=((1.0)*gconst4);
CheckValue<IkReal> x11076=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x11075))+(((-1.0)*gconst5*r21)))),-1);
if(!x11076.valid){
continue;
}
CheckValue<IkReal> x11077 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x11074)))),IkReal(((((-1.0)*cj0*r01*x11075))+(((-1.0)*gconst4*r11*x11074))+((cj0*gconst5*r00))+((gconst5*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11077.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11076.value)))+(x11077.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11078=IKsin(j4);
IkReal x11079=IKcos(j4);
IkReal x11080=(gconst5*sj3);
IkReal x11081=(cj3*gconst5);
IkReal x11082=(gconst4*r11);
IkReal x11083=(sj1*sj2);
IkReal x11084=(cj2*sj1);
IkReal x11085=((1.0)*sj0);
IkReal x11086=(gconst4*r01);
IkReal x11087=(gconst4*r21);
IkReal x11088=((1.0)*cj0);
IkReal x11089=(cj1*sj2);
IkReal x11090=(gconst4*sj3);
IkReal x11091=(cj3*gconst4);
IkReal x11092=((1.0)*x11079);
IkReal x11093=((1.0)*cj1*cj2);
IkReal x11094=(cj3*x11078);
IkReal x11095=(cj3*x11079);
IkReal x11096=((1.0)*gconst5*x11078);
IkReal x11097=((1.0)*sj3*x11078);
evalcond[0]=((((-1.0)*r22*x11092))+(((-1.0)*r20*x11096))+((x11078*x11087)));
evalcond[1]=((((-1.0)*r12*x11092))+cj0+(((-1.0)*r10*x11096))+((x11078*x11082)));
evalcond[2]=((((-1.0)*r00*x11096))+(((-1.0)*r02*x11092))+(((-1.0)*x11085))+((x11078*x11086)));
evalcond[3]=(((r21*x11080))+((r20*x11090))+x11089+x11084+(((-1.0)*r20*x11081*x11092))+((x11087*x11095))+((r22*x11094)));
evalcond[4]=((((-1.0)*r22*x11097))+((r21*x11081))+(((-1.0)*x11093))+((r20*x11091))+x11083+((r20*x11079*x11080))+(((-1.0)*sj3*x11087*x11092)));
evalcond[5]=(((r02*x11094))+((r01*x11080))+(((-1.0)*cj1*cj2*x11088))+((r00*x11090))+(((-1.0)*r00*x11081*x11092))+((cj0*x11083))+((x11086*x11095)));
evalcond[6]=((((-1.0)*r10*x11081*x11092))+((r12*x11094))+(((-1.0)*cj1*cj2*x11085))+((x11082*x11095))+((r11*x11080))+((r10*x11090))+((sj0*x11083)));
evalcond[7]=((((-1.0)*sj3*x11086*x11092))+((r01*x11081))+((r00*x11091))+(((-1.0)*r02*x11097))+((r00*x11079*x11080))+(((-1.0)*x11084*x11088))+(((-1.0)*x11088*x11089)));
evalcond[8]=((((-1.0)*r12*x11097))+((r10*x11079*x11080))+((r11*x11081))+((r10*x11091))+(((-1.0)*x11084*x11085))+(((-1.0)*sj3*x11082*x11092))+(((-1.0)*x11085*x11089)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11098=((1.0)*gconst5);
CheckValue<IkReal> x11099 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x11098))+((gconst4*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11099.valid){
continue;
}
CheckValue<IkReal> x11100=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x11098))+(((-1.0)*gconst4*r10)))),-1);
if(!x11100.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11099.value)+(((1.5707963267949)*(x11100.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11101=IKsin(j4);
IkReal x11102=IKcos(j4);
IkReal x11103=(gconst5*sj3);
IkReal x11104=(cj3*gconst5);
IkReal x11105=(gconst4*r11);
IkReal x11106=(sj1*sj2);
IkReal x11107=(cj2*sj1);
IkReal x11108=((1.0)*sj0);
IkReal x11109=(gconst4*r01);
IkReal x11110=(gconst4*r21);
IkReal x11111=((1.0)*cj0);
IkReal x11112=(cj1*sj2);
IkReal x11113=(gconst4*sj3);
IkReal x11114=(cj3*gconst4);
IkReal x11115=((1.0)*x11102);
IkReal x11116=((1.0)*cj1*cj2);
IkReal x11117=(cj3*x11101);
IkReal x11118=(cj3*x11102);
IkReal x11119=((1.0)*gconst5*x11101);
IkReal x11120=((1.0)*sj3*x11101);
evalcond[0]=(((x11101*x11110))+(((-1.0)*r22*x11115))+(((-1.0)*r20*x11119)));
evalcond[1]=((((-1.0)*r10*x11119))+cj0+((x11101*x11105))+(((-1.0)*r12*x11115)));
evalcond[2]=(((x11101*x11109))+(((-1.0)*r02*x11115))+(((-1.0)*r00*x11119))+(((-1.0)*x11108)));
evalcond[3]=(x11112+x11107+((r21*x11103))+((x11110*x11118))+((r20*x11113))+(((-1.0)*r20*x11104*x11115))+((r22*x11117)));
evalcond[4]=(((r20*x11102*x11103))+x11106+((r21*x11104))+(((-1.0)*sj3*x11110*x11115))+(((-1.0)*r22*x11120))+((r20*x11114))+(((-1.0)*x11116)));
evalcond[5]=(((r02*x11117))+(((-1.0)*cj1*cj2*x11111))+((cj0*x11106))+(((-1.0)*r00*x11104*x11115))+((x11109*x11118))+((r00*x11113))+((r01*x11103)));
evalcond[6]=(((x11105*x11118))+(((-1.0)*cj1*cj2*x11108))+((sj0*x11106))+((r10*x11113))+((r11*x11103))+(((-1.0)*r10*x11104*x11115))+((r12*x11117)));
evalcond[7]=((((-1.0)*sj3*x11109*x11115))+(((-1.0)*x11111*x11112))+((r00*x11102*x11103))+(((-1.0)*x11107*x11111))+(((-1.0)*r02*x11120))+((r00*x11114))+((r01*x11104)));
evalcond[8]=((((-1.0)*r12*x11120))+(((-1.0)*x11108*x11112))+(((-1.0)*sj3*x11105*x11115))+((r10*x11114))+(((-1.0)*x11107*x11108))+((r10*x11102*x11103))+((r11*x11104)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11121=((1.0)*gconst5);
CheckValue<IkReal> x11122=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x11121)))),-1);
if(!x11122.valid){
continue;
}
CheckValue<IkReal> x11123 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x11121))+((cj0*gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11123.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11122.value)))+(x11123.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11124=IKsin(j4);
IkReal x11125=IKcos(j4);
IkReal x11126=(gconst5*sj3);
IkReal x11127=(cj3*gconst5);
IkReal x11128=(gconst4*r11);
IkReal x11129=(sj1*sj2);
IkReal x11130=(cj2*sj1);
IkReal x11131=((1.0)*sj0);
IkReal x11132=(gconst4*r01);
IkReal x11133=(gconst4*r21);
IkReal x11134=((1.0)*cj0);
IkReal x11135=(cj1*sj2);
IkReal x11136=(gconst4*sj3);
IkReal x11137=(cj3*gconst4);
IkReal x11138=((1.0)*x11125);
IkReal x11139=((1.0)*cj1*cj2);
IkReal x11140=(cj3*x11124);
IkReal x11141=(cj3*x11125);
IkReal x11142=((1.0)*gconst5*x11124);
IkReal x11143=((1.0)*sj3*x11124);
evalcond[0]=(((x11124*x11133))+(((-1.0)*r20*x11142))+(((-1.0)*r22*x11138)));
evalcond[1]=(((x11124*x11128))+cj0+(((-1.0)*r12*x11138))+(((-1.0)*r10*x11142)));
evalcond[2]=(((x11124*x11132))+(((-1.0)*r02*x11138))+(((-1.0)*r00*x11142))+(((-1.0)*x11131)));
evalcond[3]=(((x11133*x11141))+((r21*x11126))+((r22*x11140))+(((-1.0)*r20*x11127*x11138))+x11135+x11130+((r20*x11136)));
evalcond[4]=((((-1.0)*sj3*x11133*x11138))+((r21*x11127))+(((-1.0)*r22*x11143))+x11129+((r20*x11137))+(((-1.0)*x11139))+((r20*x11125*x11126)));
evalcond[5]=((((-1.0)*cj1*cj2*x11134))+((cj0*x11129))+(((-1.0)*r00*x11127*x11138))+((r02*x11140))+((r01*x11126))+((r00*x11136))+((x11132*x11141)));
evalcond[6]=((((-1.0)*cj1*cj2*x11131))+((sj0*x11129))+((r10*x11136))+((r11*x11126))+((r12*x11140))+((x11128*x11141))+(((-1.0)*r10*x11127*x11138)));
evalcond[7]=((((-1.0)*sj3*x11132*x11138))+(((-1.0)*x11134*x11135))+((r00*x11125*x11126))+(((-1.0)*r02*x11143))+((r01*x11127))+((r00*x11137))+(((-1.0)*x11130*x11134)));
evalcond[8]=((((-1.0)*x11131*x11135))+((r10*x11125*x11126))+((r10*x11137))+((r11*x11127))+(((-1.0)*sj3*x11128*x11138))+(((-1.0)*r12*x11143))+(((-1.0)*x11130*x11131)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x11144=((-1.0)*r10);
IkReal x11146 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x11146)==0){
continue;
}
IkReal x11145=pow(x11146,-0.5);
CheckValue<IkReal> x11147 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x11144),IKFAST_ATAN2_MAGTHRESH);
if(!x11147.valid){
continue;
}
IkReal gconst6=((-1.0)*(x11147.value));
IkReal gconst7=(r11*x11145);
IkReal gconst8=(x11144*x11145);
CheckValue<IkReal> x11148 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11148.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x11148.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x11149=((-1.0)*r10);
IkReal x11150=x11145;
CheckValue<IkReal> x11152 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x11149),IKFAST_ATAN2_MAGTHRESH);
if(!x11152.valid){
continue;
}
IkReal x11151=((-1.0)*(x11152.value));
sj5=gconst7;
cj5=gconst8;
j5=x11151;
IkReal gconst6=x11151;
IkReal gconst7=(r11*x11150);
IkReal gconst8=(x11149*x11150);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11153=((1.0)*sj0);
IkReal x11154=((1.0)*gconst7);
CheckValue<IkReal> x11155=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x11154))+(((-1.0)*gconst8*r21)))),-1);
if(!x11155.valid){
continue;
}
CheckValue<IkReal> x11156 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x11153)))),IkReal((((gconst8*r10*sj0))+(((-1.0)*cj0*r01*x11154))+((cj0*gconst8*r00))+(((-1.0)*gconst7*r11*x11153)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11156.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11155.value)))+(x11156.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11157=IKsin(j4);
IkReal x11158=IKcos(j4);
IkReal x11159=(gconst7*sj3);
IkReal x11160=(cj3*gconst8);
IkReal x11161=(cj3*gconst7);
IkReal x11162=(sj1*sj2);
IkReal x11163=(cj2*sj1);
IkReal x11164=((1.0)*sj0);
IkReal x11165=((1.0)*cj0);
IkReal x11166=(gconst8*sj3);
IkReal x11167=(cj1*sj2);
IkReal x11168=((1.0)*x11158);
IkReal x11169=((1.0)*x11157);
IkReal x11170=((1.0)*cj1*cj2);
IkReal x11171=(cj3*x11157);
IkReal x11172=(gconst7*x11157);
IkReal x11173=(x11158*x11166);
evalcond[0]=((((-1.0)*gconst8*r20*x11169))+(((-1.0)*r22*x11168))+((r21*x11172)));
evalcond[1]=(cj0+((r11*x11172))+(((-1.0)*r12*x11168))+(((-1.0)*gconst8*r10*x11169)));
evalcond[2]=((((-1.0)*gconst8*r00*x11169))+((r01*x11172))+(((-1.0)*x11164))+(((-1.0)*r02*x11168)));
evalcond[3]=(x11167+x11163+((r22*x11171))+((r21*x11166))+((r20*x11159))+(((-1.0)*r20*x11160*x11168))+((r21*x11158*x11161)));
evalcond[4]=(((r20*x11161))+((r20*x11173))+(((-1.0)*x11170))+x11162+(((-1.0)*r21*x11159*x11168))+((r21*x11160))+(((-1.0)*r22*sj3*x11169)));
evalcond[5]=(((r00*x11159))+((r01*x11166))+(((-1.0)*cj1*cj2*x11165))+((cj0*x11162))+((r02*x11171))+(((-1.0)*r00*x11160*x11168))+((r01*x11158*x11161)));
evalcond[6]=(((r12*x11171))+(((-1.0)*cj1*cj2*x11164))+((r11*x11166))+((r11*x11158*x11161))+((r10*x11159))+(((-1.0)*r10*x11160*x11168))+((sj0*x11162)));
evalcond[7]=((((-1.0)*x11163*x11165))+((r01*x11160))+((r00*x11173))+((r00*x11161))+(((-1.0)*r02*sj3*x11169))+(((-1.0)*x11165*x11167))+(((-1.0)*r01*x11159*x11168)));
evalcond[8]=((((-1.0)*x11163*x11164))+((r11*x11160))+(((-1.0)*r11*x11159*x11168))+(((-1.0)*r12*sj3*x11169))+((r10*x11173))+((r10*x11161))+(((-1.0)*x11164*x11167)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11174=((1.0)*gconst8);
CheckValue<IkReal> x11175=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x11174))+(((-1.0)*gconst7*r00)))),-1);
if(!x11175.valid){
continue;
}
CheckValue<IkReal> x11176 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst7*r21))+(((-1.0)*cj0*r20*x11174)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11176.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11175.value)))+(x11176.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11177=IKsin(j4);
IkReal x11178=IKcos(j4);
IkReal x11179=(gconst7*sj3);
IkReal x11180=(cj3*gconst8);
IkReal x11181=(cj3*gconst7);
IkReal x11182=(sj1*sj2);
IkReal x11183=(cj2*sj1);
IkReal x11184=((1.0)*sj0);
IkReal x11185=((1.0)*cj0);
IkReal x11186=(gconst8*sj3);
IkReal x11187=(cj1*sj2);
IkReal x11188=((1.0)*x11178);
IkReal x11189=((1.0)*x11177);
IkReal x11190=((1.0)*cj1*cj2);
IkReal x11191=(cj3*x11177);
IkReal x11192=(gconst7*x11177);
IkReal x11193=(x11178*x11186);
evalcond[0]=(((r21*x11192))+(((-1.0)*r22*x11188))+(((-1.0)*gconst8*r20*x11189)));
evalcond[1]=(((r11*x11192))+cj0+(((-1.0)*r12*x11188))+(((-1.0)*gconst8*r10*x11189)));
evalcond[2]=((((-1.0)*r02*x11188))+(((-1.0)*x11184))+(((-1.0)*gconst8*r00*x11189))+((r01*x11192)));
evalcond[3]=(((r20*x11179))+((r22*x11191))+x11183+x11187+((r21*x11178*x11181))+(((-1.0)*r20*x11180*x11188))+((r21*x11186)));
evalcond[4]=(((r20*x11181))+((r20*x11193))+(((-1.0)*r22*sj3*x11189))+(((-1.0)*x11190))+(((-1.0)*r21*x11179*x11188))+x11182+((r21*x11180)));
evalcond[5]=(((r00*x11179))+((r01*x11186))+(((-1.0)*cj1*cj2*x11185))+((r02*x11191))+((cj0*x11182))+(((-1.0)*r00*x11180*x11188))+((r01*x11178*x11181)));
evalcond[6]=((((-1.0)*r10*x11180*x11188))+((r11*x11186))+((r12*x11191))+(((-1.0)*cj1*cj2*x11184))+((r11*x11178*x11181))+((r10*x11179))+((sj0*x11182)));
evalcond[7]=((((-1.0)*x11183*x11185))+(((-1.0)*x11185*x11187))+(((-1.0)*r01*x11179*x11188))+((r01*x11180))+((r00*x11193))+((r00*x11181))+(((-1.0)*r02*sj3*x11189)));
evalcond[8]=((((-1.0)*x11183*x11184))+(((-1.0)*r11*x11179*x11188))+((r11*x11180))+(((-1.0)*x11184*x11187))+(((-1.0)*r12*sj3*x11189))+((r10*x11193))+((r10*x11181)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x11194=((-1.0)*r11);
IkReal x11196 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x11196)==0){
continue;
}
IkReal x11195=pow(x11196,-0.5);
CheckValue<IkReal> x11197 = IKatan2WithCheck(IkReal(x11194),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11197.valid){
continue;
}
IkReal gconst9=((3.14159265358979)+(((-1.0)*(x11197.value))));
IkReal gconst10=(x11194*x11195);
IkReal gconst11=((1.0)*r10*x11195);
CheckValue<IkReal> x11198 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11198.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x11198.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x11199=((-1.0)*r11);
CheckValue<IkReal> x11202 = IKatan2WithCheck(IkReal(x11199),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11202.valid){
continue;
}
IkReal x11200=((1.0)*(x11202.value));
IkReal x11201=x11195;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11200)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11200)));
IkReal gconst10=(x11199*x11201);
IkReal gconst11=((1.0)*r10*x11201);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11203=((-1.0)*r11);
CheckValue<IkReal> x11206 = IKatan2WithCheck(IkReal(x11203),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11206.valid){
continue;
}
IkReal x11204=((1.0)*(x11206.value));
IkReal x11205=x11195;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11204)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11204)));
IkReal gconst10=(x11203*x11205);
IkReal gconst11=((1.0)*r10*x11205);
IkReal x11207=r12*r12;
IkReal x11208=((1.0)*sj0);
IkReal x11209=(cj0*r02);
IkReal x11210=x11195;
j4eval[0]=((IKabs(((((-1.0)*r12*x11208))+(((-1.0)*x11209)))))+(IKabs((((sj0*x11207*x11210))+((r12*x11209*x11210))+(((-1.0)*x11208*x11210))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11211=((-1.0)*r11);
CheckValue<IkReal> x11214 = IKatan2WithCheck(IkReal(x11211),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11214.valid){
continue;
}
IkReal x11212=((1.0)*(x11214.value));
IkReal x11213=x11195;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11212)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11212)));
IkReal gconst10=(x11211*x11213);
IkReal gconst11=((1.0)*r10*x11213);
IkReal x11215=((1.0)*cj3);
CheckValue<IkReal> x11220=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r12*r12)))),-1);
if(!x11220.valid){
continue;
}
IkReal x11216=x11220.value;
IkReal x11217=(cj3*x11216);
IkReal x11218=(x11215*x11216);
IkReal x11219=((((-1.0)*x11218*(r11*r11)*(r21*r21)))+(((-1.0)*x11218*(r10*r10)*(r20*r20)))+(((-2.0)*r10*r11*r20*r21*x11217))+(((-1.0)*x11215*(r22*r22))));
j4eval[0]=x11219;
j4eval[1]=IKsign(x11219);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x11221=((-1.0)*r11);
CheckValue<IkReal> x11224 = IKatan2WithCheck(IkReal(x11221),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11224.valid){
continue;
}
IkReal x11222=((1.0)*(x11224.value));
IkReal x11223=x11195;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11222)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11222)));
IkReal gconst10=(x11221*x11223);
IkReal gconst11=((1.0)*r10*x11223);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11225=((-1.0)*r11);
CheckValue<IkReal> x11228 = IKatan2WithCheck(IkReal(x11225),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11228.valid){
continue;
}
IkReal x11226=((1.0)*(x11228.value));
IkReal x11227=x11195;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11226)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11226)));
IkReal gconst10=(x11225*x11227);
IkReal gconst11=((1.0)*r10*x11227);
IkReal x11229=r12*r12;
IkReal x11230=((1.0)*sj0);
IkReal x11231=(cj0*r02);
IkReal x11232=x11195;
j4eval[0]=((IKabs(((((-1.0)*x11230*x11232))+((r12*x11231*x11232))+((sj0*x11229*x11232)))))+(IKabs(((((-1.0)*x11231))+(((-1.0)*r12*x11230))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11233=((-1.0)*r11);
CheckValue<IkReal> x11236 = IKatan2WithCheck(IkReal(x11233),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11236.valid){
continue;
}
IkReal x11234=((1.0)*(x11236.value));
IkReal x11235=x11195;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11234)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11234)));
IkReal gconst10=(x11233*x11235);
IkReal gconst11=((1.0)*r10*x11235);
IkReal x11237=r12*r12;
IkReal x11238=(cj1*cj2*r22);
IkReal x11239=(r22*sj1*sj2);
CheckValue<IkReal> x11243=IKPowWithIntegerCheck(((-1.0)+x11237),-1);
if(!x11243.valid){
continue;
}
IkReal x11240=x11243.value;
if((((1.0)+(((-1.0)*x11237)))) < -0.00001)
continue;
IkReal x11241=IKsqrt(((1.0)+(((-1.0)*x11237))));
IkReal x11242=(r12*x11240*x11241);
j4eval[0]=((IKabs((((x11238*x11242))+(((-1.0)*x11239*x11242)))))+(IKabs(((((-1.0)*x11238))+x11239))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11244=((-1.0)*r11);
CheckValue<IkReal> x11247 = IKatan2WithCheck(IkReal(x11244),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11247.valid){
continue;
}
IkReal x11245=((1.0)*(x11247.value));
IkReal x11246=x11195;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11245)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11245)));
IkReal gconst10=(x11244*x11246);
IkReal gconst11=((1.0)*r10*x11246);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11248=((-1.0)*r11);
CheckValue<IkReal> x11251 = IKatan2WithCheck(IkReal(x11248),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11251.valid){
continue;
}
IkReal x11249=((1.0)*(x11251.value));
IkReal x11250=x11195;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11249)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11249)));
IkReal gconst10=(x11248*x11250);
IkReal gconst11=((1.0)*r10*x11250);
IkReal x11252=((1.0)+(((-1.0)*(r12*r12))));
CheckValue<IkReal> x11256=IKPowWithIntegerCheck(x11252,-1);
if(!x11256.valid){
continue;
}
IkReal x11253=x11256.value;
IkReal x11254=((1.0)*x11253);
IkReal x11255=((((-1.0)*(r02*r02)))+(((-1.0)*x11254*(r00*r00)*(r10*r10)))+(((-1.0)*x11254*(r01*r01)*(r11*r11)))+(((-2.0)*r00*r01*r10*r11*x11253)));
j4eval[0]=x11255;
j4eval[1]=IKsign(x11255);
j4eval[2]=r02;
j4eval[3]=x11252;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11257=((-1.0)*r11);
CheckValue<IkReal> x11260 = IKatan2WithCheck(IkReal(x11257),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11260.valid){
continue;
}
IkReal x11258=((1.0)*(x11260.value));
IkReal x11259=x11195;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11258)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11258)));
IkReal gconst10=(x11257*x11259);
IkReal gconst11=((1.0)*r10*x11259);
IkReal x11261=r12*r12;
IkReal x11262=(cj1*cj2*r22);
IkReal x11263=(r22*sj1*sj2);
CheckValue<IkReal> x11267=IKPowWithIntegerCheck(((-1.0)+x11261),-1);
if(!x11267.valid){
continue;
}
IkReal x11264=x11267.value;
if((((1.0)+(((-1.0)*x11261)))) < -0.00001)
continue;
IkReal x11265=IKsqrt(((1.0)+(((-1.0)*x11261))));
IkReal x11266=(r12*x11264*x11265);
j4eval[0]=((IKabs((((x11262*x11266))+(((-1.0)*x11263*x11266)))))+(IKabs(((((-1.0)*x11262))+x11263))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11268=(gconst10*r21);
IkReal x11269=(gconst11*r20);
IkReal x11270=(sj1*sj2);
IkReal x11271=(cj1*cj2);
CheckValue<IkReal> x11272 = IKatan2WithCheck(IkReal((((r22*x11270))+(((-1.0)*r22*x11271)))),IkReal(((((-1.0)*x11268*x11271))+((x11268*x11270))+(((-1.0)*x11269*x11270))+((x11269*x11271)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11272.valid){
continue;
}
CheckValue<IkReal> x11273=IKPowWithIntegerCheck(IKsign(((x11268*x11268)+(r22*r22)+(((-2.0)*x11268*x11269))+(x11269*x11269))),-1);
if(!x11273.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11272.value)+(((1.5707963267949)*(x11273.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11274=IKsin(j4);
IkReal x11275=IKcos(j4);
IkReal x11276=((1.0)*cj2);
IkReal x11277=((1.0)*x11275);
IkReal x11278=(gconst10*x11274);
IkReal x11279=((1.0)*x11274);
IkReal x11280=(gconst11*x11275);
IkReal x11281=(gconst11*x11279);
evalcond[0]=((((-1.0)*r20*x11281))+((r21*x11278))+(((-1.0)*r22*x11277)));
evalcond[1]=((((-1.0)*r10*x11281))+(((-1.0)*r12*x11277))+((r11*x11278)));
evalcond[2]=((((-1.0)*r02*x11279))+(((-1.0)*gconst10*r01*x11277))+((r00*x11280)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x11281))+((r01*x11278))+(((-1.0)*r02*x11277)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*r22*x11279))+((r20*x11280))+(((-1.0)*gconst10*r21*x11277))+(((-1.0)*cj1*x11276)));
evalcond[5]=((((-1.0)*r12*x11279))+(((-1.0)*gconst10*r11*x11277))+((r10*x11280))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x11276)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11282=(gconst11*r00);
IkReal x11283=(gconst10*r01);
CheckValue<IkReal> x11284 = IKatan2WithCheck(IkReal((x11282+(((-1.0)*x11283)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x11284.valid){
continue;
}
CheckValue<IkReal> x11285=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x11282*x11282)))+(((-1.0)*(x11283*x11283)))+(((-1.0)*(r02*r02)))+(((2.0)*x11282*x11283)))),-1);
if(!x11285.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11284.value)+(((1.5707963267949)*(x11285.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11286=IKsin(j4);
IkReal x11287=IKcos(j4);
IkReal x11288=((1.0)*cj2);
IkReal x11289=((1.0)*x11287);
IkReal x11290=(gconst10*x11286);
IkReal x11291=((1.0)*x11286);
IkReal x11292=(gconst11*x11287);
IkReal x11293=(gconst11*x11291);
evalcond[0]=((((-1.0)*r22*x11289))+((r21*x11290))+(((-1.0)*r20*x11293)));
evalcond[1]=((((-1.0)*r12*x11289))+(((-1.0)*r10*x11293))+((r11*x11290)));
evalcond[2]=((((-1.0)*r02*x11291))+(((-1.0)*gconst10*r01*x11289))+((r00*x11292)));
evalcond[3]=((-1.0)+((r01*x11290))+(((-1.0)*r02*x11289))+(((-1.0)*r00*x11293)));
evalcond[4]=((((-1.0)*r22*x11291))+(((-1.0)*cj1*x11288))+((sj1*sj2))+((r20*x11292))+(((-1.0)*gconst10*r21*x11289)));
evalcond[5]=(((r10*x11292))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst10*r11*x11289))+(((-1.0)*r12*x11291))+(((-1.0)*sj1*x11288)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11294 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*gconst11*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11294.valid){
continue;
}
CheckValue<IkReal> x11295=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x11295.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11294.value)+(((1.5707963267949)*(x11295.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11296=IKsin(j4);
IkReal x11297=IKcos(j4);
IkReal x11298=((1.0)*cj2);
IkReal x11299=((1.0)*x11297);
IkReal x11300=(gconst10*x11296);
IkReal x11301=((1.0)*x11296);
IkReal x11302=(gconst11*x11297);
IkReal x11303=(gconst11*x11301);
evalcond[0]=((((-1.0)*r22*x11299))+((r21*x11300))+(((-1.0)*r20*x11303)));
evalcond[1]=(((r11*x11300))+(((-1.0)*r10*x11303))+(((-1.0)*r12*x11299)));
evalcond[2]=(((r00*x11302))+(((-1.0)*gconst10*r01*x11299))+(((-1.0)*r02*x11301)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x11299))+((r01*x11300))+(((-1.0)*r00*x11303)));
evalcond[4]=(((r20*x11302))+(((-1.0)*cj1*x11298))+((sj1*sj2))+(((-1.0)*r22*x11301))+(((-1.0)*gconst10*r21*x11299)));
evalcond[5]=((((-1.0)*cj1*sj2))+((r10*x11302))+(((-1.0)*r12*x11301))+(((-1.0)*sj1*x11298))+(((-1.0)*gconst10*r11*x11299)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11304=((-1.0)*r11);
CheckValue<IkReal> x11307 = IKatan2WithCheck(IkReal(x11304),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11307.valid){
continue;
}
IkReal x11305=((1.0)*(x11307.value));
IkReal x11306=x11195;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11305)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11305)));
IkReal gconst10=(x11304*x11306);
IkReal gconst11=((1.0)*r10*x11306);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11308=((-1.0)*r11);
CheckValue<IkReal> x11311 = IKatan2WithCheck(IkReal(x11308),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11311.valid){
continue;
}
IkReal x11309=((1.0)*(x11311.value));
IkReal x11310=x11195;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11309)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11309)));
IkReal gconst10=(x11308*x11310);
IkReal gconst11=((1.0)*r10*x11310);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11312=((-1.0)*r11);
CheckValue<IkReal> x11315 = IKatan2WithCheck(IkReal(x11312),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11315.valid){
continue;
}
IkReal x11313=((1.0)*(x11315.value));
IkReal x11314=x11195;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11313)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11313)));
IkReal gconst10=(x11312*x11314);
IkReal gconst11=((1.0)*r10*x11314);
IkReal x11316=r12*r12;
CheckValue<IkReal> x11319=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x11316))),-1);
if(!x11319.valid){
continue;
}
IkReal x11317=x11319.value;
IkReal x11318=((1.0)*x11317);
j4eval[0]=IKsign(((((2.0)*x11317*(r10*r10)*(r11*r11)))+x11316+((x11318*(r10*r10*r10*r10)))+((x11318*(r11*r11*r11*r11)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11320=(cj2*sj1);
IkReal x11321=(gconst10*r11);
IkReal x11322=(gconst11*r10);
IkReal x11323=(cj1*sj2);
CheckValue<IkReal> x11324=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x11321*x11322))+(x11322*x11322)+(x11321*x11321))),-1);
if(!x11324.valid){
continue;
}
CheckValue<IkReal> x11325 = IKatan2WithCheck(IkReal((((r12*x11320))+((r12*x11323)))),IkReal((((x11320*x11321))+((x11321*x11323))+(((-1.0)*x11320*x11322))+(((-1.0)*x11322*x11323)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11325.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11324.value)))+(x11325.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11326=IKsin(j4);
IkReal x11327=IKcos(j4);
IkReal x11328=((1.0)*x11327);
IkReal x11329=(gconst10*x11326);
IkReal x11330=((1.0)*x11326);
IkReal x11331=(gconst11*x11327);
IkReal x11332=(gconst11*x11330);
evalcond[0]=((((-1.0)*r22*x11328))+(((-1.0)*r20*x11332))+((r21*x11329)));
evalcond[1]=((((-1.0)*r12*x11328))+((r11*x11329))+(((-1.0)*r10*x11332)));
evalcond[2]=((((-1.0)*gconst10*r01*x11328))+((r00*x11331))+(((-1.0)*r02*x11330)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11328))+(((-1.0)*r00*x11332))+((r01*x11329)));
evalcond[4]=((((-1.0)*r12*x11330))+((cj2*sj1))+((cj1*sj2))+((r10*x11331))+(((-1.0)*gconst10*r11*x11328)));
evalcond[5]=((((-1.0)*r22*x11330))+((r20*x11331))+(((-1.0)*gconst10*r21*x11328))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11333=(gconst11*r00);
IkReal x11334=(gconst10*r01);
CheckValue<IkReal> x11335 = IKatan2WithCheck(IkReal((x11333+(((-1.0)*x11334)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x11335.valid){
continue;
}
CheckValue<IkReal> x11336=IKPowWithIntegerCheck(IKsign(((x11334*x11334)+(x11333*x11333)+(r02*r02)+(((-2.0)*x11333*x11334)))),-1);
if(!x11336.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11335.value)+(((1.5707963267949)*(x11336.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11337=IKsin(j4);
IkReal x11338=IKcos(j4);
IkReal x11339=((1.0)*x11338);
IkReal x11340=(gconst10*x11337);
IkReal x11341=((1.0)*x11337);
IkReal x11342=(gconst11*x11338);
IkReal x11343=(gconst11*x11341);
evalcond[0]=((((-1.0)*r20*x11343))+(((-1.0)*r22*x11339))+((r21*x11340)));
evalcond[1]=((((-1.0)*r12*x11339))+(((-1.0)*r10*x11343))+((r11*x11340)));
evalcond[2]=((((-1.0)*gconst10*r01*x11339))+((r00*x11342))+(((-1.0)*r02*x11341)));
evalcond[3]=((1.0)+(((-1.0)*r00*x11343))+((r01*x11340))+(((-1.0)*r02*x11339)));
evalcond[4]=(((cj2*sj1))+((r10*x11342))+((cj1*sj2))+(((-1.0)*gconst10*r11*x11339))+(((-1.0)*r12*x11341)));
evalcond[5]=((((-1.0)*gconst10*r21*x11339))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x11342))+(((-1.0)*r22*x11341)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11344=((1.0)*gconst11);
CheckValue<IkReal> x11345 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*r10*x11344)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11345.valid){
continue;
}
CheckValue<IkReal> x11346=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11344))+(((-1.0)*gconst10*r20)))),-1);
if(!x11346.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11345.value)+(((1.5707963267949)*(x11346.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11347=IKsin(j4);
IkReal x11348=IKcos(j4);
IkReal x11349=((1.0)*x11348);
IkReal x11350=(gconst10*x11347);
IkReal x11351=((1.0)*x11347);
IkReal x11352=(gconst11*x11348);
IkReal x11353=(gconst11*x11351);
evalcond[0]=((((-1.0)*r20*x11353))+(((-1.0)*r22*x11349))+((r21*x11350)));
evalcond[1]=(((r11*x11350))+(((-1.0)*r10*x11353))+(((-1.0)*r12*x11349)));
evalcond[2]=((((-1.0)*gconst10*r01*x11349))+((r00*x11352))+(((-1.0)*r02*x11351)));
evalcond[3]=((1.0)+(((-1.0)*r00*x11353))+((r01*x11350))+(((-1.0)*r02*x11349)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r12*x11351))+((r10*x11352))+((cj1*sj2))+(((-1.0)*gconst10*r11*x11349)));
evalcond[5]=((((-1.0)*gconst10*r21*x11349))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x11352))+(((-1.0)*r22*x11351)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11354=((-1.0)*r11);
IkReal x11355=((-1.0)*r10);
CheckValue<IkReal> x11357 = IKatan2WithCheck(IkReal(x11354),IkReal(x11355),IKFAST_ATAN2_MAGTHRESH);
if(!x11357.valid){
continue;
}
IkReal x11356=((1.0)*(x11357.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11356)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x11355);
rxp1_1=(px*r21);
rxp1_2=(px*x11354);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11356)));
IkReal gconst10=x11354;
IkReal gconst11=((1.0)*r10);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11358=((-1.0)*r11);
IkReal x11359=((-1.0)*r10);
CheckValue<IkReal> x11361 = IKatan2WithCheck(IkReal(x11358),IkReal(x11359),IKFAST_ATAN2_MAGTHRESH);
if(!x11361.valid){
continue;
}
IkReal x11360=((1.0)*(x11361.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11360)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x11359);
rxp1_1=(px*r21);
rxp1_2=(px*x11358);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11360)));
IkReal gconst10=x11358;
IkReal gconst11=((1.0)*r10);
j4eval[0]=((((1.0)*r10*r20))+(((1.0)*r11*r21)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11362=((-1.0)*r11);
IkReal x11363=((-1.0)*r10);
CheckValue<IkReal> x11365 = IKatan2WithCheck(IkReal(x11362),IkReal(x11363),IKFAST_ATAN2_MAGTHRESH);
if(!x11365.valid){
continue;
}
IkReal x11364=((1.0)*(x11365.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11364)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x11363);
rxp1_1=(px*r21);
rxp1_2=(px*x11362);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11364)));
IkReal gconst10=x11362;
IkReal gconst11=((1.0)*r10);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11368=IKPowWithIntegerCheck(((((-1.0)*gconst10*r11))+((gconst11*r10))),-1);
if(!x11368.valid){
continue;
}
IkReal x11366=x11368.value;
IkReal x11367=(sj0*x11366);
cj4array[0]=(((cj2*sj1*x11367))+((cj1*sj2*x11367)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11369=IKsin(j4);
IkReal x11370=IKcos(j4);
IkReal x11371=(gconst10*r21);
IkReal x11372=(gconst11*r20);
IkReal x11373=((1.0)*x11369);
IkReal x11374=((1.0)*x11370);
evalcond[0]=((-1.0)*r02*x11369);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x11374)));
evalcond[2]=(((x11369*x11371))+(((-1.0)*x11372*x11373)));
evalcond[3]=(((gconst10*r11*x11369))+(((-1.0)*gconst11*r10*x11373)));
evalcond[4]=(((x11370*x11372))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x11371*x11374)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11376=IKPowWithIntegerCheck((((gconst11*r20))+(((-1.0)*gconst10*r21))),-1);
if(!x11376.valid){
continue;
}
IkReal x11375=x11376.value;
cj4array[0]=(((cj1*cj2*x11375))+(((-1.0)*sj1*sj2*x11375)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11377=IKsin(j4);
IkReal x11378=IKcos(j4);
IkReal x11379=((1.0)*sj0);
IkReal x11380=(gconst10*x11377);
IkReal x11381=((1.0)*x11378);
IkReal x11382=((1.0)*gconst11*x11377);
evalcond[0]=((-1.0)*r02*x11377);
evalcond[1]=((((-1.0)*x11379))+(((-1.0)*r02*x11381)));
evalcond[2]=((((-1.0)*r20*x11382))+((r21*x11380)));
evalcond[3]=(((r11*x11380))+(((-1.0)*r10*x11382)));
evalcond[4]=(((gconst11*r10*x11378))+(((-1.0)*cj1*sj2*x11379))+(((-1.0)*gconst10*r11*x11381))+(((-1.0)*cj2*sj1*x11379)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11383=IKPowWithIntegerCheck(r02,-1);
if(!x11383.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x11383.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11384=IKsin(j4);
IkReal x11385=IKcos(j4);
IkReal x11386=(gconst10*r21);
IkReal x11387=((1.0)*sj0);
IkReal x11388=(gconst10*r11);
IkReal x11389=(gconst11*x11385);
IkReal x11390=((1.0)*x11385);
IkReal x11391=((1.0)*gconst11*x11384);
evalcond[0]=((-1.0)*r02*x11384);
evalcond[1]=(((x11384*x11386))+(((-1.0)*r20*x11391)));
evalcond[2]=(((x11384*x11388))+(((-1.0)*r10*x11391)));
evalcond[3]=(((r20*x11389))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x11386*x11390)));
evalcond[4]=(((r10*x11389))+(((-1.0)*cj2*sj1*x11387))+(((-1.0)*x11388*x11390))+(((-1.0)*cj1*sj2*x11387)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11392=((1.0)*gconst11);
CheckValue<IkReal> x11393 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r10*sj0*x11392))+(((-1.0)*cj0*r00*x11392))+((gconst10*r11*sj0))+((cj0*gconst10*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11393.valid){
continue;
}
CheckValue<IkReal> x11394=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x11394.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11393.value)+(((1.5707963267949)*(x11394.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11395=IKsin(j4);
IkReal x11396=IKcos(j4);
IkReal x11397=((1.0)*cj2);
IkReal x11398=((1.0)*sj0);
IkReal x11399=(cj1*sj2);
IkReal x11400=(gconst10*x11395);
IkReal x11401=((1.0)*x11396);
IkReal x11402=(gconst11*x11396);
IkReal x11403=((1.0)*x11395);
IkReal x11404=(gconst11*x11403);
evalcond[0]=(((r21*x11400))+(((-1.0)*r20*x11404)));
evalcond[1]=(cj0+((r11*x11400))+(((-1.0)*r12*x11401))+(((-1.0)*r10*x11404)));
evalcond[2]=(((sj1*sj2))+((r20*x11402))+(((-1.0)*gconst10*r21*x11401))+(((-1.0)*cj1*x11397)));
evalcond[3]=((((-1.0)*x11398))+(((-1.0)*r02*x11401))+(((-1.0)*r00*x11404))+((r01*x11400)));
evalcond[4]=((((-1.0)*cj0*sj1*x11397))+(((-1.0)*cj0*x11399))+(((-1.0)*gconst10*r01*x11401))+(((-1.0)*r02*x11403))+((r00*x11402)));
evalcond[5]=(((r10*x11402))+(((-1.0)*x11398*x11399))+(((-1.0)*sj0*sj1*x11397))+(((-1.0)*gconst10*r11*x11401))+(((-1.0)*r12*x11403)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11405=(gconst10*r21);
IkReal x11406=(gconst11*r20);
IkReal x11407=(sj1*sj2);
IkReal x11408=(cj1*cj2);
CheckValue<IkReal> x11409 = IKatan2WithCheck(IkReal((((r22*x11407))+(((-1.0)*r22*x11408)))),IkReal(((((-1.0)*x11405*x11408))+(((-1.0)*x11406*x11407))+((x11405*x11407))+((x11406*x11408)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11409.valid){
continue;
}
CheckValue<IkReal> x11410=IKPowWithIntegerCheck(IKsign(((((-2.0)*x11405*x11406))+(r22*r22)+(x11405*x11405)+(x11406*x11406))),-1);
if(!x11410.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11409.value)+(((1.5707963267949)*(x11410.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11411=IKsin(j4);
IkReal x11412=IKcos(j4);
IkReal x11413=((1.0)*cj2);
IkReal x11414=((1.0)*sj0);
IkReal x11415=(cj1*sj2);
IkReal x11416=((1.0)*x11412);
IkReal x11417=(gconst10*x11411);
IkReal x11418=((1.0)*x11411);
IkReal x11419=(gconst11*x11412);
IkReal x11420=(gconst11*x11418);
evalcond[0]=(((r21*x11417))+(((-1.0)*r20*x11420))+(((-1.0)*r22*x11416)));
evalcond[1]=(cj0+(((-1.0)*r12*x11416))+(((-1.0)*r10*x11420))+((r11*x11417)));
evalcond[2]=(((r01*x11417))+(((-1.0)*r00*x11420))+(((-1.0)*x11414))+(((-1.0)*r02*x11416)));
evalcond[3]=((((-1.0)*cj1*x11413))+((sj1*sj2))+(((-1.0)*gconst10*r21*x11416))+((r20*x11419))+(((-1.0)*r22*x11418)));
evalcond[4]=(((r00*x11419))+(((-1.0)*cj0*sj1*x11413))+(((-1.0)*gconst10*r01*x11416))+(((-1.0)*cj0*x11415))+(((-1.0)*r02*x11418)));
evalcond[5]=(((r10*x11419))+(((-1.0)*r12*x11418))+(((-1.0)*sj0*sj1*x11413))+(((-1.0)*x11414*x11415))+(((-1.0)*gconst10*r11*x11416)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11421=((1.0)*sj0);
IkReal x11422=((1.0)*gconst10);
CheckValue<IkReal> x11423 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x11421))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x11422))+(((-1.0)*gconst10*r11*x11421))+((cj0*gconst11*r00))+((gconst11*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11423.valid){
continue;
}
CheckValue<IkReal> x11424=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x11422))+(((-1.0)*gconst11*r21)))),-1);
if(!x11424.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11423.value)+(((1.5707963267949)*(x11424.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11425=IKsin(j4);
IkReal x11426=IKcos(j4);
IkReal x11427=((1.0)*cj2);
IkReal x11428=((1.0)*sj0);
IkReal x11429=(cj1*sj2);
IkReal x11430=((1.0)*x11426);
IkReal x11431=(gconst10*x11425);
IkReal x11432=((1.0)*x11425);
IkReal x11433=(gconst11*x11426);
IkReal x11434=(gconst11*x11432);
evalcond[0]=(((r21*x11431))+(((-1.0)*r20*x11434))+(((-1.0)*r22*x11430)));
evalcond[1]=(cj0+(((-1.0)*r10*x11434))+(((-1.0)*r12*x11430))+((r11*x11431)));
evalcond[2]=((((-1.0)*r00*x11434))+(((-1.0)*r02*x11430))+((r01*x11431))+(((-1.0)*x11428)));
evalcond[3]=(((r20*x11433))+(((-1.0)*cj1*x11427))+((sj1*sj2))+(((-1.0)*gconst10*r21*x11430))+(((-1.0)*r22*x11432)));
evalcond[4]=((((-1.0)*r02*x11432))+(((-1.0)*cj0*x11429))+(((-1.0)*cj0*sj1*x11427))+(((-1.0)*gconst10*r01*x11430))+((r00*x11433)));
evalcond[5]=(((r10*x11433))+(((-1.0)*gconst10*r11*x11430))+(((-1.0)*r12*x11432))+(((-1.0)*x11428*x11429))+(((-1.0)*sj0*sj1*x11427)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11435=((1.0)*gconst11);
CheckValue<IkReal> x11436=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r00))+(((-1.0)*r01*x11435)))),-1);
if(!x11436.valid){
continue;
}
CheckValue<IkReal> x11437 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst10*r21))+(((-1.0)*cj0*r20*x11435)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11437.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11436.value)))+(x11437.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11438=IKsin(j4);
IkReal x11439=IKcos(j4);
IkReal x11440=((1.0)*cj2);
IkReal x11441=((1.0)*sj0);
IkReal x11442=(cj1*sj2);
IkReal x11443=((1.0)*x11439);
IkReal x11444=(gconst10*x11438);
IkReal x11445=((1.0)*x11438);
IkReal x11446=(gconst11*x11439);
IkReal x11447=(gconst11*x11445);
evalcond[0]=((((-1.0)*r20*x11447))+(((-1.0)*r22*x11443))+((r21*x11444)));
evalcond[1]=((((-1.0)*r12*x11443))+cj0+((r11*x11444))+(((-1.0)*r10*x11447)));
evalcond[2]=((((-1.0)*x11441))+(((-1.0)*r00*x11447))+(((-1.0)*r02*x11443))+((r01*x11444)));
evalcond[3]=((((-1.0)*cj1*x11440))+((sj1*sj2))+(((-1.0)*r22*x11445))+((r20*x11446))+(((-1.0)*gconst10*r21*x11443)));
evalcond[4]=(((r00*x11446))+(((-1.0)*cj0*sj1*x11440))+(((-1.0)*gconst10*r01*x11443))+(((-1.0)*cj0*x11442))+(((-1.0)*r02*x11445)));
evalcond[5]=((((-1.0)*r12*x11445))+(((-1.0)*sj0*sj1*x11440))+((r10*x11446))+(((-1.0)*gconst10*r11*x11443))+(((-1.0)*x11441*x11442)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x11448=((-1.0)*r11);
CheckValue<IkReal> x11451 = IKatan2WithCheck(IkReal(x11448),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11451.valid){
continue;
}
IkReal x11449=((1.0)*(x11451.value));
IkReal x11450=x11195;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11449)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11449)));
IkReal gconst10=(x11448*x11450);
IkReal gconst11=((1.0)*r10*x11450);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11452=((-1.0)*r11);
CheckValue<IkReal> x11455 = IKatan2WithCheck(IkReal(x11452),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11455.valid){
continue;
}
IkReal x11453=((1.0)*(x11455.value));
IkReal x11454=x11195;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11453)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11453)));
IkReal gconst10=(x11452*x11454);
IkReal gconst11=((1.0)*r10*x11454);
IkReal x11456=r12*r12;
IkReal x11457=((1.0)*sj0);
IkReal x11458=(cj0*r02);
IkReal x11459=x11195;
j4eval[0]=((IKabs((((sj0*x11456*x11459))+(((-1.0)*x11457*x11459))+((r12*x11458*x11459)))))+(IKabs(((((-1.0)*x11458))+(((-1.0)*r12*x11457))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x11460=((-1.0)*r11);
CheckValue<IkReal> x11463 = IKatan2WithCheck(IkReal(x11460),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11463.valid){
continue;
}
IkReal x11461=((1.0)*(x11463.value));
IkReal x11462=x11195;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11461)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11461)));
IkReal gconst10=(x11460*x11462);
IkReal gconst11=((1.0)*r10*x11462);
IkReal x11464=r12*r12;
IkReal x11465=((1.0)+(((-1.0)*x11464)));
IkReal x11466=(r22*sj1*sj2);
IkReal x11467=(cj1*cj2*r22);
CheckValue<IkReal> x11474=IKPowWithIntegerCheck(x11465,-1);
if(!x11474.valid){
continue;
}
IkReal x11468=x11474.value;
CheckValue<IkReal> x11475=IKPowWithIntegerCheck(((-1.0)+x11464),-1);
if(!x11475.valid){
continue;
}
IkReal x11469=x11475.value;
IkReal x11470=((1.0)*x11468);
if((x11465) < -0.00001)
continue;
IkReal x11471=IKsqrt(x11465);
IkReal x11472=(r12*x11469*x11471);
IkReal x11473=((((-2.0)*r10*r11*r20*r21*x11468))+(((-1.0)*(r22*r22)))+(((-1.0)*x11470*(r10*r10)*(r20*r20)))+(((-1.0)*x11470*(r11*r11)*(r21*r21))));
j4eval[0]=x11473;
j4eval[1]=((IKabs((((x11467*x11472))+(((-1.0)*x11466*x11472)))))+(IKabs((x11466+(((-1.0)*x11467))))));
j4eval[2]=IKsign(x11473);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11476=((-1.0)*r11);
CheckValue<IkReal> x11479 = IKatan2WithCheck(IkReal(x11476),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11479.valid){
continue;
}
IkReal x11477=((1.0)*(x11479.value));
IkReal x11478=x11195;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11477)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11477)));
IkReal gconst10=(x11476*x11478);
IkReal gconst11=((1.0)*r10*x11478);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11480=((-1.0)*r11);
CheckValue<IkReal> x11483 = IKatan2WithCheck(IkReal(x11480),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11483.valid){
continue;
}
IkReal x11481=((1.0)*(x11483.value));
IkReal x11482=x11195;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11481)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11481)));
IkReal gconst10=(x11480*x11482);
IkReal gconst11=((1.0)*r10*x11482);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11484=((-1.0)*r11);
CheckValue<IkReal> x11487 = IKatan2WithCheck(IkReal(x11484),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11487.valid){
continue;
}
IkReal x11485=((1.0)*(x11487.value));
IkReal x11486=x11195;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11485)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11485)));
IkReal gconst10=(x11484*x11486);
IkReal gconst11=((1.0)*r10*x11486);
IkReal x11488=(cj1*r02*sj2);
IkReal x11489=(cj2*r02*sj1);
IkReal x11490=x11195;
IkReal x11491=(r12*x11490);
j4eval[0]=((IKabs((x11489+x11488)))+(IKabs((((x11489*x11491))+((x11488*x11491))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11492=(cj1*sj2);
IkReal x11493=(cj2*sj1);
IkReal x11494=(gconst11*r00);
IkReal x11495=((1.0)*gconst10*r01);
CheckValue<IkReal> x11496=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r20))+(((-1.0)*gconst11*r21)))),-1);
if(!x11496.valid){
continue;
}
CheckValue<IkReal> x11497 = IKatan2WithCheck(IkReal((((x11493*x11494))+(((-1.0)*x11493*x11495))+((x11492*x11494))+(((-1.0)*x11492*x11495)))),IkReal((((r02*x11492))+((r02*x11493)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11497.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11496.value)))+(x11497.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11498=IKcos(j4);
IkReal x11499=IKsin(j4);
IkReal x11500=((1.0)*cj2);
IkReal x11501=((1.0)*x11498);
IkReal x11502=(gconst10*x11498);
IkReal x11503=(gconst10*x11499);
IkReal x11504=((1.0)*gconst11*x11499);
evalcond[0]=(((r02*x11499))+((r01*x11502))+(((-1.0)*gconst11*r00*x11501)));
evalcond[1]=(((r21*x11503))+(((-1.0)*r22*x11501))+(((-1.0)*r20*x11504)));
evalcond[2]=((((-1.0)*r12*x11501))+(((-1.0)*r10*x11504))+((r11*x11503)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x11501))+((r01*x11503))+(((-1.0)*r00*x11504)));
evalcond[4]=(((r22*x11499))+((r21*x11502))+((sj1*sj2))+(((-1.0)*gconst11*r20*x11501))+(((-1.0)*cj1*x11500)));
evalcond[5]=((((-1.0)*sj1*x11500))+(((-1.0)*gconst11*r10*x11501))+(((-1.0)*cj1*sj2))+((r11*x11502))+((r12*x11499)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11505=(gconst10*r01);
IkReal x11506=(gconst11*r00);
CheckValue<IkReal> x11507 = IKatan2WithCheck(IkReal((x11505+(((-1.0)*x11506)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x11507.valid){
continue;
}
CheckValue<IkReal> x11508=IKPowWithIntegerCheck(IKsign(((x11506*x11506)+(x11505*x11505)+(((-2.0)*x11505*x11506))+(r02*r02))),-1);
if(!x11508.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11507.value)+(((1.5707963267949)*(x11508.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11509=IKcos(j4);
IkReal x11510=IKsin(j4);
IkReal x11511=((1.0)*cj2);
IkReal x11512=((1.0)*x11509);
IkReal x11513=(gconst10*x11509);
IkReal x11514=(gconst10*x11510);
IkReal x11515=((1.0)*gconst11*x11510);
evalcond[0]=(((r01*x11513))+(((-1.0)*gconst11*r00*x11512))+((r02*x11510)));
evalcond[1]=((((-1.0)*r22*x11512))+(((-1.0)*r20*x11515))+((r21*x11514)));
evalcond[2]=((((-1.0)*r12*x11512))+(((-1.0)*r10*x11515))+((r11*x11514)));
evalcond[3]=((-1.0)+((r01*x11514))+(((-1.0)*r00*x11515))+(((-1.0)*r02*x11512)));
evalcond[4]=((((-1.0)*gconst11*r20*x11512))+((sj1*sj2))+(((-1.0)*cj1*x11511))+((r22*x11510))+((r21*x11513)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*sj1*x11511))+(((-1.0)*gconst11*r10*x11512))+((r12*x11510))+((r11*x11513)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11516 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*gconst11*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11516.valid){
continue;
}
CheckValue<IkReal> x11517=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x11517.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11516.value)+(((1.5707963267949)*(x11517.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11518=IKcos(j4);
IkReal x11519=IKsin(j4);
IkReal x11520=((1.0)*cj2);
IkReal x11521=((1.0)*x11518);
IkReal x11522=(gconst10*x11518);
IkReal x11523=(gconst10*x11519);
IkReal x11524=((1.0)*gconst11*x11519);
evalcond[0]=((((-1.0)*gconst11*r00*x11521))+((r02*x11519))+((r01*x11522)));
evalcond[1]=((((-1.0)*r20*x11524))+((r21*x11523))+(((-1.0)*r22*x11521)));
evalcond[2]=(((r11*x11523))+(((-1.0)*r10*x11524))+(((-1.0)*r12*x11521)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x11521))+(((-1.0)*r00*x11524))+((r01*x11523)));
evalcond[4]=((((-1.0)*cj1*x11520))+((r21*x11522))+((sj1*sj2))+(((-1.0)*gconst11*r20*x11521))+((r22*x11519)));
evalcond[5]=(((r11*x11522))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst11*r10*x11521))+((r12*x11519))+(((-1.0)*sj1*x11520)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11525=((-1.0)*r11);
CheckValue<IkReal> x11528 = IKatan2WithCheck(IkReal(x11525),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11528.valid){
continue;
}
IkReal x11526=((1.0)*(x11528.value));
IkReal x11527=x11195;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11526)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11526)));
IkReal gconst10=(x11525*x11527);
IkReal gconst11=((1.0)*r10*x11527);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11529=((-1.0)*r11);
CheckValue<IkReal> x11532 = IKatan2WithCheck(IkReal(x11529),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11532.valid){
continue;
}
IkReal x11530=((1.0)*(x11532.value));
IkReal x11531=x11195;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11530)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11530)));
IkReal gconst10=(x11529*x11531);
IkReal gconst11=((1.0)*r10*x11531);
IkReal x11533=((1.0)+(((-1.0)*(r12*r12))));
CheckValue<IkReal> x11537=IKPowWithIntegerCheck(x11533,-1);
if(!x11537.valid){
continue;
}
IkReal x11534=x11537.value;
IkReal x11535=((1.0)*x11534);
IkReal x11536=((((-1.0)*x11535*(r01*r01)*(r11*r11)))+(((-1.0)*x11535*(r00*r00)*(r10*r10)))+(((-1.0)*(r02*r02)))+(((-2.0)*r00*r01*r10*r11*x11534)));
j4eval[0]=x11536;
j4eval[1]=r02;
j4eval[2]=x11533;
j4eval[3]=IKsign(x11536);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11538=((-1.0)*r11);
CheckValue<IkReal> x11541 = IKatan2WithCheck(IkReal(x11538),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11541.valid){
continue;
}
IkReal x11539=((1.0)*(x11541.value));
IkReal x11540=x11195;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11539)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11539)));
IkReal gconst10=(x11538*x11540);
IkReal gconst11=((1.0)*r10*x11540);
IkReal x11542=r12*r12;
IkReal x11543=((1.0)*r02);
IkReal x11544=(cj1*sj2);
IkReal x11545=(cj2*sj1);
CheckValue<IkReal> x11549=IKPowWithIntegerCheck(((-1.0)+x11542),-1);
if(!x11549.valid){
continue;
}
IkReal x11546=x11549.value;
if((((1.0)+(((-1.0)*x11542)))) < -0.00001)
continue;
IkReal x11547=IKsqrt(((1.0)+(((-1.0)*x11542))));
IkReal x11548=(r12*x11546*x11547);
j4eval[0]=((IKabs(((((-1.0)*x11543*x11544*x11548))+(((-1.0)*x11543*x11545*x11548)))))+(IKabs(((((-1.0)*x11543*x11545))+(((-1.0)*x11543*x11544))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11550=(cj1*sj2);
IkReal x11551=(gconst10*r01);
IkReal x11552=(cj2*sj1);
IkReal x11553=((1.0)*r02);
IkReal x11554=((1.0)*gconst11*r00);
CheckValue<IkReal> x11555=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r20))+(((-1.0)*gconst11*r21)))),-1);
if(!x11555.valid){
continue;
}
CheckValue<IkReal> x11556 = IKatan2WithCheck(IkReal((((x11551*x11552))+((x11550*x11551))+(((-1.0)*x11550*x11554))+(((-1.0)*x11552*x11554)))),IkReal(((((-1.0)*x11550*x11553))+(((-1.0)*x11552*x11553)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11556.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11555.value)))+(x11556.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11557=IKcos(j4);
IkReal x11558=IKsin(j4);
IkReal x11559=((1.0)*x11557);
IkReal x11560=(gconst10*x11557);
IkReal x11561=(gconst10*x11558);
IkReal x11562=((1.0)*gconst11*x11558);
evalcond[0]=(((r02*x11558))+((r01*x11560))+(((-1.0)*gconst11*r00*x11559)));
evalcond[1]=((((-1.0)*r22*x11559))+(((-1.0)*r20*x11562))+((r21*x11561)));
evalcond[2]=((((-1.0)*r12*x11559))+((r11*x11561))+(((-1.0)*r10*x11562)));
evalcond[3]=((1.0)+(((-1.0)*r00*x11562))+(((-1.0)*r02*x11559))+((r01*x11561)));
evalcond[4]=(((r12*x11558))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst11*r10*x11559))+((r11*x11560)));
evalcond[5]=(((r22*x11558))+(((-1.0)*gconst11*r20*x11559))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x11560)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11563=(gconst10*r01);
IkReal x11564=(gconst11*r00);
CheckValue<IkReal> x11565=IKPowWithIntegerCheck(IKsign(((((2.0)*x11563*x11564))+(((-1.0)*(r02*r02)))+(((-1.0)*(x11564*x11564)))+(((-1.0)*(x11563*x11563))))),-1);
if(!x11565.valid){
continue;
}
CheckValue<IkReal> x11566 = IKatan2WithCheck(IkReal((x11563+(((-1.0)*x11564)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x11566.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11565.value)))+(x11566.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11567=IKcos(j4);
IkReal x11568=IKsin(j4);
IkReal x11569=((1.0)*x11567);
IkReal x11570=(gconst10*x11567);
IkReal x11571=(gconst10*x11568);
IkReal x11572=((1.0)*gconst11*x11568);
evalcond[0]=(((r01*x11570))+(((-1.0)*gconst11*r00*x11569))+((r02*x11568)));
evalcond[1]=(((r21*x11571))+(((-1.0)*r20*x11572))+(((-1.0)*r22*x11569)));
evalcond[2]=((((-1.0)*r10*x11572))+(((-1.0)*r12*x11569))+((r11*x11571)));
evalcond[3]=((1.0)+((r01*x11571))+(((-1.0)*r00*x11572))+(((-1.0)*r02*x11569)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst11*r10*x11569))+((cj1*sj2))+((r11*x11570))+((r12*x11568)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x11570))+((r22*x11568))+(((-1.0)*gconst11*r20*x11569)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11573=((1.0)*gconst11);
CheckValue<IkReal> x11574 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*r10*x11573)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11574.valid){
continue;
}
CheckValue<IkReal> x11575=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r20))+(((-1.0)*r21*x11573)))),-1);
if(!x11575.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11574.value)+(((1.5707963267949)*(x11575.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11576=IKcos(j4);
IkReal x11577=IKsin(j4);
IkReal x11578=((1.0)*x11576);
IkReal x11579=(gconst10*x11576);
IkReal x11580=(gconst10*x11577);
IkReal x11581=((1.0)*gconst11*x11577);
evalcond[0]=(((r01*x11579))+(((-1.0)*gconst11*r00*x11578))+((r02*x11577)));
evalcond[1]=(((r21*x11580))+(((-1.0)*r20*x11581))+(((-1.0)*r22*x11578)));
evalcond[2]=((((-1.0)*r12*x11578))+(((-1.0)*r10*x11581))+((r11*x11580)));
evalcond[3]=((1.0)+((r01*x11580))+(((-1.0)*r00*x11581))+(((-1.0)*r02*x11578)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst11*r10*x11578))+((cj1*sj2))+((r12*x11577))+((r11*x11579)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x11579))+((r22*x11577))+(((-1.0)*gconst11*r20*x11578)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11582=((-1.0)*r11);
IkReal x11583=((-1.0)*r10);
CheckValue<IkReal> x11585 = IKatan2WithCheck(IkReal(x11582),IkReal(x11583),IKFAST_ATAN2_MAGTHRESH);
if(!x11585.valid){
continue;
}
IkReal x11584=((1.0)*(x11585.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11584)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x11583);
rxp1_1=(px*r21);
rxp1_2=(px*x11582);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11584)));
IkReal gconst10=x11582;
IkReal gconst11=((1.0)*r10);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11586=((-1.0)*r11);
IkReal x11587=((-1.0)*r10);
CheckValue<IkReal> x11589 = IKatan2WithCheck(IkReal(x11586),IkReal(x11587),IKFAST_ATAN2_MAGTHRESH);
if(!x11589.valid){
continue;
}
IkReal x11588=((1.0)*(x11589.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11588)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x11587);
rxp1_1=(px*r21);
rxp1_2=(px*x11586);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11588)));
IkReal gconst10=x11586;
IkReal gconst11=((1.0)*r10);
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11590=((-1.0)*r11);
IkReal x11591=((-1.0)*r10);
CheckValue<IkReal> x11593 = IKatan2WithCheck(IkReal(x11590),IkReal(x11591),IKFAST_ATAN2_MAGTHRESH);
if(!x11593.valid){
continue;
}
IkReal x11592=((1.0)*(x11593.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11592)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x11591);
rxp1_1=(px*r21);
rxp1_2=(px*x11590);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11592)));
IkReal gconst10=x11590;
IkReal gconst11=((1.0)*r10);
j4eval[0]=-1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11596=IKPowWithIntegerCheck((((gconst10*r11))+(((-1.0)*gconst11*r10))),-1);
if(!x11596.valid){
continue;
}
IkReal x11594=x11596.value;
IkReal x11595=(sj0*x11594);
cj4array[0]=(((cj1*sj2*x11595))+((cj2*sj1*x11595)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11597=IKsin(j4);
IkReal x11598=IKcos(j4);
IkReal x11599=(gconst10*r21);
IkReal x11600=((1.0)*x11598);
IkReal x11601=((1.0)*gconst11*x11597);
evalcond[0]=(r02*x11597);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x11600)));
evalcond[2]=((((-1.0)*r20*x11601))+((x11597*x11599)));
evalcond[3]=(((gconst10*r11*x11597))+(((-1.0)*r10*x11601)));
evalcond[4]=(((x11598*x11599))+(((-1.0)*gconst11*r20*x11600))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11603=IKPowWithIntegerCheck((((gconst10*r21))+(((-1.0)*gconst11*r20))),-1);
if(!x11603.valid){
continue;
}
IkReal x11602=x11603.value;
cj4array[0]=((((-1.0)*sj1*sj2*x11602))+((cj1*cj2*x11602)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11604=IKsin(j4);
IkReal x11605=IKcos(j4);
IkReal x11606=((1.0)*sj0);
IkReal x11607=(gconst10*x11604);
IkReal x11608=((1.0)*x11605);
IkReal x11609=((1.0)*gconst11*x11604);
evalcond[0]=(r02*x11604);
evalcond[1]=((((-1.0)*r02*x11608))+(((-1.0)*x11606)));
evalcond[2]=((((-1.0)*r20*x11609))+((r21*x11607)));
evalcond[3]=((((-1.0)*r10*x11609))+((r11*x11607)));
evalcond[4]=((((-1.0)*gconst11*r10*x11608))+(((-1.0)*cj1*sj2*x11606))+(((-1.0)*cj2*sj1*x11606))+((gconst10*r11*x11605)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11610=IKPowWithIntegerCheck(r02,-1);
if(!x11610.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x11610.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11611=IKsin(j4);
IkReal x11612=IKcos(j4);
IkReal x11613=(gconst10*r21);
IkReal x11614=((1.0)*cj1);
IkReal x11615=(gconst10*r11);
IkReal x11616=((1.0)*gconst11*x11611);
IkReal x11617=((1.0)*gconst11*x11612);
evalcond[0]=(r02*x11611);
evalcond[1]=(((x11611*x11613))+(((-1.0)*r20*x11616)));
evalcond[2]=(((x11611*x11615))+(((-1.0)*r10*x11616)));
evalcond[3]=(((x11612*x11613))+(((-1.0)*cj2*x11614))+((sj1*sj2))+(((-1.0)*r20*x11617)));
evalcond[4]=(((x11612*x11615))+(((-1.0)*cj2*sj0*sj1))+(((-1.0)*r10*x11617))+(((-1.0)*sj0*sj2*x11614)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11618=((1.0)*gconst11);
CheckValue<IkReal> x11619 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r00*x11618))+((gconst10*r11*sj0))+((cj0*gconst10*r01))+(((-1.0)*r10*sj0*x11618)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11619.valid){
continue;
}
CheckValue<IkReal> x11620=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x11620.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11619.value)+(((1.5707963267949)*(x11620.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11621=IKsin(j4);
IkReal x11622=IKcos(j4);
IkReal x11623=((1.0)*gconst11);
IkReal x11624=((1.0)*cj2);
IkReal x11625=((1.0)*sj0);
IkReal x11626=(cj1*sj2);
IkReal x11627=(gconst10*x11622);
IkReal x11628=(gconst10*x11621);
IkReal x11629=((1.0)*x11622);
evalcond[0]=((((-1.0)*r20*x11621*x11623))+((r21*x11628)));
evalcond[1]=(((r11*x11628))+(((-1.0)*r12*x11629))+cj0+(((-1.0)*r10*x11621*x11623)));
evalcond[2]=(((sj1*sj2))+((r21*x11627))+(((-1.0)*cj1*x11624))+(((-1.0)*r20*x11622*x11623)));
evalcond[3]=((((-1.0)*r00*x11621*x11623))+(((-1.0)*x11625))+((r01*x11628))+(((-1.0)*r02*x11629)));
evalcond[4]=((((-1.0)*cj0*sj1*x11624))+(((-1.0)*r00*x11622*x11623))+((r02*x11621))+(((-1.0)*cj0*x11626))+((r01*x11627)));
evalcond[5]=(((r12*x11621))+((r11*x11627))+(((-1.0)*sj0*sj1*x11624))+(((-1.0)*r10*x11622*x11623))+(((-1.0)*x11625*x11626)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11630=(gconst10*r21);
IkReal x11631=(gconst11*r20);
IkReal x11632=(sj1*sj2);
IkReal x11633=(cj1*cj2);
CheckValue<IkReal> x11634=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x11631*x11631)))+(((-1.0)*(x11630*x11630)))+(((-1.0)*(r22*r22)))+(((2.0)*x11630*x11631)))),-1);
if(!x11634.valid){
continue;
}
CheckValue<IkReal> x11635 = IKatan2WithCheck(IkReal((((r22*x11632))+(((-1.0)*r22*x11633)))),IkReal((((x11630*x11632))+(((-1.0)*x11631*x11632))+((x11631*x11633))+(((-1.0)*x11630*x11633)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11635.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11634.value)))+(x11635.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11636=IKsin(j4);
IkReal x11637=IKcos(j4);
IkReal x11638=((1.0)*cj2);
IkReal x11639=((1.0)*sj0);
IkReal x11640=(cj1*sj2);
IkReal x11641=((1.0)*x11637);
IkReal x11642=(gconst10*x11637);
IkReal x11643=(gconst10*x11636);
IkReal x11644=((1.0)*gconst11*x11636);
evalcond[0]=((((-1.0)*r22*x11641))+((r21*x11643))+(((-1.0)*r20*x11644)));
evalcond[1]=((((-1.0)*r12*x11641))+((r11*x11643))+cj0+(((-1.0)*r10*x11644)));
evalcond[2]=((((-1.0)*x11639))+(((-1.0)*r00*x11644))+((r01*x11643))+(((-1.0)*r02*x11641)));
evalcond[3]=((((-1.0)*gconst11*r20*x11641))+((r22*x11636))+((sj1*sj2))+((r21*x11642))+(((-1.0)*cj1*x11638)));
evalcond[4]=((((-1.0)*cj0*sj1*x11638))+(((-1.0)*gconst11*r00*x11641))+((r02*x11636))+(((-1.0)*cj0*x11640))+((r01*x11642)));
evalcond[5]=(((r11*x11642))+(((-1.0)*x11639*x11640))+((r12*x11636))+(((-1.0)*sj0*sj1*x11638))+(((-1.0)*gconst11*r10*x11641)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11645=((1.0)*sj0);
IkReal x11646=((1.0)*gconst10);
CheckValue<IkReal> x11647 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x11645))+(((-1.0)*cj0*r02)))),IkReal((((cj0*gconst11*r00))+(((-1.0)*gconst10*r11*x11645))+((gconst11*r10*sj0))+(((-1.0)*cj0*r01*x11646)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11647.valid){
continue;
}
CheckValue<IkReal> x11648=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst11*r21))+(((-1.0)*r20*x11646)))),-1);
if(!x11648.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11647.value)+(((1.5707963267949)*(x11648.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11649=IKsin(j4);
IkReal x11650=IKcos(j4);
IkReal x11651=((1.0)*cj2);
IkReal x11652=((1.0)*sj0);
IkReal x11653=(cj1*sj2);
IkReal x11654=((1.0)*x11650);
IkReal x11655=(gconst10*x11650);
IkReal x11656=(gconst10*x11649);
IkReal x11657=((1.0)*gconst11*x11649);
evalcond[0]=((((-1.0)*r22*x11654))+((r21*x11656))+(((-1.0)*r20*x11657)));
evalcond[1]=(((r11*x11656))+(((-1.0)*r12*x11654))+cj0+(((-1.0)*r10*x11657)));
evalcond[2]=((((-1.0)*r02*x11654))+(((-1.0)*x11652))+(((-1.0)*r00*x11657))+((r01*x11656)));
evalcond[3]=((((-1.0)*gconst11*r20*x11654))+((r22*x11649))+((sj1*sj2))+((r21*x11655))+(((-1.0)*cj1*x11651)));
evalcond[4]=((((-1.0)*cj0*sj1*x11651))+(((-1.0)*gconst11*r00*x11654))+((r02*x11649))+(((-1.0)*cj0*x11653))+((r01*x11655)));
evalcond[5]=((((-1.0)*gconst11*r10*x11654))+((r11*x11655))+((r12*x11649))+(((-1.0)*sj0*sj1*x11651))+(((-1.0)*x11652*x11653)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11658=((1.0)*gconst11);
CheckValue<IkReal> x11659=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r00))+(((-1.0)*r01*x11658)))),-1);
if(!x11659.valid){
continue;
}
CheckValue<IkReal> x11660 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst10*r21))+(((-1.0)*cj0*r20*x11658)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11660.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11659.value)))+(x11660.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11661=IKsin(j4);
IkReal x11662=IKcos(j4);
IkReal x11663=((1.0)*cj2);
IkReal x11664=((1.0)*sj0);
IkReal x11665=(cj1*sj2);
IkReal x11666=((1.0)*x11662);
IkReal x11667=(gconst10*x11662);
IkReal x11668=(gconst10*x11661);
IkReal x11669=((1.0)*gconst11*x11661);
evalcond[0]=(((r21*x11668))+(((-1.0)*r20*x11669))+(((-1.0)*r22*x11666)));
evalcond[1]=(cj0+(((-1.0)*r12*x11666))+((r11*x11668))+(((-1.0)*r10*x11669)));
evalcond[2]=((((-1.0)*r00*x11669))+((r01*x11668))+(((-1.0)*r02*x11666))+(((-1.0)*x11664)));
evalcond[3]=(((r21*x11667))+((sj1*sj2))+(((-1.0)*cj1*x11663))+(((-1.0)*gconst11*r20*x11666))+((r22*x11661)));
evalcond[4]=((((-1.0)*cj0*x11665))+((r01*x11667))+(((-1.0)*cj0*sj1*x11663))+(((-1.0)*gconst11*r00*x11666))+((r02*x11661)));
evalcond[5]=((((-1.0)*x11664*x11665))+(((-1.0)*gconst11*r10*x11666))+((r11*x11667))+((r12*x11661))+(((-1.0)*sj0*sj1*x11663)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11670=((-1.0)*r11);
CheckValue<IkReal> x11673 = IKatan2WithCheck(IkReal(x11670),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11673.valid){
continue;
}
IkReal x11671=((1.0)*(x11673.value));
IkReal x11672=x11195;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11671)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11671)));
IkReal gconst10=(x11670*x11672);
IkReal gconst11=((1.0)*r10*x11672);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11674=gconst10*gconst10;
IkReal x11675=gconst11*gconst11;
IkReal x11676=(gconst10*r21);
IkReal x11677=(cj3*r00);
IkReal x11678=(r00*sj3);
IkReal x11679=((1.0)*gconst11);
IkReal x11680=(gconst10*r20);
IkReal x11681=(r01*sj3);
IkReal x11682=(cj3*gconst11*r01);
IkReal x11683=(r21*x11674);
IkReal x11684=(r20*x11675);
CheckValue<IkReal> x11685 = IKatan2WithCheck(IkReal((((r22*x11682))+((gconst10*r22*x11677)))),IkReal((((x11677*x11683))+((x11676*x11682))+(((-1.0)*x11677*x11679*x11680))+(((-1.0)*cj3*r01*x11684)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11685.valid){
continue;
}
CheckValue<IkReal> x11686=IKPowWithIntegerCheck(IKsign((((x11678*x11684))+((x11681*x11683))+(((-1.0)*x11679*x11680*x11681))+(((-1.0)*x11676*x11678*x11679))+((r02*r22*sj3)))),-1);
if(!x11686.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11685.value)+(((1.5707963267949)*(x11686.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11687=IKsin(j4);
IkReal x11688=IKcos(j4);
IkReal x11689=(sj1*sj2);
IkReal x11690=(gconst10*sj3);
IkReal x11691=(cj3*gconst10);
IkReal x11692=(gconst11*r20);
IkReal x11693=(gconst11*r21);
IkReal x11694=(gconst11*r00);
IkReal x11695=(cj3*gconst11);
IkReal x11696=(gconst11*r10);
IkReal x11697=((1.0)*cj1);
IkReal x11698=(cj2*sj1);
IkReal x11699=(gconst11*sj3);
IkReal x11700=(cj2*x11697);
IkReal x11701=((1.0)*x11688);
IkReal x11702=((1.0)*x11687);
IkReal x11703=(gconst10*x11687);
IkReal x11704=(cj3*x11687);
IkReal x11705=(sj3*x11688);
evalcond[0]=((((-1.0)*x11692*x11702))+(((-1.0)*r22*x11701))+((r21*x11703)));
evalcond[1]=(((r11*x11703))+(((-1.0)*x11696*x11702))+(((-1.0)*r12*x11701)));
evalcond[2]=((-1.0)+(((-1.0)*x11694*x11702))+((r01*x11703))+(((-1.0)*r02*x11701)));
evalcond[3]=(((r01*x11699))+((r00*x11690))+((r02*x11704))+(((-1.0)*cj3*x11694*x11701))+((r01*x11688*x11691)));
evalcond[4]=(((r01*x11695))+((r00*x11691))+(((-1.0)*r01*x11690*x11701))+(((-1.0)*r02*sj3*x11702))+((x11694*x11705)));
evalcond[5]=(((r21*x11688*x11691))+x11698+((r22*x11704))+(((-1.0)*cj3*x11692*x11701))+((cj1*sj2))+((sj3*x11693))+((r20*x11690)));
evalcond[6]=(x11689+(((-1.0)*r10*x11695*x11701))+(((-1.0)*x11700))+((r12*x11704))+((r10*x11690))+((r11*x11699))+((r11*x11688*x11691)));
evalcond[7]=(x11689+((x11692*x11705))+((r20*x11691))+(((-1.0)*x11700))+(((-1.0)*r22*sj3*x11702))+((cj3*x11693))+(((-1.0)*r21*x11690*x11701)));
evalcond[8]=(((x11696*x11705))+(((-1.0)*r12*sj3*x11702))+(((-1.0)*sj2*x11697))+(((-1.0)*x11698))+(((-1.0)*r11*x11690*x11701))+((r10*x11691))+((r11*x11695)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11706 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*gconst11*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11706.valid){
continue;
}
CheckValue<IkReal> x11707=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x11707.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11706.value)+(((1.5707963267949)*(x11707.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11708=IKsin(j4);
IkReal x11709=IKcos(j4);
IkReal x11710=(sj1*sj2);
IkReal x11711=(gconst10*sj3);
IkReal x11712=(cj3*gconst10);
IkReal x11713=(gconst11*r20);
IkReal x11714=(gconst11*r21);
IkReal x11715=(gconst11*r00);
IkReal x11716=(cj3*gconst11);
IkReal x11717=(gconst11*r10);
IkReal x11718=((1.0)*cj1);
IkReal x11719=(cj2*sj1);
IkReal x11720=(gconst11*sj3);
IkReal x11721=(cj2*x11718);
IkReal x11722=((1.0)*x11709);
IkReal x11723=((1.0)*x11708);
IkReal x11724=(gconst10*x11708);
IkReal x11725=(cj3*x11708);
IkReal x11726=(sj3*x11709);
evalcond[0]=((((-1.0)*r22*x11722))+(((-1.0)*x11713*x11723))+((r21*x11724)));
evalcond[1]=((((-1.0)*x11717*x11723))+(((-1.0)*r12*x11722))+((r11*x11724)));
evalcond[2]=((-1.0)+((r01*x11724))+(((-1.0)*x11715*x11723))+(((-1.0)*r02*x11722)));
evalcond[3]=(((r01*x11720))+((r00*x11711))+((r02*x11725))+((r01*x11709*x11712))+(((-1.0)*cj3*x11715*x11722)));
evalcond[4]=(((r01*x11716))+(((-1.0)*r02*sj3*x11723))+((r00*x11712))+(((-1.0)*r01*x11711*x11722))+((x11715*x11726)));
evalcond[5]=(x11719+((cj1*sj2))+((r20*x11711))+(((-1.0)*cj3*x11713*x11722))+((r21*x11709*x11712))+((r22*x11725))+((sj3*x11714)));
evalcond[6]=(((r12*x11725))+x11710+(((-1.0)*r10*x11716*x11722))+(((-1.0)*x11721))+((r11*x11709*x11712))+((r10*x11711))+((r11*x11720)));
evalcond[7]=(x11710+(((-1.0)*x11721))+((r20*x11712))+((x11713*x11726))+((cj3*x11714))+(((-1.0)*r22*sj3*x11723))+(((-1.0)*r21*x11711*x11722)));
evalcond[8]=((((-1.0)*r12*sj3*x11723))+(((-1.0)*sj2*x11718))+(((-1.0)*x11719))+((r10*x11712))+(((-1.0)*r11*x11711*x11722))+((r11*x11716))+((x11717*x11726)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11727=((-1.0)*r11);
CheckValue<IkReal> x11730 = IKatan2WithCheck(IkReal(x11727),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11730.valid){
continue;
}
IkReal x11728=((1.0)*(x11730.value));
IkReal x11729=x11195;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11728)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11728)));
IkReal gconst10=(x11727*x11729);
IkReal gconst11=((1.0)*r10*x11729);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11731=gconst10*gconst10;
IkReal x11732=gconst11*gconst11;
IkReal x11733=(gconst10*r21);
IkReal x11734=(cj3*r00);
IkReal x11735=(r00*sj3);
IkReal x11736=((1.0)*gconst11);
IkReal x11737=(gconst10*r20);
IkReal x11738=(r01*sj3);
IkReal x11739=(cj3*gconst11*r01);
IkReal x11740=(r21*x11731);
IkReal x11741=(r20*x11732);
CheckValue<IkReal> x11742 = IKatan2WithCheck(IkReal((((gconst10*r22*x11734))+((r22*x11739)))),IkReal((((x11734*x11740))+((x11733*x11739))+(((-1.0)*x11734*x11736*x11737))+(((-1.0)*cj3*r01*x11741)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11742.valid){
continue;
}
CheckValue<IkReal> x11743=IKPowWithIntegerCheck(IKsign((((x11735*x11741))+(((-1.0)*x11733*x11735*x11736))+((x11738*x11740))+((r02*r22*sj3))+(((-1.0)*x11736*x11737*x11738)))),-1);
if(!x11743.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11742.value)+(((1.5707963267949)*(x11743.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11744=IKsin(j4);
IkReal x11745=IKcos(j4);
IkReal x11746=(cj2*sj1);
IkReal x11747=(cj1*sj2);
IkReal x11748=(gconst10*sj3);
IkReal x11749=(cj3*gconst10);
IkReal x11750=(gconst11*r20);
IkReal x11751=(gconst11*r21);
IkReal x11752=(gconst11*r00);
IkReal x11753=(sj1*sj2);
IkReal x11754=(cj3*gconst11);
IkReal x11755=(gconst11*r10);
IkReal x11756=(cj1*cj2);
IkReal x11757=(gconst11*sj3);
IkReal x11758=((1.0)*x11745);
IkReal x11759=((1.0)*x11744);
IkReal x11760=(gconst10*x11744);
IkReal x11761=(cj3*x11744);
IkReal x11762=(sj3*x11745);
IkReal x11763=(x11746+x11747);
evalcond[0]=((((-1.0)*r22*x11758))+(((-1.0)*x11750*x11759))+((r21*x11760)));
evalcond[1]=((((-1.0)*r12*x11758))+((r11*x11760))+(((-1.0)*x11755*x11759)));
evalcond[2]=((1.0)+(((-1.0)*r02*x11758))+(((-1.0)*x11752*x11759))+((r01*x11760)));
evalcond[3]=(((r00*x11748))+((r01*x11745*x11749))+((r02*x11761))+(((-1.0)*cj3*x11752*x11758))+((r01*x11757)));
evalcond[4]=(((r00*x11749))+(((-1.0)*r01*x11748*x11758))+((x11752*x11762))+(((-1.0)*r02*sj3*x11759))+((r01*x11754)));
evalcond[5]=(x11763+(((-1.0)*cj3*x11750*x11758))+((r20*x11748))+((sj3*x11751))+((r22*x11761))+((r21*x11745*x11749)));
evalcond[6]=(x11756+(((-1.0)*r10*x11754*x11758))+((r11*x11757))+((r12*x11761))+(((-1.0)*x11753))+((r10*x11748))+((r11*x11745*x11749)));
evalcond[7]=(x11763+((r11*x11754))+(((-1.0)*r11*x11748*x11758))+((r10*x11749))+(((-1.0)*r12*sj3*x11759))+((x11755*x11762)));
evalcond[8]=(x11753+(((-1.0)*x11756))+((x11750*x11762))+((r20*x11749))+((cj3*x11751))+(((-1.0)*r22*sj3*x11759))+(((-1.0)*r21*x11748*x11758)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11764=((1.0)*gconst11);
CheckValue<IkReal> x11765 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*r10*x11764)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11765.valid){
continue;
}
CheckValue<IkReal> x11766=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11764))+(((-1.0)*gconst10*r20)))),-1);
if(!x11766.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11765.value)+(((1.5707963267949)*(x11766.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11767=IKsin(j4);
IkReal x11768=IKcos(j4);
IkReal x11769=(cj2*sj1);
IkReal x11770=(cj1*sj2);
IkReal x11771=(gconst10*sj3);
IkReal x11772=(cj3*gconst10);
IkReal x11773=(gconst11*r20);
IkReal x11774=(gconst11*r21);
IkReal x11775=(gconst11*r00);
IkReal x11776=(sj1*sj2);
IkReal x11777=(cj3*gconst11);
IkReal x11778=(gconst11*r10);
IkReal x11779=(cj1*cj2);
IkReal x11780=(gconst11*sj3);
IkReal x11781=((1.0)*x11768);
IkReal x11782=((1.0)*x11767);
IkReal x11783=(gconst10*x11767);
IkReal x11784=(cj3*x11767);
IkReal x11785=(sj3*x11768);
IkReal x11786=(x11770+x11769);
evalcond[0]=(((r21*x11783))+(((-1.0)*x11773*x11782))+(((-1.0)*r22*x11781)));
evalcond[1]=(((r11*x11783))+(((-1.0)*x11778*x11782))+(((-1.0)*r12*x11781)));
evalcond[2]=((1.0)+(((-1.0)*r02*x11781))+(((-1.0)*x11775*x11782))+((r01*x11783)));
evalcond[3]=(((r01*x11768*x11772))+((r02*x11784))+(((-1.0)*cj3*x11775*x11781))+((r00*x11771))+((r01*x11780)));
evalcond[4]=((((-1.0)*r02*sj3*x11782))+(((-1.0)*r01*x11771*x11781))+((r01*x11777))+((r00*x11772))+((x11775*x11785)));
evalcond[5]=(x11786+((r20*x11771))+((r21*x11768*x11772))+((r22*x11784))+((sj3*x11774))+(((-1.0)*cj3*x11773*x11781)));
evalcond[6]=(((r11*x11780))+x11779+((r10*x11771))+((r12*x11784))+(((-1.0)*x11776))+((r11*x11768*x11772))+(((-1.0)*r10*x11777*x11781)));
evalcond[7]=(x11786+((r10*x11772))+((r11*x11777))+((x11778*x11785))+(((-1.0)*r12*sj3*x11782))+(((-1.0)*r11*x11771*x11781)));
evalcond[8]=(x11776+((r20*x11772))+(((-1.0)*r21*x11771*x11781))+(((-1.0)*x11779))+((x11773*x11785))+(((-1.0)*r22*sj3*x11782))+((cj3*x11774)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x11787=((-1.0)*r11);
IkReal x11788=((-1.0)*r10);
CheckValue<IkReal> x11790 = IKatan2WithCheck(IkReal(x11787),IkReal(x11788),IKFAST_ATAN2_MAGTHRESH);
if(!x11790.valid){
continue;
}
IkReal x11789=((1.0)*(x11790.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11789)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x11788);
rxp1_1=(px*r21);
rxp1_2=(px*x11787);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11789)));
IkReal gconst10=x11787;
IkReal gconst11=((1.0)*r10);
j4eval[0]=-1.0;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11791=((-1.0)*r11);
IkReal x11792=((-1.0)*r10);
CheckValue<IkReal> x11794 = IKatan2WithCheck(IkReal(x11791),IkReal(x11792),IKFAST_ATAN2_MAGTHRESH);
if(!x11794.valid){
continue;
}
IkReal x11793=((1.0)*(x11794.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11793)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x11792);
rxp1_1=(px*r21);
rxp1_2=(px*x11791);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11793)));
IkReal gconst10=x11791;
IkReal gconst11=((1.0)*r10);
IkReal x11795=((1.0)*cj3);
j4eval[0]=-1.0;
j4eval[1]=((((-1.0)*r11*r21*x11795))+(((-1.0)*r10*r20*x11795)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11796=((-1.0)*r11);
IkReal x11797=((-1.0)*r10);
CheckValue<IkReal> x11799 = IKatan2WithCheck(IkReal(x11796),IkReal(x11797),IKFAST_ATAN2_MAGTHRESH);
if(!x11799.valid){
continue;
}
IkReal x11798=((1.0)*(x11799.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11798)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x11797);
rxp1_1=(px*r21);
rxp1_2=(px*x11796);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11798)));
IkReal gconst10=x11796;
IkReal gconst11=((1.0)*r10);
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11801=IKPowWithIntegerCheck(r02,-1);
if(!x11801.valid){
continue;
}
IkReal x11800=x11801.value;
CheckValue<IkReal> x11802=IKPowWithIntegerCheck(cj3,-1);
if(!x11802.valid){
continue;
}
if( IKabs((x11800*(x11802.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x11800)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x11800*(x11802.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x11800))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x11800*(x11802.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x11800));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11803=IKsin(j4);
IkReal x11804=IKcos(j4);
IkReal x11805=(cj3*r10);
IkReal x11806=((1.0)*gconst11);
IkReal x11807=(sj1*sj2);
IkReal x11808=(gconst11*sj3);
IkReal x11809=(cj3*r11);
IkReal x11810=(cj2*sj1);
IkReal x11811=(gconst10*r20);
IkReal x11812=(gconst10*sj3);
IkReal x11813=((1.0)*cj0);
IkReal x11814=((1.0)*sj0);
IkReal x11815=(cj1*sj2);
IkReal x11816=(cj3*r21);
IkReal x11817=((1.0)*cj1*cj2);
IkReal x11818=(r20*x11804);
IkReal x11819=(gconst10*x11803);
IkReal x11820=(gconst10*x11804);
IkReal x11821=(r02*x11803);
IkReal x11822=((1.0)*x11804);
evalcond[0]=((((-1.0)*r02*x11822))+(((-1.0)*x11814)));
evalcond[1]=((((-1.0)*r20*x11803*x11806))+((r21*x11819)));
evalcond[2]=(cj0+((r11*x11819))+(((-1.0)*r10*x11803*x11806)));
evalcond[3]=(((cj3*x11821))+((cj0*x11807))+(((-1.0)*cj1*cj2*x11813)));
evalcond[4]=((((-1.0)*x11810*x11813))+(((-1.0)*x11813*x11815))+(((-1.0)*sj3*x11821)));
evalcond[5]=(((x11816*x11820))+((r21*x11808))+(((-1.0)*cj3*x11806*x11818))+((sj3*x11811))+x11815+x11810);
evalcond[6]=((((-1.0)*r21*x11812*x11822))+((gconst11*x11816))+((x11808*x11818))+(((-1.0)*x11817))+x11807+((cj3*x11811)));
evalcond[7]=(((x11809*x11820))+(((-1.0)*x11804*x11805*x11806))+((r11*x11808))+((r10*x11812))+((sj0*x11807))+(((-1.0)*cj1*cj2*x11814)));
evalcond[8]=(((gconst10*x11805))+(((-1.0)*r11*x11812*x11822))+(((-1.0)*x11810*x11814))+((gconst11*x11809))+((r10*x11804*x11808))+(((-1.0)*x11814*x11815)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11823=((1.0)*r20);
IkReal x11824=((1.0)*gconst11);
CheckValue<IkReal> x11825=IKPowWithIntegerCheck((((gconst10*r11))+(((-1.0)*r10*x11824))),-1);
if(!x11825.valid){
continue;
}
CheckValue<IkReal> x11826=IKPowWithIntegerCheck(((((-1.0)*cj3*gconst11*x11823))+((cj3*gconst10*r21))),-1);
if(!x11826.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x11825.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11826.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*r21*sj3*x11824))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst10*sj3*x11823)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x11825.value)))+IKsqr(((x11826.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*r21*sj3*x11824))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst10*sj3*x11823))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x11825.value)), ((x11826.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*r21*sj3*x11824))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst10*sj3*x11823))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11827=IKsin(j4);
IkReal x11828=IKcos(j4);
IkReal x11829=(cj3*r10);
IkReal x11830=((1.0)*gconst11);
IkReal x11831=(sj1*sj2);
IkReal x11832=(gconst11*sj3);
IkReal x11833=(cj3*r11);
IkReal x11834=(cj2*sj1);
IkReal x11835=(gconst10*r20);
IkReal x11836=(gconst10*sj3);
IkReal x11837=((1.0)*cj0);
IkReal x11838=((1.0)*sj0);
IkReal x11839=(cj1*sj2);
IkReal x11840=(cj3*r21);
IkReal x11841=((1.0)*cj1*cj2);
IkReal x11842=(r20*x11828);
IkReal x11843=(gconst10*x11827);
IkReal x11844=(gconst10*x11828);
IkReal x11845=(r02*x11827);
IkReal x11846=((1.0)*x11828);
evalcond[0]=((((-1.0)*r02*x11846))+(((-1.0)*x11838)));
evalcond[1]=(((r21*x11843))+(((-1.0)*r20*x11827*x11830)));
evalcond[2]=(cj0+(((-1.0)*r10*x11827*x11830))+((r11*x11843)));
evalcond[3]=(((cj3*x11845))+((cj0*x11831))+(((-1.0)*cj1*cj2*x11837)));
evalcond[4]=((((-1.0)*sj3*x11845))+(((-1.0)*x11837*x11839))+(((-1.0)*x11834*x11837)));
evalcond[5]=(((x11840*x11844))+((r21*x11832))+((sj3*x11835))+x11839+x11834+(((-1.0)*cj3*x11830*x11842)));
evalcond[6]=((((-1.0)*x11841))+((x11832*x11842))+((gconst11*x11840))+(((-1.0)*r21*x11836*x11846))+((cj3*x11835))+x11831);
evalcond[7]=(((r11*x11832))+((r10*x11836))+(((-1.0)*x11828*x11829*x11830))+((sj0*x11831))+((x11833*x11844))+(((-1.0)*cj1*cj2*x11838)));
evalcond[8]=(((gconst10*x11829))+((gconst11*x11833))+(((-1.0)*x11834*x11838))+(((-1.0)*x11838*x11839))+(((-1.0)*r11*x11836*x11846))+((r10*x11828*x11832)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11847=IKPowWithIntegerCheck((((gconst10*r11))+(((-1.0)*gconst11*r10))),-1);
if(!x11847.valid){
continue;
}
CheckValue<IkReal> x11848=IKPowWithIntegerCheck(r02,-1);
if(!x11848.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x11847.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*(x11848.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x11847.value)))+IKsqr(((-1.0)*sj0*(x11848.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x11847.value)), ((-1.0)*sj0*(x11848.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11849=IKsin(j4);
IkReal x11850=IKcos(j4);
IkReal x11851=(cj3*r10);
IkReal x11852=((1.0)*gconst11);
IkReal x11853=(sj1*sj2);
IkReal x11854=(gconst11*sj3);
IkReal x11855=(cj3*r11);
IkReal x11856=(cj2*sj1);
IkReal x11857=(gconst10*r20);
IkReal x11858=(gconst10*sj3);
IkReal x11859=((1.0)*cj0);
IkReal x11860=((1.0)*sj0);
IkReal x11861=(cj1*sj2);
IkReal x11862=(cj3*r21);
IkReal x11863=((1.0)*cj1*cj2);
IkReal x11864=(r20*x11850);
IkReal x11865=(gconst10*x11849);
IkReal x11866=(gconst10*x11850);
IkReal x11867=(r02*x11849);
IkReal x11868=((1.0)*x11850);
evalcond[0]=((((-1.0)*x11860))+(((-1.0)*r02*x11868)));
evalcond[1]=((((-1.0)*r20*x11849*x11852))+((r21*x11865)));
evalcond[2]=(cj0+((r11*x11865))+(((-1.0)*r10*x11849*x11852)));
evalcond[3]=(((cj0*x11853))+(((-1.0)*cj1*cj2*x11859))+((cj3*x11867)));
evalcond[4]=((((-1.0)*x11856*x11859))+(((-1.0)*x11859*x11861))+(((-1.0)*sj3*x11867)));
evalcond[5]=(((r21*x11854))+((x11862*x11866))+(((-1.0)*cj3*x11852*x11864))+x11861+x11856+((sj3*x11857)));
evalcond[6]=(((x11854*x11864))+(((-1.0)*x11863))+((gconst11*x11862))+(((-1.0)*r21*x11858*x11868))+((cj3*x11857))+x11853);
evalcond[7]=((((-1.0)*cj1*cj2*x11860))+((r11*x11854))+((sj0*x11853))+(((-1.0)*x11850*x11851*x11852))+((x11855*x11866))+((r10*x11858)));
evalcond[8]=((((-1.0)*x11860*x11861))+((r10*x11850*x11854))+(((-1.0)*x11856*x11860))+((gconst11*x11855))+((gconst10*x11851))+(((-1.0)*r11*x11858*x11868)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11869=((-1.0)*r11);
CheckValue<IkReal> x11872 = IKatan2WithCheck(IkReal(x11869),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11872.valid){
continue;
}
IkReal x11870=((1.0)*(x11872.value));
IkReal x11871=x11195;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11870)));
r22=0;
npz=(((px*r02))+((py*r12)));
rxp2_0=(pz*r12);
rxp2_1=((-1.0)*pz*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11870)));
IkReal gconst10=(x11869*x11871);
IkReal gconst11=((1.0)*r10*x11871);
IkReal x11873=r12*r12;
IkReal x11874=((1.0)*sj0);
IkReal x11875=(cj0*r02);
IkReal x11876=x11195;
j4eval[0]=((IKabs((((r12*x11875*x11876))+((sj0*x11873*x11876))+(((-1.0)*x11874*x11876)))))+(IKabs(((((-1.0)*x11875))+(((-1.0)*r12*x11874))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11877=((1.0)*r12);
IkReal x11878=(sj1*sj2);
IkReal x11879=((1.0)*r21);
IkReal x11880=(cj3*gconst11);
IkReal x11881=(r11*sj3);
IkReal x11882=(gconst11*r20);
IkReal x11883=((1.0)*sj3);
IkReal x11884=(cj1*cj2);
IkReal x11885=(gconst10*r21*sj3);
IkReal x11886=(cj3*gconst10*r20);
CheckValue<IkReal> x11887=IKPowWithIntegerCheck((((gconst11*r10*x11885))+(((-1.0)*x11879*x11881*(gconst10*gconst10)))+((gconst10*x11881*x11882))+(((-1.0)*gconst11*r10*x11882*x11883))),-1);
if(!x11887.valid){
continue;
}
CheckValue<IkReal> x11888=IKPowWithIntegerCheck(((((-1.0)*gconst10*sj3*x11879))+((sj3*x11882))),-1);
if(!x11888.valid){
continue;
}
if( IKabs(((x11887.value)*(((((-1.0)*cj0*x11882*x11883))+(((-1.0)*x11877*x11886))+(((-1.0)*r21*x11877*x11880))+((cj0*x11885))+((r12*x11884))+(((-1.0)*x11877*x11878)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11888.value)*(((((-1.0)*x11886))+(((-1.0)*x11878))+(((-1.0)*x11879*x11880))+x11884)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11887.value)*(((((-1.0)*cj0*x11882*x11883))+(((-1.0)*x11877*x11886))+(((-1.0)*r21*x11877*x11880))+((cj0*x11885))+((r12*x11884))+(((-1.0)*x11877*x11878))))))+IKsqr(((x11888.value)*(((((-1.0)*x11886))+(((-1.0)*x11878))+(((-1.0)*x11879*x11880))+x11884))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x11887.value)*(((((-1.0)*cj0*x11882*x11883))+(((-1.0)*x11877*x11886))+(((-1.0)*r21*x11877*x11880))+((cj0*x11885))+((r12*x11884))+(((-1.0)*x11877*x11878))))), ((x11888.value)*(((((-1.0)*x11886))+(((-1.0)*x11878))+(((-1.0)*x11879*x11880))+x11884))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11889=IKsin(j4);
IkReal x11890=IKcos(j4);
IkReal x11891=(cj3*r10);
IkReal x11892=(gconst11*r20);
IkReal x11893=(gconst11*sj3);
IkReal x11894=(sj1*sj2);
IkReal x11895=(cj3*r11);
IkReal x11896=(r10*sj3);
IkReal x11897=(gconst10*r01);
IkReal x11898=(gconst10*sj3);
IkReal x11899=(cj2*sj1);
IkReal x11900=((1.0)*sj0);
IkReal x11901=(cj1*sj2);
IkReal x11902=(gconst10*r21);
IkReal x11903=(cj3*gconst10);
IkReal x11904=(cj3*gconst11);
IkReal x11905=((1.0)*cj0);
IkReal x11906=((1.0)*x11889);
IkReal x11907=((1.0)*cj1*cj2);
IkReal x11908=(gconst11*x11890);
IkReal x11909=(sj3*x11890);
IkReal x11910=(gconst10*x11889);
IkReal x11911=((1.0)*x11890);
IkReal x11912=(cj3*x11890);
IkReal x11913=(cj3*x11889);
evalcond[0]=((((-1.0)*x11892*x11906))+((x11889*x11902)));
evalcond[1]=(((r11*x11910))+cj0+(((-1.0)*r12*x11911))+(((-1.0)*gconst11*r10*x11906)));
evalcond[2]=(((x11889*x11897))+(((-1.0)*gconst11*r00*x11906))+(((-1.0)*x11900))+(((-1.0)*r02*x11911)));
evalcond[3]=(x11901+((x11902*x11912))+((r21*x11893))+(((-1.0)*cj3*x11892*x11911))+((r20*x11898))+x11899);
evalcond[4]=((((-1.0)*r21*x11898*x11911))+((r21*x11904))+((x11892*x11909))+(((-1.0)*x11907))+((r20*x11903))+x11894);
evalcond[5]=(((r01*x11893))+((r00*x11898))+(((-1.0)*cj1*cj2*x11905))+(((-1.0)*r00*x11904*x11911))+((cj0*x11894))+((r02*x11913))+((x11897*x11912)));
evalcond[6]=(((sj0*x11894))+((gconst10*x11890*x11895))+(((-1.0)*cj1*cj2*x11900))+(((-1.0)*x11891*x11908))+((r11*x11893))+((gconst10*x11896))+((r12*x11913)));
evalcond[7]=((((-1.0)*x11899*x11905))+(((-1.0)*x11901*x11905))+((r00*x11903))+(((-1.0)*r02*sj3*x11906))+(((-1.0)*x11897*x11909))+((r01*x11904))+((r00*x11890*x11893)));
evalcond[8]=((((-1.0)*x11900*x11901))+(((-1.0)*x11899*x11900))+((gconst11*x11895))+(((-1.0)*r11*x11898*x11911))+(((-1.0)*r12*sj3*x11906))+((gconst10*x11891))+((r10*x11890*x11893)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11914=((1.0)*sj0);
IkReal x11915=((1.0)*gconst10);
CheckValue<IkReal> x11916=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x11915))+(((-1.0)*gconst11*r21)))),-1);
if(!x11916.valid){
continue;
}
CheckValue<IkReal> x11917 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x11914)))),IkReal(((((-1.0)*cj0*r01*x11915))+(((-1.0)*gconst10*r11*x11914))+((cj0*gconst11*r00))+((gconst11*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11917.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11916.value)))+(x11917.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11918=IKsin(j4);
IkReal x11919=IKcos(j4);
IkReal x11920=(cj3*r10);
IkReal x11921=(gconst11*r20);
IkReal x11922=(gconst11*sj3);
IkReal x11923=(sj1*sj2);
IkReal x11924=(cj3*r11);
IkReal x11925=(r10*sj3);
IkReal x11926=(gconst10*r01);
IkReal x11927=(gconst10*sj3);
IkReal x11928=(cj2*sj1);
IkReal x11929=((1.0)*sj0);
IkReal x11930=(cj1*sj2);
IkReal x11931=(gconst10*r21);
IkReal x11932=(cj3*gconst10);
IkReal x11933=(cj3*gconst11);
IkReal x11934=((1.0)*cj0);
IkReal x11935=((1.0)*x11918);
IkReal x11936=((1.0)*cj1*cj2);
IkReal x11937=(gconst11*x11919);
IkReal x11938=(sj3*x11919);
IkReal x11939=(gconst10*x11918);
IkReal x11940=((1.0)*x11919);
IkReal x11941=(cj3*x11919);
IkReal x11942=(cj3*x11918);
evalcond[0]=((((-1.0)*x11921*x11935))+((x11918*x11931)));
evalcond[1]=(cj0+((r11*x11939))+(((-1.0)*gconst11*r10*x11935))+(((-1.0)*r12*x11940)));
evalcond[2]=((((-1.0)*x11929))+((x11918*x11926))+(((-1.0)*r02*x11940))+(((-1.0)*gconst11*r00*x11935)));
evalcond[3]=(x11930+x11928+((r21*x11922))+((x11931*x11941))+((r20*x11927))+(((-1.0)*cj3*x11921*x11940)));
evalcond[4]=(x11923+((r21*x11933))+(((-1.0)*x11936))+((r20*x11932))+((x11921*x11938))+(((-1.0)*r21*x11927*x11940)));
evalcond[5]=((((-1.0)*cj1*cj2*x11934))+((x11926*x11941))+((cj0*x11923))+((r02*x11942))+(((-1.0)*r00*x11933*x11940))+((r01*x11922))+((r00*x11927)));
evalcond[6]=((((-1.0)*x11920*x11937))+((r12*x11942))+((gconst10*x11919*x11924))+((gconst10*x11925))+((r11*x11922))+((sj0*x11923))+(((-1.0)*cj1*cj2*x11929)));
evalcond[7]=((((-1.0)*r02*sj3*x11935))+(((-1.0)*x11930*x11934))+(((-1.0)*x11926*x11938))+((r00*x11919*x11922))+((r00*x11932))+(((-1.0)*x11928*x11934))+((r01*x11933)));
evalcond[8]=(((gconst10*x11920))+(((-1.0)*r12*sj3*x11935))+((gconst11*x11924))+(((-1.0)*x11929*x11930))+((r10*x11919*x11922))+(((-1.0)*x11928*x11929))+(((-1.0)*r11*x11927*x11940)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11943=gconst10*gconst10;
IkReal x11944=r21*r21;
IkReal x11945=gconst11*gconst11;
IkReal x11946=r20*r20;
IkReal x11947=((1.0)*cj3);
IkReal x11948=(r20*sj3);
IkReal x11949=(gconst10*gconst11);
IkReal x11950=(cj2*sj1);
IkReal x11951=(gconst10*r21);
IkReal x11952=(cj1*sj2);
IkReal x11953=((1.0)*gconst11*r20);
CheckValue<IkReal> x11954=IKPowWithIntegerCheck(IKsign(((((-1.0)*x11943*x11944*x11947))+(((-1.0)*x11945*x11946*x11947))+(((-1.0)*x11947*(r22*r22)))+(((2.0)*cj3*r20*r21*x11949)))),-1);
if(!x11954.valid){
continue;
}
CheckValue<IkReal> x11955 = IKatan2WithCheck(IkReal((((gconst11*r21*r22*sj3))+((gconst10*r22*x11948))+((r22*x11952))+((r22*x11950)))),IkReal(((((-1.0)*r21*x11945*x11948))+((r21*x11943*x11948))+(((-1.0)*sj3*x11946*x11949))+(((-1.0)*x11952*x11953))+(((-1.0)*x11950*x11953))+((sj3*x11944*x11949))+((x11950*x11951))+((x11951*x11952)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11955.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11954.value)))+(x11955.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11956=IKsin(j4);
IkReal x11957=IKcos(j4);
IkReal x11958=(cj3*r10);
IkReal x11959=(gconst11*r20);
IkReal x11960=(gconst11*sj3);
IkReal x11961=(sj1*sj2);
IkReal x11962=(gconst11*r00);
IkReal x11963=(cj3*r11);
IkReal x11964=(gconst10*sj3);
IkReal x11965=(cj2*sj1);
IkReal x11966=(cj3*r01);
IkReal x11967=((1.0)*sj0);
IkReal x11968=(cj1*sj2);
IkReal x11969=(cj3*r21);
IkReal x11970=(cj3*gconst10);
IkReal x11971=((1.0)*cj0);
IkReal x11972=((1.0)*x11957);
IkReal x11973=((1.0)*x11956);
IkReal x11974=((1.0)*cj1*cj2);
IkReal x11975=(cj3*x11956);
IkReal x11976=(gconst10*x11956);
IkReal x11977=(gconst10*x11957);
evalcond[0]=((((-1.0)*x11959*x11973))+(((-1.0)*r22*x11972))+((r21*x11976)));
evalcond[1]=((((-1.0)*r12*x11972))+cj0+((r11*x11976))+(((-1.0)*gconst11*r10*x11973)));
evalcond[2]=(((r01*x11976))+(((-1.0)*x11967))+(((-1.0)*x11962*x11973))+(((-1.0)*r02*x11972)));
evalcond[3]=(x11965+x11968+((r20*x11964))+(((-1.0)*cj3*x11959*x11972))+((r21*x11960))+((r22*x11975))+((x11969*x11977)));
evalcond[4]=(x11961+(((-1.0)*r21*x11964*x11972))+((sj3*x11957*x11959))+(((-1.0)*x11974))+((r20*x11970))+(((-1.0)*r22*sj3*x11973))+((gconst11*x11969)));
evalcond[5]=((((-1.0)*cj1*cj2*x11971))+((r01*x11960))+((r00*x11964))+((cj0*x11961))+(((-1.0)*cj3*x11962*x11972))+((r02*x11975))+((x11966*x11977)));
evalcond[6]=((((-1.0)*gconst11*x11958*x11972))+((r11*x11960))+((x11963*x11977))+((r12*x11975))+((r10*x11964))+((sj0*x11961))+(((-1.0)*cj1*cj2*x11967)));
evalcond[7]=(((r00*x11970))+(((-1.0)*x11965*x11971))+((r00*x11957*x11960))+(((-1.0)*r02*sj3*x11973))+(((-1.0)*r01*x11964*x11972))+((gconst11*x11966))+(((-1.0)*x11968*x11971)));
evalcond[8]=(((gconst10*x11958))+(((-1.0)*x11965*x11967))+(((-1.0)*x11967*x11968))+((r10*x11957*x11960))+(((-1.0)*r12*sj3*x11973))+(((-1.0)*r11*x11964*x11972))+((gconst11*x11963)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11978=((1.0)*sj0);
IkReal x11979=((1.0)*gconst10);
CheckValue<IkReal> x11980 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x11978))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*gconst10*r11*x11978))+(((-1.0)*cj0*r01*x11979))+((cj0*gconst11*r00))+((gconst11*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11980.valid){
continue;
}
CheckValue<IkReal> x11981=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x11979))+(((-1.0)*gconst11*r21)))),-1);
if(!x11981.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11980.value)+(((1.5707963267949)*(x11981.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11982=IKsin(j4);
IkReal x11983=IKcos(j4);
IkReal x11984=(cj3*r10);
IkReal x11985=(gconst11*r20);
IkReal x11986=(gconst11*sj3);
IkReal x11987=(sj1*sj2);
IkReal x11988=(gconst11*r00);
IkReal x11989=(cj3*r11);
IkReal x11990=(gconst10*sj3);
IkReal x11991=(cj2*sj1);
IkReal x11992=(cj3*r01);
IkReal x11993=((1.0)*sj0);
IkReal x11994=(cj1*sj2);
IkReal x11995=(cj3*r21);
IkReal x11996=(cj3*gconst10);
IkReal x11997=((1.0)*cj0);
IkReal x11998=((1.0)*x11983);
IkReal x11999=((1.0)*x11982);
IkReal x12000=((1.0)*cj1*cj2);
IkReal x12001=(cj3*x11982);
IkReal x12002=(gconst10*x11982);
IkReal x12003=(gconst10*x11983);
evalcond[0]=((((-1.0)*x11985*x11999))+((r21*x12002))+(((-1.0)*r22*x11998)));
evalcond[1]=(cj0+(((-1.0)*gconst11*r10*x11999))+(((-1.0)*r12*x11998))+((r11*x12002)));
evalcond[2]=((((-1.0)*r02*x11998))+(((-1.0)*x11988*x11999))+((r01*x12002))+(((-1.0)*x11993)));
evalcond[3]=(((r20*x11990))+x11991+x11994+((r21*x11986))+(((-1.0)*cj3*x11985*x11998))+((x11995*x12003))+((r22*x12001)));
evalcond[4]=(((r20*x11996))+x11987+(((-1.0)*r21*x11990*x11998))+((sj3*x11983*x11985))+((gconst11*x11995))+(((-1.0)*x12000))+(((-1.0)*r22*sj3*x11999)));
evalcond[5]=(((cj0*x11987))+(((-1.0)*cj3*x11988*x11998))+((x11992*x12003))+(((-1.0)*cj1*cj2*x11997))+((r00*x11990))+((r01*x11986))+((r02*x12001)));
evalcond[6]=((((-1.0)*gconst11*x11984*x11998))+(((-1.0)*cj1*cj2*x11993))+((r11*x11986))+((sj0*x11987))+((x11989*x12003))+((r12*x12001))+((r10*x11990)));
evalcond[7]=(((r00*x11983*x11986))+((gconst11*x11992))+(((-1.0)*x11994*x11997))+(((-1.0)*r02*sj3*x11999))+(((-1.0)*x11991*x11997))+(((-1.0)*r01*x11990*x11998))+((r00*x11996)));
evalcond[8]=((((-1.0)*r12*sj3*x11999))+(((-1.0)*x11993*x11994))+((gconst11*x11989))+(((-1.0)*x11991*x11993))+((gconst10*x11984))+((r10*x11983*x11986))+(((-1.0)*r11*x11990*x11998)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12004=((1.0)*gconst11);
CheckValue<IkReal> x12005 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x12004))+((cj0*gconst10*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12005.valid){
continue;
}
CheckValue<IkReal> x12006=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r00))+(((-1.0)*r01*x12004)))),-1);
if(!x12006.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12005.value)+(((1.5707963267949)*(x12006.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12007=IKsin(j4);
IkReal x12008=IKcos(j4);
IkReal x12009=(cj3*r10);
IkReal x12010=(gconst11*r20);
IkReal x12011=(gconst11*sj3);
IkReal x12012=(sj1*sj2);
IkReal x12013=(gconst11*r00);
IkReal x12014=(cj3*r11);
IkReal x12015=(gconst10*sj3);
IkReal x12016=(cj2*sj1);
IkReal x12017=(cj3*r01);
IkReal x12018=((1.0)*sj0);
IkReal x12019=(cj1*sj2);
IkReal x12020=(cj3*r21);
IkReal x12021=(cj3*gconst10);
IkReal x12022=((1.0)*cj0);
IkReal x12023=((1.0)*x12008);
IkReal x12024=((1.0)*x12007);
IkReal x12025=((1.0)*cj1*cj2);
IkReal x12026=(cj3*x12007);
IkReal x12027=(gconst10*x12007);
IkReal x12028=(gconst10*x12008);
evalcond[0]=(((r21*x12027))+(((-1.0)*r22*x12023))+(((-1.0)*x12010*x12024)));
evalcond[1]=(cj0+((r11*x12027))+(((-1.0)*r12*x12023))+(((-1.0)*gconst11*r10*x12024)));
evalcond[2]=(((r01*x12027))+(((-1.0)*r02*x12023))+(((-1.0)*x12018))+(((-1.0)*x12013*x12024)));
evalcond[3]=(((x12020*x12028))+((r21*x12011))+x12019+x12016+((r22*x12026))+((r20*x12015))+(((-1.0)*cj3*x12010*x12023)));
evalcond[4]=((((-1.0)*r22*sj3*x12024))+((r20*x12021))+(((-1.0)*x12025))+((sj3*x12008*x12010))+x12012+(((-1.0)*r21*x12015*x12023))+((gconst11*x12020)));
evalcond[5]=(((x12017*x12028))+(((-1.0)*cj3*x12013*x12023))+((cj0*x12012))+(((-1.0)*cj1*cj2*x12022))+((r00*x12015))+((r02*x12026))+((r01*x12011)));
evalcond[6]=(((sj0*x12012))+(((-1.0)*gconst11*x12009*x12023))+(((-1.0)*cj1*cj2*x12018))+((r10*x12015))+((r11*x12011))+((r12*x12026))+((x12014*x12028)));
evalcond[7]=(((r00*x12008*x12011))+(((-1.0)*x12016*x12022))+((gconst11*x12017))+(((-1.0)*r01*x12015*x12023))+((r00*x12021))+(((-1.0)*r02*sj3*x12024))+(((-1.0)*x12019*x12022)));
evalcond[8]=(((r10*x12008*x12011))+((gconst11*x12014))+(((-1.0)*r11*x12015*x12023))+((gconst10*x12009))+(((-1.0)*x12018*x12019))+(((-1.0)*x12016*x12018))+(((-1.0)*r12*sj3*x12024)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x12029=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12029;
j4eval[1]=IKsign(x12029);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x12030=((1.0)*cj5);
IkReal x12031=((((-1.0)*r01*x12030))+(((-1.0)*r00*sj5)));
j4eval[0]=x12031;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x12030))+((r21*sj5))))));
j4eval[2]=IKsign(x12031);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=0;
cj0=1.0;
j0=0;
IkReal x12032=cj5*cj5;
IkReal x12033=(cj3*r21);
IkReal x12034=(cj5*sj5);
IkReal x12035=((1.0)*cj3);
IkReal x12036=((((-1.0)*r12*r22*x12035))+(((-1.0)*r10*r20*x12032*x12035))+((cj3*r11*r20*x12034))+((r10*x12033*x12034))+((r11*x12032*x12033))+(((-1.0)*r11*x12033)));
j4eval[0]=x12036;
j4eval[1]=IKsign(x12036);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x12037=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12037;
j4eval[1]=IKsign(x12037);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x12038=((1.0)*cj5);
IkReal x12039=((((-1.0)*r01*x12038))+(((-1.0)*r00*sj5)));
j4eval[0]=x12039;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x12038))+((r21*sj5))))));
j4eval[2]=IKsign(x12039);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x12040=cj5*cj5;
IkReal x12041=r11*r11;
IkReal x12042=(r11*sj5);
IkReal x12043=(cj5*r10);
IkReal x12044=((r12*r12)+((x12040*(r10*r10)))+x12041+(((-2.0)*x12042*x12043))+(((-1.0)*x12040*x12041)));
j4eval[0]=x12044;
j4eval[1]=IKsign(x12044);
j4eval[2]=((IKabs(((((-1.0)*x12042))+x12043)))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12045=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12045);
rxp1_1=(px*r21);
rxp1_2=(r11*x12045);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[1]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12046=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12046);
rxp1_1=(px*r21);
rxp1_2=(r11*x12046);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
j4eval[1]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12047=((1.0)*sj1);
CheckValue<IkReal> x12048=IKPowWithIntegerCheck(r02,-1);
if(!x12048.valid){
continue;
}
CheckValue<IkReal> x12049=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x12049.valid){
continue;
}
if( IKabs(((x12048.value)*(((((-1.0)*cj2*x12047))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12049.value)*(((((-1.0)*sj2*x12047))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12048.value)*(((((-1.0)*cj2*x12047))+(((-1.0)*cj1*sj2))))))+IKsqr(((x12049.value)*(((((-1.0)*sj2*x12047))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12048.value)*(((((-1.0)*cj2*x12047))+(((-1.0)*cj1*sj2))))), ((x12049.value)*(((((-1.0)*sj2*x12047))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12050=IKsin(j4);
IkReal x12051=IKcos(j4);
IkReal x12052=(cj5*r20);
IkReal x12053=((1.0)*cj2);
IkReal x12054=(cj5*r10);
IkReal x12055=((1.0)*x12050);
IkReal x12056=(sj5*x12050);
IkReal x12057=((1.0)*sj5*x12051);
evalcond[0]=((-1.0)*r02*x12051);
evalcond[1]=((((-1.0)*x12052*x12055))+((r21*x12056)));
evalcond[2]=((((-1.0)*r11*x12057))+((x12051*x12054)));
evalcond[3]=((1.0)+(((-1.0)*x12054*x12055))+((r11*x12056)));
evalcond[4]=((((-1.0)*sj1*x12053))+(((-1.0)*cj1*sj2))+(((-1.0)*r02*x12055)));
evalcond[5]=((((-1.0)*r21*x12057))+(((-1.0)*cj1*x12053))+((sj1*sj2))+((x12051*x12052)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12058=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x12058.valid){
continue;
}
CheckValue<IkReal> x12059=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x12059.valid){
continue;
}
if( IKabs(((-1.0)*(x12058.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12059.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x12058.value)))+IKsqr(((x12059.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x12058.value)), ((x12059.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12060=IKsin(j4);
IkReal x12061=IKcos(j4);
IkReal x12062=(cj5*r20);
IkReal x12063=((1.0)*cj2);
IkReal x12064=(cj5*r10);
IkReal x12065=((1.0)*x12060);
IkReal x12066=(sj5*x12060);
IkReal x12067=((1.0)*sj5*x12061);
evalcond[0]=((-1.0)*r02*x12061);
evalcond[1]=(((r21*x12066))+(((-1.0)*x12062*x12065)));
evalcond[2]=(((x12061*x12064))+(((-1.0)*r11*x12067)));
evalcond[3]=((1.0)+(((-1.0)*x12064*x12065))+((r11*x12066)));
evalcond[4]=((((-1.0)*cj1*sj2))+(((-1.0)*r02*x12065))+(((-1.0)*sj1*x12063)));
evalcond[5]=(((x12061*x12062))+((sj1*sj2))+(((-1.0)*r21*x12067))+(((-1.0)*cj1*x12063)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12068=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12068);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12068);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[1]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12069=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12069);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12069);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12070=IKPowWithIntegerCheck(r22,-1);
if(!x12070.valid){
continue;
}
CheckValue<IkReal> x12071=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x12071.valid){
continue;
}
if( IKabs(((x12070.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12071.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12070.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x12071.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12070.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x12071.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12072=IKsin(j4);
IkReal x12073=IKcos(j4);
IkReal x12074=((1.0)*cj2);
IkReal x12075=(cj5*x12073);
IkReal x12076=(sj5*x12072);
IkReal x12077=((1.0)*sj5*x12073);
IkReal x12078=((1.0)*cj5*x12072);
evalcond[0]=((-1.0)*r22*x12073);
evalcond[1]=((((-1.0)*r00*x12078))+((r01*x12076)));
evalcond[2]=(((sj1*sj2))+(((-1.0)*r22*x12072))+(((-1.0)*cj1*x12074)));
evalcond[3]=(((r10*x12075))+(((-1.0)*r11*x12077)));
evalcond[4]=((1.0)+((r11*x12076))+(((-1.0)*r10*x12078)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*sj1*x12074))+(((-1.0)*r01*x12077))+((r00*x12075)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12079=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x12079.valid){
continue;
}
CheckValue<IkReal> x12080=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x12080.valid){
continue;
}
if( IKabs(((-1.0)*(x12079.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12080.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x12079.value)))+IKsqr(((x12080.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x12079.value)), ((x12080.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12081=IKsin(j4);
IkReal x12082=IKcos(j4);
IkReal x12083=((1.0)*cj2);
IkReal x12084=(cj5*x12082);
IkReal x12085=(sj5*x12081);
IkReal x12086=((1.0)*sj5*x12082);
IkReal x12087=((1.0)*cj5*x12081);
evalcond[0]=((-1.0)*r22*x12082);
evalcond[1]=(((r01*x12085))+(((-1.0)*r00*x12087)));
evalcond[2]=((((-1.0)*r22*x12081))+((sj1*sj2))+(((-1.0)*cj1*x12083)));
evalcond[3]=((((-1.0)*r11*x12086))+((r10*x12084)));
evalcond[4]=((1.0)+((r11*x12085))+(((-1.0)*r10*x12087)));
evalcond[5]=(((r00*x12084))+(((-1.0)*cj1*sj2))+(((-1.0)*r01*x12086))+(((-1.0)*sj1*x12083)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12088=cj5*cj5;
IkReal x12089=r11*r11;
IkReal x12090=(cj5*r10);
IkReal x12091=(r11*sj5);
CheckValue<IkReal> x12092 = IKatan2WithCheck(IkReal(((((-1.0)*x12091))+x12090)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x12092.valid){
continue;
}
CheckValue<IkReal> x12093=IKPowWithIntegerCheck(IKsign(((r12*r12)+((x12088*(r10*r10)))+(((-2.0)*x12090*x12091))+x12089+(((-1.0)*x12088*x12089)))),-1);
if(!x12093.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12092.value)+(((1.5707963267949)*(x12093.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12094=IKsin(j4);
IkReal x12095=IKcos(j4);
IkReal x12096=(cj5*r10);
IkReal x12097=(r01*sj5);
IkReal x12098=((1.0)*cj2);
IkReal x12099=(cj5*r00);
IkReal x12100=(cj5*r20);
IkReal x12101=((1.0)*x12095);
IkReal x12102=((1.0)*x12094);
IkReal x12103=(sj5*x12094);
evalcond[0]=((((-1.0)*x12100*x12102))+(((-1.0)*r22*x12101))+((r21*x12103)));
evalcond[1]=(((x12094*x12097))+(((-1.0)*x12099*x12102))+(((-1.0)*r02*x12101)));
evalcond[2]=((((-1.0)*r12*x12102))+(((-1.0)*r11*sj5*x12101))+((x12095*x12096)));
evalcond[3]=((1.0)+(((-1.0)*r12*x12101))+(((-1.0)*x12096*x12102))+((r11*x12103)));
evalcond[4]=(((x12095*x12100))+(((-1.0)*r22*x12102))+((sj1*sj2))+(((-1.0)*cj1*x12098))+(((-1.0)*r21*sj5*x12101)));
evalcond[5]=((((-1.0)*sj1*x12098))+(((-1.0)*cj1*sj2))+((x12095*x12099))+(((-1.0)*x12097*x12101))+(((-1.0)*r02*x12102)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12104=((1.0)*cj5);
CheckValue<IkReal> x12105 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x12104)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12105.valid){
continue;
}
CheckValue<IkReal> x12106=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x12104)))),-1);
if(!x12106.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12105.value)+(((1.5707963267949)*(x12106.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12107=IKsin(j4);
IkReal x12108=IKcos(j4);
IkReal x12109=(cj5*r10);
IkReal x12110=(r01*sj5);
IkReal x12111=((1.0)*cj2);
IkReal x12112=(cj5*r00);
IkReal x12113=(cj5*r20);
IkReal x12114=((1.0)*x12108);
IkReal x12115=((1.0)*x12107);
IkReal x12116=(sj5*x12107);
evalcond[0]=((((-1.0)*r22*x12114))+((r21*x12116))+(((-1.0)*x12113*x12115)));
evalcond[1]=(((x12107*x12110))+(((-1.0)*x12112*x12115))+(((-1.0)*r02*x12114)));
evalcond[2]=((((-1.0)*r12*x12115))+(((-1.0)*r11*sj5*x12114))+((x12108*x12109)));
evalcond[3]=((1.0)+(((-1.0)*r12*x12114))+((r11*x12116))+(((-1.0)*x12109*x12115)));
evalcond[4]=(((x12108*x12113))+(((-1.0)*r22*x12115))+((sj1*sj2))+(((-1.0)*cj1*x12111))+(((-1.0)*r21*sj5*x12114)));
evalcond[5]=(((x12108*x12112))+(((-1.0)*sj1*x12111))+(((-1.0)*cj1*sj2))+(((-1.0)*x12110*x12114))+(((-1.0)*r02*x12115)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12117=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x12117.valid){
continue;
}
CheckValue<IkReal> x12118 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12118.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12117.value)))+(x12118.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12119=IKsin(j4);
IkReal x12120=IKcos(j4);
IkReal x12121=(cj5*r10);
IkReal x12122=(r01*sj5);
IkReal x12123=((1.0)*cj2);
IkReal x12124=(cj5*r00);
IkReal x12125=(cj5*r20);
IkReal x12126=((1.0)*x12120);
IkReal x12127=((1.0)*x12119);
IkReal x12128=(sj5*x12119);
evalcond[0]=(((r21*x12128))+(((-1.0)*x12125*x12127))+(((-1.0)*r22*x12126)));
evalcond[1]=(((x12119*x12122))+(((-1.0)*x12124*x12127))+(((-1.0)*r02*x12126)));
evalcond[2]=((((-1.0)*r11*sj5*x12126))+((x12120*x12121))+(((-1.0)*r12*x12127)));
evalcond[3]=((1.0)+(((-1.0)*r12*x12126))+(((-1.0)*x12121*x12127))+((r11*x12128)));
evalcond[4]=(((x12120*x12125))+(((-1.0)*cj1*x12123))+((sj1*sj2))+(((-1.0)*r22*x12127))+(((-1.0)*r21*sj5*x12126)));
evalcond[5]=((((-1.0)*sj1*x12123))+((x12120*x12124))+(((-1.0)*cj1*sj2))+(((-1.0)*r02*x12127))+(((-1.0)*x12122*x12126)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x12129=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12129;
j4eval[1]=IKsign(x12129);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x12130=((1.0)*cj5);
IkReal x12131=((((-1.0)*r00*sj5))+(((-1.0)*r01*x12130)));
j4eval[0]=x12131;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x12130))))));
j4eval[2]=IKsign(x12131);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x12132=(sj1*sj2);
IkReal x12133=(cj5*r10);
IkReal x12134=(r11*sj5);
IkReal x12135=(cj1*cj2);
IkReal x12136=((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)));
j4eval[0]=x12136;
j4eval[1]=((IKabs((((x12133*x12135))+(((-1.0)*x12134*x12135))+((x12132*x12134))+(((-1.0)*x12132*x12133)))))+(IKabs(((((-1.0)*r12*x12132))+((r12*x12135))))));
j4eval[2]=IKsign(x12136);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12137=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12137);
rxp1_1=(px*r21);
rxp1_2=(r11*x12137);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
j4eval[1]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12138=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12138);
rxp1_1=(px*r21);
rxp1_2=(r11*x12138);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x12139=((1.0)*cj5);
j4eval[0]=(((r11*sj5))+(((-1.0)*r10*x12139)));
j4eval[1]=(((r21*sj5))+(((-1.0)*r20*x12139)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12140=((1.0)*cj5);
CheckValue<IkReal> x12141=IKPowWithIntegerCheck((((r11*sj5))+(((-1.0)*r10*x12140))),-1);
if(!x12141.valid){
continue;
}
CheckValue<IkReal> x12142=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*r20*x12140))),-1);
if(!x12142.valid){
continue;
}
if( IKabs(((-1.0)*(x12141.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12142.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x12141.value)))+IKsqr(((x12142.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x12141.value)), ((x12142.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12143=IKsin(j4);
IkReal x12144=IKcos(j4);
IkReal x12145=((1.0)*cj2);
IkReal x12146=(r21*sj5);
IkReal x12147=(r11*sj5);
IkReal x12148=((1.0)*cj5*x12143);
IkReal x12149=((1.0)*cj5*x12144);
evalcond[0]=((-1.0)*r02*x12144);
evalcond[1]=(((x12143*x12146))+(((-1.0)*r20*x12148)));
evalcond[2]=(((r02*x12143))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x12145)));
evalcond[3]=(((x12144*x12147))+(((-1.0)*r10*x12149)));
evalcond[4]=((1.0)+((x12143*x12147))+(((-1.0)*r10*x12148)));
evalcond[5]=(((sj1*sj2))+(((-1.0)*cj1*x12145))+(((-1.0)*r20*x12149))+((x12144*x12146)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12150=IKPowWithIntegerCheck(r02,-1);
if(!x12150.valid){
continue;
}
CheckValue<IkReal> x12151=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x12151.valid){
continue;
}
if( IKabs(((x12150.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12151.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12150.value)*((((cj2*sj1))+((cj1*sj2))))))+IKsqr(((x12151.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12150.value)*((((cj2*sj1))+((cj1*sj2))))), ((x12151.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12152=IKsin(j4);
IkReal x12153=IKcos(j4);
IkReal x12154=((1.0)*cj2);
IkReal x12155=(r21*sj5);
IkReal x12156=(r11*sj5);
IkReal x12157=((1.0)*cj5*x12152);
IkReal x12158=((1.0)*cj5*x12153);
evalcond[0]=((-1.0)*r02*x12153);
evalcond[1]=((((-1.0)*r20*x12157))+((x12152*x12155)));
evalcond[2]=(((r02*x12152))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x12154)));
evalcond[3]=(((x12153*x12156))+(((-1.0)*r10*x12158)));
evalcond[4]=((1.0)+((x12152*x12156))+(((-1.0)*r10*x12157)));
evalcond[5]=(((sj1*sj2))+((x12153*x12155))+(((-1.0)*cj1*x12154))+(((-1.0)*r20*x12158)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12159=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x12159;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12159);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12160=((1.0)*cj5);
IkReal x12161=((((-1.0)*r21*x12160))+(((-1.0)*r20*sj5)));
j4eval[0]=x12161;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x12160))))));
j4eval[2]=IKsign(x12161);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12162=cj5*cj5;
IkReal x12163=(r11*r21);
IkReal x12164=((1.0)*r20);
IkReal x12165=(cj5*sj5);
IkReal x12166=((((-1.0)*x12163))+((r11*r20*x12165))+(((-1.0)*r12*r22))+(((-1.0)*r10*x12162*x12164))+((r10*r21*x12165))+((x12162*x12163)));
j4eval[0]=x12166;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*cj5*x12164))+((r21*sj5))))));
j4eval[2]=IKsign(x12166);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12167=cj5*cj5;
IkReal x12168=(r21*sj5);
IkReal x12169=(r11*r21);
IkReal x12170=((1.0)*r20);
CheckValue<IkReal> x12171=IKPowWithIntegerCheck(IKsign(((((-1.0)*x12169))+(((-1.0)*r12*r22))+((cj5*r10*x12168))+(((-1.0)*r10*x12167*x12170))+((cj5*r11*r20*sj5))+((x12167*x12169)))),-1);
if(!x12171.valid){
continue;
}
CheckValue<IkReal> x12172 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*x12170))+x12168)),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12172.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12171.value)))+(x12172.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12173=IKcos(j4);
IkReal x12174=IKsin(j4);
IkReal x12175=(cj5*r00);
IkReal x12176=(cj5*r20);
IkReal x12177=(cj5*r10);
IkReal x12178=((1.0)*x12173);
IkReal x12179=((1.0)*x12174);
IkReal x12180=(sj5*x12173);
IkReal x12181=(sj5*x12174);
evalcond[0]=(((r21*x12180))+(((-1.0)*x12176*x12178))+((r22*x12174)));
evalcond[1]=((((-1.0)*x12177*x12178))+((r11*x12180))+((r12*x12174)));
evalcond[2]=((((-1.0)*r22*x12178))+((r21*x12181))+(((-1.0)*x12176*x12179)));
evalcond[3]=((((-1.0)*x12175*x12179))+((r01*x12181))+(((-1.0)*r02*x12178)));
evalcond[4]=((-1.0)+(((-1.0)*x12175*x12178))+((r01*x12180))+((r02*x12174)));
evalcond[5]=((1.0)+(((-1.0)*x12177*x12179))+((r11*x12181))+(((-1.0)*r12*x12178)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12182=((1.0)*cj5);
CheckValue<IkReal> x12183 = IKatan2WithCheck(IkReal((((r11*sj5))+(((-1.0)*r10*x12182)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12183.valid){
continue;
}
CheckValue<IkReal> x12184=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x12182))+(((-1.0)*r20*sj5)))),-1);
if(!x12184.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12183.value)+(((1.5707963267949)*(x12184.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12185=IKcos(j4);
IkReal x12186=IKsin(j4);
IkReal x12187=(cj5*r00);
IkReal x12188=(cj5*r20);
IkReal x12189=(cj5*r10);
IkReal x12190=((1.0)*x12185);
IkReal x12191=((1.0)*x12186);
IkReal x12192=(sj5*x12185);
IkReal x12193=(sj5*x12186);
evalcond[0]=(((r21*x12192))+((r22*x12186))+(((-1.0)*x12188*x12190)));
evalcond[1]=(((r12*x12186))+((r11*x12192))+(((-1.0)*x12189*x12190)));
evalcond[2]=(((r21*x12193))+(((-1.0)*x12188*x12191))+(((-1.0)*r22*x12190)));
evalcond[3]=((((-1.0)*r02*x12190))+(((-1.0)*x12187*x12191))+((r01*x12193)));
evalcond[4]=((-1.0)+(((-1.0)*x12187*x12190))+((r02*x12186))+((r01*x12192)));
evalcond[5]=((1.0)+((r11*x12193))+(((-1.0)*r12*x12190))+(((-1.0)*x12189*x12191)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12194 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12194.valid){
continue;
}
CheckValue<IkReal> x12195=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x12195.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12194.value)+(((1.5707963267949)*(x12195.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12196=IKcos(j4);
IkReal x12197=IKsin(j4);
IkReal x12198=(cj5*r00);
IkReal x12199=(cj5*r20);
IkReal x12200=(cj5*r10);
IkReal x12201=((1.0)*x12196);
IkReal x12202=((1.0)*x12197);
IkReal x12203=(sj5*x12196);
IkReal x12204=(sj5*x12197);
evalcond[0]=(((r22*x12197))+((r21*x12203))+(((-1.0)*x12199*x12201)));
evalcond[1]=(((r12*x12197))+(((-1.0)*x12200*x12201))+((r11*x12203)));
evalcond[2]=((((-1.0)*r22*x12201))+((r21*x12204))+(((-1.0)*x12199*x12202)));
evalcond[3]=((((-1.0)*r02*x12201))+((r01*x12204))+(((-1.0)*x12198*x12202)));
evalcond[4]=((-1.0)+((r02*x12197))+((r01*x12203))+(((-1.0)*x12198*x12201)));
evalcond[5]=((1.0)+(((-1.0)*x12200*x12202))+(((-1.0)*r12*x12201))+((r11*x12204)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x12205=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12205;
j4eval[1]=IKsign(x12205);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x12206=((1.0)*cj5);
IkReal x12207=((((-1.0)*r10*sj5))+(((-1.0)*r11*x12206)));
j4eval[0]=x12207;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x12206))))));
j4eval[2]=IKsign(x12207);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x12208=cj5*cj5;
IkReal x12209=(r11*r21);
IkReal x12210=((1.0)*r20);
IkReal x12211=(cj5*sj5);
IkReal x12212=((((-1.0)*x12209))+(((-1.0)*r12*r22))+(((-1.0)*r10*x12208*x12210))+((x12208*x12209))+((r11*r20*x12211))+((r10*r21*x12211)));
j4eval[0]=x12212;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*cj5*x12210))))));
j4eval[2]=IKsign(x12212);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12213=cj5*cj5;
IkReal x12214=(r21*sj5);
IkReal x12215=(r11*r21);
IkReal x12216=((1.0)*r20);
CheckValue<IkReal> x12217=IKPowWithIntegerCheck(IKsign((((x12213*x12215))+(((-1.0)*r10*x12213*x12216))+(((-1.0)*r12*r22))+((cj5*r10*x12214))+((cj5*r11*r20*sj5))+(((-1.0)*x12215)))),-1);
if(!x12217.valid){
continue;
}
CheckValue<IkReal> x12218 = IKatan2WithCheck(IkReal((x12214+(((-1.0)*cj5*x12216)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12218.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12217.value)))+(x12218.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12219=IKcos(j4);
IkReal x12220=IKsin(j4);
IkReal x12221=(cj5*r00);
IkReal x12222=(cj5*r20);
IkReal x12223=(cj5*r10);
IkReal x12224=((1.0)*x12219);
IkReal x12225=((1.0)*x12220);
IkReal x12226=(sj5*x12219);
IkReal x12227=(sj5*x12220);
evalcond[0]=(((r22*x12220))+((r21*x12226))+(((-1.0)*x12222*x12224)));
evalcond[1]=(((r11*x12226))+(((-1.0)*x12223*x12224))+((r12*x12220)));
evalcond[2]=((((-1.0)*r22*x12224))+((r21*x12227))+(((-1.0)*x12222*x12225)));
evalcond[3]=(((r01*x12227))+(((-1.0)*r02*x12224))+(((-1.0)*x12221*x12225)));
evalcond[4]=((1.0)+((r02*x12220))+((r01*x12226))+(((-1.0)*x12221*x12224)));
evalcond[5]=((1.0)+((r11*x12227))+(((-1.0)*r12*x12224))+(((-1.0)*x12223*x12225)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12228=((1.0)*cj5);
CheckValue<IkReal> x12229 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*r20*x12228)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12229.valid){
continue;
}
CheckValue<IkReal> x12230=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x12228)))),-1);
if(!x12230.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12229.value)+(((1.5707963267949)*(x12230.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12231=IKcos(j4);
IkReal x12232=IKsin(j4);
IkReal x12233=(cj5*r00);
IkReal x12234=(cj5*r20);
IkReal x12235=(cj5*r10);
IkReal x12236=((1.0)*x12231);
IkReal x12237=((1.0)*x12232);
IkReal x12238=(sj5*x12231);
IkReal x12239=(sj5*x12232);
evalcond[0]=((((-1.0)*x12234*x12236))+((r22*x12232))+((r21*x12238)));
evalcond[1]=(((r12*x12232))+((r11*x12238))+(((-1.0)*x12235*x12236)));
evalcond[2]=((((-1.0)*r22*x12236))+(((-1.0)*x12234*x12237))+((r21*x12239)));
evalcond[3]=(((r01*x12239))+(((-1.0)*r02*x12236))+(((-1.0)*x12233*x12237)));
evalcond[4]=((1.0)+((r01*x12238))+((r02*x12232))+(((-1.0)*x12233*x12236)));
evalcond[5]=((1.0)+(((-1.0)*r12*x12236))+((r11*x12239))+(((-1.0)*x12235*x12237)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12240=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x12240.valid){
continue;
}
CheckValue<IkReal> x12241 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12241.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12240.value)))+(x12241.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12242=IKcos(j4);
IkReal x12243=IKsin(j4);
IkReal x12244=(cj5*r00);
IkReal x12245=(cj5*r20);
IkReal x12246=(cj5*r10);
IkReal x12247=((1.0)*x12242);
IkReal x12248=((1.0)*x12243);
IkReal x12249=(sj5*x12242);
IkReal x12250=(sj5*x12243);
evalcond[0]=((((-1.0)*x12245*x12247))+((r22*x12243))+((r21*x12249)));
evalcond[1]=(((r11*x12249))+((r12*x12243))+(((-1.0)*x12246*x12247)));
evalcond[2]=((((-1.0)*x12245*x12248))+(((-1.0)*r22*x12247))+((r21*x12250)));
evalcond[3]=(((r01*x12250))+(((-1.0)*x12244*x12248))+(((-1.0)*r02*x12247)));
evalcond[4]=((1.0)+((r01*x12249))+(((-1.0)*x12244*x12247))+((r02*x12243)));
evalcond[5]=((1.0)+(((-1.0)*r12*x12247))+((r11*x12250))+(((-1.0)*x12246*x12248)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x12251=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x12251;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12251);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x12252=((1.0)*cj5);
IkReal x12253=((((-1.0)*r21*x12252))+(((-1.0)*r20*sj5)));
j4eval[0]=x12253;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x12252))))));
j4eval[2]=IKsign(x12253);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x12254=cj5*cj5;
IkReal x12255=(r11*r21);
IkReal x12256=((1.0)*r20);
IkReal x12257=(cj5*sj5);
IkReal x12258=((((-1.0)*r12*r22))+((r10*r21*x12257))+((r11*r20*x12257))+(((-1.0)*r10*x12254*x12256))+(((-1.0)*x12255))+((x12254*x12255)));
j4eval[0]=x12258;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*x12256)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12258);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12259=cj5*cj5;
IkReal x12260=(r21*sj5);
IkReal x12261=(r11*r21);
IkReal x12262=((1.0)*r20);
CheckValue<IkReal> x12263 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*x12262))+x12260)),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12263.valid){
continue;
}
CheckValue<IkReal> x12264=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22))+((cj5*r10*x12260))+(((-1.0)*r10*x12259*x12262))+(((-1.0)*x12261))+((cj5*r11*r20*sj5))+((x12259*x12261)))),-1);
if(!x12264.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12263.value)+(((1.5707963267949)*(x12264.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12265=IKcos(j4);
IkReal x12266=IKsin(j4);
IkReal x12267=(cj5*r00);
IkReal x12268=(cj5*r20);
IkReal x12269=(cj5*r10);
IkReal x12270=((1.0)*x12265);
IkReal x12271=((1.0)*x12266);
IkReal x12272=(sj5*x12265);
IkReal x12273=(sj5*x12266);
evalcond[0]=(((r21*x12272))+(((-1.0)*x12268*x12270))+((r22*x12266)));
evalcond[1]=((((-1.0)*x12269*x12270))+((r12*x12266))+((r11*x12272)));
evalcond[2]=(((r21*x12273))+(((-1.0)*x12268*x12271))+(((-1.0)*r22*x12270)));
evalcond[3]=((((-1.0)*r02*x12270))+(((-1.0)*x12267*x12271))+((r01*x12273)));
evalcond[4]=((-1.0)+(((-1.0)*x12267*x12270))+((r01*x12272))+((r02*x12266)));
evalcond[5]=((1.0)+(((-1.0)*x12269*x12271))+(((-1.0)*r12*x12270))+((r11*x12273)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12274=((1.0)*cj5);
CheckValue<IkReal> x12275 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x12274))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12275.valid){
continue;
}
CheckValue<IkReal> x12276=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x12274))+(((-1.0)*r20*sj5)))),-1);
if(!x12276.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12275.value)+(((1.5707963267949)*(x12276.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12277=IKcos(j4);
IkReal x12278=IKsin(j4);
IkReal x12279=(cj5*r00);
IkReal x12280=(cj5*r20);
IkReal x12281=(cj5*r10);
IkReal x12282=((1.0)*x12277);
IkReal x12283=((1.0)*x12278);
IkReal x12284=(sj5*x12277);
IkReal x12285=(sj5*x12278);
evalcond[0]=((((-1.0)*x12280*x12282))+((r22*x12278))+((r21*x12284)));
evalcond[1]=((((-1.0)*x12281*x12282))+((r11*x12284))+((r12*x12278)));
evalcond[2]=((((-1.0)*x12280*x12283))+(((-1.0)*r22*x12282))+((r21*x12285)));
evalcond[3]=((((-1.0)*x12279*x12283))+((r01*x12285))+(((-1.0)*r02*x12282)));
evalcond[4]=((-1.0)+(((-1.0)*x12279*x12282))+((r02*x12278))+((r01*x12284)));
evalcond[5]=((1.0)+(((-1.0)*x12281*x12283))+(((-1.0)*r12*x12282))+((r11*x12285)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12286 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12286.valid){
continue;
}
CheckValue<IkReal> x12287=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x12287.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12286.value)+(((1.5707963267949)*(x12287.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12288=IKcos(j4);
IkReal x12289=IKsin(j4);
IkReal x12290=(cj5*r00);
IkReal x12291=(cj5*r20);
IkReal x12292=(cj5*r10);
IkReal x12293=((1.0)*x12288);
IkReal x12294=((1.0)*x12289);
IkReal x12295=(sj5*x12288);
IkReal x12296=(sj5*x12289);
evalcond[0]=(((r21*x12295))+(((-1.0)*x12291*x12293))+((r22*x12289)));
evalcond[1]=((((-1.0)*x12292*x12293))+((r11*x12295))+((r12*x12289)));
evalcond[2]=(((r21*x12296))+(((-1.0)*x12291*x12294))+(((-1.0)*r22*x12293)));
evalcond[3]=((((-1.0)*x12290*x12294))+((r01*x12296))+(((-1.0)*r02*x12293)));
evalcond[4]=((-1.0)+(((-1.0)*x12290*x12293))+((r01*x12295))+((r02*x12289)));
evalcond[5]=((1.0)+(((-1.0)*x12292*x12294))+((r11*x12296))+(((-1.0)*r12*x12293)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x12297=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12297;
j4eval[1]=IKsign(x12297);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x12298=((1.0)*cj5);
IkReal x12299=((((-1.0)*r10*sj5))+(((-1.0)*r11*x12298)));
j4eval[0]=x12299;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x12298)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12299);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x12300=cj5*cj5;
IkReal x12301=(r11*r21);
IkReal x12302=((1.0)*r20);
IkReal x12303=(cj5*sj5);
IkReal x12304=(((x12300*x12301))+(((-1.0)*x12301))+(((-1.0)*r12*r22))+((r10*r21*x12303))+((r11*r20*x12303))+(((-1.0)*r10*x12300*x12302)));
j4eval[0]=x12304;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*cj5*x12302))))));
j4eval[2]=IKsign(x12304);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12305=cj5*cj5;
IkReal x12306=(r21*sj5);
IkReal x12307=(r11*r21);
IkReal x12308=((1.0)*r20);
CheckValue<IkReal> x12309=IKPowWithIntegerCheck(IKsign(((((-1.0)*x12307))+(((-1.0)*r12*r22))+((x12305*x12307))+((cj5*r10*x12306))+(((-1.0)*r10*x12305*x12308))+((cj5*r11*r20*sj5)))),-1);
if(!x12309.valid){
continue;
}
CheckValue<IkReal> x12310 = IKatan2WithCheck(IkReal((x12306+(((-1.0)*cj5*x12308)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12310.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12309.value)))+(x12310.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12311=IKcos(j4);
IkReal x12312=IKsin(j4);
IkReal x12313=(cj5*r00);
IkReal x12314=(cj5*r20);
IkReal x12315=(cj5*r10);
IkReal x12316=((1.0)*x12311);
IkReal x12317=((1.0)*x12312);
IkReal x12318=(sj5*x12311);
IkReal x12319=(sj5*x12312);
evalcond[0]=(((r22*x12312))+(((-1.0)*x12314*x12316))+((r21*x12318)));
evalcond[1]=(((r12*x12312))+((r11*x12318))+(((-1.0)*x12315*x12316)));
evalcond[2]=((((-1.0)*x12314*x12317))+(((-1.0)*r22*x12316))+((r21*x12319)));
evalcond[3]=((((-1.0)*r02*x12316))+(((-1.0)*x12313*x12317))+((r01*x12319)));
evalcond[4]=((1.0)+((r02*x12312))+(((-1.0)*x12313*x12316))+((r01*x12318)));
evalcond[5]=((1.0)+((r11*x12319))+(((-1.0)*x12315*x12317))+(((-1.0)*r12*x12316)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12320=((1.0)*cj5);
CheckValue<IkReal> x12321=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x12320)))),-1);
if(!x12321.valid){
continue;
}
CheckValue<IkReal> x12322 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*r20*x12320)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12322.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12321.value)))+(x12322.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12323=IKcos(j4);
IkReal x12324=IKsin(j4);
IkReal x12325=(cj5*r00);
IkReal x12326=(cj5*r20);
IkReal x12327=(cj5*r10);
IkReal x12328=((1.0)*x12323);
IkReal x12329=((1.0)*x12324);
IkReal x12330=(sj5*x12323);
IkReal x12331=(sj5*x12324);
evalcond[0]=(((r21*x12330))+(((-1.0)*x12326*x12328))+((r22*x12324)));
evalcond[1]=((((-1.0)*x12327*x12328))+((r12*x12324))+((r11*x12330)));
evalcond[2]=((((-1.0)*r22*x12328))+((r21*x12331))+(((-1.0)*x12326*x12329)));
evalcond[3]=(((r01*x12331))+(((-1.0)*x12325*x12329))+(((-1.0)*r02*x12328)));
evalcond[4]=((1.0)+((r01*x12330))+((r02*x12324))+(((-1.0)*x12325*x12328)));
evalcond[5]=((1.0)+(((-1.0)*x12327*x12329))+(((-1.0)*r12*x12328))+((r11*x12331)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12332=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x12332.valid){
continue;
}
CheckValue<IkReal> x12333 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12333.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12332.value)))+(x12333.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12334=IKcos(j4);
IkReal x12335=IKsin(j4);
IkReal x12336=(cj5*r00);
IkReal x12337=(cj5*r20);
IkReal x12338=(cj5*r10);
IkReal x12339=((1.0)*x12334);
IkReal x12340=((1.0)*x12335);
IkReal x12341=(sj5*x12334);
IkReal x12342=(sj5*x12335);
evalcond[0]=(((r21*x12341))+((r22*x12335))+(((-1.0)*x12337*x12339)));
evalcond[1]=((((-1.0)*x12338*x12339))+((r12*x12335))+((r11*x12341)));
evalcond[2]=((((-1.0)*r22*x12339))+(((-1.0)*x12337*x12340))+((r21*x12342)));
evalcond[3]=(((r01*x12342))+(((-1.0)*r02*x12339))+(((-1.0)*x12336*x12340)));
evalcond[4]=((1.0)+((r01*x12341))+((r02*x12335))+(((-1.0)*x12336*x12339)));
evalcond[5]=((1.0)+(((-1.0)*x12338*x12340))+((r11*x12342))+(((-1.0)*r12*x12339)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12343=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12343;
j4eval[1]=IKsign(x12343);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12344=((1.0)*cj5);
IkReal x12345=((((-1.0)*r10*sj5))+(((-1.0)*r11*x12344)));
j4eval[0]=x12345;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x12344))))));
j4eval[2]=IKsign(x12345);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12346=cj5*cj5;
IkReal x12347=(r11*r21);
IkReal x12348=((1.0)*r20);
IkReal x12349=(cj5*sj5);
IkReal x12350=((((-1.0)*r12*r22))+((r11*r20*x12349))+((r10*r21*x12349))+((x12346*x12347))+(((-1.0)*r10*x12346*x12348))+(((-1.0)*x12347)));
j4eval[0]=x12350;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*cj5*x12348))+((r21*sj5))))));
j4eval[2]=IKsign(x12350);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12351=cj5*cj5;
IkReal x12352=(r21*sj5);
IkReal x12353=(r11*r21);
IkReal x12354=((1.0)*r20);
CheckValue<IkReal> x12355 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*x12354))+x12352)),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12355.valid){
continue;
}
CheckValue<IkReal> x12356=IKPowWithIntegerCheck(IKsign(((((-1.0)*x12353))+((cj5*r10*x12352))+((x12351*x12353))+(((-1.0)*r12*r22))+(((-1.0)*r10*x12351*x12354))+((cj5*r11*r20*sj5)))),-1);
if(!x12356.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12355.value)+(((1.5707963267949)*(x12356.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12357=IKcos(j4);
IkReal x12358=IKsin(j4);
IkReal x12359=(cj5*r00);
IkReal x12360=(cj5*r20);
IkReal x12361=(cj5*r10);
IkReal x12362=((1.0)*x12357);
IkReal x12363=((1.0)*x12358);
IkReal x12364=(sj5*x12357);
IkReal x12365=(sj5*x12358);
evalcond[0]=(((r22*x12358))+((r21*x12364))+(((-1.0)*x12360*x12362)));
evalcond[1]=(((r11*x12364))+(((-1.0)*x12361*x12362))+((r12*x12358)));
evalcond[2]=((((-1.0)*r22*x12362))+((r21*x12365))+(((-1.0)*x12360*x12363)));
evalcond[3]=((((-1.0)*x12359*x12363))+(((-1.0)*r02*x12362))+((r01*x12365)));
evalcond[4]=((1.0)+(((-1.0)*x12359*x12362))+((r02*x12358))+((r01*x12364)));
evalcond[5]=((1.0)+((r11*x12365))+(((-1.0)*r12*x12362))+(((-1.0)*x12361*x12363)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12366=((1.0)*cj5);
CheckValue<IkReal> x12367 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*r20*x12366)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12367.valid){
continue;
}
CheckValue<IkReal> x12368=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x12366)))),-1);
if(!x12368.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12367.value)+(((1.5707963267949)*(x12368.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12369=IKcos(j4);
IkReal x12370=IKsin(j4);
IkReal x12371=(cj5*r00);
IkReal x12372=(cj5*r20);
IkReal x12373=(cj5*r10);
IkReal x12374=((1.0)*x12369);
IkReal x12375=((1.0)*x12370);
IkReal x12376=(sj5*x12369);
IkReal x12377=(sj5*x12370);
evalcond[0]=(((r21*x12376))+((r22*x12370))+(((-1.0)*x12372*x12374)));
evalcond[1]=(((r11*x12376))+(((-1.0)*x12373*x12374))+((r12*x12370)));
evalcond[2]=((((-1.0)*r22*x12374))+((r21*x12377))+(((-1.0)*x12372*x12375)));
evalcond[3]=((((-1.0)*r02*x12374))+(((-1.0)*x12371*x12375))+((r01*x12377)));
evalcond[4]=((1.0)+(((-1.0)*x12371*x12374))+((r02*x12370))+((r01*x12376)));
evalcond[5]=((1.0)+((r11*x12377))+(((-1.0)*r12*x12374))+(((-1.0)*x12373*x12375)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12378=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x12378.valid){
continue;
}
CheckValue<IkReal> x12379 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12379.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12378.value)))+(x12379.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12380=IKcos(j4);
IkReal x12381=IKsin(j4);
IkReal x12382=(cj5*r00);
IkReal x12383=(cj5*r20);
IkReal x12384=(cj5*r10);
IkReal x12385=((1.0)*x12380);
IkReal x12386=((1.0)*x12381);
IkReal x12387=(sj5*x12380);
IkReal x12388=(sj5*x12381);
evalcond[0]=((((-1.0)*x12383*x12385))+((r21*x12387))+((r22*x12381)));
evalcond[1]=(((r12*x12381))+(((-1.0)*x12384*x12385))+((r11*x12387)));
evalcond[2]=((((-1.0)*x12383*x12386))+((r21*x12388))+(((-1.0)*r22*x12385)));
evalcond[3]=((((-1.0)*r02*x12385))+(((-1.0)*x12382*x12386))+((r01*x12388)));
evalcond[4]=((1.0)+((r02*x12381))+(((-1.0)*x12382*x12385))+((r01*x12387)));
evalcond[5]=((1.0)+(((-1.0)*x12384*x12386))+((r11*x12388))+(((-1.0)*r12*x12385)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x12389=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x12389;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12389);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x12390=((1.0)*cj5);
IkReal x12391=((((-1.0)*r21*x12390))+(((-1.0)*r20*sj5)));
j4eval[0]=x12391;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x12390))))));
j4eval[2]=IKsign(x12391);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x12392=cj5*cj5;
IkReal x12393=(r11*r21);
IkReal x12394=((1.0)*r20);
IkReal x12395=(cj5*sj5);
IkReal x12396=(((r11*r20*x12395))+(((-1.0)*r12*r22))+((x12392*x12393))+(((-1.0)*x12393))+(((-1.0)*r10*x12392*x12394))+((r10*r21*x12395)));
j4eval[0]=x12396;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*cj5*x12394))))));
j4eval[2]=IKsign(x12396);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12397=cj5*cj5;
IkReal x12398=(r21*sj5);
IkReal x12399=(r11*r21);
IkReal x12400=((1.0)*r20);
CheckValue<IkReal> x12401=IKPowWithIntegerCheck(IKsign((((cj5*r10*x12398))+(((-1.0)*r12*r22))+(((-1.0)*r10*x12397*x12400))+((x12397*x12399))+(((-1.0)*x12399))+((cj5*r11*r20*sj5)))),-1);
if(!x12401.valid){
continue;
}
CheckValue<IkReal> x12402 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*x12400))+x12398)),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12402.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12401.value)))+(x12402.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12403=IKcos(j4);
IkReal x12404=IKsin(j4);
IkReal x12405=(cj5*r00);
IkReal x12406=(cj5*r20);
IkReal x12407=(cj5*r10);
IkReal x12408=((1.0)*x12403);
IkReal x12409=((1.0)*x12404);
IkReal x12410=(sj5*x12403);
IkReal x12411=(sj5*x12404);
evalcond[0]=(((r21*x12410))+((r22*x12404))+(((-1.0)*x12406*x12408)));
evalcond[1]=(((r11*x12410))+(((-1.0)*x12407*x12408))+((r12*x12404)));
evalcond[2]=(((r21*x12411))+(((-1.0)*r22*x12408))+(((-1.0)*x12406*x12409)));
evalcond[3]=(((r01*x12411))+(((-1.0)*x12405*x12409))+(((-1.0)*r02*x12408)));
evalcond[4]=((-1.0)+((r02*x12404))+((r01*x12410))+(((-1.0)*x12405*x12408)));
evalcond[5]=((1.0)+((r11*x12411))+(((-1.0)*r12*x12408))+(((-1.0)*x12407*x12409)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12412=((1.0)*cj5);
CheckValue<IkReal> x12413 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x12412))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12413.valid){
continue;
}
CheckValue<IkReal> x12414=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x12412))+(((-1.0)*r20*sj5)))),-1);
if(!x12414.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12413.value)+(((1.5707963267949)*(x12414.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12415=IKcos(j4);
IkReal x12416=IKsin(j4);
IkReal x12417=(cj5*r00);
IkReal x12418=(cj5*r20);
IkReal x12419=(cj5*r10);
IkReal x12420=((1.0)*x12415);
IkReal x12421=((1.0)*x12416);
IkReal x12422=(sj5*x12415);
IkReal x12423=(sj5*x12416);
evalcond[0]=((((-1.0)*x12418*x12420))+((r21*x12422))+((r22*x12416)));
evalcond[1]=(((r12*x12416))+(((-1.0)*x12419*x12420))+((r11*x12422)));
evalcond[2]=((((-1.0)*x12418*x12421))+((r21*x12423))+(((-1.0)*r22*x12420)));
evalcond[3]=((((-1.0)*x12417*x12421))+((r01*x12423))+(((-1.0)*r02*x12420)));
evalcond[4]=((-1.0)+(((-1.0)*x12417*x12420))+((r02*x12416))+((r01*x12422)));
evalcond[5]=((1.0)+(((-1.0)*x12419*x12421))+((r11*x12423))+(((-1.0)*r12*x12420)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12424 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12424.valid){
continue;
}
CheckValue<IkReal> x12425=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x12425.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12424.value)+(((1.5707963267949)*(x12425.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12426=IKcos(j4);
IkReal x12427=IKsin(j4);
IkReal x12428=(cj5*r00);
IkReal x12429=(cj5*r20);
IkReal x12430=(cj5*r10);
IkReal x12431=((1.0)*x12426);
IkReal x12432=((1.0)*x12427);
IkReal x12433=(sj5*x12426);
IkReal x12434=(sj5*x12427);
evalcond[0]=(((r21*x12433))+(((-1.0)*x12429*x12431))+((r22*x12427)));
evalcond[1]=((((-1.0)*x12430*x12431))+((r12*x12427))+((r11*x12433)));
evalcond[2]=(((r21*x12434))+(((-1.0)*x12429*x12432))+(((-1.0)*r22*x12431)));
evalcond[3]=((((-1.0)*x12428*x12432))+(((-1.0)*r02*x12431))+((r01*x12434)));
evalcond[4]=((-1.0)+(((-1.0)*x12428*x12431))+((r02*x12427))+((r01*x12433)));
evalcond[5]=((1.0)+(((-1.0)*x12430*x12432))+(((-1.0)*r12*x12431))+((r11*x12434)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x12435=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12435;
j4eval[1]=IKsign(x12435);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x12436=((1.0)*cj5);
IkReal x12437=((((-1.0)*r10*sj5))+(((-1.0)*r11*x12436)));
j4eval[0]=x12437;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x12436))))));
j4eval[2]=IKsign(x12437);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x12438=cj5*cj5;
IkReal x12439=(r11*r21);
IkReal x12440=((1.0)*r20);
IkReal x12441=(cj5*sj5);
IkReal x12442=(((r10*r21*x12441))+((r11*r20*x12441))+(((-1.0)*r12*r22))+(((-1.0)*r10*x12438*x12440))+((x12438*x12439))+(((-1.0)*x12439)));
j4eval[0]=x12442;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*x12440)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12442);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12443=cj5*cj5;
IkReal x12444=(r21*sj5);
IkReal x12445=(r11*r21);
IkReal x12446=((1.0)*r20);
CheckValue<IkReal> x12447=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x12443*x12446))+(((-1.0)*x12445))+((x12443*x12445))+(((-1.0)*r12*r22))+((cj5*r11*r20*sj5))+((cj5*r10*x12444)))),-1);
if(!x12447.valid){
continue;
}
CheckValue<IkReal> x12448 = IKatan2WithCheck(IkReal((x12444+(((-1.0)*cj5*x12446)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12448.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12447.value)))+(x12448.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12449=IKcos(j4);
IkReal x12450=IKsin(j4);
IkReal x12451=(cj5*r00);
IkReal x12452=(cj5*r20);
IkReal x12453=(cj5*r10);
IkReal x12454=((1.0)*x12449);
IkReal x12455=((1.0)*x12450);
IkReal x12456=(sj5*x12449);
IkReal x12457=(sj5*x12450);
evalcond[0]=(((r22*x12450))+(((-1.0)*x12452*x12454))+((r21*x12456)));
evalcond[1]=(((r11*x12456))+((r12*x12450))+(((-1.0)*x12453*x12454)));
evalcond[2]=((((-1.0)*r22*x12454))+(((-1.0)*x12452*x12455))+((r21*x12457)));
evalcond[3]=((((-1.0)*r02*x12454))+(((-1.0)*x12451*x12455))+((r01*x12457)));
evalcond[4]=((1.0)+((r02*x12450))+(((-1.0)*x12451*x12454))+((r01*x12456)));
evalcond[5]=((1.0)+(((-1.0)*r12*x12454))+((r11*x12457))+(((-1.0)*x12453*x12455)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12458=((1.0)*cj5);
CheckValue<IkReal> x12459=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x12458))+(((-1.0)*r10*sj5)))),-1);
if(!x12459.valid){
continue;
}
CheckValue<IkReal> x12460 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*r20*x12458)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12460.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12459.value)))+(x12460.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12461=IKcos(j4);
IkReal x12462=IKsin(j4);
IkReal x12463=(cj5*r00);
IkReal x12464=(cj5*r20);
IkReal x12465=(cj5*r10);
IkReal x12466=((1.0)*x12461);
IkReal x12467=((1.0)*x12462);
IkReal x12468=(sj5*x12461);
IkReal x12469=(sj5*x12462);
evalcond[0]=((((-1.0)*x12464*x12466))+((r22*x12462))+((r21*x12468)));
evalcond[1]=((((-1.0)*x12465*x12466))+((r12*x12462))+((r11*x12468)));
evalcond[2]=((((-1.0)*x12464*x12467))+(((-1.0)*r22*x12466))+((r21*x12469)));
evalcond[3]=((((-1.0)*r02*x12466))+((r01*x12469))+(((-1.0)*x12463*x12467)));
evalcond[4]=((1.0)+((r01*x12468))+(((-1.0)*x12463*x12466))+((r02*x12462)));
evalcond[5]=((1.0)+(((-1.0)*x12465*x12467))+((r11*x12469))+(((-1.0)*r12*x12466)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12470=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x12470.valid){
continue;
}
CheckValue<IkReal> x12471 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12471.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12470.value)))+(x12471.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12472=IKcos(j4);
IkReal x12473=IKsin(j4);
IkReal x12474=(cj5*r00);
IkReal x12475=(cj5*r20);
IkReal x12476=(cj5*r10);
IkReal x12477=((1.0)*x12472);
IkReal x12478=((1.0)*x12473);
IkReal x12479=(sj5*x12472);
IkReal x12480=(sj5*x12473);
evalcond[0]=((((-1.0)*x12475*x12477))+((r22*x12473))+((r21*x12479)));
evalcond[1]=((((-1.0)*x12476*x12477))+((r12*x12473))+((r11*x12479)));
evalcond[2]=((((-1.0)*r22*x12477))+(((-1.0)*x12475*x12478))+((r21*x12480)));
evalcond[3]=((((-1.0)*r02*x12477))+((r01*x12480))+(((-1.0)*x12474*x12478)));
evalcond[4]=((1.0)+((r01*x12479))+((r02*x12473))+(((-1.0)*x12474*x12477)));
evalcond[5]=((1.0)+(((-1.0)*x12476*x12478))+((r11*x12480))+(((-1.0)*r12*x12477)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x12481=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x12481;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12481);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x12482=((1.0)*cj5);
IkReal x12483=((((-1.0)*r21*x12482))+(((-1.0)*r20*sj5)));
j4eval[0]=x12483;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x12482))+((r11*sj5))))));
j4eval[2]=IKsign(x12483);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x12484=cj5*cj5;
IkReal x12485=(r11*r21);
IkReal x12486=((1.0)*r20);
IkReal x12487=(cj5*sj5);
IkReal x12488=(((r10*r21*x12487))+((x12484*x12485))+(((-1.0)*r12*r22))+((r11*r20*x12487))+(((-1.0)*x12485))+(((-1.0)*r10*x12484*x12486)));
j4eval[0]=x12488;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*x12486)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12488);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12489=cj5*cj5;
IkReal x12490=(r21*sj5);
IkReal x12491=(r11*r21);
IkReal x12492=((1.0)*r20);
CheckValue<IkReal> x12493 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*x12492))+x12490)),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12493.valid){
continue;
}
CheckValue<IkReal> x12494=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22))+(((-1.0)*r10*x12489*x12492))+((x12489*x12491))+((cj5*r10*x12490))+((cj5*r11*r20*sj5))+(((-1.0)*x12491)))),-1);
if(!x12494.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12493.value)+(((1.5707963267949)*(x12494.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12495=IKcos(j4);
IkReal x12496=IKsin(j4);
IkReal x12497=(cj5*r00);
IkReal x12498=(cj5*r20);
IkReal x12499=(cj5*r10);
IkReal x12500=((1.0)*x12495);
IkReal x12501=((1.0)*x12496);
IkReal x12502=(sj5*x12495);
IkReal x12503=(sj5*x12496);
evalcond[0]=((((-1.0)*x12498*x12500))+((r21*x12502))+((r22*x12496)));
evalcond[1]=(((r11*x12502))+((r12*x12496))+(((-1.0)*x12499*x12500)));
evalcond[2]=((((-1.0)*x12498*x12501))+(((-1.0)*r22*x12500))+((r21*x12503)));
evalcond[3]=((((-1.0)*r02*x12500))+((r01*x12503))+(((-1.0)*x12497*x12501)));
evalcond[4]=((-1.0)+((r01*x12502))+(((-1.0)*x12497*x12500))+((r02*x12496)));
evalcond[5]=((1.0)+((r11*x12503))+(((-1.0)*r12*x12500))+(((-1.0)*x12499*x12501)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12504=((1.0)*cj5);
CheckValue<IkReal> x12505=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x12504))+(((-1.0)*r20*sj5)))),-1);
if(!x12505.valid){
continue;
}
CheckValue<IkReal> x12506 = IKatan2WithCheck(IkReal((((r11*sj5))+(((-1.0)*r10*x12504)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12506.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12505.value)))+(x12506.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12507=IKcos(j4);
IkReal x12508=IKsin(j4);
IkReal x12509=(cj5*r00);
IkReal x12510=(cj5*r20);
IkReal x12511=(cj5*r10);
IkReal x12512=((1.0)*x12507);
IkReal x12513=((1.0)*x12508);
IkReal x12514=(sj5*x12507);
IkReal x12515=(sj5*x12508);
evalcond[0]=(((r21*x12514))+(((-1.0)*x12510*x12512))+((r22*x12508)));
evalcond[1]=((((-1.0)*x12511*x12512))+((r11*x12514))+((r12*x12508)));
evalcond[2]=((((-1.0)*r22*x12512))+((r21*x12515))+(((-1.0)*x12510*x12513)));
evalcond[3]=((((-1.0)*r02*x12512))+((r01*x12515))+(((-1.0)*x12509*x12513)));
evalcond[4]=((-1.0)+((r01*x12514))+(((-1.0)*x12509*x12512))+((r02*x12508)));
evalcond[5]=((1.0)+(((-1.0)*r12*x12512))+(((-1.0)*x12511*x12513))+((r11*x12515)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12516 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12516.valid){
continue;
}
CheckValue<IkReal> x12517=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x12517.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12516.value)+(((1.5707963267949)*(x12517.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12518=IKcos(j4);
IkReal x12519=IKsin(j4);
IkReal x12520=(cj5*r00);
IkReal x12521=(cj5*r20);
IkReal x12522=(cj5*r10);
IkReal x12523=((1.0)*x12518);
IkReal x12524=((1.0)*x12519);
IkReal x12525=(sj5*x12518);
IkReal x12526=(sj5*x12519);
evalcond[0]=((((-1.0)*x12521*x12523))+((r21*x12525))+((r22*x12519)));
evalcond[1]=((((-1.0)*x12522*x12523))+((r12*x12519))+((r11*x12525)));
evalcond[2]=((((-1.0)*x12521*x12524))+((r21*x12526))+(((-1.0)*r22*x12523)));
evalcond[3]=((((-1.0)*r02*x12523))+((r01*x12526))+(((-1.0)*x12520*x12524)));
evalcond[4]=((-1.0)+((r01*x12525))+((r02*x12519))+(((-1.0)*x12520*x12523)));
evalcond[5]=((1.0)+(((-1.0)*x12522*x12524))+(((-1.0)*r12*x12523))+((r11*x12526)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12527=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12527);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12527);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=(((r01*sj5))+(((-1.0)*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12528=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12528);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12528);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x12529=((1.0)*cj5);
j4eval[0]=(((r11*sj5))+(((-1.0)*r10*x12529)));
j4eval[1]=((((-1.0)*r00*x12529))+((r01*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12530=((1.0)*cj5);
CheckValue<IkReal> x12531=IKPowWithIntegerCheck(((((-1.0)*r10*x12530))+((r11*sj5))),-1);
if(!x12531.valid){
continue;
}
CheckValue<IkReal> x12532=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*r00*x12530))),-1);
if(!x12532.valid){
continue;
}
if( IKabs(((-1.0)*(x12531.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12532.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x12531.value)))+IKsqr(((x12532.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x12531.value)), ((x12532.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12533=IKsin(j4);
IkReal x12534=IKcos(j4);
IkReal x12535=((1.0)*cj5);
IkReal x12536=((1.0)*cj2);
IkReal x12537=(sj5*x12534);
IkReal x12538=(sj5*x12533);
evalcond[0]=((-1.0)*r22*x12534);
evalcond[1]=(((sj1*sj2))+(((-1.0)*cj1*x12536))+((r22*x12533)));
evalcond[2]=((((-1.0)*r00*x12533*x12535))+((r01*x12538)));
evalcond[3]=(((r11*x12537))+(((-1.0)*r10*x12534*x12535)));
evalcond[4]=((1.0)+((r11*x12538))+(((-1.0)*r10*x12533*x12535)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*sj1*x12536))+(((-1.0)*r00*x12534*x12535))+((r01*x12537)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12539=IKPowWithIntegerCheck(r22,-1);
if(!x12539.valid){
continue;
}
CheckValue<IkReal> x12540=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x12540.valid){
continue;
}
if( IKabs(((x12539.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12540.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12539.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))+IKsqr(((x12540.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12539.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))), ((x12540.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12541=IKsin(j4);
IkReal x12542=IKcos(j4);
IkReal x12543=((1.0)*cj5);
IkReal x12544=((1.0)*cj2);
IkReal x12545=(sj5*x12542);
IkReal x12546=(sj5*x12541);
evalcond[0]=((-1.0)*r22*x12542);
evalcond[1]=(((sj1*sj2))+((r22*x12541))+(((-1.0)*cj1*x12544)));
evalcond[2]=(((r01*x12546))+(((-1.0)*r00*x12541*x12543)));
evalcond[3]=(((r11*x12545))+(((-1.0)*r10*x12542*x12543)));
evalcond[4]=((1.0)+((r11*x12546))+(((-1.0)*r10*x12541*x12543)));
evalcond[5]=(((r01*x12545))+(((-1.0)*cj1*sj2))+(((-1.0)*r00*x12542*x12543))+(((-1.0)*sj1*x12544)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12547=(sj1*sj2);
IkReal x12548=(cj5*r10);
IkReal x12549=(r11*sj5);
IkReal x12550=(cj1*cj2);
CheckValue<IkReal> x12551=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)))),-1);
if(!x12551.valid){
continue;
}
CheckValue<IkReal> x12552 = IKatan2WithCheck(IkReal((((x12548*x12550))+(((-1.0)*x12549*x12550))+((x12547*x12549))+(((-1.0)*x12547*x12548)))),IkReal(((((-1.0)*r12*x12547))+((r12*x12550)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12552.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12551.value)))+(x12552.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12553=IKcos(j4);
IkReal x12554=IKsin(j4);
IkReal x12555=(cj5*r00);
IkReal x12556=(cj5*r10);
IkReal x12557=(r21*sj5);
IkReal x12558=((1.0)*cj2);
IkReal x12559=(cj5*r20);
IkReal x12560=((1.0)*x12553);
IkReal x12561=((1.0)*x12554);
IkReal x12562=(sj5*x12554);
IkReal x12563=(sj5*x12553);
evalcond[0]=(((r11*x12563))+((r12*x12554))+(((-1.0)*x12556*x12560)));
evalcond[1]=((((-1.0)*r22*x12560))+((x12554*x12557))+(((-1.0)*x12559*x12561)));
evalcond[2]=((((-1.0)*r02*x12560))+((r01*x12562))+(((-1.0)*x12555*x12561)));
evalcond[3]=((1.0)+((r11*x12562))+(((-1.0)*r12*x12560))+(((-1.0)*x12556*x12561)));
evalcond[4]=(((x12553*x12557))+((sj1*sj2))+(((-1.0)*cj1*x12558))+(((-1.0)*x12559*x12560))+((r22*x12554)));
evalcond[5]=((((-1.0)*cj1*sj2))+((r01*x12563))+((r02*x12554))+(((-1.0)*sj1*x12558))+(((-1.0)*x12555*x12560)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12564=((1.0)*cj5);
CheckValue<IkReal> x12565 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x12564)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12565.valid){
continue;
}
CheckValue<IkReal> x12566=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x12564))+(((-1.0)*r00*sj5)))),-1);
if(!x12566.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12565.value)+(((1.5707963267949)*(x12566.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12567=IKcos(j4);
IkReal x12568=IKsin(j4);
IkReal x12569=(cj5*r00);
IkReal x12570=(cj5*r10);
IkReal x12571=(r21*sj5);
IkReal x12572=((1.0)*cj2);
IkReal x12573=(cj5*r20);
IkReal x12574=((1.0)*x12567);
IkReal x12575=((1.0)*x12568);
IkReal x12576=(sj5*x12568);
IkReal x12577=(sj5*x12567);
evalcond[0]=(((r12*x12568))+(((-1.0)*x12570*x12574))+((r11*x12577)));
evalcond[1]=((((-1.0)*x12573*x12575))+((x12568*x12571))+(((-1.0)*r22*x12574)));
evalcond[2]=((((-1.0)*x12569*x12575))+(((-1.0)*r02*x12574))+((r01*x12576)));
evalcond[3]=((1.0)+(((-1.0)*x12570*x12575))+(((-1.0)*r12*x12574))+((r11*x12576)));
evalcond[4]=((((-1.0)*x12573*x12574))+((x12567*x12571))+((sj1*sj2))+((r22*x12568))+(((-1.0)*cj1*x12572)));
evalcond[5]=((((-1.0)*sj1*x12572))+(((-1.0)*cj1*sj2))+(((-1.0)*x12569*x12574))+((r01*x12577))+((r02*x12568)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12578=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x12578.valid){
continue;
}
CheckValue<IkReal> x12579 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12579.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12578.value)))+(x12579.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12580=IKcos(j4);
IkReal x12581=IKsin(j4);
IkReal x12582=(cj5*r00);
IkReal x12583=(cj5*r10);
IkReal x12584=(r21*sj5);
IkReal x12585=((1.0)*cj2);
IkReal x12586=(cj5*r20);
IkReal x12587=((1.0)*x12580);
IkReal x12588=((1.0)*x12581);
IkReal x12589=(sj5*x12581);
IkReal x12590=(sj5*x12580);
evalcond[0]=(((r12*x12581))+(((-1.0)*x12583*x12587))+((r11*x12590)));
evalcond[1]=((((-1.0)*x12586*x12588))+(((-1.0)*r22*x12587))+((x12581*x12584)));
evalcond[2]=(((r01*x12589))+(((-1.0)*x12582*x12588))+(((-1.0)*r02*x12587)));
evalcond[3]=((1.0)+(((-1.0)*r12*x12587))+((r11*x12589))+(((-1.0)*x12583*x12588)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*x12586*x12587))+((r22*x12581))+(((-1.0)*cj1*x12585))+((x12580*x12584)));
evalcond[5]=(((r01*x12590))+(((-1.0)*sj1*x12585))+(((-1.0)*x12582*x12587))+(((-1.0)*cj1*sj2))+((r02*x12581)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x12591=((-1.0)*r00);
IkReal x12593 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x12593)==0){
continue;
}
IkReal x12592=pow(x12593,-0.5);
CheckValue<IkReal> x12594 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x12591),IKFAST_ATAN2_MAGTHRESH);
if(!x12594.valid){
continue;
}
IkReal gconst18=((-1.0)*(x12594.value));
IkReal gconst19=(r01*x12592);
IkReal gconst20=(x12591*x12592);
CheckValue<IkReal> x12595 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x12595.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x12595.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12596=((-1.0)*r00);
IkReal x12597=x12592;
CheckValue<IkReal> x12599 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x12596),IKFAST_ATAN2_MAGTHRESH);
if(!x12599.valid){
continue;
}
IkReal x12598=((-1.0)*(x12599.value));
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst19;
cj5=gconst20;
j5=x12598;
IkReal gconst18=x12598;
IkReal gconst19=(r01*x12597);
IkReal gconst20=(x12596*x12597);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12600=((-1.0)*r00);
IkReal x12601=x12592;
CheckValue<IkReal> x12603 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x12600),IKFAST_ATAN2_MAGTHRESH);
if(!x12603.valid){
continue;
}
IkReal x12602=((-1.0)*(x12603.value));
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst19;
cj5=gconst20;
j5=x12602;
IkReal gconst18=x12602;
IkReal gconst19=(r01*x12601);
IkReal gconst20=(x12600*x12601);
CheckValue<IkReal> x12611=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r02*r02)))),-1);
if(!x12611.valid){
continue;
}
IkReal x12604=x12611.value;
IkReal x12605=(sj3*x12604);
IkReal x12606=(r11*x12605);
IkReal x12607=(r21*x12605);
IkReal x12608=(r20*x12605);
IkReal x12609=(r10*x12605);
IkReal x12610=(r00*r01*x12605);
j4eval[0]=IKsign((((r10*x12608*(r00*r00)))+((r00*r01*r20*x12606))+((r12*r22*sj3))+((r00*r01*r10*x12607))+((r21*x12606*(r01*r01)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12612=gconst19*gconst19;
IkReal x12613=gconst20*gconst20;
IkReal x12614=(gconst20*sj3);
IkReal x12615=((1.0)*cj3);
IkReal x12616=(r10*sj3);
IkReal x12617=(gconst19*r21);
IkReal x12618=(r11*r20);
IkReal x12619=(cj3*gconst20);
IkReal x12620=((1.0)*r10*r20);
IkReal x12621=(r21*x12612);
CheckValue<IkReal> x12622 = IKatan2WithCheck(IkReal((((r11*r22*x12614))+((gconst19*r22*x12616)))),IkReal((((r11*x12614*x12617))+(((-1.0)*sj3*x12613*x12618))+(((-1.0)*gconst19*x12614*x12620))+((x12616*x12621)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12622.valid){
continue;
}
CheckValue<IkReal> x12623=IKPowWithIntegerCheck(IKsign((((gconst19*x12618*x12619))+(((-1.0)*r12*r22*x12615))+(((-1.0)*r11*x12615*x12621))+((r10*x12617*x12619))+(((-1.0)*r10*r20*x12613*x12615)))),-1);
if(!x12623.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12622.value)+(((1.5707963267949)*(x12623.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12624=IKsin(j4);
IkReal x12625=IKcos(j4);
IkReal x12626=(sj1*sj2);
IkReal x12627=(gconst20*sj3);
IkReal x12628=(gconst19*r21);
IkReal x12629=(gconst20*r10);
IkReal x12630=(cj3*gconst19);
IkReal x12631=(gconst19*sj3);
IkReal x12632=((1.0)*cj1);
IkReal x12633=(cj3*gconst20);
IkReal x12634=(cj2*sj1);
IkReal x12635=(cj2*x12632);
IkReal x12636=((1.0)*x12625);
IkReal x12637=((1.0)*x12624);
IkReal x12638=(cj3*x12624);
IkReal x12639=(gconst19*x12624);
evalcond[0]=((((-1.0)*r22*x12636))+((x12624*x12628))+(((-1.0)*gconst20*r20*x12637)));
evalcond[1]=((((-1.0)*gconst20*r00*x12637))+((r01*x12639))+(((-1.0)*r02*x12636)));
evalcond[2]=((1.0)+((r11*x12639))+(((-1.0)*x12629*x12637))+(((-1.0)*r12*x12636)));
evalcond[3]=(((r12*x12638))+(((-1.0)*cj3*x12629*x12636))+((r11*x12625*x12630))+((r10*x12631))+((r11*x12627)));
evalcond[4]=(((r11*x12633))+(((-1.0)*r11*x12631*x12636))+(((-1.0)*r12*sj3*x12637))+((r10*x12630))+((r10*x12625*x12627)));
evalcond[5]=((((-1.0)*r20*x12633*x12636))+((cj1*sj2))+((r20*x12631))+((r21*x12627))+((cj3*x12625*x12628))+x12634+((r22*x12638)));
evalcond[6]=((((-1.0)*r00*x12633*x12636))+((r00*x12631))+((r01*x12625*x12630))+((r01*x12627))+((r02*x12638))+(((-1.0)*x12635))+x12626);
evalcond[7]=(((r20*x12630))+(((-1.0)*sj3*x12628*x12636))+(((-1.0)*x12635))+x12626+((r21*x12633))+(((-1.0)*r22*sj3*x12637))+((r20*x12625*x12627)));
evalcond[8]=((((-1.0)*r02*sj3*x12637))+(((-1.0)*x12634))+((r00*x12625*x12627))+(((-1.0)*sj2*x12632))+((r01*x12633))+((r00*x12630))+(((-1.0)*r01*x12631*x12636)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12640=gconst19*gconst19;
IkReal x12641=gconst20*gconst20;
IkReal x12642=(r21*sj3);
IkReal x12643=(cj3*r11);
IkReal x12644=(gconst19*gconst20);
IkReal x12645=((1.0)*r10);
IkReal x12646=(cj3*r10);
IkReal x12647=(r20*x12641);
CheckValue<IkReal> x12648=IKPowWithIntegerCheck(IKsign(((((-1.0)*x12642*x12644*x12645))+(((-1.0)*r11*r20*sj3*x12644))+((r12*r22*sj3))+((r11*x12640*x12642))+((r10*sj3*x12647)))),-1);
if(!x12648.valid){
continue;
}
CheckValue<IkReal> x12649 = IKatan2WithCheck(IkReal((((gconst19*r22*x12646))+((gconst20*r22*x12643)))),IkReal(((((-1.0)*x12643*x12647))+((r21*x12640*x12646))+(((-1.0)*cj3*r20*x12644*x12645))+((r21*x12643*x12644)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12649.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12648.value)))+(x12649.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12650=IKsin(j4);
IkReal x12651=IKcos(j4);
IkReal x12652=(sj1*sj2);
IkReal x12653=(gconst20*sj3);
IkReal x12654=(gconst19*r21);
IkReal x12655=(gconst20*r10);
IkReal x12656=(cj3*gconst19);
IkReal x12657=(gconst19*sj3);
IkReal x12658=((1.0)*cj1);
IkReal x12659=(cj3*gconst20);
IkReal x12660=(cj2*sj1);
IkReal x12661=(cj2*x12658);
IkReal x12662=((1.0)*x12651);
IkReal x12663=((1.0)*x12650);
IkReal x12664=(cj3*x12650);
IkReal x12665=(gconst19*x12650);
evalcond[0]=((((-1.0)*r22*x12662))+(((-1.0)*gconst20*r20*x12663))+((x12650*x12654)));
evalcond[1]=((((-1.0)*r02*x12662))+(((-1.0)*gconst20*r00*x12663))+((r01*x12665)));
evalcond[2]=((1.0)+(((-1.0)*x12655*x12663))+((r11*x12665))+(((-1.0)*r12*x12662)));
evalcond[3]=(((r10*x12657))+((r11*x12653))+((r12*x12664))+((r11*x12651*x12656))+(((-1.0)*cj3*x12655*x12662)));
evalcond[4]=(((r10*x12656))+((r11*x12659))+((r10*x12651*x12653))+(((-1.0)*r12*sj3*x12663))+(((-1.0)*r11*x12657*x12662)));
evalcond[5]=(((r21*x12653))+((cj1*sj2))+((cj3*x12651*x12654))+((r22*x12664))+(((-1.0)*r20*x12659*x12662))+x12660+((r20*x12657)));
evalcond[6]=((((-1.0)*x12661))+((r01*x12651*x12656))+((r02*x12664))+(((-1.0)*r00*x12659*x12662))+x12652+((r00*x12657))+((r01*x12653)));
evalcond[7]=(((r20*x12651*x12653))+(((-1.0)*x12661))+((r21*x12659))+(((-1.0)*r22*sj3*x12663))+(((-1.0)*sj3*x12654*x12662))+x12652+((r20*x12656)));
evalcond[8]=((((-1.0)*r02*sj3*x12663))+(((-1.0)*r01*x12657*x12662))+(((-1.0)*sj2*x12658))+(((-1.0)*x12660))+((r00*x12651*x12653))+((r00*x12656))+((r01*x12659)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12666 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*gconst20*r00))+((gconst19*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12666.valid){
continue;
}
CheckValue<IkReal> x12667=IKPowWithIntegerCheck(IKsign((((gconst20*r21))+((gconst19*r20)))),-1);
if(!x12667.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12666.value)+(((1.5707963267949)*(x12667.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12668=IKsin(j4);
IkReal x12669=IKcos(j4);
IkReal x12670=(sj1*sj2);
IkReal x12671=(gconst20*sj3);
IkReal x12672=(gconst19*r21);
IkReal x12673=(gconst20*r10);
IkReal x12674=(cj3*gconst19);
IkReal x12675=(gconst19*sj3);
IkReal x12676=((1.0)*cj1);
IkReal x12677=(cj3*gconst20);
IkReal x12678=(cj2*sj1);
IkReal x12679=(cj2*x12676);
IkReal x12680=((1.0)*x12669);
IkReal x12681=((1.0)*x12668);
IkReal x12682=(cj3*x12668);
IkReal x12683=(gconst19*x12668);
evalcond[0]=(((x12668*x12672))+(((-1.0)*gconst20*r20*x12681))+(((-1.0)*r22*x12680)));
evalcond[1]=(((r01*x12683))+(((-1.0)*gconst20*r00*x12681))+(((-1.0)*r02*x12680)));
evalcond[2]=((1.0)+(((-1.0)*x12673*x12681))+((r11*x12683))+(((-1.0)*r12*x12680)));
evalcond[3]=(((r10*x12675))+((r12*x12682))+((r11*x12669*x12674))+((r11*x12671))+(((-1.0)*cj3*x12673*x12680)));
evalcond[4]=(((r10*x12674))+(((-1.0)*r11*x12675*x12680))+((r11*x12677))+(((-1.0)*r12*sj3*x12681))+((r10*x12669*x12671)));
evalcond[5]=(((r20*x12675))+((r21*x12671))+((cj3*x12669*x12672))+((cj1*sj2))+(((-1.0)*r20*x12677*x12680))+((r22*x12682))+x12678);
evalcond[6]=((((-1.0)*x12679))+((r02*x12682))+(((-1.0)*r00*x12677*x12680))+x12670+((r00*x12675))+((r01*x12671))+((r01*x12669*x12674)));
evalcond[7]=(((r20*x12674))+(((-1.0)*r22*sj3*x12681))+(((-1.0)*sj3*x12672*x12680))+((r21*x12677))+(((-1.0)*x12679))+x12670+((r20*x12669*x12671)));
evalcond[8]=((((-1.0)*r02*sj3*x12681))+(((-1.0)*x12678))+((r00*x12674))+(((-1.0)*sj2*x12676))+((r00*x12669*x12671))+((r01*x12677))+(((-1.0)*r01*x12675*x12680)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x12684=((-1.0)*r01);
IkReal x12686 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x12686)==0){
continue;
}
IkReal x12685=pow(x12686,-0.5);
CheckValue<IkReal> x12687 = IKatan2WithCheck(IkReal(x12684),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x12687.valid){
continue;
}
IkReal gconst21=((3.14159265358979)+(((-1.0)*(x12687.value))));
IkReal gconst22=(x12684*x12685);
IkReal gconst23=((1.0)*r00*x12685);
CheckValue<IkReal> x12688 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x12688.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x12688.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12689=((-1.0)*r01);
CheckValue<IkReal> x12692 = IKatan2WithCheck(IkReal(x12689),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x12692.valid){
continue;
}
IkReal x12690=((1.0)*(x12692.value));
IkReal x12691=x12685;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst22;
cj5=gconst23;
j5=((3.14159265)+(((-1.0)*x12690)));
IkReal gconst21=((3.14159265358979)+(((-1.0)*x12690)));
IkReal gconst22=(x12689*x12691);
IkReal gconst23=((1.0)*r00*x12691);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x12693=((-1.0)*r01);
CheckValue<IkReal> x12696 = IKatan2WithCheck(IkReal(x12693),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x12696.valid){
continue;
}
IkReal x12694=((1.0)*(x12696.value));
IkReal x12695=x12685;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst22;
cj5=gconst23;
j5=((3.14159265)+(((-1.0)*x12694)));
IkReal gconst21=((3.14159265358979)+(((-1.0)*x12694)));
IkReal gconst22=(x12693*x12695);
IkReal gconst23=((1.0)*r00*x12695);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12697=gconst22*gconst22;
IkReal x12698=gconst23*gconst23;
IkReal x12699=(r21*sj3);
IkReal x12700=((1.0)*cj3);
IkReal x12701=(gconst23*r11);
IkReal x12702=(r22*sj3);
IkReal x12703=(gconst22*r10);
IkReal x12704=((1.0)*r20*sj3);
CheckValue<IkReal> x12705=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*r20*x12698*x12700))+(((-1.0)*r12*r22*x12700))+((cj3*gconst22*r20*x12701))+((cj3*gconst23*r21*x12703))+(((-1.0)*r11*r21*x12697*x12700)))),-1);
if(!x12705.valid){
continue;
}
CheckValue<IkReal> x12706 = IKatan2WithCheck(IkReal((((x12702*x12703))+((x12701*x12702)))),IkReal(((((-1.0)*gconst23*x12703*x12704))+((r10*x12697*x12699))+(((-1.0)*r11*x12698*x12704))+((gconst22*x12699*x12701)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12706.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12705.value)))+(x12706.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12707=IKsin(j4);
IkReal x12708=IKcos(j4);
IkReal x12709=(sj1*sj2);
IkReal x12710=(gconst23*sj3);
IkReal x12711=(gconst22*sj3);
IkReal x12712=(cj2*sj1);
IkReal x12713=((1.0)*cj1);
IkReal x12714=(cj3*gconst23);
IkReal x12715=(cj3*gconst22);
IkReal x12716=(cj2*x12713);
IkReal x12717=((1.0)*x12708);
IkReal x12718=(cj3*x12707);
IkReal x12719=(gconst22*x12707);
IkReal x12720=((1.0)*sj3*x12707);
IkReal x12721=(x12708*x12715);
IkReal x12722=((1.0)*gconst23*x12707);
evalcond[0]=(((r21*x12719))+(((-1.0)*r22*x12717))+(((-1.0)*r20*x12722)));
evalcond[1]=((((-1.0)*r00*x12722))+((r01*x12719))+(((-1.0)*r02*x12717)));
evalcond[2]=((1.0)+(((-1.0)*r12*x12717))+(((-1.0)*r10*x12722))+((r11*x12719)));
evalcond[3]=(((r12*x12718))+((r11*x12721))+((r11*x12710))+((r10*x12711))+(((-1.0)*r10*x12714*x12717)));
evalcond[4]=((((-1.0)*r11*x12711*x12717))+((r11*x12714))+((r10*x12715))+(((-1.0)*r12*x12720))+((r10*x12708*x12710)));
evalcond[5]=(((r21*x12710))+((r22*x12718))+((r21*x12721))+((cj1*sj2))+(((-1.0)*r20*x12714*x12717))+((r20*x12711))+x12712);
evalcond[6]=(((r02*x12718))+(((-1.0)*x12716))+(((-1.0)*r00*x12714*x12717))+((r01*x12710))+((r00*x12711))+x12709+((r01*x12721)));
evalcond[7]=(((r21*x12714))+(((-1.0)*x12716))+(((-1.0)*r22*x12720))+((r20*x12715))+(((-1.0)*r21*x12711*x12717))+x12709+((r20*x12708*x12710)));
evalcond[8]=((((-1.0)*x12712))+(((-1.0)*r01*x12711*x12717))+(((-1.0)*r02*x12720))+(((-1.0)*sj2*x12713))+((r01*x12714))+((r00*x12715))+((r00*x12708*x12710)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12723=((1.0)*gconst23);
CheckValue<IkReal> x12724=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x12723))+(((-1.0)*gconst22*r00)))),-1);
if(!x12724.valid){
continue;
}
CheckValue<IkReal> x12725 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst22*r21))+(((-1.0)*r20*x12723)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12725.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12724.value)))+(x12725.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12726=IKsin(j4);
IkReal x12727=IKcos(j4);
IkReal x12728=(sj1*sj2);
IkReal x12729=(gconst23*sj3);
IkReal x12730=(gconst22*sj3);
IkReal x12731=(cj2*sj1);
IkReal x12732=((1.0)*cj1);
IkReal x12733=(cj3*gconst23);
IkReal x12734=(cj3*gconst22);
IkReal x12735=(cj2*x12732);
IkReal x12736=((1.0)*x12727);
IkReal x12737=(cj3*x12726);
IkReal x12738=(gconst22*x12726);
IkReal x12739=((1.0)*sj3*x12726);
IkReal x12740=(x12727*x12734);
IkReal x12741=((1.0)*gconst23*x12726);
evalcond[0]=(((r21*x12738))+(((-1.0)*r22*x12736))+(((-1.0)*r20*x12741)));
evalcond[1]=((((-1.0)*r02*x12736))+((r01*x12738))+(((-1.0)*r00*x12741)));
evalcond[2]=((1.0)+((r11*x12738))+(((-1.0)*r12*x12736))+(((-1.0)*r10*x12741)));
evalcond[3]=(((r11*x12740))+((r11*x12729))+((r12*x12737))+((r10*x12730))+(((-1.0)*r10*x12733*x12736)));
evalcond[4]=(((r11*x12733))+((r10*x12734))+(((-1.0)*r12*x12739))+(((-1.0)*r11*x12730*x12736))+((r10*x12727*x12729)));
evalcond[5]=(((r21*x12729))+((cj1*sj2))+((r20*x12730))+x12731+(((-1.0)*r20*x12733*x12736))+((r21*x12740))+((r22*x12737)));
evalcond[6]=(((r02*x12737))+(((-1.0)*x12735))+x12728+((r00*x12730))+(((-1.0)*r00*x12733*x12736))+((r01*x12729))+((r01*x12740)));
evalcond[7]=(((r20*x12727*x12729))+(((-1.0)*x12735))+((r21*x12733))+(((-1.0)*r22*x12739))+((r20*x12734))+x12728+(((-1.0)*r21*x12730*x12736)));
evalcond[8]=(((r00*x12727*x12729))+(((-1.0)*sj2*x12732))+(((-1.0)*x12731))+(((-1.0)*r02*x12739))+(((-1.0)*r01*x12730*x12736))+((r00*x12734))+((r01*x12733)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12742=IKPowWithIntegerCheck(IKsign((((gconst22*r20))+((gconst23*r21)))),-1);
if(!x12742.valid){
continue;
}
CheckValue<IkReal> x12743 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst22*r01))+(((-1.0)*gconst23*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12743.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12742.value)))+(x12743.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12744=IKsin(j4);
IkReal x12745=IKcos(j4);
IkReal x12746=(sj1*sj2);
IkReal x12747=(gconst23*sj3);
IkReal x12748=(gconst22*sj3);
IkReal x12749=(cj2*sj1);
IkReal x12750=((1.0)*cj1);
IkReal x12751=(cj3*gconst23);
IkReal x12752=(cj3*gconst22);
IkReal x12753=(cj2*x12750);
IkReal x12754=((1.0)*x12745);
IkReal x12755=(cj3*x12744);
IkReal x12756=(gconst22*x12744);
IkReal x12757=((1.0)*sj3*x12744);
IkReal x12758=(x12745*x12752);
IkReal x12759=((1.0)*gconst23*x12744);
evalcond[0]=((((-1.0)*r22*x12754))+((r21*x12756))+(((-1.0)*r20*x12759)));
evalcond[1]=((((-1.0)*r02*x12754))+((r01*x12756))+(((-1.0)*r00*x12759)));
evalcond[2]=((1.0)+((r11*x12756))+(((-1.0)*r12*x12754))+(((-1.0)*r10*x12759)));
evalcond[3]=(((r11*x12747))+((r11*x12758))+((r10*x12748))+((r12*x12755))+(((-1.0)*r10*x12751*x12754)));
evalcond[4]=(((r11*x12751))+(((-1.0)*r11*x12748*x12754))+(((-1.0)*r12*x12757))+((r10*x12745*x12747))+((r10*x12752)));
evalcond[5]=((((-1.0)*r20*x12751*x12754))+((cj1*sj2))+((r22*x12755))+x12749+((r20*x12748))+((r21*x12758))+((r21*x12747)));
evalcond[6]=((((-1.0)*x12753))+((r02*x12755))+x12746+((r00*x12748))+((r01*x12758))+((r01*x12747))+(((-1.0)*r00*x12751*x12754)));
evalcond[7]=((((-1.0)*r21*x12748*x12754))+(((-1.0)*r22*x12757))+(((-1.0)*x12753))+x12746+((r20*x12752))+((r21*x12751))+((r20*x12745*x12747)));
evalcond[8]=(((r00*x12745*x12747))+(((-1.0)*r02*x12757))+(((-1.0)*x12749))+(((-1.0)*sj2*x12750))+(((-1.0)*r01*x12748*x12754))+((r01*x12751))+((r00*x12752)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x12761 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x12761)==0){
continue;
}
IkReal x12760=pow(x12761,-0.5);
CheckValue<IkReal> x12762 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x12762.valid){
continue;
}
IkReal gconst24=((-1.0)*(x12762.value));
IkReal gconst25=((-1.0)*r21*x12760);
IkReal gconst26=(r20*x12760);
CheckValue<IkReal> x12763 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x12763.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x12763.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x12766 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x12766.valid){
continue;
}
IkReal x12764=((-1.0)*(x12766.value));
IkReal x12765=x12760;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst25;
cj5=gconst26;
j5=x12764;
IkReal gconst24=x12764;
IkReal gconst25=((-1.0)*r21*x12765);
IkReal gconst26=(r20*x12765);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x12769 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x12769.valid){
continue;
}
IkReal x12767=((-1.0)*(x12769.value));
IkReal x12768=x12760;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst25;
cj5=gconst26;
j5=x12767;
IkReal gconst24=x12767;
IkReal gconst25=((-1.0)*r21*x12768);
IkReal gconst26=(r20*x12768);
CheckValue<IkReal> x12777=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x12777.valid){
continue;
}
IkReal x12770=x12777.value;
IkReal x12771=(sj3*x12770);
IkReal x12772=(r11*x12771);
IkReal x12773=(r00*x12771);
IkReal x12774=(r01*x12771);
IkReal x12775=(r10*x12771);
IkReal x12776=(r20*r21*x12771);
j4eval[0]=IKsign((((r00*r20*r21*x12772))+((r02*r12*sj3))+((r10*x12773*(r20*r20)))+((r10*r20*r21*x12774))+((r01*x12772*(r21*r21)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12778=gconst25*gconst25;
IkReal x12779=gconst26*gconst26;
IkReal x12780=(r00*r11);
IkReal x12781=(r01*r10);
IkReal x12782=(r02*sj3);
IkReal x12783=(gconst25*r10);
IkReal x12784=(gconst26*r11);
IkReal x12785=((1.0)*sj3);
IkReal x12786=((1.0)*cj3);
IkReal x12787=(cj3*gconst25*gconst26);
CheckValue<IkReal> x12788=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r12*x12786))+(((-1.0)*r00*r10*x12779*x12786))+((x12781*x12787))+((x12780*x12787))+(((-1.0)*r01*r11*x12778*x12786)))),-1);
if(!x12788.valid){
continue;
}
CheckValue<IkReal> x12789 = IKatan2WithCheck(IkReal((((x12782*x12783))+((x12782*x12784)))),IkReal((((sj3*x12778*x12781))+(((-1.0)*gconst26*r00*x12783*x12785))+((gconst25*r01*sj3*x12784))+(((-1.0)*x12779*x12780*x12785)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12789.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12788.value)))+(x12789.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12790=IKsin(j4);
IkReal x12791=IKcos(j4);
IkReal x12792=(sj1*sj2);
IkReal x12793=(gconst26*sj3);
IkReal x12794=(gconst25*sj3);
IkReal x12795=(gconst26*r10);
IkReal x12796=(gconst25*r11);
IkReal x12797=(cj3*gconst25);
IkReal x12798=((1.0)*cj2);
IkReal x12799=(cj1*sj2);
IkReal x12800=(gconst26*r00);
IkReal x12801=(gconst26*r20);
IkReal x12802=(cj3*gconst26);
IkReal x12803=(cj1*x12798);
IkReal x12804=((1.0)*x12791);
IkReal x12805=((1.0)*x12790);
IkReal x12806=(cj3*x12790);
IkReal x12807=(gconst25*x12790);
evalcond[0]=(((r21*x12807))+(((-1.0)*r22*x12804))+(((-1.0)*x12801*x12805)));
evalcond[1]=((((-1.0)*x12800*x12805))+(((-1.0)*r02*x12804))+((r01*x12807)));
evalcond[2]=((1.0)+(((-1.0)*x12795*x12805))+(((-1.0)*r12*x12804))+((x12790*x12796)));
evalcond[3]=(((cj3*x12791*x12796))+(((-1.0)*cj3*x12795*x12804))+((r10*x12794))+((r11*x12793))+((r12*x12806)));
evalcond[4]=(((r10*x12791*x12793))+((r10*x12797))+((r11*x12802))+(((-1.0)*r11*x12794*x12804))+(((-1.0)*r12*sj3*x12805)));
evalcond[5]=(((cj2*sj1))+((r20*x12794))+((r21*x12791*x12797))+(((-1.0)*cj3*x12801*x12804))+x12799+((r21*x12793))+((r22*x12806)));
evalcond[6]=((((-1.0)*x12803))+((r02*x12806))+(((-1.0)*cj3*x12800*x12804))+x12792+((r01*x12793))+((r00*x12794))+((r01*x12791*x12797)));
evalcond[7]=((((-1.0)*x12803))+((r20*x12797))+(((-1.0)*r22*sj3*x12805))+((r21*x12802))+x12792+((r20*x12791*x12793))+(((-1.0)*r21*x12794*x12804)));
evalcond[8]=((((-1.0)*sj1*x12798))+(((-1.0)*r02*sj3*x12805))+((r00*x12791*x12793))+((r01*x12802))+(((-1.0)*x12799))+(((-1.0)*r01*x12794*x12804))+((r00*x12797)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12808=gconst26*gconst26;
IkReal x12809=gconst25*gconst25;
IkReal x12810=(r01*r10);
IkReal x12811=(cj3*r11);
IkReal x12812=(gconst25*gconst26);
IkReal x12813=(cj3*r10);
IkReal x12814=(r00*x12808);
IkReal x12815=((1.0)*sj3*x12812);
CheckValue<IkReal> x12816 = IKatan2WithCheck(IkReal((((gconst25*r02*x12813))+((gconst26*r02*x12811)))),IkReal((((r01*x12811*x12812))+(((-1.0)*x12811*x12814))+((cj3*x12809*x12810))+(((-1.0)*r00*x12812*x12813)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12816.valid){
continue;
}
CheckValue<IkReal> x12817=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+(((-1.0)*x12810*x12815))+((r10*sj3*x12814))+((r01*r11*sj3*x12809))+(((-1.0)*r00*r11*x12815)))),-1);
if(!x12817.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12816.value)+(((1.5707963267949)*(x12817.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12818=IKsin(j4);
IkReal x12819=IKcos(j4);
IkReal x12820=(sj1*sj2);
IkReal x12821=(gconst26*sj3);
IkReal x12822=(gconst25*sj3);
IkReal x12823=(gconst26*r10);
IkReal x12824=(gconst25*r11);
IkReal x12825=(cj3*gconst25);
IkReal x12826=((1.0)*cj2);
IkReal x12827=(cj1*sj2);
IkReal x12828=(gconst26*r00);
IkReal x12829=(gconst26*r20);
IkReal x12830=(cj3*gconst26);
IkReal x12831=(cj1*x12826);
IkReal x12832=((1.0)*x12819);
IkReal x12833=((1.0)*x12818);
IkReal x12834=(cj3*x12818);
IkReal x12835=(gconst25*x12818);
evalcond[0]=((((-1.0)*x12829*x12833))+((r21*x12835))+(((-1.0)*r22*x12832)));
evalcond[1]=((((-1.0)*x12828*x12833))+(((-1.0)*r02*x12832))+((r01*x12835)));
evalcond[2]=((1.0)+((x12818*x12824))+(((-1.0)*r12*x12832))+(((-1.0)*x12823*x12833)));
evalcond[3]=(((r10*x12822))+((r12*x12834))+(((-1.0)*cj3*x12823*x12832))+((r11*x12821))+((cj3*x12819*x12824)));
evalcond[4]=(((r10*x12825))+((r11*x12830))+(((-1.0)*r11*x12822*x12832))+((r10*x12819*x12821))+(((-1.0)*r12*sj3*x12833)));
evalcond[5]=(((cj2*sj1))+x12827+(((-1.0)*cj3*x12829*x12832))+((r22*x12834))+((r21*x12821))+((r21*x12819*x12825))+((r20*x12822)));
evalcond[6]=(x12820+((r01*x12821))+((r00*x12822))+((r02*x12834))+(((-1.0)*x12831))+(((-1.0)*cj3*x12828*x12832))+((r01*x12819*x12825)));
evalcond[7]=(x12820+((r21*x12830))+(((-1.0)*r21*x12822*x12832))+(((-1.0)*x12831))+(((-1.0)*r22*sj3*x12833))+((r20*x12819*x12821))+((r20*x12825)));
evalcond[8]=(((r00*x12825))+(((-1.0)*r01*x12822*x12832))+(((-1.0)*x12827))+(((-1.0)*r02*sj3*x12833))+((r00*x12819*x12821))+((r01*x12830))+(((-1.0)*sj1*x12826)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12836=((1.0)*gconst26);
CheckValue<IkReal> x12837=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x12836))+(((-1.0)*gconst25*r00)))),-1);
if(!x12837.valid){
continue;
}
CheckValue<IkReal> x12838 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x12836))+((gconst25*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12838.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12837.value)))+(x12838.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12839=IKsin(j4);
IkReal x12840=IKcos(j4);
IkReal x12841=(sj1*sj2);
IkReal x12842=(gconst26*sj3);
IkReal x12843=(gconst25*sj3);
IkReal x12844=(gconst26*r10);
IkReal x12845=(gconst25*r11);
IkReal x12846=(cj3*gconst25);
IkReal x12847=((1.0)*cj2);
IkReal x12848=(cj1*sj2);
IkReal x12849=(gconst26*r00);
IkReal x12850=(gconst26*r20);
IkReal x12851=(cj3*gconst26);
IkReal x12852=(cj1*x12847);
IkReal x12853=((1.0)*x12840);
IkReal x12854=((1.0)*x12839);
IkReal x12855=(cj3*x12839);
IkReal x12856=(gconst25*x12839);
evalcond[0]=((((-1.0)*x12850*x12854))+(((-1.0)*r22*x12853))+((r21*x12856)));
evalcond[1]=((((-1.0)*r02*x12853))+((r01*x12856))+(((-1.0)*x12849*x12854)));
evalcond[2]=((1.0)+((x12839*x12845))+(((-1.0)*r12*x12853))+(((-1.0)*x12844*x12854)));
evalcond[3]=((((-1.0)*cj3*x12844*x12853))+((r10*x12843))+((r11*x12842))+((cj3*x12840*x12845))+((r12*x12855)));
evalcond[4]=((((-1.0)*r11*x12843*x12853))+((r10*x12846))+((r11*x12851))+((r10*x12840*x12842))+(((-1.0)*r12*sj3*x12854)));
evalcond[5]=(((cj2*sj1))+x12848+((r22*x12855))+((r21*x12840*x12846))+((r21*x12842))+((r20*x12843))+(((-1.0)*cj3*x12850*x12853)));
evalcond[6]=(x12841+((r01*x12842))+((r00*x12843))+((r01*x12840*x12846))+((r02*x12855))+(((-1.0)*x12852))+(((-1.0)*cj3*x12849*x12853)));
evalcond[7]=(((r20*x12840*x12842))+x12841+((r21*x12851))+((r20*x12846))+(((-1.0)*x12852))+(((-1.0)*r21*x12843*x12853))+(((-1.0)*r22*sj3*x12854)));
evalcond[8]=((((-1.0)*r02*sj3*x12854))+((r00*x12846))+((r01*x12851))+(((-1.0)*x12848))+(((-1.0)*sj1*x12847))+((r00*x12840*x12842))+(((-1.0)*r01*x12843*x12853)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x12858 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x12858)==0){
continue;
}
IkReal x12857=pow(x12858,-0.5);
CheckValue<IkReal> x12859 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x12859.valid){
continue;
}
IkReal gconst27=((3.14159265358979)+(((-1.0)*(x12859.value))));
IkReal gconst28=((1.0)*r21*x12857);
IkReal gconst29=((-1.0)*r20*x12857);
CheckValue<IkReal> x12860 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x12860.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x12860.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x12863 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x12863.valid){
continue;
}
IkReal x12861=((1.0)*(x12863.value));
IkReal x12862=x12857;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x12861)));
IkReal gconst27=((3.14159265358979)+(((-1.0)*x12861)));
IkReal gconst28=((1.0)*r21*x12862);
IkReal gconst29=((-1.0)*r20*x12862);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x12866 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x12866.valid){
continue;
}
IkReal x12864=((1.0)*(x12866.value));
IkReal x12865=x12857;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x12864)));
IkReal gconst27=((3.14159265358979)+(((-1.0)*x12864)));
IkReal gconst28=((1.0)*r21*x12865);
IkReal gconst29=((-1.0)*r20*x12865);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x12869 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x12869.valid){
continue;
}
IkReal x12867=((1.0)*(x12869.value));
IkReal x12868=x12857;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x12867)));
IkReal gconst27=((3.14159265358979)+(((-1.0)*x12867)));
IkReal gconst28=((1.0)*r21*x12868);
IkReal gconst29=((-1.0)*r20*x12868);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x12872 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x12872.valid){
continue;
}
IkReal x12870=((1.0)*(x12872.value));
IkReal x12871=x12857;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x12870)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x12870)));
IkReal gconst28=((1.0)*r21*x12871);
IkReal gconst29=((-1.0)*r20*x12871);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x12875 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x12875.valid){
continue;
}
IkReal x12873=((1.0)*(x12875.value));
IkReal x12874=x12857;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x12873)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x12873)));
IkReal gconst28=((1.0)*r21*x12874);
IkReal gconst29=((-1.0)*r20*x12874);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x12878 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x12878.valid){
continue;
}
IkReal x12876=((1.0)*(x12878.value));
IkReal x12877=x12857;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x12876)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x12876)));
IkReal gconst28=((1.0)*r21*x12877);
IkReal gconst29=((-1.0)*r20*x12877);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12879=(gconst29*r10);
IkReal x12880=(gconst28*r11);
CheckValue<IkReal> x12881=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x12879*x12880))+(x12880*x12880)+(x12879*x12879))),-1);
if(!x12881.valid){
continue;
}
CheckValue<IkReal> x12882 = IKatan2WithCheck(IkReal((x12879+(((-1.0)*x12880)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x12882.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12881.value)))+(x12882.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12883=IKsin(j4);
IkReal x12884=IKcos(j4);
IkReal x12885=(gconst28*r11);
IkReal x12886=((1.0)*cj2);
IkReal x12887=((1.0)*x12884);
IkReal x12888=(gconst29*x12884);
IkReal x12889=(gconst28*x12883);
IkReal x12890=((1.0)*x12883);
IkReal x12891=(gconst29*x12890);
evalcond[0]=((((-1.0)*r20*x12891))+(((-1.0)*r22*x12887))+((r21*x12889)));
evalcond[1]=((((-1.0)*r00*x12891))+(((-1.0)*r02*x12887))+((r01*x12889)));
evalcond[2]=((((-1.0)*x12885*x12887))+((r10*x12888))+(((-1.0)*r12*x12890)));
evalcond[3]=((1.0)+(((-1.0)*r12*x12887))+((x12883*x12885))+(((-1.0)*r10*x12891)));
evalcond[4]=((((-1.0)*r22*x12890))+((r20*x12888))+((sj1*sj2))+(((-1.0)*cj1*x12886))+(((-1.0)*gconst28*r21*x12887)));
evalcond[5]=((((-1.0)*sj1*x12886))+((r00*x12888))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst28*r01*x12887))+(((-1.0)*r02*x12890)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12892=((1.0)*gconst29);
CheckValue<IkReal> x12893=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst28*r00))+(((-1.0)*r01*x12892)))),-1);
if(!x12893.valid){
continue;
}
CheckValue<IkReal> x12894 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x12892))+((gconst28*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12894.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12893.value)))+(x12894.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12895=IKsin(j4);
IkReal x12896=IKcos(j4);
IkReal x12897=(gconst28*r11);
IkReal x12898=((1.0)*cj2);
IkReal x12899=((1.0)*x12896);
IkReal x12900=(gconst29*x12896);
IkReal x12901=(gconst28*x12895);
IkReal x12902=((1.0)*x12895);
IkReal x12903=(gconst29*x12902);
evalcond[0]=((((-1.0)*r22*x12899))+(((-1.0)*r20*x12903))+((r21*x12901)));
evalcond[1]=((((-1.0)*r00*x12903))+((r01*x12901))+(((-1.0)*r02*x12899)));
evalcond[2]=((((-1.0)*r12*x12902))+((r10*x12900))+(((-1.0)*x12897*x12899)));
evalcond[3]=((1.0)+(((-1.0)*r10*x12903))+((x12895*x12897))+(((-1.0)*r12*x12899)));
evalcond[4]=((((-1.0)*gconst28*r21*x12899))+((sj1*sj2))+((r20*x12900))+(((-1.0)*cj1*x12898))+(((-1.0)*r22*x12902)));
evalcond[5]=(((r00*x12900))+(((-1.0)*cj1*sj2))+(((-1.0)*r02*x12902))+(((-1.0)*sj1*x12898))+(((-1.0)*gconst28*r01*x12899)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12904=IKPowWithIntegerCheck(IKsign((((gconst29*r21))+((gconst28*r20)))),-1);
if(!x12904.valid){
continue;
}
CheckValue<IkReal> x12905 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst28*r01))+(((-1.0)*gconst29*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12905.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12904.value)))+(x12905.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12906=IKsin(j4);
IkReal x12907=IKcos(j4);
IkReal x12908=(gconst28*r11);
IkReal x12909=((1.0)*cj2);
IkReal x12910=((1.0)*x12907);
IkReal x12911=(gconst29*x12907);
IkReal x12912=(gconst28*x12906);
IkReal x12913=((1.0)*x12906);
IkReal x12914=(gconst29*x12913);
evalcond[0]=((((-1.0)*r20*x12914))+((r21*x12912))+(((-1.0)*r22*x12910)));
evalcond[1]=((((-1.0)*r00*x12914))+(((-1.0)*r02*x12910))+((r01*x12912)));
evalcond[2]=((((-1.0)*x12908*x12910))+(((-1.0)*r12*x12913))+((r10*x12911)));
evalcond[3]=((1.0)+(((-1.0)*r10*x12914))+(((-1.0)*r12*x12910))+((x12906*x12908)));
evalcond[4]=(((sj1*sj2))+((r20*x12911))+(((-1.0)*r22*x12913))+(((-1.0)*cj1*x12909))+(((-1.0)*gconst28*r21*x12910)));
evalcond[5]=(((r00*x12911))+(((-1.0)*r02*x12913))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst28*r01*x12910))+(((-1.0)*sj1*x12909)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x12917 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x12917.valid){
continue;
}
IkReal x12915=((1.0)*(x12917.value));
IkReal x12916=x12857;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x12915)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x12915)));
IkReal gconst28=((1.0)*r21*x12916);
IkReal gconst29=((-1.0)*r20*x12916);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x12920 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x12920.valid){
continue;
}
IkReal x12918=((1.0)*(x12920.value));
IkReal x12919=x12857;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x12918)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x12918)));
IkReal gconst28=((1.0)*r21*x12919);
IkReal gconst29=((-1.0)*r20*x12919);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x12923 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x12923.valid){
continue;
}
IkReal x12921=((1.0)*(x12923.value));
IkReal x12922=x12857;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x12921)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x12921)));
IkReal gconst28=((1.0)*r21*x12922);
IkReal gconst29=((-1.0)*r20*x12922);
IkReal x12924=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x12928=IKPowWithIntegerCheck(x12924,-1);
if(!x12928.valid){
continue;
}
IkReal x12925=x12928.value;
IkReal x12926=((1.0)*x12925);
IkReal x12927=((((-2.0)*r10*r11*r20*r21*x12925))+(((-1.0)*x12926*(r10*r10)*(r20*r20)))+(((-1.0)*(r12*r12)))+(((-1.0)*x12926*(r11*r11)*(r21*r21))));
j4eval[0]=x12927;
j4eval[1]=r12;
j4eval[2]=x12924;
j4eval[3]=IKsign(x12927);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12929=(gconst28*r11);
IkReal x12930=(gconst29*r10);
CheckValue<IkReal> x12931=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x12930*x12930)))+(((-1.0)*(x12929*x12929)))+(((-1.0)*(r12*r12)))+(((2.0)*x12929*x12930)))),-1);
if(!x12931.valid){
continue;
}
CheckValue<IkReal> x12932 = IKatan2WithCheck(IkReal((x12929+(((-1.0)*x12930)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12932.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12931.value)))+(x12932.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12933=IKcos(j4);
IkReal x12934=IKsin(j4);
IkReal x12935=(gconst29*r10);
IkReal x12936=(gconst29*r20);
IkReal x12937=(gconst28*r21);
IkReal x12938=((1.0)*cj2);
IkReal x12939=(gconst29*r00);
IkReal x12940=((1.0)*x12933);
IkReal x12941=((1.0)*x12934);
IkReal x12942=(gconst28*x12933);
IkReal x12943=(gconst28*x12934);
evalcond[0]=(((r12*x12934))+((r11*x12942))+(((-1.0)*x12935*x12940)));
evalcond[1]=((((-1.0)*x12936*x12941))+(((-1.0)*r22*x12940))+((x12934*x12937)));
evalcond[2]=((((-1.0)*x12939*x12941))+((r01*x12943))+(((-1.0)*r02*x12940)));
evalcond[3]=((1.0)+((r11*x12943))+(((-1.0)*x12935*x12941))+(((-1.0)*r12*x12940)));
evalcond[4]=((((-1.0)*x12936*x12940))+((sj1*sj2))+((x12933*x12937))+(((-1.0)*cj1*x12938))+((r22*x12934)));
evalcond[5]=((((-1.0)*x12939*x12940))+((r02*x12934))+(((-1.0)*sj1*x12938))+((r01*x12942))+(((-1.0)*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12944=((1.0)*gconst29);
CheckValue<IkReal> x12945 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x12944))+((gconst28*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12945.valid){
continue;
}
CheckValue<IkReal> x12946=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst28*r00))+(((-1.0)*r01*x12944)))),-1);
if(!x12946.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12945.value)+(((1.5707963267949)*(x12946.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12947=IKcos(j4);
IkReal x12948=IKsin(j4);
IkReal x12949=(gconst29*r10);
IkReal x12950=(gconst29*r20);
IkReal x12951=(gconst28*r21);
IkReal x12952=((1.0)*cj2);
IkReal x12953=(gconst29*r00);
IkReal x12954=((1.0)*x12947);
IkReal x12955=((1.0)*x12948);
IkReal x12956=(gconst28*x12947);
IkReal x12957=(gconst28*x12948);
evalcond[0]=(((r12*x12948))+((r11*x12956))+(((-1.0)*x12949*x12954)));
evalcond[1]=((((-1.0)*r22*x12954))+(((-1.0)*x12950*x12955))+((x12948*x12951)));
evalcond[2]=(((r01*x12957))+(((-1.0)*x12953*x12955))+(((-1.0)*r02*x12954)));
evalcond[3]=((1.0)+(((-1.0)*r12*x12954))+((r11*x12957))+(((-1.0)*x12949*x12955)));
evalcond[4]=(((r22*x12948))+(((-1.0)*cj1*x12952))+((x12947*x12951))+((sj1*sj2))+(((-1.0)*x12950*x12954)));
evalcond[5]=(((r01*x12956))+(((-1.0)*x12953*x12954))+(((-1.0)*cj1*sj2))+((r02*x12948))+(((-1.0)*sj1*x12952)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12958=IKPowWithIntegerCheck(IKsign((((gconst29*r21))+((gconst28*r20)))),-1);
if(!x12958.valid){
continue;
}
CheckValue<IkReal> x12959 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst28*r01))+(((-1.0)*gconst29*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12959.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12958.value)))+(x12959.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12960=IKcos(j4);
IkReal x12961=IKsin(j4);
IkReal x12962=(gconst29*r10);
IkReal x12963=(gconst29*r20);
IkReal x12964=(gconst28*r21);
IkReal x12965=((1.0)*cj2);
IkReal x12966=(gconst29*r00);
IkReal x12967=((1.0)*x12960);
IkReal x12968=((1.0)*x12961);
IkReal x12969=(gconst28*x12960);
IkReal x12970=(gconst28*x12961);
evalcond[0]=((((-1.0)*x12962*x12967))+((r11*x12969))+((r12*x12961)));
evalcond[1]=(((x12961*x12964))+(((-1.0)*r22*x12967))+(((-1.0)*x12963*x12968)));
evalcond[2]=(((r01*x12970))+(((-1.0)*x12966*x12968))+(((-1.0)*r02*x12967)));
evalcond[3]=((1.0)+(((-1.0)*x12962*x12968))+(((-1.0)*r12*x12967))+((r11*x12970)));
evalcond[4]=((((-1.0)*cj1*x12965))+((sj1*sj2))+((x12960*x12964))+((r22*x12961))+(((-1.0)*x12963*x12967)));
evalcond[5]=(((r01*x12969))+(((-1.0)*x12966*x12967))+(((-1.0)*cj1*sj2))+((r02*x12961))+(((-1.0)*sj1*x12965)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x12973 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x12973.valid){
continue;
}
IkReal x12971=((1.0)*(x12973.value));
IkReal x12972=x12857;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x12971)));
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x12971)));
IkReal gconst28=((1.0)*r21*x12972);
IkReal gconst29=((-1.0)*r20*x12972);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x12976 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x12976.valid){
continue;
}
IkReal x12974=((1.0)*(x12976.value));
IkReal x12975=x12857;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x12974)));
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x12974)));
IkReal gconst28=((1.0)*r21*x12975);
IkReal gconst29=((-1.0)*r20*x12975);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x12979 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x12979.valid){
continue;
}
IkReal x12977=((1.0)*(x12979.value));
IkReal x12978=x12857;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x12977)));
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x12977)));
IkReal gconst28=((1.0)*r21*x12978);
IkReal gconst29=((-1.0)*r20*x12978);
IkReal x12980=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x12984=IKPowWithIntegerCheck(x12980,-1);
if(!x12984.valid){
continue;
}
IkReal x12981=x12984.value;
IkReal x12982=((1.0)*x12981);
IkReal x12983=((((-1.0)*x12982*(r11*r11)*(r21*r21)))+(((-1.0)*x12982*(r10*r10)*(r20*r20)))+(((-1.0)*(r12*r12)))+(((-2.0)*r10*r11*r20*r21*x12981)));
j4eval[0]=x12983;
j4eval[1]=r12;
j4eval[2]=x12980;
j4eval[3]=IKsign(x12983);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12985=(gconst28*r11);
IkReal x12986=(gconst29*r10);
CheckValue<IkReal> x12987=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x12985*x12985)))+(((-1.0)*(x12986*x12986)))+(((2.0)*x12985*x12986))+(((-1.0)*(r12*r12))))),-1);
if(!x12987.valid){
continue;
}
CheckValue<IkReal> x12988 = IKatan2WithCheck(IkReal((x12985+(((-1.0)*x12986)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12988.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12987.value)))+(x12988.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12989=IKcos(j4);
IkReal x12990=IKsin(j4);
IkReal x12991=(gconst29*r10);
IkReal x12992=(gconst29*r20);
IkReal x12993=(gconst28*r21);
IkReal x12994=(gconst29*r00);
IkReal x12995=((1.0)*x12989);
IkReal x12996=((1.0)*x12990);
IkReal x12997=(gconst28*x12989);
IkReal x12998=(gconst28*x12990);
evalcond[0]=(((r11*x12997))+(((-1.0)*x12991*x12995))+((r12*x12990)));
evalcond[1]=((((-1.0)*r22*x12995))+((x12990*x12993))+(((-1.0)*x12992*x12996)));
evalcond[2]=((((-1.0)*x12994*x12996))+((r01*x12998))+(((-1.0)*r02*x12995)));
evalcond[3]=((1.0)+((r11*x12998))+(((-1.0)*x12991*x12996))+(((-1.0)*r12*x12995)));
evalcond[4]=(((cj2*sj1))+((r22*x12990))+((x12989*x12993))+((cj1*sj2))+(((-1.0)*x12992*x12995)));
evalcond[5]=((((-1.0)*x12994*x12995))+((r01*x12997))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r02*x12990)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12999=((1.0)*gconst29);
CheckValue<IkReal> x13000 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x12999))+((gconst28*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13000.valid){
continue;
}
CheckValue<IkReal> x13001=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x12999))+(((-1.0)*gconst28*r00)))),-1);
if(!x13001.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13000.value)+(((1.5707963267949)*(x13001.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13002=IKcos(j4);
IkReal x13003=IKsin(j4);
IkReal x13004=(gconst29*r10);
IkReal x13005=(gconst29*r20);
IkReal x13006=(gconst28*r21);
IkReal x13007=(gconst29*r00);
IkReal x13008=((1.0)*x13002);
IkReal x13009=((1.0)*x13003);
IkReal x13010=(gconst28*x13002);
IkReal x13011=(gconst28*x13003);
evalcond[0]=((((-1.0)*x13004*x13008))+((r12*x13003))+((r11*x13010)));
evalcond[1]=((((-1.0)*x13005*x13009))+(((-1.0)*r22*x13008))+((x13003*x13006)));
evalcond[2]=(((r01*x13011))+(((-1.0)*r02*x13008))+(((-1.0)*x13007*x13009)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13008))+(((-1.0)*x13004*x13009))+((r11*x13011)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x13005*x13008))+((cj1*sj2))+((r22*x13003))+((x13002*x13006)));
evalcond[5]=(((r01*x13010))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r02*x13003))+(((-1.0)*x13007*x13008)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13012=IKPowWithIntegerCheck(IKsign((((gconst29*r21))+((gconst28*r20)))),-1);
if(!x13012.valid){
continue;
}
CheckValue<IkReal> x13013 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst28*r01))+(((-1.0)*gconst29*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13013.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13012.value)))+(x13013.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13014=IKcos(j4);
IkReal x13015=IKsin(j4);
IkReal x13016=(gconst29*r10);
IkReal x13017=(gconst29*r20);
IkReal x13018=(gconst28*r21);
IkReal x13019=(gconst29*r00);
IkReal x13020=((1.0)*x13014);
IkReal x13021=((1.0)*x13015);
IkReal x13022=(gconst28*x13014);
IkReal x13023=(gconst28*x13015);
evalcond[0]=(((r11*x13022))+((r12*x13015))+(((-1.0)*x13016*x13020)));
evalcond[1]=((((-1.0)*r22*x13020))+((x13015*x13018))+(((-1.0)*x13017*x13021)));
evalcond[2]=(((r01*x13023))+(((-1.0)*x13019*x13021))+(((-1.0)*r02*x13020)));
evalcond[3]=((1.0)+((r11*x13023))+(((-1.0)*r12*x13020))+(((-1.0)*x13016*x13021)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x13015))+((x13014*x13018))+(((-1.0)*x13017*x13020)));
evalcond[5]=(((r01*x13022))+(((-1.0)*x13019*x13020))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r02*x13015)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x13026 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13026.valid){
continue;
}
IkReal x13024=((1.0)*(x13026.value));
IkReal x13025=x12857;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13024)));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13024)));
IkReal gconst28=((1.0)*r21*x13025);
IkReal gconst29=((-1.0)*r20*x13025);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13029 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13029.valid){
continue;
}
IkReal x13027=((1.0)*(x13029.value));
IkReal x13028=x12857;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13027)));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13027)));
IkReal gconst28=((1.0)*r21*x13028);
IkReal gconst29=((-1.0)*r20*x13028);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x13032 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13032.valid){
continue;
}
IkReal x13030=((1.0)*(x13032.value));
IkReal x13031=x12857;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13030)));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13030)));
IkReal gconst28=((1.0)*r21*x13031);
IkReal gconst29=((-1.0)*r20*x13031);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13033=(gconst29*r10);
IkReal x13034=(gconst28*r11);
CheckValue<IkReal> x13035 = IKatan2WithCheck(IkReal(((((-1.0)*x13034))+x13033)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x13035.valid){
continue;
}
CheckValue<IkReal> x13036=IKPowWithIntegerCheck(IKsign(((x13033*x13033)+(r12*r12)+(((-2.0)*x13033*x13034))+(x13034*x13034))),-1);
if(!x13036.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13035.value)+(((1.5707963267949)*(x13036.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13037=IKsin(j4);
IkReal x13038=IKcos(j4);
IkReal x13039=(gconst28*r11);
IkReal x13040=((1.0)*x13038);
IkReal x13041=(gconst29*x13038);
IkReal x13042=(gconst28*x13037);
IkReal x13043=((1.0)*x13037);
IkReal x13044=(gconst29*x13043);
evalcond[0]=((((-1.0)*r20*x13044))+((r21*x13042))+(((-1.0)*r22*x13040)));
evalcond[1]=((((-1.0)*r02*x13040))+((r01*x13042))+(((-1.0)*r00*x13044)));
evalcond[2]=((((-1.0)*x13039*x13040))+((r10*x13041))+(((-1.0)*r12*x13043)));
evalcond[3]=((1.0)+(((-1.0)*r10*x13044))+((x13037*x13039))+(((-1.0)*r12*x13040)));
evalcond[4]=(((cj2*sj1))+((r20*x13041))+((cj1*sj2))+(((-1.0)*r22*x13043))+(((-1.0)*gconst28*r21*x13040)));
evalcond[5]=((((-1.0)*gconst28*r01*x13040))+(((-1.0)*r02*x13043))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r00*x13041)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13045=((1.0)*gconst29);
CheckValue<IkReal> x13046 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x13045))+((gconst28*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13046.valid){
continue;
}
CheckValue<IkReal> x13047=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst28*r00))+(((-1.0)*r01*x13045)))),-1);
if(!x13047.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13046.value)+(((1.5707963267949)*(x13047.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13048=IKsin(j4);
IkReal x13049=IKcos(j4);
IkReal x13050=(gconst28*r11);
IkReal x13051=((1.0)*x13049);
IkReal x13052=(gconst29*x13049);
IkReal x13053=(gconst28*x13048);
IkReal x13054=((1.0)*x13048);
IkReal x13055=(gconst29*x13054);
evalcond[0]=((((-1.0)*r20*x13055))+((r21*x13053))+(((-1.0)*r22*x13051)));
evalcond[1]=((((-1.0)*r00*x13055))+(((-1.0)*r02*x13051))+((r01*x13053)));
evalcond[2]=((((-1.0)*r12*x13054))+((r10*x13052))+(((-1.0)*x13050*x13051)));
evalcond[3]=((1.0)+((x13048*x13050))+(((-1.0)*r10*x13055))+(((-1.0)*r12*x13051)));
evalcond[4]=(((r20*x13052))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x13054))+(((-1.0)*gconst28*r21*x13051)));
evalcond[5]=((((-1.0)*gconst28*r01*x13051))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r02*x13054))+((r00*x13052)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13056=IKPowWithIntegerCheck(IKsign((((gconst29*r21))+((gconst28*r20)))),-1);
if(!x13056.valid){
continue;
}
CheckValue<IkReal> x13057 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst28*r01))+(((-1.0)*gconst29*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13057.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13056.value)))+(x13057.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13058=IKsin(j4);
IkReal x13059=IKcos(j4);
IkReal x13060=(gconst28*r11);
IkReal x13061=((1.0)*x13059);
IkReal x13062=(gconst29*x13059);
IkReal x13063=(gconst28*x13058);
IkReal x13064=((1.0)*x13058);
IkReal x13065=(gconst29*x13064);
evalcond[0]=((((-1.0)*r20*x13065))+((r21*x13063))+(((-1.0)*r22*x13061)));
evalcond[1]=((((-1.0)*r00*x13065))+(((-1.0)*r02*x13061))+((r01*x13063)));
evalcond[2]=((((-1.0)*x13060*x13061))+(((-1.0)*r12*x13064))+((r10*x13062)));
evalcond[3]=((1.0)+((x13058*x13060))+(((-1.0)*r10*x13065))+(((-1.0)*r12*x13061)));
evalcond[4]=(((r20*x13062))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x13064))+(((-1.0)*gconst28*r21*x13061)));
evalcond[5]=((((-1.0)*gconst28*r01*x13061))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r02*x13064))+((r00*x13062)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r02);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal op[2+1], zeror[2];
int numroots;
op[0]=((1.0)+r12);
op[1]=((((-2.0)*gconst29*r10))+(((2.0)*gconst28*r11)));
op[2]=((1.0)+(((-1.0)*r12)));
polyroots2(op,zeror,numroots);
IkReal j4array[2], cj4array[2], sj4array[2], tempj4array[1];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ++ij4)
{
IkReal htj4 = zeror[ij4];
tempj4array[0]=((2.0)*(atan(htj4)));
for(int kj4 = 0; kj4 < 1; ++kj4)
{
j4array[numsolutions] = tempj4array[kj4];
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
numsolutions++;
}
}
bool j4valid[2]={true,true};
_nj4 = 2;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
    {
if( !j4valid[ij4] )
{
    continue;
}
    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
htj4 = IKtan(j4/2);

_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13066=gconst28*gconst28;
IkReal x13067=gconst29*gconst29;
IkReal x13068=(r11*r21);
IkReal x13069=(gconst29*sj3);
IkReal x13070=((1.0)*cj3);
IkReal x13071=(r10*r20);
IkReal x13072=(r10*r21);
IkReal x13073=(r11*r20);
IkReal x13074=(cj3*gconst28*gconst29);
CheckValue<IkReal> x13075 = IKatan2WithCheck(IkReal((((r11*r22*x13069))+((gconst28*r10*r22*sj3)))),IkReal(((((-1.0)*sj3*x13067*x13073))+(((-1.0)*gconst28*x13069*x13071))+((sj3*x13066*x13072))+((gconst28*x13068*x13069)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13075.valid){
continue;
}
CheckValue<IkReal> x13076=IKPowWithIntegerCheck(IKsign((((x13072*x13074))+((x13073*x13074))+(((-1.0)*r12*r22*x13070))+(((-1.0)*x13066*x13068*x13070))+(((-1.0)*x13067*x13070*x13071)))),-1);
if(!x13076.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13075.value)+(((1.5707963267949)*(x13076.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13077=IKsin(j4);
IkReal x13078=IKcos(j4);
IkReal x13079=(sj1*sj2);
IkReal x13080=(gconst29*r20);
IkReal x13081=(gconst28*r20);
IkReal x13082=((1.0)*cj2);
IkReal x13083=(r11*sj3);
IkReal x13084=(cj1*sj2);
IkReal x13085=(gconst29*r01);
IkReal x13086=(gconst29*r10);
IkReal x13087=(cj3*gconst28);
IkReal x13088=(cj3*gconst29);
IkReal x13089=(gconst28*sj3);
IkReal x13090=(gconst29*r00);
IkReal x13091=(cj1*x13082);
IkReal x13092=((1.0)*x13078);
IkReal x13093=((1.0)*x13077);
IkReal x13094=(gconst28*x13077);
IkReal x13095=(cj3*x13077);
IkReal x13096=(sj3*x13078);
evalcond[0]=((((-1.0)*r22*x13092))+(((-1.0)*x13080*x13093))+((r21*x13094)));
evalcond[1]=((((-1.0)*x13090*x13093))+((r01*x13094))+(((-1.0)*r02*x13092)));
evalcond[2]=((1.0)+(((-1.0)*r12*x13092))+(((-1.0)*x13086*x13093))+((r11*x13094)));
evalcond[3]=(((gconst29*x13083))+((r12*x13095))+(((-1.0)*cj3*x13086*x13092))+((r11*x13078*x13087))+((r10*x13089)));
evalcond[4]=(((r11*x13088))+((x13086*x13096))+(((-1.0)*gconst28*x13083*x13092))+((r10*x13087))+(((-1.0)*r12*sj3*x13093)));
evalcond[5]=(((cj2*sj1))+((gconst29*r21*sj3))+((sj3*x13081))+(((-1.0)*cj3*x13080*x13092))+((r22*x13095))+x13084+((r21*x13078*x13087)));
evalcond[6]=(((r02*x13095))+((r01*x13078*x13087))+(((-1.0)*r00*x13088*x13092))+((sj3*x13085))+x13079+((r00*x13089))+(((-1.0)*x13091)));
evalcond[7]=(((x13080*x13096))+((cj3*x13081))+(((-1.0)*r21*x13089*x13092))+(((-1.0)*r22*sj3*x13093))+x13079+(((-1.0)*x13091))+((r21*x13088)));
evalcond[8]=((((-1.0)*r01*x13089*x13092))+((cj3*x13085))+(((-1.0)*r02*sj3*x13093))+((r00*x13087))+(((-1.0)*x13084))+((x13090*x13096))+(((-1.0)*sj1*x13082)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13097=((1.0)*gconst29);
CheckValue<IkReal> x13098=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x13097))+(((-1.0)*gconst28*r00)))),-1);
if(!x13098.valid){
continue;
}
CheckValue<IkReal> x13099 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x13097))+((gconst28*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13099.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13098.value)))+(x13099.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13100=IKsin(j4);
IkReal x13101=IKcos(j4);
IkReal x13102=(sj1*sj2);
IkReal x13103=(gconst29*r20);
IkReal x13104=(gconst28*r20);
IkReal x13105=((1.0)*cj2);
IkReal x13106=(r11*sj3);
IkReal x13107=(cj1*sj2);
IkReal x13108=(gconst29*r01);
IkReal x13109=(gconst29*r10);
IkReal x13110=(cj3*gconst28);
IkReal x13111=(cj3*gconst29);
IkReal x13112=(gconst28*sj3);
IkReal x13113=(gconst29*r00);
IkReal x13114=(cj1*x13105);
IkReal x13115=((1.0)*x13101);
IkReal x13116=((1.0)*x13100);
IkReal x13117=(gconst28*x13100);
IkReal x13118=(cj3*x13100);
IkReal x13119=(sj3*x13101);
evalcond[0]=(((r21*x13117))+(((-1.0)*x13103*x13116))+(((-1.0)*r22*x13115)));
evalcond[1]=((((-1.0)*r02*x13115))+(((-1.0)*x13113*x13116))+((r01*x13117)));
evalcond[2]=((1.0)+(((-1.0)*r12*x13115))+(((-1.0)*x13109*x13116))+((r11*x13117)));
evalcond[3]=(((gconst29*x13106))+((r12*x13118))+((r11*x13101*x13110))+((r10*x13112))+(((-1.0)*cj3*x13109*x13115)));
evalcond[4]=(((x13109*x13119))+(((-1.0)*r12*sj3*x13116))+(((-1.0)*gconst28*x13106*x13115))+((r10*x13110))+((r11*x13111)));
evalcond[5]=((((-1.0)*cj3*x13103*x13115))+((r22*x13118))+((cj2*sj1))+((gconst29*r21*sj3))+((sj3*x13104))+((r21*x13101*x13110))+x13107);
evalcond[6]=(((r02*x13118))+(((-1.0)*x13114))+((sj3*x13108))+(((-1.0)*r00*x13111*x13115))+((r01*x13101*x13110))+x13102+((r00*x13112)));
evalcond[7]=(((r21*x13111))+(((-1.0)*x13114))+(((-1.0)*r21*x13112*x13115))+((cj3*x13104))+((x13103*x13119))+(((-1.0)*r22*sj3*x13116))+x13102);
evalcond[8]=((((-1.0)*sj1*x13105))+((cj3*x13108))+(((-1.0)*x13107))+((x13113*x13119))+(((-1.0)*r01*x13112*x13115))+((r00*x13110))+(((-1.0)*r02*sj3*x13116)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13120=IKPowWithIntegerCheck(IKsign((((gconst29*r21))+((gconst28*r20)))),-1);
if(!x13120.valid){
continue;
}
CheckValue<IkReal> x13121 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst28*r01))+(((-1.0)*gconst29*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13121.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13120.value)))+(x13121.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13122=IKsin(j4);
IkReal x13123=IKcos(j4);
IkReal x13124=(sj1*sj2);
IkReal x13125=(gconst29*r20);
IkReal x13126=(gconst28*r20);
IkReal x13127=((1.0)*cj2);
IkReal x13128=(r11*sj3);
IkReal x13129=(cj1*sj2);
IkReal x13130=(gconst29*r01);
IkReal x13131=(gconst29*r10);
IkReal x13132=(cj3*gconst28);
IkReal x13133=(cj3*gconst29);
IkReal x13134=(gconst28*sj3);
IkReal x13135=(gconst29*r00);
IkReal x13136=(cj1*x13127);
IkReal x13137=((1.0)*x13123);
IkReal x13138=((1.0)*x13122);
IkReal x13139=(gconst28*x13122);
IkReal x13140=(cj3*x13122);
IkReal x13141=(sj3*x13123);
evalcond[0]=((((-1.0)*x13125*x13138))+((r21*x13139))+(((-1.0)*r22*x13137)));
evalcond[1]=((((-1.0)*x13135*x13138))+((r01*x13139))+(((-1.0)*r02*x13137)));
evalcond[2]=((1.0)+((r11*x13139))+(((-1.0)*x13131*x13138))+(((-1.0)*r12*x13137)));
evalcond[3]=(((r11*x13123*x13132))+((r10*x13134))+((gconst29*x13128))+((r12*x13140))+(((-1.0)*cj3*x13131*x13137)));
evalcond[4]=(((r10*x13132))+((r11*x13133))+(((-1.0)*gconst28*x13128*x13137))+(((-1.0)*r12*sj3*x13138))+((x13131*x13141)));
evalcond[5]=(((cj2*sj1))+((gconst29*r21*sj3))+((r22*x13140))+((r21*x13123*x13132))+((sj3*x13126))+x13129+(((-1.0)*cj3*x13125*x13137)));
evalcond[6]=(((r00*x13134))+((sj3*x13130))+((r02*x13140))+(((-1.0)*x13136))+x13124+(((-1.0)*r00*x13133*x13137))+((r01*x13123*x13132)));
evalcond[7]=(((cj3*x13126))+(((-1.0)*r22*sj3*x13138))+(((-1.0)*r21*x13134*x13137))+((r21*x13133))+(((-1.0)*x13136))+x13124+((x13125*x13141)));
evalcond[8]=((((-1.0)*r02*sj3*x13138))+((r00*x13132))+((cj3*x13130))+(((-1.0)*sj1*x13127))+((x13135*x13141))+(((-1.0)*x13129))+(((-1.0)*r01*x13134*x13137)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13142=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13142);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13142);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x13143=(r11*sj5);
IkReal x13144=((1.0)*cj5*r10);
j4eval[0]=((((-1.0)*x13144))+x13143);
j4eval[1]=(((cj3*x13143))+(((-1.0)*cj3*x13144)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13145=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13145);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13145);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x13146=(cj5*r10);
IkReal x13147=(r11*sj5);
j4eval[0]=(x13147+(((-1.0)*x13146)));
j4eval[1]=((((-1.0)*sj3*x13147))+((sj3*x13146)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x13148=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13148);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13148);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=cj3;
j4eval[1]=r22;
j4eval[2]=(((cj3*r11*sj5))+(((-1.0)*cj3*cj5*r10)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13149=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13149);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13149);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal x13150=((1.0)*cj5);
j4eval[0]=(((r11*sj5))+(((-1.0)*r10*x13150)));
j4eval[1]=(((r01*sj5))+(((-1.0)*r00*x13150)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13151=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13151);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13151);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=r22;
j4eval[1]=(((r01*sj5))+(((-1.0)*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13152=((1.0)*sj1);
CheckValue<IkReal> x13153=IKPowWithIntegerCheck(r22,-1);
if(!x13153.valid){
continue;
}
CheckValue<IkReal> x13154=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x13154.valid){
continue;
}
if( IKabs(((x13153.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x13152)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13154.value)*(((((-1.0)*sj2*x13152))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13153.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x13152))))))+IKsqr(((x13154.value)*(((((-1.0)*sj2*x13152))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13153.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x13152))))), ((x13154.value)*(((((-1.0)*sj2*x13152))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13155=IKsin(j4);
IkReal x13156=IKcos(j4);
IkReal x13157=((1.0)*cj5);
IkReal x13158=(sj5*x13156);
IkReal x13159=(sj5*x13155);
evalcond[0]=((-1.0)*r22*x13156);
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+((r22*x13155)));
evalcond[2]=((((-1.0)*r00*x13155*x13157))+((r01*x13159)));
evalcond[3]=((((-1.0)*r10*x13156*x13157))+((r11*x13158)));
evalcond[4]=((1.0)+(((-1.0)*r10*x13155*x13157))+((r11*x13159)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r00*x13156*x13157))+((r01*x13158)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13160=((1.0)*cj5);
CheckValue<IkReal> x13161=IKPowWithIntegerCheck((((r11*sj5))+(((-1.0)*r10*x13160))),-1);
if(!x13161.valid){
continue;
}
CheckValue<IkReal> x13162=IKPowWithIntegerCheck(((((-1.0)*r00*x13160))+((r01*sj5))),-1);
if(!x13162.valid){
continue;
}
if( IKabs(((-1.0)*(x13161.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13162.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13161.value)))+IKsqr(((x13162.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x13161.value)), ((x13162.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13163=IKsin(j4);
IkReal x13164=IKcos(j4);
IkReal x13165=((1.0)*cj5);
IkReal x13166=(sj5*x13164);
IkReal x13167=(sj5*x13163);
evalcond[0]=((-1.0)*r22*x13164);
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+((r22*x13163)));
evalcond[2]=(((r01*x13167))+(((-1.0)*r00*x13163*x13165)));
evalcond[3]=(((r11*x13166))+(((-1.0)*r10*x13164*x13165)));
evalcond[4]=((1.0)+(((-1.0)*r10*x13163*x13165))+((r11*x13167)));
evalcond[5]=(((r01*x13166))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r00*x13164*x13165)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13168=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13168);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13168);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=r22;
j4eval[1]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13169=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13169);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13169);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[1]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13170=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x13170.valid){
continue;
}
CheckValue<IkReal> x13171=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x13171.valid){
continue;
}
if( IKabs(((-1.0)*(x13170.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13171.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13170.value)))+IKsqr(((x13171.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x13170.value)), ((x13171.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13172=IKsin(j4);
IkReal x13173=IKcos(j4);
IkReal x13174=(cj5*x13173);
IkReal x13175=(sj5*x13172);
IkReal x13176=((1.0)*cj5*x13172);
IkReal x13177=((1.0)*sj5*x13173);
evalcond[0]=((-1.0)*r22*x13173);
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x13172)));
evalcond[2]=(((r01*x13175))+(((-1.0)*r00*x13176)));
evalcond[3]=((((-1.0)*r11*x13177))+((r10*x13174)));
evalcond[4]=((1.0)+(((-1.0)*r10*x13176))+((r11*x13175)));
evalcond[5]=(((r00*x13174))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r01*x13177)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13178=IKPowWithIntegerCheck(r22,-1);
if(!x13178.valid){
continue;
}
CheckValue<IkReal> x13179=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x13179.valid){
continue;
}
if( IKabs(((x13178.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13179.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13178.value)*((((cj2*sj1))+((cj1*sj2))))))+IKsqr(((x13179.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13178.value)*((((cj2*sj1))+((cj1*sj2))))), ((x13179.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13180=IKsin(j4);
IkReal x13181=IKcos(j4);
IkReal x13182=(cj5*x13181);
IkReal x13183=(sj5*x13180);
IkReal x13184=((1.0)*cj5*x13180);
IkReal x13185=((1.0)*sj5*x13181);
evalcond[0]=((-1.0)*r22*x13181);
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x13180)));
evalcond[2]=(((r01*x13183))+(((-1.0)*r00*x13184)));
evalcond[3]=((((-1.0)*r11*x13185))+((r10*x13182)));
evalcond[4]=((1.0)+(((-1.0)*r10*x13184))+((r11*x13183)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r01*x13185))+((r00*x13182)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13186=((1.0)*r10);
CheckValue<IkReal> x13187=IKPowWithIntegerCheck(cj3,-1);
if(!x13187.valid){
continue;
}
CheckValue<IkReal> x13188=IKPowWithIntegerCheck(r22,-1);
if(!x13188.valid){
continue;
}
CheckValue<IkReal> x13189=IKPowWithIntegerCheck(((((-1.0)*cj3*cj5*x13186))+((cj3*r11*sj5))),-1);
if(!x13189.valid){
continue;
}
if( IKabs(((x13187.value)*(x13188.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13189.value)*(((((-1.0)*cj5*r11*sj3))+(((-1.0)*sj3*sj5*x13186)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13187.value)*(x13188.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))))+IKsqr(((x13189.value)*(((((-1.0)*cj5*r11*sj3))+(((-1.0)*sj3*sj5*x13186))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13187.value)*(x13188.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))), ((x13189.value)*(((((-1.0)*cj5*r11*sj3))+(((-1.0)*sj3*sj5*x13186))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13190=IKsin(j4);
IkReal x13191=IKcos(j4);
IkReal x13192=(sj1*sj2);
IkReal x13193=(r11*sj5);
IkReal x13194=(r00*sj3);
IkReal x13195=(cj5*r01);
IkReal x13196=((1.0)*cj1);
IkReal x13197=(cj3*sj5);
IkReal x13198=(cj5*r11);
IkReal x13199=(r10*sj3);
IkReal x13200=(cj2*sj1);
IkReal x13201=((1.0)*cj5);
IkReal x13202=((1.0)*sj3);
IkReal x13203=(r01*sj5);
IkReal x13204=(cj2*x13196);
IkReal x13205=(cj3*x13191);
IkReal x13206=(r22*x13190);
IkReal x13207=(cj5*x13191);
IkReal x13208=(x13190*x13201);
evalcond[0]=((-1.0)*r22*x13191);
evalcond[1]=(((cj1*sj2))+((cj3*x13206))+x13200);
evalcond[2]=(((x13190*x13203))+(((-1.0)*r00*x13208)));
evalcond[3]=((1.0)+(((-1.0)*r10*x13208))+((x13190*x13193)));
evalcond[4]=((((-1.0)*x13202*x13206))+x13192+(((-1.0)*x13204)));
evalcond[5]=((((-1.0)*r10*x13201*x13205))+((sj5*x13199))+((x13193*x13205))+((sj3*x13198)));
evalcond[6]=((((-1.0)*x13191*x13193*x13202))+((r10*x13197))+((x13199*x13207))+((cj3*x13198)));
evalcond[7]=((((-1.0)*r00*x13201*x13205))+((sj5*x13194))+x13192+(((-1.0)*x13204))+((sj3*x13195))+((r01*x13191*x13197)));
evalcond[8]=((((-1.0)*x13191*x13202*x13203))+((r00*x13197))+((x13194*x13207))+(((-1.0)*sj2*x13196))+(((-1.0)*x13200))+((cj3*x13195)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13209=(cj5*r10);
IkReal x13210=((1.0)*r11);
CheckValue<IkReal> x13211=IKPowWithIntegerCheck((((r11*sj5))+(((-1.0)*x13209))),-1);
if(!x13211.valid){
continue;
}
CheckValue<IkReal> x13212=IKPowWithIntegerCheck((((sj3*x13209))+(((-1.0)*sj3*sj5*x13210))),-1);
if(!x13212.valid){
continue;
}
if( IKabs(((-1.0)*(x13211.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13212.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x13210)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13211.value)))+IKsqr(((x13212.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x13210))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x13211.value)), ((x13212.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x13210))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13213=IKsin(j4);
IkReal x13214=IKcos(j4);
IkReal x13215=(sj1*sj2);
IkReal x13216=(r11*sj5);
IkReal x13217=(r00*sj3);
IkReal x13218=(cj5*r01);
IkReal x13219=((1.0)*cj1);
IkReal x13220=(cj3*sj5);
IkReal x13221=(cj5*r11);
IkReal x13222=(r10*sj3);
IkReal x13223=(cj2*sj1);
IkReal x13224=((1.0)*cj5);
IkReal x13225=((1.0)*sj3);
IkReal x13226=(r01*sj5);
IkReal x13227=(cj2*x13219);
IkReal x13228=(cj3*x13214);
IkReal x13229=(r22*x13213);
IkReal x13230=(cj5*x13214);
IkReal x13231=(x13213*x13224);
evalcond[0]=((-1.0)*r22*x13214);
evalcond[1]=(((cj1*sj2))+x13223+((cj3*x13229)));
evalcond[2]=((((-1.0)*r00*x13231))+((x13213*x13226)));
evalcond[3]=((1.0)+(((-1.0)*r10*x13231))+((x13213*x13216)));
evalcond[4]=((((-1.0)*x13225*x13229))+(((-1.0)*x13227))+x13215);
evalcond[5]=(((sj5*x13222))+(((-1.0)*r10*x13224*x13228))+((sj3*x13221))+((x13216*x13228)));
evalcond[6]=((((-1.0)*x13214*x13216*x13225))+((r10*x13220))+((x13222*x13230))+((cj3*x13221)));
evalcond[7]=(((sj5*x13217))+((r01*x13214*x13220))+((sj3*x13218))+(((-1.0)*r00*x13224*x13228))+(((-1.0)*x13227))+x13215);
evalcond[8]=(((x13217*x13230))+(((-1.0)*x13223))+(((-1.0)*sj2*x13219))+(((-1.0)*x13214*x13225*x13226))+((r00*x13220))+((cj3*x13218)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13232=((1.0)*sj3);
IkReal x13233=(r11*sj5);
IkReal x13234=((1.0)*cj5*r10);
CheckValue<IkReal> x13235=IKPowWithIntegerCheck((x13233+(((-1.0)*x13234))),-1);
if(!x13235.valid){
continue;
}
CheckValue<IkReal> x13236=IKPowWithIntegerCheck(((((-1.0)*cj3*x13234))+((cj3*x13233))),-1);
if(!x13236.valid){
continue;
}
if( IKabs(((-1.0)*(x13235.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13236.value)*(((((-1.0)*cj5*r11*x13232))+(((-1.0)*r10*sj5*x13232)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13235.value)))+IKsqr(((x13236.value)*(((((-1.0)*cj5*r11*x13232))+(((-1.0)*r10*sj5*x13232))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x13235.value)), ((x13236.value)*(((((-1.0)*cj5*r11*x13232))+(((-1.0)*r10*sj5*x13232))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13237=IKsin(j4);
IkReal x13238=IKcos(j4);
IkReal x13239=(sj1*sj2);
IkReal x13240=(r11*sj5);
IkReal x13241=(r00*sj3);
IkReal x13242=(cj5*r01);
IkReal x13243=((1.0)*cj1);
IkReal x13244=(cj3*sj5);
IkReal x13245=(cj5*r11);
IkReal x13246=(r10*sj3);
IkReal x13247=(cj2*sj1);
IkReal x13248=((1.0)*cj5);
IkReal x13249=((1.0)*sj3);
IkReal x13250=(r01*sj5);
IkReal x13251=(cj2*x13243);
IkReal x13252=(cj3*x13238);
IkReal x13253=(r22*x13237);
IkReal x13254=(cj5*x13238);
IkReal x13255=(x13237*x13248);
evalcond[0]=((-1.0)*r22*x13238);
evalcond[1]=(((cj3*x13253))+((cj1*sj2))+x13247);
evalcond[2]=((((-1.0)*r00*x13255))+((x13237*x13250)));
evalcond[3]=((1.0)+(((-1.0)*r10*x13255))+((x13237*x13240)));
evalcond[4]=((((-1.0)*x13249*x13253))+(((-1.0)*x13251))+x13239);
evalcond[5]=(((x13240*x13252))+(((-1.0)*r10*x13248*x13252))+((sj5*x13246))+((sj3*x13245)));
evalcond[6]=(((cj3*x13245))+((x13246*x13254))+((r10*x13244))+(((-1.0)*x13238*x13240*x13249)));
evalcond[7]=(((r01*x13238*x13244))+(((-1.0)*x13251))+x13239+((sj5*x13241))+((sj3*x13242))+(((-1.0)*r00*x13248*x13252)));
evalcond[8]=((((-1.0)*x13238*x13249*x13250))+(((-1.0)*x13247))+((cj3*x13242))+((r00*x13244))+((x13241*x13254))+(((-1.0)*sj2*x13243)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13256=cj5*cj5;
IkReal x13257=((1.0)*cj3);
IkReal x13258=(r10*r21);
IkReal x13259=(cj5*sj5);
IkReal x13260=(r11*r21);
IkReal x13261=(r11*r20);
IkReal x13262=(r22*sj3);
IkReal x13263=(r10*r20);
IkReal x13264=((1.0)*sj3*x13256);
CheckValue<IkReal> x13265=IKPowWithIntegerCheck(IKsign((((cj3*x13259*x13261))+((cj3*x13258*x13259))+((cj3*x13256*x13260))+(((-1.0)*r12*r22*x13257))+(((-1.0)*x13256*x13257*x13263))+(((-1.0)*x13257*x13260)))),-1);
if(!x13265.valid){
continue;
}
CheckValue<IkReal> x13266 = IKatan2WithCheck(IkReal((((cj5*r11*x13262))+((r10*sj5*x13262)))),IkReal((((sj3*x13258))+((sj3*x13259*x13260))+(((-1.0)*x13261*x13264))+(((-1.0)*sj3*x13259*x13263))+(((-1.0)*x13258*x13264)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13266.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13265.value)))+(x13266.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13267=IKsin(j4);
IkReal x13268=IKcos(j4);
IkReal x13269=(sj1*sj2);
IkReal x13270=(cj5*sj3);
IkReal x13271=(cj5*r10);
IkReal x13272=(r00*sj5);
IkReal x13273=(r11*sj5);
IkReal x13274=(cj3*cj5);
IkReal x13275=((1.0)*cj1);
IkReal x13276=(cj3*sj5);
IkReal x13277=(r21*sj5);
IkReal x13278=(cj2*sj1);
IkReal x13279=(sj3*sj5);
IkReal x13280=(r01*sj5);
IkReal x13281=(cj2*x13275);
IkReal x13282=((1.0)*x13268);
IkReal x13283=((1.0)*x13267);
IkReal x13284=(cj3*x13267);
IkReal x13285=(cj3*x13268);
evalcond[0]=((((-1.0)*r22*x13282))+((x13267*x13277))+(((-1.0)*cj5*r20*x13283)));
evalcond[1]=((((-1.0)*cj5*r00*x13283))+(((-1.0)*r02*x13282))+((x13267*x13280)));
evalcond[2]=((1.0)+(((-1.0)*x13271*x13283))+((x13267*x13273))+(((-1.0)*r12*x13282)));
evalcond[3]=(((r12*x13284))+((r11*x13270))+((x13273*x13285))+(((-1.0)*cj3*x13271*x13282))+((r10*x13279)));
evalcond[4]=(((r11*x13274))+(((-1.0)*sj3*x13273*x13282))+((r10*x13276))+(((-1.0)*r12*sj3*x13283))+((r10*x13268*x13270)));
evalcond[5]=(((r21*x13270))+((r20*x13279))+((cj1*sj2))+(((-1.0)*r20*x13274*x13282))+((r22*x13284))+x13278+((r21*x13268*x13276)));
evalcond[6]=(((r01*x13270))+(((-1.0)*r00*x13274*x13282))+((sj3*x13272))+((r02*x13284))+x13269+((r01*x13268*x13276))+(((-1.0)*x13281)));
evalcond[7]=(((r21*x13274))+((r20*x13276))+(((-1.0)*r22*sj3*x13283))+(((-1.0)*sj3*x13277*x13282))+x13269+((r20*x13268*x13270))+(((-1.0)*x13281)));
evalcond[8]=(((r00*x13268*x13270))+(((-1.0)*x13278))+((r01*x13274))+(((-1.0)*sj2*x13275))+((cj3*x13272))+(((-1.0)*r01*x13279*x13282))+(((-1.0)*r02*sj3*x13283)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13286=((1.0)*cj5);
CheckValue<IkReal> x13287 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x13286))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13287.valid){
continue;
}
CheckValue<IkReal> x13288=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x13286)))),-1);
if(!x13288.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13287.value)+(((1.5707963267949)*(x13288.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13289=IKsin(j4);
IkReal x13290=IKcos(j4);
IkReal x13291=(sj1*sj2);
IkReal x13292=(cj5*sj3);
IkReal x13293=(cj5*r10);
IkReal x13294=(r00*sj5);
IkReal x13295=(r11*sj5);
IkReal x13296=(cj3*cj5);
IkReal x13297=((1.0)*cj1);
IkReal x13298=(cj3*sj5);
IkReal x13299=(r21*sj5);
IkReal x13300=(cj2*sj1);
IkReal x13301=(sj3*sj5);
IkReal x13302=(r01*sj5);
IkReal x13303=(cj2*x13297);
IkReal x13304=((1.0)*x13290);
IkReal x13305=((1.0)*x13289);
IkReal x13306=(cj3*x13289);
IkReal x13307=(cj3*x13290);
evalcond[0]=((((-1.0)*cj5*r20*x13305))+(((-1.0)*r22*x13304))+((x13289*x13299)));
evalcond[1]=((((-1.0)*cj5*r00*x13305))+((x13289*x13302))+(((-1.0)*r02*x13304)));
evalcond[2]=((1.0)+(((-1.0)*x13293*x13305))+(((-1.0)*r12*x13304))+((x13289*x13295)));
evalcond[3]=(((r11*x13292))+((r12*x13306))+((r10*x13301))+(((-1.0)*cj3*x13293*x13304))+((x13295*x13307)));
evalcond[4]=((((-1.0)*r12*sj3*x13305))+((r11*x13296))+((r10*x13298))+((r10*x13290*x13292))+(((-1.0)*sj3*x13295*x13304)));
evalcond[5]=(((r20*x13301))+((cj1*sj2))+(((-1.0)*r20*x13296*x13304))+((r22*x13306))+((r21*x13290*x13298))+x13300+((r21*x13292)));
evalcond[6]=(((sj3*x13294))+(((-1.0)*r00*x13296*x13304))+((r01*x13290*x13298))+(((-1.0)*x13303))+x13291+((r02*x13306))+((r01*x13292)));
evalcond[7]=(((r20*x13298))+(((-1.0)*r22*sj3*x13305))+(((-1.0)*sj3*x13299*x13304))+((r20*x13290*x13292))+(((-1.0)*x13303))+x13291+((r21*x13296)));
evalcond[8]=((((-1.0)*r02*sj3*x13305))+((cj3*x13294))+(((-1.0)*sj2*x13297))+((r00*x13290*x13292))+(((-1.0)*r01*x13301*x13304))+(((-1.0)*x13300))+((r01*x13296)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13308=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x13308.valid){
continue;
}
CheckValue<IkReal> x13309 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13309.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13308.value)))+(x13309.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13310=IKsin(j4);
IkReal x13311=IKcos(j4);
IkReal x13312=(sj1*sj2);
IkReal x13313=(cj5*sj3);
IkReal x13314=(cj5*r10);
IkReal x13315=(r00*sj5);
IkReal x13316=(r11*sj5);
IkReal x13317=(cj3*cj5);
IkReal x13318=((1.0)*cj1);
IkReal x13319=(cj3*sj5);
IkReal x13320=(r21*sj5);
IkReal x13321=(cj2*sj1);
IkReal x13322=(sj3*sj5);
IkReal x13323=(r01*sj5);
IkReal x13324=(cj2*x13318);
IkReal x13325=((1.0)*x13311);
IkReal x13326=((1.0)*x13310);
IkReal x13327=(cj3*x13310);
IkReal x13328=(cj3*x13311);
evalcond[0]=((((-1.0)*r22*x13325))+((x13310*x13320))+(((-1.0)*cj5*r20*x13326)));
evalcond[1]=((((-1.0)*r02*x13325))+((x13310*x13323))+(((-1.0)*cj5*r00*x13326)));
evalcond[2]=((1.0)+(((-1.0)*r12*x13325))+(((-1.0)*x13314*x13326))+((x13310*x13316)));
evalcond[3]=(((r12*x13327))+((r11*x13313))+(((-1.0)*cj3*x13314*x13325))+((r10*x13322))+((x13316*x13328)));
evalcond[4]=(((r11*x13317))+((r10*x13319))+(((-1.0)*r12*sj3*x13326))+(((-1.0)*sj3*x13316*x13325))+((r10*x13311*x13313)));
evalcond[5]=(((cj1*sj2))+((r20*x13322))+((r21*x13311*x13319))+(((-1.0)*r20*x13317*x13325))+((r21*x13313))+x13321+((r22*x13327)));
evalcond[6]=(((r02*x13327))+((r01*x13313))+(((-1.0)*r00*x13317*x13325))+((sj3*x13315))+(((-1.0)*x13324))+x13312+((r01*x13311*x13319)));
evalcond[7]=(((r20*x13311*x13313))+((r20*x13319))+(((-1.0)*sj3*x13320*x13325))+(((-1.0)*x13324))+((r21*x13317))+(((-1.0)*r22*sj3*x13326))+x13312);
evalcond[8]=((((-1.0)*r01*x13322*x13325))+(((-1.0)*sj2*x13318))+((r00*x13311*x13313))+(((-1.0)*x13321))+((r01*x13317))+(((-1.0)*r02*sj3*x13326))+((cj3*x13315)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x13329=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x13329;
j4eval[1]=IKsign(x13329);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x13330=((1.0)*cj5);
IkReal x13331=((((-1.0)*r21*x13330))+(((-1.0)*r20*sj5)));
j4eval[0]=x13331;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x13330))))));
j4eval[2]=IKsign(x13331);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x13332=cj5*cj5;
IkReal x13333=(cj3*r21);
IkReal x13334=(cj5*sj5);
IkReal x13335=((1.0)*cj3);
IkReal x13336=((((-1.0)*r10*r20*x13332*x13335))+(((-1.0)*r12*r22*x13335))+((r10*x13333*x13334))+((r11*x13332*x13333))+(((-1.0)*r11*x13333))+((cj3*r11*r20*x13334)));
j4eval[0]=x13336;
j4eval[1]=IKsign(x13336);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x13337=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x13337;
j4eval[1]=IKsign(x13337);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x13338=((1.0)*cj5);
IkReal x13339=((((-1.0)*r21*x13338))+(((-1.0)*r20*sj5)));
j4eval[0]=x13339;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x13338))))));
j4eval[2]=IKsign(x13339);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x13340=cj5*cj5;
IkReal x13341=r11*r11;
IkReal x13342=(cj5*r10);
IkReal x13343=(r11*sj5);
IkReal x13344=((((2.0)*x13342*x13343))+((x13340*x13341))+(((-1.0)*x13341))+(((-1.0)*x13340*(r10*r10)))+(((-1.0)*(r12*r12))));
j4eval[0]=x13344;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*x13343))+x13342))));
j4eval[2]=IKsign(x13344);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13345=cj5*cj5;
IkReal x13346=r11*r11;
IkReal x13347=(cj5*r10);
IkReal x13348=(r11*sj5);
CheckValue<IkReal> x13349=IKPowWithIntegerCheck(IKsign(((((-1.0)*x13345*(r10*r10)))+(((-1.0)*x13346))+(((-1.0)*(r12*r12)))+((x13345*x13346))+(((2.0)*x13347*x13348)))),-1);
if(!x13349.valid){
continue;
}
CheckValue<IkReal> x13350 = IKatan2WithCheck(IkReal(((((-1.0)*x13348))+x13347)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x13350.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13349.value)))+(x13350.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13351=IKsin(j4);
IkReal x13352=IKcos(j4);
IkReal x13353=(cj5*r10);
IkReal x13354=(r01*sj5);
IkReal x13355=(cj5*r00);
IkReal x13356=(cj5*r20);
IkReal x13357=((1.0)*x13352);
IkReal x13358=((1.0)*x13351);
IkReal x13359=(sj5*x13351);
evalcond[0]=((((-1.0)*r22*x13357))+(((-1.0)*x13356*x13358))+((r21*x13359)));
evalcond[1]=((((-1.0)*r02*x13357))+(((-1.0)*x13355*x13358))+((x13351*x13354)));
evalcond[2]=((((-1.0)*r11*sj5*x13357))+(((-1.0)*r12*x13358))+((x13352*x13353)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x13357))+(((-1.0)*x13353*x13358))+((r11*x13359)));
evalcond[4]=((((-1.0)*r02*x13358))+((cj2*sj1))+(((-1.0)*x13354*x13357))+((x13352*x13355))+((cj1*sj2)));
evalcond[5]=((((-1.0)*r22*x13358))+((x13352*x13356))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x13357)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13360=((1.0)*cj5);
CheckValue<IkReal> x13361=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x13360))+(((-1.0)*r20*sj5)))),-1);
if(!x13361.valid){
continue;
}
CheckValue<IkReal> x13362 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x13360)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13362.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13361.value)))+(x13362.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13363=IKsin(j4);
IkReal x13364=IKcos(j4);
IkReal x13365=(cj5*r10);
IkReal x13366=(r01*sj5);
IkReal x13367=(cj5*r00);
IkReal x13368=(cj5*r20);
IkReal x13369=((1.0)*x13364);
IkReal x13370=((1.0)*x13363);
IkReal x13371=(sj5*x13363);
evalcond[0]=((((-1.0)*r22*x13369))+(((-1.0)*x13368*x13370))+((r21*x13371)));
evalcond[1]=((((-1.0)*x13367*x13370))+((x13363*x13366))+(((-1.0)*r02*x13369)));
evalcond[2]=((((-1.0)*r11*sj5*x13369))+((x13364*x13365))+(((-1.0)*r12*x13370)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x13369))+(((-1.0)*x13365*x13370))+((r11*x13371)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x13366*x13369))+((cj1*sj2))+(((-1.0)*r02*x13370))+((x13364*x13367)));
evalcond[5]=((((-1.0)*r22*x13370))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x13369))+((x13364*x13368)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13372 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13372.valid){
continue;
}
CheckValue<IkReal> x13373=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x13373.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13372.value)+(((1.5707963267949)*(x13373.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13374=IKsin(j4);
IkReal x13375=IKcos(j4);
IkReal x13376=(cj5*r10);
IkReal x13377=(r01*sj5);
IkReal x13378=(cj5*r00);
IkReal x13379=(cj5*r20);
IkReal x13380=((1.0)*x13375);
IkReal x13381=((1.0)*x13374);
IkReal x13382=(sj5*x13374);
evalcond[0]=((((-1.0)*r22*x13380))+(((-1.0)*x13379*x13381))+((r21*x13382)));
evalcond[1]=(((x13374*x13377))+(((-1.0)*x13378*x13381))+(((-1.0)*r02*x13380)));
evalcond[2]=((((-1.0)*r11*sj5*x13380))+((x13375*x13376))+(((-1.0)*r12*x13381)));
evalcond[3]=((-1.0)+((r11*x13382))+(((-1.0)*x13376*x13381))+(((-1.0)*r12*x13380)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r02*x13381))+((x13375*x13378))+(((-1.0)*x13377*x13380)));
evalcond[5]=((((-1.0)*r22*x13381))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x13380))+((x13375*x13379)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x13383=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x13383;
j4eval[1]=IKsign(x13383);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x13384=((1.0)*cj5);
IkReal x13385=((((-1.0)*r21*x13384))+(((-1.0)*r20*sj5)));
j4eval[0]=x13385;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x13384))))));
j4eval[2]=IKsign(x13385);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x13386=cj5*cj5;
IkReal x13387=r11*r11;
IkReal x13388=(r11*sj5);
IkReal x13389=(cj5*r10);
IkReal x13390=((r12*r12)+(((-1.0)*x13386*x13387))+(((-2.0)*x13388*x13389))+((x13386*(r10*r10)))+x13387);
j4eval[0]=x13390;
j4eval[1]=IKsign(x13390);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x13389))+x13388))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13391=cj5*cj5;
IkReal x13392=r11*r11;
IkReal x13393=(cj5*r10);
IkReal x13394=(r11*sj5);
CheckValue<IkReal> x13395=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-1.0)*x13391*x13392))+((x13391*(r10*r10)))+(((-2.0)*x13393*x13394))+x13392)),-1);
if(!x13395.valid){
continue;
}
CheckValue<IkReal> x13396 = IKatan2WithCheck(IkReal(((((-1.0)*x13393))+x13394)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13396.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13395.value)))+(x13396.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13397=IKcos(j4);
IkReal x13398=IKsin(j4);
IkReal x13399=(cj5*r00);
IkReal x13400=(cj5*r10);
IkReal x13401=(r21*sj5);
IkReal x13402=(cj5*r20);
IkReal x13403=((1.0)*x13397);
IkReal x13404=((1.0)*x13398);
IkReal x13405=(sj5*x13398);
IkReal x13406=(sj5*x13397);
evalcond[0]=(((r11*x13406))+((r12*x13398))+(((-1.0)*x13400*x13403)));
evalcond[1]=(((x13398*x13401))+(((-1.0)*x13402*x13404))+(((-1.0)*r22*x13403)));
evalcond[2]=((((-1.0)*r02*x13403))+((r01*x13405))+(((-1.0)*x13399*x13404)));
evalcond[3]=((-1.0)+((r11*x13405))+(((-1.0)*x13400*x13404))+(((-1.0)*r12*x13403)));
evalcond[4]=(((cj2*sj1))+((r01*x13406))+((cj1*sj2))+(((-1.0)*x13399*x13403))+((r02*x13398)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x13397*x13401))+(((-1.0)*x13402*x13403))+((r22*x13398)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13407=((1.0)*cj5);
CheckValue<IkReal> x13408 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x13407)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13408.valid){
continue;
}
CheckValue<IkReal> x13409=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x13407))+(((-1.0)*r20*sj5)))),-1);
if(!x13409.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13408.value)+(((1.5707963267949)*(x13409.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13410=IKcos(j4);
IkReal x13411=IKsin(j4);
IkReal x13412=(cj5*r00);
IkReal x13413=(cj5*r10);
IkReal x13414=(r21*sj5);
IkReal x13415=(cj5*r20);
IkReal x13416=((1.0)*x13410);
IkReal x13417=((1.0)*x13411);
IkReal x13418=(sj5*x13411);
IkReal x13419=(sj5*x13410);
evalcond[0]=((((-1.0)*x13413*x13416))+((r11*x13419))+((r12*x13411)));
evalcond[1]=((((-1.0)*r22*x13416))+((x13411*x13414))+(((-1.0)*x13415*x13417)));
evalcond[2]=((((-1.0)*r02*x13416))+(((-1.0)*x13412*x13417))+((r01*x13418)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x13416))+(((-1.0)*x13413*x13417))+((r11*x13418)));
evalcond[4]=(((r02*x13411))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x13412*x13416))+((r01*x13419)));
evalcond[5]=(((r22*x13411))+((x13410*x13414))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x13415*x13416)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13420 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13420.valid){
continue;
}
CheckValue<IkReal> x13421=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x13421.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13420.value)+(((1.5707963267949)*(x13421.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13422=IKcos(j4);
IkReal x13423=IKsin(j4);
IkReal x13424=(cj5*r00);
IkReal x13425=(cj5*r10);
IkReal x13426=(r21*sj5);
IkReal x13427=(cj5*r20);
IkReal x13428=((1.0)*x13422);
IkReal x13429=((1.0)*x13423);
IkReal x13430=(sj5*x13423);
IkReal x13431=(sj5*x13422);
evalcond[0]=(((r11*x13431))+((r12*x13423))+(((-1.0)*x13425*x13428)));
evalcond[1]=((((-1.0)*x13427*x13429))+(((-1.0)*r22*x13428))+((x13423*x13426)));
evalcond[2]=(((r01*x13430))+(((-1.0)*r02*x13428))+(((-1.0)*x13424*x13429)));
evalcond[3]=((-1.0)+((r11*x13430))+(((-1.0)*r12*x13428))+(((-1.0)*x13425*x13429)));
evalcond[4]=(((r01*x13431))+((cj2*sj1))+((cj1*sj2))+((r02*x13423))+(((-1.0)*x13424*x13428)));
evalcond[5]=((((-1.0)*x13427*x13428))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x13423))+((x13422*x13426)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13433 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x13433)==0){
continue;
}
IkReal x13432=pow(x13433,-0.5);
CheckValue<IkReal> x13434 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x13434.valid){
continue;
}
IkReal gconst36=((-1.0)*(x13434.value));
IkReal gconst37=((-1.0)*r01*x13432);
IkReal gconst38=(r00*x13432);
CheckValue<IkReal> x13435 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x13435.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x13435.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x13438 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x13438.valid){
continue;
}
IkReal x13436=((-1.0)*(x13438.value));
IkReal x13437=x13432;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst37;
cj5=gconst38;
j5=x13436;
IkReal gconst36=x13436;
IkReal gconst37=((-1.0)*r01*x13437);
IkReal gconst38=(r00*x13437);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13441 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x13441.valid){
continue;
}
IkReal x13439=((-1.0)*(x13441.value));
IkReal x13440=x13432;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst37;
cj5=gconst38;
j5=x13439;
IkReal gconst36=x13439;
IkReal gconst37=((-1.0)*r01*x13440);
IkReal gconst38=(r00*x13440);
CheckValue<IkReal> x13449=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r02*r02)))),-1);
if(!x13449.valid){
continue;
}
IkReal x13442=x13449.value;
IkReal x13443=(sj3*x13442);
IkReal x13444=(r11*x13443);
IkReal x13445=(r21*x13443);
IkReal x13446=(r20*x13443);
IkReal x13447=(r10*x13443);
IkReal x13448=(r00*r01*x13443);
j4eval[0]=IKsign((((r10*x13446*(r00*r00)))+((r12*r22*sj3))+((r00*r01*r20*x13444))+((r00*r01*r10*x13445))+((r21*x13444*(r01*r01)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13450=gconst38*gconst38;
IkReal x13451=gconst37*gconst37;
IkReal x13452=((1.0)*cj3);
IkReal x13453=(r11*r20);
IkReal x13454=(r10*sj3);
IkReal x13455=(gconst37*gconst38);
IkReal x13456=(r11*sj3);
IkReal x13457=(r21*x13451);
IkReal x13458=(cj3*x13455);
CheckValue<IkReal> x13459 = IKatan2WithCheck(IkReal((((gconst38*r22*x13456))+((gconst37*r22*x13454)))),IkReal((((r21*x13455*x13456))+(((-1.0)*r20*x13454*x13455))+(((-1.0)*sj3*x13450*x13453))+((x13454*x13457)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13459.valid){
continue;
}
CheckValue<IkReal> x13460=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22*x13452))+(((-1.0)*r10*r20*x13450*x13452))+((x13453*x13458))+((r10*r21*x13458))+(((-1.0)*r11*x13452*x13457)))),-1);
if(!x13460.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13459.value)+(((1.5707963267949)*(x13460.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13461=IKsin(j4);
IkReal x13462=IKcos(j4);
IkReal x13463=(cj2*sj1);
IkReal x13464=(cj1*sj2);
IkReal x13465=(gconst38*r21);
IkReal x13466=(cj3*r20);
IkReal x13467=(gconst38*r10);
IkReal x13468=(cj3*gconst37);
IkReal x13469=(sj1*sj2);
IkReal x13470=(gconst38*r00);
IkReal x13471=(cj1*cj2);
IkReal x13472=(gconst37*sj3);
IkReal x13473=(gconst38*r20);
IkReal x13474=(gconst38*r01);
IkReal x13475=(gconst38*r11);
IkReal x13476=((1.0)*x13462);
IkReal x13477=((1.0)*x13461);
IkReal x13478=(cj3*x13461);
IkReal x13479=(sj3*x13462);
IkReal x13480=(gconst37*x13461);
IkReal x13481=(x13463+x13464);
evalcond[0]=((((-1.0)*x13473*x13477))+(((-1.0)*r22*x13476))+((r21*x13480)));
evalcond[1]=((((-1.0)*r02*x13476))+((r01*x13480))+(((-1.0)*x13470*x13477)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x13476))+(((-1.0)*x13467*x13477))+((r11*x13480)));
evalcond[3]=(((sj3*x13475))+(((-1.0)*cj3*x13467*x13476))+((r10*x13472))+((r12*x13478))+((r11*x13462*x13468)));
evalcond[4]=(((r10*x13468))+(((-1.0)*r11*x13472*x13476))+(((-1.0)*r12*sj3*x13477))+((cj3*x13475))+((x13467*x13479)));
evalcond[5]=(x13481+((sj3*x13465))+((r22*x13478))+(((-1.0)*gconst38*x13466*x13476))+((r20*x13472))+((r21*x13462*x13468)));
evalcond[6]=(((sj3*x13474))+x13471+((r00*x13472))+(((-1.0)*cj3*x13470*x13476))+(((-1.0)*x13469))+((r02*x13478))+((r01*x13462*x13468)));
evalcond[7]=(x13481+((x13470*x13479))+(((-1.0)*r02*sj3*x13477))+(((-1.0)*r01*x13472*x13476))+((cj3*x13474))+((r00*x13468)));
evalcond[8]=(x13469+(((-1.0)*r22*sj3*x13477))+(((-1.0)*r21*x13472*x13476))+(((-1.0)*x13471))+((x13473*x13479))+((gconst37*x13466))+((cj3*x13465)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13482=gconst38*gconst38;
IkReal x13483=gconst37*gconst37;
IkReal x13484=(gconst37*r10);
IkReal x13485=(cj3*r22);
IkReal x13486=((1.0)*gconst38);
IkReal x13487=(r21*sj3);
IkReal x13488=(gconst38*r11);
IkReal x13489=(cj3*r20);
IkReal x13490=(cj3*r21);
IkReal x13491=(r20*sj3);
CheckValue<IkReal> x13492 = IKatan2WithCheck(IkReal((((x13485*x13488))+((x13484*x13485)))),IkReal((((gconst37*x13488*x13490))+(((-1.0)*r11*x13482*x13489))+(((-1.0)*x13484*x13486*x13489))+((r10*x13483*x13490)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13492.valid){
continue;
}
CheckValue<IkReal> x13493=IKPowWithIntegerCheck(IKsign(((((-1.0)*x13484*x13486*x13487))+(((-1.0)*gconst37*r11*x13486*x13491))+((r10*x13482*x13491))+((r12*r22*sj3))+((r11*x13483*x13487)))),-1);
if(!x13493.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13492.value)+(((1.5707963267949)*(x13493.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13494=IKsin(j4);
IkReal x13495=IKcos(j4);
IkReal x13496=(cj2*sj1);
IkReal x13497=(cj1*sj2);
IkReal x13498=(gconst38*r21);
IkReal x13499=(cj3*r20);
IkReal x13500=(gconst38*r10);
IkReal x13501=(cj3*gconst37);
IkReal x13502=(sj1*sj2);
IkReal x13503=(gconst38*r00);
IkReal x13504=(cj1*cj2);
IkReal x13505=(gconst37*sj3);
IkReal x13506=(gconst38*r20);
IkReal x13507=(gconst38*r01);
IkReal x13508=(gconst38*r11);
IkReal x13509=((1.0)*x13495);
IkReal x13510=((1.0)*x13494);
IkReal x13511=(cj3*x13494);
IkReal x13512=(sj3*x13495);
IkReal x13513=(gconst37*x13494);
IkReal x13514=(x13496+x13497);
evalcond[0]=(((r21*x13513))+(((-1.0)*x13506*x13510))+(((-1.0)*r22*x13509)));
evalcond[1]=((((-1.0)*x13503*x13510))+(((-1.0)*r02*x13509))+((r01*x13513)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x13509))+(((-1.0)*x13500*x13510))+((r11*x13513)));
evalcond[3]=(((r10*x13505))+((r11*x13495*x13501))+(((-1.0)*cj3*x13500*x13509))+((r12*x13511))+((sj3*x13508)));
evalcond[4]=(((r10*x13501))+(((-1.0)*r12*sj3*x13510))+((x13500*x13512))+(((-1.0)*r11*x13505*x13509))+((cj3*x13508)));
evalcond[5]=(((r20*x13505))+x13514+((r22*x13511))+((sj3*x13498))+((r21*x13495*x13501))+(((-1.0)*gconst38*x13499*x13509)));
evalcond[6]=(x13504+((r02*x13511))+(((-1.0)*x13502))+((r01*x13495*x13501))+(((-1.0)*cj3*x13503*x13509))+((sj3*x13507))+((r00*x13505)));
evalcond[7]=(x13514+(((-1.0)*r01*x13505*x13509))+(((-1.0)*r02*sj3*x13510))+((x13503*x13512))+((cj3*x13507))+((r00*x13501)));
evalcond[8]=((((-1.0)*r21*x13505*x13509))+x13502+(((-1.0)*r22*sj3*x13510))+((cj3*x13498))+(((-1.0)*x13504))+((x13506*x13512))+((gconst37*x13499)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13515=((1.0)*gconst38);
CheckValue<IkReal> x13516 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x13515))+((gconst37*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13516.valid){
continue;
}
CheckValue<IkReal> x13517=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst37*r20))+(((-1.0)*r21*x13515)))),-1);
if(!x13517.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13516.value)+(((1.5707963267949)*(x13517.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13518=IKsin(j4);
IkReal x13519=IKcos(j4);
IkReal x13520=(cj2*sj1);
IkReal x13521=(cj1*sj2);
IkReal x13522=(gconst38*r21);
IkReal x13523=(cj3*r20);
IkReal x13524=(gconst38*r10);
IkReal x13525=(cj3*gconst37);
IkReal x13526=(sj1*sj2);
IkReal x13527=(gconst38*r00);
IkReal x13528=(cj1*cj2);
IkReal x13529=(gconst37*sj3);
IkReal x13530=(gconst38*r20);
IkReal x13531=(gconst38*r01);
IkReal x13532=(gconst38*r11);
IkReal x13533=((1.0)*x13519);
IkReal x13534=((1.0)*x13518);
IkReal x13535=(cj3*x13518);
IkReal x13536=(sj3*x13519);
IkReal x13537=(gconst37*x13518);
IkReal x13538=(x13520+x13521);
evalcond[0]=((((-1.0)*r22*x13533))+(((-1.0)*x13530*x13534))+((r21*x13537)));
evalcond[1]=((((-1.0)*x13527*x13534))+(((-1.0)*r02*x13533))+((r01*x13537)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x13533))+(((-1.0)*x13524*x13534))+((r11*x13537)));
evalcond[3]=(((sj3*x13532))+((r12*x13535))+((r11*x13519*x13525))+((r10*x13529))+(((-1.0)*cj3*x13524*x13533)));
evalcond[4]=((((-1.0)*r11*x13529*x13533))+(((-1.0)*r12*sj3*x13534))+((x13524*x13536))+((r10*x13525))+((cj3*x13532)));
evalcond[5]=(x13538+((r20*x13529))+((r21*x13519*x13525))+(((-1.0)*gconst38*x13523*x13533))+((r22*x13535))+((sj3*x13522)));
evalcond[6]=(x13528+((sj3*x13531))+((r01*x13519*x13525))+((r02*x13535))+(((-1.0)*cj3*x13527*x13533))+(((-1.0)*x13526))+((r00*x13529)));
evalcond[7]=(x13538+((x13527*x13536))+(((-1.0)*r02*sj3*x13534))+((r00*x13525))+((cj3*x13531))+(((-1.0)*r01*x13529*x13533)));
evalcond[8]=(x13526+((gconst37*x13523))+((x13530*x13536))+(((-1.0)*x13528))+((cj3*x13522))+(((-1.0)*r21*x13529*x13533))+(((-1.0)*r22*sj3*x13534)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13540 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x13540)==0){
continue;
}
IkReal x13539=pow(x13540,-0.5);
CheckValue<IkReal> x13541 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x13541.valid){
continue;
}
IkReal gconst39=((3.14159265358979)+(((-1.0)*(x13541.value))));
IkReal gconst40=((1.0)*r01*x13539);
IkReal gconst41=((-1.0)*r00*x13539);
CheckValue<IkReal> x13542 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x13542.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x13542.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x13545 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x13545.valid){
continue;
}
IkReal x13543=((1.0)*(x13545.value));
IkReal x13544=x13539;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst40;
cj5=gconst41;
j5=((3.14159265)+(((-1.0)*x13543)));
IkReal gconst39=((3.14159265358979)+(((-1.0)*x13543)));
IkReal gconst40=((1.0)*r01*x13544);
IkReal gconst41=((-1.0)*r00*x13544);
j4eval[0]=0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13548 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x13548.valid){
continue;
}
IkReal x13546=((1.0)*(x13548.value));
IkReal x13547=x13539;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst40;
cj5=gconst41;
j5=((3.14159265)+(((-1.0)*x13546)));
IkReal gconst39=((3.14159265358979)+(((-1.0)*x13546)));
IkReal gconst40=((1.0)*r01*x13547);
IkReal gconst41=((-1.0)*r00*x13547);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13549=gconst41*gconst41;
IkReal x13550=gconst40*gconst40;
IkReal x13551=(gconst40*r10);
IkReal x13552=(r22*sj3);
IkReal x13553=(r11*sj3);
IkReal x13554=((1.0)*cj3);
IkReal x13555=(gconst41*r21);
IkReal x13556=(gconst41*r20);
IkReal x13557=(r21*x13550);
IkReal x13558=((1.0)*r20*x13549);
CheckValue<IkReal> x13559 = IKatan2WithCheck(IkReal((((x13551*x13552))+((gconst41*r11*x13552)))),IkReal(((((-1.0)*x13553*x13558))+((r10*sj3*x13557))+(((-1.0)*sj3*x13551*x13556))+((gconst40*x13553*x13555)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13559.valid){
continue;
}
CheckValue<IkReal> x13560=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*r20*x13549*x13554))+(((-1.0)*r12*r22*x13554))+(((-1.0)*r11*x13554*x13557))+((cj3*x13551*x13555))+((cj3*gconst40*r11*x13556)))),-1);
if(!x13560.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13559.value)+(((1.5707963267949)*(x13560.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13561=IKsin(j4);
IkReal x13562=IKcos(j4);
IkReal x13563=(cj2*sj1);
IkReal x13564=(cj1*sj2);
IkReal x13565=(gconst40*sj3);
IkReal x13566=(gconst41*sj3);
IkReal x13567=(gconst41*r20);
IkReal x13568=(cj3*gconst41);
IkReal x13569=(sj1*sj2);
IkReal x13570=(cj1*cj2);
IkReal x13571=(cj3*gconst40);
IkReal x13572=((1.0)*x13562);
IkReal x13573=((1.0)*x13561);
IkReal x13574=(cj3*x13561);
IkReal x13575=(gconst40*x13561);
IkReal x13576=(x13564+x13563);
IkReal x13577=(x13562*x13571);
evalcond[0]=((((-1.0)*r22*x13572))+(((-1.0)*x13567*x13573))+((r21*x13575)));
evalcond[1]=((((-1.0)*gconst41*r00*x13573))+(((-1.0)*r02*x13572))+((r01*x13575)));
evalcond[2]=((-1.0)+((r11*x13575))+(((-1.0)*r12*x13572))+(((-1.0)*gconst41*r10*x13573)));
evalcond[3]=(((r10*x13565))+((r11*x13566))+((r12*x13574))+((r11*x13577))+(((-1.0)*r10*x13568*x13572)));
evalcond[4]=(((r10*x13571))+((r11*x13568))+(((-1.0)*r12*sj3*x13573))+(((-1.0)*r11*x13565*x13572))+((r10*x13562*x13566)));
evalcond[5]=(x13576+((r20*x13565))+((r21*x13577))+((r21*x13566))+(((-1.0)*cj3*x13567*x13572))+((r22*x13574)));
evalcond[6]=(x13570+((r00*x13565))+((r01*x13566))+(((-1.0)*r00*x13568*x13572))+((r02*x13574))+(((-1.0)*x13569))+((r01*x13577)));
evalcond[7]=(((r00*x13571))+x13576+((r00*x13562*x13566))+((r01*x13568))+(((-1.0)*r02*sj3*x13573))+(((-1.0)*r01*x13565*x13572)));
evalcond[8]=(x13569+((r20*x13562*x13566))+(((-1.0)*r22*sj3*x13573))+(((-1.0)*r21*x13565*x13572))+((r20*x13571))+(((-1.0)*x13570))+((r21*x13568)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13578=((1.0)*gconst41);
CheckValue<IkReal> x13579=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x13578))+(((-1.0)*gconst40*r20)))),-1);
if(!x13579.valid){
continue;
}
CheckValue<IkReal> x13580 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst40*r01))+(((-1.0)*r00*x13578)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13580.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13579.value)))+(x13580.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13581=IKsin(j4);
IkReal x13582=IKcos(j4);
IkReal x13583=(cj2*sj1);
IkReal x13584=(cj1*sj2);
IkReal x13585=(gconst40*sj3);
IkReal x13586=(gconst41*sj3);
IkReal x13587=(gconst41*r20);
IkReal x13588=(cj3*gconst41);
IkReal x13589=(sj1*sj2);
IkReal x13590=(cj1*cj2);
IkReal x13591=(cj3*gconst40);
IkReal x13592=((1.0)*x13582);
IkReal x13593=((1.0)*x13581);
IkReal x13594=(cj3*x13581);
IkReal x13595=(gconst40*x13581);
IkReal x13596=(x13583+x13584);
IkReal x13597=(x13582*x13591);
evalcond[0]=(((r21*x13595))+(((-1.0)*x13587*x13593))+(((-1.0)*r22*x13592)));
evalcond[1]=(((r01*x13595))+(((-1.0)*gconst41*r00*x13593))+(((-1.0)*r02*x13592)));
evalcond[2]=((-1.0)+((r11*x13595))+(((-1.0)*r12*x13592))+(((-1.0)*gconst41*r10*x13593)));
evalcond[3]=(((r11*x13597))+((r10*x13585))+(((-1.0)*r10*x13588*x13592))+((r12*x13594))+((r11*x13586)));
evalcond[4]=(((r10*x13591))+((r10*x13582*x13586))+(((-1.0)*r12*sj3*x13593))+(((-1.0)*r11*x13585*x13592))+((r11*x13588)));
evalcond[5]=(x13596+(((-1.0)*cj3*x13587*x13592))+((r22*x13594))+((r21*x13597))+((r21*x13586))+((r20*x13585)));
evalcond[6]=(x13590+((r01*x13597))+((r00*x13585))+(((-1.0)*r00*x13588*x13592))+((r01*x13586))+(((-1.0)*x13589))+((r02*x13594)));
evalcond[7]=(x13596+(((-1.0)*r01*x13585*x13592))+((r00*x13591))+((r01*x13588))+((r00*x13582*x13586))+(((-1.0)*r02*sj3*x13593)));
evalcond[8]=((((-1.0)*r21*x13585*x13592))+x13589+((r20*x13582*x13586))+(((-1.0)*x13590))+((r21*x13588))+(((-1.0)*r22*sj3*x13593))+((r20*x13591)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13598 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst40*r21))+(((-1.0)*gconst41*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13598.valid){
continue;
}
CheckValue<IkReal> x13599=IKPowWithIntegerCheck(IKsign((((gconst41*r01))+((gconst40*r00)))),-1);
if(!x13599.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13598.value)+(((1.5707963267949)*(x13599.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13600=IKsin(j4);
IkReal x13601=IKcos(j4);
IkReal x13602=(cj2*sj1);
IkReal x13603=(cj1*sj2);
IkReal x13604=(gconst40*sj3);
IkReal x13605=(gconst41*sj3);
IkReal x13606=(gconst41*r20);
IkReal x13607=(cj3*gconst41);
IkReal x13608=(sj1*sj2);
IkReal x13609=(cj1*cj2);
IkReal x13610=(cj3*gconst40);
IkReal x13611=((1.0)*x13601);
IkReal x13612=((1.0)*x13600);
IkReal x13613=(cj3*x13600);
IkReal x13614=(gconst40*x13600);
IkReal x13615=(x13603+x13602);
IkReal x13616=(x13601*x13610);
evalcond[0]=(((r21*x13614))+(((-1.0)*x13606*x13612))+(((-1.0)*r22*x13611)));
evalcond[1]=((((-1.0)*r02*x13611))+((r01*x13614))+(((-1.0)*gconst41*r00*x13612)));
evalcond[2]=((-1.0)+((r11*x13614))+(((-1.0)*gconst41*r10*x13612))+(((-1.0)*r12*x13611)));
evalcond[3]=(((r11*x13605))+((r10*x13604))+(((-1.0)*r10*x13607*x13611))+((r11*x13616))+((r12*x13613)));
evalcond[4]=(((r11*x13607))+(((-1.0)*r12*sj3*x13612))+((r10*x13610))+(((-1.0)*r11*x13604*x13611))+((r10*x13601*x13605)));
evalcond[5]=(((r21*x13616))+x13615+((r21*x13605))+((r20*x13604))+(((-1.0)*cj3*x13606*x13611))+((r22*x13613)));
evalcond[6]=((((-1.0)*x13608))+x13609+((r01*x13616))+(((-1.0)*r00*x13607*x13611))+((r02*x13613))+((r00*x13604))+((r01*x13605)));
evalcond[7]=(x13615+((r00*x13601*x13605))+((r00*x13610))+(((-1.0)*r01*x13604*x13611))+((r01*x13607))+(((-1.0)*r02*sj3*x13612)));
evalcond[8]=((((-1.0)*x13609))+x13608+(((-1.0)*r21*x13604*x13611))+((r20*x13610))+((r21*x13607))+((r20*x13601*x13605))+(((-1.0)*r22*sj3*x13612)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13617=((-1.0)*px);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x13617);
rxp1_1=(px*r21);
rxp1_2=(r11*x13617);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x13618=(r11*sj5);
IkReal x13619=((1.0)*cj5*r10);
j4eval[0]=((((-1.0)*x13619))+x13618);
j4eval[1]=(((cj3*x13618))+(((-1.0)*cj3*x13619)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13620=((-1.0)*px);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x13620);
rxp1_1=(px*r21);
rxp1_2=(r11*x13620);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x13621=(cj5*r10);
IkReal x13622=(r11*sj5);
j4eval[0]=(x13622+(((-1.0)*x13621)));
j4eval[1]=((((-1.0)*sj3*x13622))+((sj3*x13621)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x13623=((-1.0)*px);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x13623);
rxp1_1=(px*r21);
rxp1_2=(r11*x13623);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=cj3;
j4eval[1]=r02;
j4eval[2]=(((cj3*r11*sj5))+(((-1.0)*cj3*cj5*r10)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13624=((1.0)*r10);
CheckValue<IkReal> x13625=IKPowWithIntegerCheck(cj3,-1);
if(!x13625.valid){
continue;
}
CheckValue<IkReal> x13626=IKPowWithIntegerCheck(r02,-1);
if(!x13626.valid){
continue;
}
CheckValue<IkReal> x13627=IKPowWithIntegerCheck((((cj3*r11*sj5))+(((-1.0)*cj3*cj5*x13624))),-1);
if(!x13627.valid){
continue;
}
if( IKabs(((x13625.value)*(x13626.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13627.value)*(((((-1.0)*cj5*r11*sj3))+(((-1.0)*sj3*sj5*x13624)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13625.value)*(x13626.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x13627.value)*(((((-1.0)*cj5*r11*sj3))+(((-1.0)*sj3*sj5*x13624))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13625.value)*(x13626.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x13627.value)*(((((-1.0)*cj5*r11*sj3))+(((-1.0)*sj3*sj5*x13624))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13628=IKsin(j4);
IkReal x13629=IKcos(j4);
IkReal x13630=(cj2*sj1);
IkReal x13631=(cj1*sj2);
IkReal x13632=(cj5*r10);
IkReal x13633=(sj1*sj2);
IkReal x13634=(cj5*sj3);
IkReal x13635=(r11*sj5);
IkReal x13636=(cj3*sj5);
IkReal x13637=(r21*sj5);
IkReal x13638=(cj1*cj2);
IkReal x13639=(cj3*cj5);
IkReal x13640=(sj3*sj5);
IkReal x13641=((1.0)*x13628);
IkReal x13642=(r20*x13629);
IkReal x13643=(cj3*x13629);
IkReal x13644=(sj3*x13629);
IkReal x13645=(x13630+x13631);
evalcond[0]=((-1.0)*r02*x13629);
evalcond[1]=(((x13628*x13637))+(((-1.0)*cj5*r20*x13641)));
evalcond[2]=((((-1.0)*x13633))+x13638+((cj3*r02*x13628)));
evalcond[3]=(x13645+(((-1.0)*r02*sj3*x13641)));
evalcond[4]=((-1.0)+((x13628*x13635))+(((-1.0)*x13632*x13641)));
evalcond[5]=(((r11*x13634))+((x13635*x13643))+(((-1.0)*x13632*x13643))+((r10*x13640)));
evalcond[6]=(((r11*x13639))+((r10*x13636))+(((-1.0)*x13635*x13644))+((x13632*x13644)));
evalcond[7]=(x13645+((r21*x13629*x13636))+((r20*x13640))+((r21*x13634))+(((-1.0)*x13639*x13642)));
evalcond[8]=((((-1.0)*x13638))+x13633+((r21*x13639))+((x13634*x13642))+(((-1.0)*x13637*x13644))+((r20*x13636)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13646=(cj5*r10);
IkReal x13647=((1.0)*r11);
CheckValue<IkReal> x13648=IKPowWithIntegerCheck((((r11*sj5))+(((-1.0)*x13646))),-1);
if(!x13648.valid){
continue;
}
CheckValue<IkReal> x13649=IKPowWithIntegerCheck((((sj3*x13646))+(((-1.0)*sj3*sj5*x13647))),-1);
if(!x13649.valid){
continue;
}
if( IKabs(x13648.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13649.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x13647)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x13648.value)+IKsqr(((x13649.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x13647))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x13648.value, ((x13649.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x13647))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13650=IKsin(j4);
IkReal x13651=IKcos(j4);
IkReal x13652=(cj2*sj1);
IkReal x13653=(cj1*sj2);
IkReal x13654=(cj5*r10);
IkReal x13655=(sj1*sj2);
IkReal x13656=(cj5*sj3);
IkReal x13657=(r11*sj5);
IkReal x13658=(cj3*sj5);
IkReal x13659=(r21*sj5);
IkReal x13660=(cj1*cj2);
IkReal x13661=(cj3*cj5);
IkReal x13662=(sj3*sj5);
IkReal x13663=((1.0)*x13650);
IkReal x13664=(r20*x13651);
IkReal x13665=(cj3*x13651);
IkReal x13666=(sj3*x13651);
IkReal x13667=(x13652+x13653);
evalcond[0]=((-1.0)*r02*x13651);
evalcond[1]=(((x13650*x13659))+(((-1.0)*cj5*r20*x13663)));
evalcond[2]=(x13660+(((-1.0)*x13655))+((cj3*r02*x13650)));
evalcond[3]=(x13667+(((-1.0)*r02*sj3*x13663)));
evalcond[4]=((-1.0)+(((-1.0)*x13654*x13663))+((x13650*x13657)));
evalcond[5]=((((-1.0)*x13654*x13665))+((x13657*x13665))+((r10*x13662))+((r11*x13656)));
evalcond[6]=(((x13654*x13666))+(((-1.0)*x13657*x13666))+((r10*x13658))+((r11*x13661)));
evalcond[7]=(x13667+(((-1.0)*x13661*x13664))+((r21*x13656))+((r20*x13662))+((r21*x13651*x13658)));
evalcond[8]=(((r20*x13658))+x13655+((x13656*x13664))+(((-1.0)*x13660))+((r21*x13661))+(((-1.0)*x13659*x13666)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13668=((1.0)*r10);
IkReal x13669=(r11*sj5);
CheckValue<IkReal> x13670=IKPowWithIntegerCheck((x13669+(((-1.0)*cj5*x13668))),-1);
if(!x13670.valid){
continue;
}
CheckValue<IkReal> x13671=IKPowWithIntegerCheck((((cj3*x13669))+(((-1.0)*cj3*cj5*x13668))),-1);
if(!x13671.valid){
continue;
}
if( IKabs(x13670.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13671.value)*(((((-1.0)*sj3*sj5*x13668))+(((-1.0)*cj5*r11*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x13670.value)+IKsqr(((x13671.value)*(((((-1.0)*sj3*sj5*x13668))+(((-1.0)*cj5*r11*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x13670.value, ((x13671.value)*(((((-1.0)*sj3*sj5*x13668))+(((-1.0)*cj5*r11*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13672=IKsin(j4);
IkReal x13673=IKcos(j4);
IkReal x13674=(cj2*sj1);
IkReal x13675=(cj1*sj2);
IkReal x13676=(cj5*r10);
IkReal x13677=(sj1*sj2);
IkReal x13678=(cj5*sj3);
IkReal x13679=(r11*sj5);
IkReal x13680=(cj3*sj5);
IkReal x13681=(r21*sj5);
IkReal x13682=(cj1*cj2);
IkReal x13683=(cj3*cj5);
IkReal x13684=(sj3*sj5);
IkReal x13685=((1.0)*x13672);
IkReal x13686=(r20*x13673);
IkReal x13687=(cj3*x13673);
IkReal x13688=(sj3*x13673);
IkReal x13689=(x13674+x13675);
evalcond[0]=((-1.0)*r02*x13673);
evalcond[1]=((((-1.0)*cj5*r20*x13685))+((x13672*x13681)));
evalcond[2]=(x13682+(((-1.0)*x13677))+((cj3*r02*x13672)));
evalcond[3]=(x13689+(((-1.0)*r02*sj3*x13685)));
evalcond[4]=((-1.0)+(((-1.0)*x13676*x13685))+((x13672*x13679)));
evalcond[5]=(((x13679*x13687))+((r11*x13678))+((r10*x13684))+(((-1.0)*x13676*x13687)));
evalcond[6]=(((r11*x13683))+(((-1.0)*x13679*x13688))+((x13676*x13688))+((r10*x13680)));
evalcond[7]=(x13689+(((-1.0)*x13683*x13686))+((r21*x13678))+((r21*x13673*x13680))+((r20*x13684)));
evalcond[8]=(x13677+(((-1.0)*x13682))+(((-1.0)*x13681*x13688))+((r20*x13680))+((r21*x13683))+((x13678*x13686)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13690=cj5*cj5;
IkReal x13691=((1.0)*cj3);
IkReal x13692=(r10*r21);
IkReal x13693=(cj5*sj5);
IkReal x13694=(r11*r21);
IkReal x13695=(r11*r20);
IkReal x13696=(r22*sj3);
IkReal x13697=(r10*r20);
IkReal x13698=((1.0)*sj3*x13690);
CheckValue<IkReal> x13699 = IKatan2WithCheck(IkReal((((cj5*r11*x13696))+((r10*sj5*x13696)))),IkReal((((sj3*x13692))+((sj3*x13693*x13694))+(((-1.0)*x13692*x13698))+(((-1.0)*x13695*x13698))+(((-1.0)*sj3*x13693*x13697)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13699.valid){
continue;
}
CheckValue<IkReal> x13700=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22*x13691))+((cj3*x13690*x13694))+(((-1.0)*x13691*x13694))+((cj3*x13692*x13693))+((cj3*x13693*x13695))+(((-1.0)*x13690*x13691*x13697)))),-1);
if(!x13700.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13699.value)+(((1.5707963267949)*(x13700.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13701=IKsin(j4);
IkReal x13702=IKcos(j4);
IkReal x13703=(cj2*sj1);
IkReal x13704=(cj1*sj2);
IkReal x13705=(cj5*sj3);
IkReal x13706=(cj5*r10);
IkReal x13707=(r00*sj5);
IkReal x13708=(sj1*sj2);
IkReal x13709=(r11*sj5);
IkReal x13710=(cj3*cj5);
IkReal x13711=(cj3*sj5);
IkReal x13712=(r21*sj5);
IkReal x13713=(cj1*cj2);
IkReal x13714=(sj3*sj5);
IkReal x13715=(r01*sj5);
IkReal x13716=((1.0)*x13702);
IkReal x13717=((1.0)*x13701);
IkReal x13718=(cj3*x13701);
IkReal x13719=(cj3*x13702);
IkReal x13720=(x13703+x13704);
evalcond[0]=((((-1.0)*r22*x13716))+(((-1.0)*cj5*r20*x13717))+((x13701*x13712)));
evalcond[1]=((((-1.0)*cj5*r00*x13717))+(((-1.0)*r02*x13716))+((x13701*x13715)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x13716))+(((-1.0)*x13706*x13717))+((x13701*x13709)));
evalcond[3]=(((r12*x13718))+(((-1.0)*cj3*x13706*x13716))+((r10*x13714))+((x13709*x13719))+((r11*x13705)));
evalcond[4]=(((r10*x13702*x13705))+(((-1.0)*sj3*x13709*x13716))+((r10*x13711))+((r11*x13710))+(((-1.0)*r12*sj3*x13717)));
evalcond[5]=(((r21*x13705))+x13720+((r20*x13714))+(((-1.0)*r20*x13710*x13716))+((r21*x13702*x13711))+((r22*x13718)));
evalcond[6]=(((sj3*x13707))+x13713+(((-1.0)*x13708))+((r01*x13702*x13711))+((r01*x13705))+((r02*x13718))+(((-1.0)*r00*x13710*x13716)));
evalcond[7]=((((-1.0)*r01*x13714*x13716))+x13720+((cj3*x13707))+((r00*x13702*x13705))+((r01*x13710))+(((-1.0)*r02*sj3*x13717)));
evalcond[8]=((((-1.0)*sj3*x13712*x13716))+((r21*x13710))+(((-1.0)*x13713))+x13708+((r20*x13711))+(((-1.0)*r22*sj3*x13717))+((r20*x13702*x13705)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13721=((1.0)*cj5);
CheckValue<IkReal> x13722 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x13721)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13722.valid){
continue;
}
CheckValue<IkReal> x13723=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x13721))+(((-1.0)*r20*sj5)))),-1);
if(!x13723.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13722.value)+(((1.5707963267949)*(x13723.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13724=IKsin(j4);
IkReal x13725=IKcos(j4);
IkReal x13726=(cj2*sj1);
IkReal x13727=(cj1*sj2);
IkReal x13728=(cj5*sj3);
IkReal x13729=(cj5*r10);
IkReal x13730=(r00*sj5);
IkReal x13731=(sj1*sj2);
IkReal x13732=(r11*sj5);
IkReal x13733=(cj3*cj5);
IkReal x13734=(cj3*sj5);
IkReal x13735=(r21*sj5);
IkReal x13736=(cj1*cj2);
IkReal x13737=(sj3*sj5);
IkReal x13738=(r01*sj5);
IkReal x13739=((1.0)*x13725);
IkReal x13740=((1.0)*x13724);
IkReal x13741=(cj3*x13724);
IkReal x13742=(cj3*x13725);
IkReal x13743=(x13726+x13727);
evalcond[0]=((((-1.0)*r22*x13739))+((x13724*x13735))+(((-1.0)*cj5*r20*x13740)));
evalcond[1]=((((-1.0)*r02*x13739))+((x13724*x13738))+(((-1.0)*cj5*r00*x13740)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x13739))+((x13724*x13732))+(((-1.0)*x13729*x13740)));
evalcond[3]=(((r10*x13737))+((r11*x13728))+((r12*x13741))+((x13732*x13742))+(((-1.0)*cj3*x13729*x13739)));
evalcond[4]=((((-1.0)*sj3*x13732*x13739))+((r10*x13734))+((r10*x13725*x13728))+((r11*x13733))+(((-1.0)*r12*sj3*x13740)));
evalcond[5]=(x13743+((r21*x13728))+(((-1.0)*r20*x13733*x13739))+((r20*x13737))+((r21*x13725*x13734))+((r22*x13741)));
evalcond[6]=(x13736+((r01*x13728))+((sj3*x13730))+(((-1.0)*r00*x13733*x13739))+((r01*x13725*x13734))+((r02*x13741))+(((-1.0)*x13731)));
evalcond[7]=((((-1.0)*r02*sj3*x13740))+x13743+(((-1.0)*r01*x13737*x13739))+((r00*x13725*x13728))+((cj3*x13730))+((r01*x13733)));
evalcond[8]=(x13731+((r20*x13725*x13728))+((r21*x13733))+((r20*x13734))+(((-1.0)*r22*sj3*x13740))+(((-1.0)*sj3*x13735*x13739))+(((-1.0)*x13736)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13744 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13744.valid){
continue;
}
CheckValue<IkReal> x13745=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x13745.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13744.value)+(((1.5707963267949)*(x13745.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13746=IKsin(j4);
IkReal x13747=IKcos(j4);
IkReal x13748=(cj2*sj1);
IkReal x13749=(cj1*sj2);
IkReal x13750=(cj5*sj3);
IkReal x13751=(cj5*r10);
IkReal x13752=(r00*sj5);
IkReal x13753=(sj1*sj2);
IkReal x13754=(r11*sj5);
IkReal x13755=(cj3*cj5);
IkReal x13756=(cj3*sj5);
IkReal x13757=(r21*sj5);
IkReal x13758=(cj1*cj2);
IkReal x13759=(sj3*sj5);
IkReal x13760=(r01*sj5);
IkReal x13761=((1.0)*x13747);
IkReal x13762=((1.0)*x13746);
IkReal x13763=(cj3*x13746);
IkReal x13764=(cj3*x13747);
IkReal x13765=(x13748+x13749);
evalcond[0]=((((-1.0)*r22*x13761))+(((-1.0)*cj5*r20*x13762))+((x13746*x13757)));
evalcond[1]=(((x13746*x13760))+(((-1.0)*r02*x13761))+(((-1.0)*cj5*r00*x13762)));
evalcond[2]=((-1.0)+(((-1.0)*x13751*x13762))+(((-1.0)*r12*x13761))+((x13746*x13754)));
evalcond[3]=(((r11*x13750))+(((-1.0)*cj3*x13751*x13761))+((x13754*x13764))+((r10*x13759))+((r12*x13763)));
evalcond[4]=(((r11*x13755))+((r10*x13747*x13750))+((r10*x13756))+(((-1.0)*r12*sj3*x13762))+(((-1.0)*sj3*x13754*x13761)));
evalcond[5]=(((r21*x13750))+x13765+(((-1.0)*r20*x13755*x13761))+((r20*x13759))+((r22*x13763))+((r21*x13747*x13756)));
evalcond[6]=(x13758+(((-1.0)*x13753))+((sj3*x13752))+((r01*x13747*x13756))+(((-1.0)*r00*x13755*x13761))+((r01*x13750))+((r02*x13763)));
evalcond[7]=(x13765+(((-1.0)*r01*x13759*x13761))+((r00*x13747*x13750))+(((-1.0)*r02*sj3*x13762))+((r01*x13755))+((cj3*x13752)));
evalcond[8]=(((r21*x13755))+((r20*x13747*x13750))+x13753+(((-1.0)*x13758))+(((-1.0)*r22*sj3*x13762))+(((-1.0)*sj3*x13757*x13761))+((r20*x13756)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13766=((-1.0)*r00);
IkReal x13768 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x13768)==0){
continue;
}
IkReal x13767=pow(x13768,-0.5);
CheckValue<IkReal> x13769 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x13766),IKFAST_ATAN2_MAGTHRESH);
if(!x13769.valid){
continue;
}
IkReal gconst12=((-1.0)*(x13769.value));
IkReal gconst13=(r01*x13767);
IkReal gconst14=(x13766*x13767);
CheckValue<IkReal> x13770 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13770.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x13770.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x13771=((-1.0)*r00);
IkReal x13772=x13767;
CheckValue<IkReal> x13774 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x13771),IKFAST_ATAN2_MAGTHRESH);
if(!x13774.valid){
continue;
}
IkReal x13773=((-1.0)*(x13774.value));
sj5=gconst13;
cj5=gconst14;
j5=x13773;
IkReal gconst12=x13773;
IkReal gconst13=(r01*x13772);
IkReal gconst14=(x13771*x13772);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13775=((1.0)*sj0);
IkReal x13776=((1.0)*cj0);
CheckValue<IkReal> x13777 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x13776))+(((-1.0)*r12*x13775)))),IkReal((((cj0*gconst14*r00))+((gconst14*r10*sj0))+(((-1.0)*gconst13*r11*x13775))+(((-1.0)*gconst13*r01*x13776)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13777.valid){
continue;
}
CheckValue<IkReal> x13778=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst13*r20))+(((-1.0)*gconst14*r21)))),-1);
if(!x13778.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13777.value)+(((1.5707963267949)*(x13778.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13779=IKsin(j4);
IkReal x13780=IKcos(j4);
IkReal x13781=((1.0)*r22);
IkReal x13782=((1.0)*r12);
IkReal x13783=(gconst13*sj3);
IkReal x13784=(gconst13*r01);
IkReal x13785=(sj1*sj2);
IkReal x13786=(gconst14*sj3);
IkReal x13787=(cj2*sj1);
IkReal x13788=((1.0)*sj0);
IkReal x13789=(cj3*gconst13);
IkReal x13790=(cj3*gconst14);
IkReal x13791=((1.0)*cj0);
IkReal x13792=((1.0)*gconst14);
IkReal x13793=(cj1*sj2);
IkReal x13794=(sj3*x13779);
IkReal x13795=((1.0)*cj1*cj2);
IkReal x13796=(cj3*x13780);
IkReal x13797=(cj3*x13779);
IkReal x13798=(gconst13*x13779);
IkReal x13799=((1.0)*x13780);
IkReal x13800=(x13779*x13792);
evalcond[0]=(((r21*x13798))+(((-1.0)*x13780*x13781))+(((-1.0)*r20*x13800)));
evalcond[1]=((((-1.0)*r10*x13800))+cj0+((r11*x13798))+(((-1.0)*x13780*x13782)));
evalcond[2]=(((x13779*x13784))+(((-1.0)*r02*x13799))+(((-1.0)*x13788))+(((-1.0)*r00*x13800)));
evalcond[3]=((((-1.0)*r20*x13790*x13799))+x13793+x13787+((r22*x13797))+((r21*x13786))+((r20*x13783))+((r21*x13780*x13789)));
evalcond[4]=(x13785+(((-1.0)*r21*x13783*x13799))+(((-1.0)*x13781*x13794))+(((-1.0)*x13795))+((r21*x13790))+((r20*x13789))+((r20*x13780*x13786)));
evalcond[5]=(((cj0*x13785))+((r01*x13786))+((x13784*x13796))+(((-1.0)*r00*x13790*x13799))+((r00*x13783))+(((-1.0)*cj1*cj2*x13791))+((r02*x13797)));
evalcond[6]=(((r11*x13780*x13789))+(((-1.0)*r10*x13790*x13799))+(((-1.0)*cj1*cj2*x13788))+((sj0*x13785))+((r11*x13786))+((r12*x13797))+((r10*x13783)));
evalcond[7]=(((r01*x13790))+((r00*x13789))+(((-1.0)*x13791*x13793))+((r00*x13780*x13786))+(((-1.0)*r02*x13794))+(((-1.0)*x13787*x13791))+(((-1.0)*r01*x13783*x13799)));
evalcond[8]=((((-1.0)*x13782*x13794))+(((-1.0)*r11*x13783*x13799))+(((-1.0)*x13787*x13788))+((r10*x13780*x13786))+((r11*x13790))+(((-1.0)*x13788*x13793))+((r10*x13789)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13801=((1.0)*gconst14);
CheckValue<IkReal> x13802=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst13*r10))+(((-1.0)*r11*x13801)))),-1);
if(!x13802.valid){
continue;
}
CheckValue<IkReal> x13803 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x13801))+((gconst13*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13803.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13802.value)))+(x13803.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13804=IKsin(j4);
IkReal x13805=IKcos(j4);
IkReal x13806=((1.0)*r22);
IkReal x13807=((1.0)*r12);
IkReal x13808=(gconst13*sj3);
IkReal x13809=(gconst13*r01);
IkReal x13810=(sj1*sj2);
IkReal x13811=(gconst14*sj3);
IkReal x13812=(cj2*sj1);
IkReal x13813=((1.0)*sj0);
IkReal x13814=(cj3*gconst13);
IkReal x13815=(cj3*gconst14);
IkReal x13816=((1.0)*cj0);
IkReal x13817=((1.0)*gconst14);
IkReal x13818=(cj1*sj2);
IkReal x13819=(sj3*x13804);
IkReal x13820=((1.0)*cj1*cj2);
IkReal x13821=(cj3*x13805);
IkReal x13822=(cj3*x13804);
IkReal x13823=(gconst13*x13804);
IkReal x13824=((1.0)*x13805);
IkReal x13825=(x13804*x13817);
evalcond[0]=((((-1.0)*x13805*x13806))+(((-1.0)*r20*x13825))+((r21*x13823)));
evalcond[1]=(((r11*x13823))+(((-1.0)*x13805*x13807))+cj0+(((-1.0)*r10*x13825)));
evalcond[2]=((((-1.0)*x13813))+((x13804*x13809))+(((-1.0)*r02*x13824))+(((-1.0)*r00*x13825)));
evalcond[3]=(x13818+x13812+((r21*x13811))+((r22*x13822))+(((-1.0)*r20*x13815*x13824))+((r21*x13805*x13814))+((r20*x13808)));
evalcond[4]=((((-1.0)*x13820))+x13810+((r21*x13815))+((r20*x13814))+(((-1.0)*r21*x13808*x13824))+(((-1.0)*x13806*x13819))+((r20*x13805*x13811)));
evalcond[5]=(((x13809*x13821))+((r00*x13808))+((r01*x13811))+((cj0*x13810))+(((-1.0)*cj1*cj2*x13816))+(((-1.0)*r00*x13815*x13824))+((r02*x13822)));
evalcond[6]=(((r11*x13811))+((sj0*x13810))+((r12*x13822))+(((-1.0)*cj1*cj2*x13813))+(((-1.0)*r10*x13815*x13824))+((r10*x13808))+((r11*x13805*x13814)));
evalcond[7]=(((r00*x13814))+((r01*x13815))+((r00*x13805*x13811))+(((-1.0)*r01*x13808*x13824))+(((-1.0)*x13812*x13816))+(((-1.0)*r02*x13819))+(((-1.0)*x13816*x13818)));
evalcond[8]=(((r11*x13815))+((r10*x13814))+(((-1.0)*r11*x13808*x13824))+(((-1.0)*x13807*x13819))+((r10*x13805*x13811))+(((-1.0)*x13812*x13813))+(((-1.0)*x13813*x13818)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13826=((-1.0)*r01);
IkReal x13828 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x13828)==0){
continue;
}
IkReal x13827=pow(x13828,-0.5);
CheckValue<IkReal> x13829 = IKatan2WithCheck(IkReal(x13826),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13829.valid){
continue;
}
IkReal gconst15=((3.14159265358979)+(((-1.0)*(x13829.value))));
IkReal gconst16=(x13826*x13827);
IkReal gconst17=((1.0)*r00*x13827);
CheckValue<IkReal> x13830 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13830.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x13830.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x13831=((-1.0)*r01);
CheckValue<IkReal> x13834 = IKatan2WithCheck(IkReal(x13831),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13834.valid){
continue;
}
IkReal x13832=((1.0)*(x13834.value));
IkReal x13833=x13827;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x13832)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x13832)));
IkReal gconst16=(x13831*x13833);
IkReal gconst17=((1.0)*r00*x13833);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x13835=((-1.0)*r01);
CheckValue<IkReal> x13838 = IKatan2WithCheck(IkReal(x13835),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13838.valid){
continue;
}
IkReal x13836=((1.0)*(x13838.value));
IkReal x13837=x13827;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x13836)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x13836)));
IkReal gconst16=(x13835*x13837);
IkReal gconst17=((1.0)*r00*x13837);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x13839=((-1.0)*r01);
CheckValue<IkReal> x13842 = IKatan2WithCheck(IkReal(x13839),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13842.valid){
continue;
}
IkReal x13840=((1.0)*(x13842.value));
IkReal x13841=x13827;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x13840)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x13840)));
IkReal gconst16=(x13839*x13841);
IkReal gconst17=((1.0)*r00*x13841);
IkReal x13843=r02*r02;
IkReal x13844=(r12*sj0);
IkReal x13845=((1.0)*cj0);
IkReal x13846=x13827;
j4eval[0]=((IKabs((((cj0*x13843*x13846))+(((-1.0)*x13845*x13846))+((r02*x13844*x13846)))))+(IKabs(((((-1.0)*r02*x13845))+(((-1.0)*x13844))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x13847=((-1.0)*r01);
CheckValue<IkReal> x13850 = IKatan2WithCheck(IkReal(x13847),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13850.valid){
continue;
}
IkReal x13848=((1.0)*(x13850.value));
IkReal x13849=x13827;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x13848)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x13848)));
IkReal gconst16=(x13847*x13849);
IkReal gconst17=((1.0)*r00*x13849);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x13851=((-1.0)*r01);
CheckValue<IkReal> x13854 = IKatan2WithCheck(IkReal(x13851),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13854.valid){
continue;
}
IkReal x13852=((1.0)*(x13854.value));
IkReal x13853=x13827;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x13852)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x13852)));
IkReal gconst16=(x13851*x13853);
IkReal gconst17=((1.0)*r00*x13853);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13855=gconst16*gconst16;
IkReal x13856=gconst17*gconst17;
IkReal x13857=(r11*sj3);
IkReal x13858=(cj3*r10);
IkReal x13859=((1.0)*cj3);
IkReal x13860=(r10*sj3);
IkReal x13861=(gconst16*gconst17);
IkReal x13862=(r21*x13855);
IkReal x13863=((1.0)*r20*x13856);
CheckValue<IkReal> x13864=IKPowWithIntegerCheck(IKsign((((r21*x13858*x13861))+(((-1.0)*r12*r22*x13859))+(((-1.0)*x13858*x13863))+((cj3*r11*r20*x13861))+(((-1.0)*r11*x13859*x13862)))),-1);
if(!x13864.valid){
continue;
}
CheckValue<IkReal> x13865 = IKatan2WithCheck(IkReal((((gconst17*r22*x13857))+((gconst16*r22*x13860)))),IkReal((((r21*x13857*x13861))+((x13860*x13862))+(((-1.0)*r20*x13860*x13861))+(((-1.0)*x13857*x13863)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13865.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13864.value)))+(x13865.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13866=IKsin(j4);
IkReal x13867=IKcos(j4);
IkReal x13868=(cj2*sj1);
IkReal x13869=(cj1*sj2);
IkReal x13870=(gconst16*r21);
IkReal x13871=(cj3*gconst17);
IkReal x13872=(gconst16*r20);
IkReal x13873=(sj1*sj2);
IkReal x13874=(gconst17*r20);
IkReal x13875=(gconst17*sj3);
IkReal x13876=(gconst16*r10);
IkReal x13877=(cj1*cj2);
IkReal x13878=(gconst16*sj3);
IkReal x13879=((1.0)*x13867);
IkReal x13880=((1.0)*x13866);
IkReal x13881=(gconst16*x13866);
IkReal x13882=(cj3*x13867);
IkReal x13883=(cj3*x13866);
IkReal x13884=(x13869+x13868);
evalcond[0]=((((-1.0)*r22*x13879))+((x13866*x13870))+(((-1.0)*x13874*x13880)));
evalcond[1]=((((-1.0)*gconst17*r00*x13880))+(((-1.0)*r02*x13879))+((r01*x13881)));
evalcond[2]=((-1.0)+(((-1.0)*gconst17*r10*x13880))+(((-1.0)*r12*x13879))+((r11*x13881)));
evalcond[3]=(((sj3*x13876))+((gconst16*r11*x13882))+((r11*x13875))+(((-1.0)*r10*x13871*x13879))+((r12*x13883)));
evalcond[4]=(((r10*x13867*x13875))+(((-1.0)*r11*x13878*x13879))+((cj3*x13876))+((r11*x13871))+(((-1.0)*r12*sj3*x13880)));
evalcond[5]=(((sj3*x13872))+((x13870*x13882))+x13884+((r21*x13875))+(((-1.0)*r20*x13871*x13879))+((r22*x13883)));
evalcond[6]=(x13877+(((-1.0)*x13873))+((r02*x13883))+((r01*x13875))+((r00*x13878))+(((-1.0)*r00*x13871*x13879))+((gconst16*r01*x13882)));
evalcond[7]=(x13884+((r00*x13867*x13875))+((r01*x13871))+(((-1.0)*r01*x13878*x13879))+((cj3*gconst16*r00))+(((-1.0)*r02*sj3*x13880)));
evalcond[8]=((((-1.0)*r22*sj3*x13880))+((cj3*x13872))+x13873+(((-1.0)*x13877))+((r21*x13871))+((sj3*x13867*x13874))+(((-1.0)*sj3*x13870*x13879)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13885=((1.0)*gconst17);
CheckValue<IkReal> x13886 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x13885))+((gconst16*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13886.valid){
continue;
}
CheckValue<IkReal> x13887=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r20))+(((-1.0)*r21*x13885)))),-1);
if(!x13887.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13886.value)+(((1.5707963267949)*(x13887.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13888=IKsin(j4);
IkReal x13889=IKcos(j4);
IkReal x13890=(cj2*sj1);
IkReal x13891=(cj1*sj2);
IkReal x13892=(gconst16*r21);
IkReal x13893=(cj3*gconst17);
IkReal x13894=(gconst16*r20);
IkReal x13895=(sj1*sj2);
IkReal x13896=(gconst17*r20);
IkReal x13897=(gconst17*sj3);
IkReal x13898=(gconst16*r10);
IkReal x13899=(cj1*cj2);
IkReal x13900=(gconst16*sj3);
IkReal x13901=((1.0)*x13889);
IkReal x13902=((1.0)*x13888);
IkReal x13903=(gconst16*x13888);
IkReal x13904=(cj3*x13889);
IkReal x13905=(cj3*x13888);
IkReal x13906=(x13890+x13891);
evalcond[0]=((((-1.0)*r22*x13901))+(((-1.0)*x13896*x13902))+((x13888*x13892)));
evalcond[1]=((((-1.0)*gconst17*r00*x13902))+((r01*x13903))+(((-1.0)*r02*x13901)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x13901))+((r11*x13903))+(((-1.0)*gconst17*r10*x13902)));
evalcond[3]=((((-1.0)*r10*x13893*x13901))+((sj3*x13898))+((gconst16*r11*x13904))+((r12*x13905))+((r11*x13897)));
evalcond[4]=((((-1.0)*r12*sj3*x13902))+((cj3*x13898))+(((-1.0)*r11*x13900*x13901))+((r11*x13893))+((r10*x13889*x13897)));
evalcond[5]=(((r22*x13905))+((sj3*x13894))+x13906+(((-1.0)*r20*x13893*x13901))+((r21*x13897))+((x13892*x13904)));
evalcond[6]=(((gconst16*r01*x13904))+((r02*x13905))+x13899+(((-1.0)*r00*x13893*x13901))+((r00*x13900))+((r01*x13897))+(((-1.0)*x13895)));
evalcond[7]=(((r00*x13889*x13897))+x13906+(((-1.0)*r02*sj3*x13902))+(((-1.0)*r01*x13900*x13901))+((r01*x13893))+((cj3*gconst16*r00)));
evalcond[8]=((((-1.0)*r22*sj3*x13902))+x13895+((cj3*x13894))+((sj3*x13889*x13896))+((r21*x13893))+(((-1.0)*sj3*x13892*x13901))+(((-1.0)*x13899)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13907=IKPowWithIntegerCheck(IKsign((((gconst17*r01))+((gconst16*r00)))),-1);
if(!x13907.valid){
continue;
}
CheckValue<IkReal> x13908 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst17*r20))+((gconst16*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13908.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13907.value)))+(x13908.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13909=IKsin(j4);
IkReal x13910=IKcos(j4);
IkReal x13911=(cj2*sj1);
IkReal x13912=(cj1*sj2);
IkReal x13913=(gconst16*r21);
IkReal x13914=(cj3*gconst17);
IkReal x13915=(gconst16*r20);
IkReal x13916=(sj1*sj2);
IkReal x13917=(gconst17*r20);
IkReal x13918=(gconst17*sj3);
IkReal x13919=(gconst16*r10);
IkReal x13920=(cj1*cj2);
IkReal x13921=(gconst16*sj3);
IkReal x13922=((1.0)*x13910);
IkReal x13923=((1.0)*x13909);
IkReal x13924=(gconst16*x13909);
IkReal x13925=(cj3*x13910);
IkReal x13926=(cj3*x13909);
IkReal x13927=(x13911+x13912);
evalcond[0]=((((-1.0)*x13917*x13923))+(((-1.0)*r22*x13922))+((x13909*x13913)));
evalcond[1]=((((-1.0)*gconst17*r00*x13923))+((r01*x13924))+(((-1.0)*r02*x13922)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x13922))+(((-1.0)*gconst17*r10*x13923))+((r11*x13924)));
evalcond[3]=(((gconst16*r11*x13925))+((sj3*x13919))+((r11*x13918))+(((-1.0)*r10*x13914*x13922))+((r12*x13926)));
evalcond[4]=(((r10*x13910*x13918))+(((-1.0)*r12*sj3*x13923))+((r11*x13914))+((cj3*x13919))+(((-1.0)*r11*x13921*x13922)));
evalcond[5]=(x13927+(((-1.0)*r20*x13914*x13922))+((sj3*x13915))+((r22*x13926))+((x13913*x13925))+((r21*x13918)));
evalcond[6]=((((-1.0)*r00*x13914*x13922))+(((-1.0)*x13916))+x13920+((r00*x13921))+((r01*x13918))+((r02*x13926))+((gconst16*r01*x13925)));
evalcond[7]=(((r00*x13910*x13918))+x13927+((r01*x13914))+(((-1.0)*r02*sj3*x13923))+((cj3*gconst16*r00))+(((-1.0)*r01*x13921*x13922)));
evalcond[8]=(((sj3*x13910*x13917))+(((-1.0)*sj3*x13913*x13922))+(((-1.0)*x13920))+x13916+((cj3*x13915))+((r21*x13914))+(((-1.0)*r22*sj3*x13923)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x13928=((-1.0)*r01);
CheckValue<IkReal> x13931 = IKatan2WithCheck(IkReal(x13928),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13931.valid){
continue;
}
IkReal x13929=((1.0)*(x13931.value));
IkReal x13930=x13827;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x13929)));
r22=0;
npz=(((px*r02))+((py*r12)));
rxp2_0=(pz*r12);
rxp2_1=((-1.0)*pz*r02);
IkReal gconst15=((3.14159265358979)+(((-1.0)*x13929)));
IkReal gconst16=(x13928*x13930);
IkReal gconst17=((1.0)*r00*x13930);
IkReal x13932=r02*r02;
IkReal x13933=(r12*sj0);
IkReal x13934=((1.0)*cj0);
IkReal x13935=x13827;
j4eval[0]=((IKabs(((((-1.0)*r02*x13934))+(((-1.0)*x13933)))))+(IKabs((((r02*x13933*x13935))+(((-1.0)*x13934*x13935))+((cj0*x13932*x13935))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13936=((1.0)*r12);
IkReal x13937=(sj1*sj2);
IkReal x13938=(cj1*cj2);
IkReal x13939=((1.0)*sj3);
IkReal x13940=(gconst16*r21);
IkReal x13941=(cj3*gconst16*r20);
IkReal x13942=(gconst17*r20*sj3);
IkReal x13943=(cj3*gconst17*r21);
CheckValue<IkReal> x13944=IKPowWithIntegerCheck((((gconst16*r11*x13942))+(((-1.0)*gconst16*r11*x13939*x13940))+(((-1.0)*r10*r20*x13939*(gconst17*gconst17)))+((gconst17*r10*sj3*x13940))),-1);
if(!x13944.valid){
continue;
}
CheckValue<IkReal> x13945=IKPowWithIntegerCheck((x13942+(((-1.0)*x13939*x13940))),-1);
if(!x13945.valid){
continue;
}
if( IKabs(((x13944.value)*(((((-1.0)*x13936*x13943))+(((-1.0)*x13936*x13941))+(((-1.0)*x13936*x13937))+(((-1.0)*cj0*gconst17*r20*x13939))+((cj0*sj3*x13940))+((r12*x13938)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13945.value)*(((((-1.0)*x13943))+(((-1.0)*x13941))+x13938+(((-1.0)*x13937)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13944.value)*(((((-1.0)*x13936*x13943))+(((-1.0)*x13936*x13941))+(((-1.0)*x13936*x13937))+(((-1.0)*cj0*gconst17*r20*x13939))+((cj0*sj3*x13940))+((r12*x13938))))))+IKsqr(((x13945.value)*(((((-1.0)*x13943))+(((-1.0)*x13941))+x13938+(((-1.0)*x13937))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13944.value)*(((((-1.0)*x13936*x13943))+(((-1.0)*x13936*x13941))+(((-1.0)*x13936*x13937))+(((-1.0)*cj0*gconst17*r20*x13939))+((cj0*sj3*x13940))+((r12*x13938))))), ((x13945.value)*(((((-1.0)*x13943))+(((-1.0)*x13941))+x13938+(((-1.0)*x13937))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13946=IKsin(j4);
IkReal x13947=IKcos(j4);
IkReal x13948=((1.0)*gconst17);
IkReal x13949=(gconst17*sj3);
IkReal x13950=(gconst16*r21);
IkReal x13951=(cj3*gconst17);
IkReal x13952=(sj1*sj2);
IkReal x13953=((1.0)*sj0);
IkReal x13954=(gconst16*sj3);
IkReal x13955=(cj3*gconst16);
IkReal x13956=(cj2*sj1);
IkReal x13957=((1.0)*cj0);
IkReal x13958=((1.0)*sj3);
IkReal x13959=(cj1*sj2);
IkReal x13960=(cj3*x13947);
IkReal x13961=(gconst16*x13946);
IkReal x13962=((1.0)*x13947);
IkReal x13963=((1.0)*cj1*cj2);
IkReal x13964=(r02*x13946);
IkReal x13965=(r12*x13946);
evalcond[0]=((((-1.0)*r20*x13946*x13948))+((x13946*x13950)));
evalcond[1]=(cj0+(((-1.0)*r12*x13962))+(((-1.0)*r10*x13946*x13948))+((r11*x13961)));
evalcond[2]=((((-1.0)*r02*x13962))+(((-1.0)*x13953))+(((-1.0)*r00*x13946*x13948))+((r01*x13961)));
evalcond[3]=(((x13950*x13960))+x13959+x13956+(((-1.0)*r20*x13948*x13960))+((r20*x13954))+((r21*x13949)));
evalcond[4]=(x13952+((r21*x13951))+((r20*x13947*x13949))+(((-1.0)*x13963))+(((-1.0)*x13947*x13950*x13958))+((r20*x13955)));
evalcond[5]=(((r01*x13947*x13955))+(((-1.0)*cj1*cj2*x13957))+((r00*x13954))+((r01*x13949))+(((-1.0)*r00*x13948*x13960))+((cj3*x13964))+((cj0*x13952)));
evalcond[6]=(((sj0*x13952))+(((-1.0)*cj1*cj2*x13953))+((cj3*x13965))+(((-1.0)*r10*x13948*x13960))+((r10*x13954))+((r11*x13947*x13955))+((r11*x13949)));
evalcond[7]=((((-1.0)*x13957*x13959))+((r01*x13951))+((r00*x13955))+((r00*x13947*x13949))+(((-1.0)*x13956*x13957))+(((-1.0)*x13958*x13964))+(((-1.0)*r01*x13954*x13962)));
evalcond[8]=(((r11*x13951))+((r10*x13947*x13949))+(((-1.0)*x13953*x13956))+(((-1.0)*x13953*x13959))+(((-1.0)*r11*x13954*x13962))+((r10*x13955))+(((-1.0)*x13958*x13965)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13966=((1.0)*sj0);
IkReal x13967=((1.0)*cj0);
CheckValue<IkReal> x13968=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r20))+(((-1.0)*gconst17*r21)))),-1);
if(!x13968.valid){
continue;
}
CheckValue<IkReal> x13969 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x13967))+(((-1.0)*r12*x13966)))),IkReal(((((-1.0)*gconst16*r11*x13966))+((cj0*gconst17*r00))+((gconst17*r10*sj0))+(((-1.0)*gconst16*r01*x13967)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13969.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13968.value)))+(x13969.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13970=IKsin(j4);
IkReal x13971=IKcos(j4);
IkReal x13972=((1.0)*gconst17);
IkReal x13973=(gconst17*sj3);
IkReal x13974=(gconst16*r21);
IkReal x13975=(cj3*gconst17);
IkReal x13976=(sj1*sj2);
IkReal x13977=((1.0)*sj0);
IkReal x13978=(gconst16*sj3);
IkReal x13979=(cj3*gconst16);
IkReal x13980=(cj2*sj1);
IkReal x13981=((1.0)*cj0);
IkReal x13982=((1.0)*sj3);
IkReal x13983=(cj1*sj2);
IkReal x13984=(cj3*x13971);
IkReal x13985=(gconst16*x13970);
IkReal x13986=((1.0)*x13971);
IkReal x13987=((1.0)*cj1*cj2);
IkReal x13988=(r02*x13970);
IkReal x13989=(r12*x13970);
evalcond[0]=((((-1.0)*r20*x13970*x13972))+((x13970*x13974)));
evalcond[1]=(((r11*x13985))+cj0+(((-1.0)*r10*x13970*x13972))+(((-1.0)*r12*x13986)));
evalcond[2]=(((r01*x13985))+(((-1.0)*r02*x13986))+(((-1.0)*r00*x13970*x13972))+(((-1.0)*x13977)));
evalcond[3]=(((x13974*x13984))+x13983+x13980+((r20*x13978))+(((-1.0)*r20*x13972*x13984))+((r21*x13973)));
evalcond[4]=(((r20*x13971*x13973))+x13976+(((-1.0)*x13987))+((r20*x13979))+(((-1.0)*x13971*x13974*x13982))+((r21*x13975)));
evalcond[5]=((((-1.0)*cj1*cj2*x13981))+((cj3*x13988))+((cj0*x13976))+(((-1.0)*r00*x13972*x13984))+((r00*x13978))+((r01*x13973))+((r01*x13971*x13979)));
evalcond[6]=(((r10*x13978))+((cj3*x13989))+((r11*x13973))+(((-1.0)*r10*x13972*x13984))+((r11*x13971*x13979))+(((-1.0)*cj1*cj2*x13977))+((sj0*x13976)));
evalcond[7]=((((-1.0)*x13982*x13988))+(((-1.0)*r01*x13978*x13986))+((r00*x13971*x13973))+((r00*x13979))+((r01*x13975))+(((-1.0)*x13980*x13981))+(((-1.0)*x13981*x13983)));
evalcond[8]=(((r10*x13979))+((r10*x13971*x13973))+(((-1.0)*x13982*x13989))+((r11*x13975))+(((-1.0)*x13977*x13983))+(((-1.0)*x13977*x13980))+(((-1.0)*r11*x13978*x13986)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13990=((1.0)*sj0);
IkReal x13991=((1.0)*cj0);
CheckValue<IkReal> x13992=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r20))+(((-1.0)*gconst17*r21)))),-1);
if(!x13992.valid){
continue;
}
CheckValue<IkReal> x13993 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x13991))+(((-1.0)*r12*x13990)))),IkReal(((((-1.0)*gconst16*r01*x13991))+(((-1.0)*gconst16*r11*x13990))+((cj0*gconst17*r00))+((gconst17*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13993.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13992.value)))+(x13993.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13994=IKsin(j4);
IkReal x13995=IKcos(j4);
IkReal x13996=(cj3*gconst17);
IkReal x13997=(gconst16*r21);
IkReal x13998=(gconst17*sj3);
IkReal x13999=(gconst16*r20);
IkReal x14000=(sj1*sj2);
IkReal x14001=(gconst16*r10);
IkReal x14002=(cj2*sj1);
IkReal x14003=(gconst16*sj3);
IkReal x14004=((1.0)*cj0);
IkReal x14005=((1.0)*sj0);
IkReal x14006=(cj1*sj2);
IkReal x14007=((1.0)*x13995);
IkReal x14008=(gconst16*x13994);
IkReal x14009=(cj3*x13995);
IkReal x14010=(cj3*x13994);
IkReal x14011=((1.0)*cj1*cj2);
IkReal x14012=((1.0)*gconst17*x13994);
IkReal x14013=((1.0)*sj3*x13994);
evalcond[0]=(((x13994*x13997))+(((-1.0)*r20*x14012))+(((-1.0)*r22*x14007)));
evalcond[1]=(cj0+((r11*x14008))+(((-1.0)*r12*x14007))+(((-1.0)*r10*x14012)));
evalcond[2]=((((-1.0)*r02*x14007))+((r01*x14008))+(((-1.0)*r00*x14012))+(((-1.0)*x14005)));
evalcond[3]=((((-1.0)*r20*x13996*x14007))+((r22*x14010))+((r21*x13998))+((x13997*x14009))+((sj3*x13999))+x14002+x14006);
evalcond[4]=((((-1.0)*x14011))+((cj3*x13999))+((r20*x13995*x13998))+((r21*x13996))+(((-1.0)*sj3*x13997*x14007))+x14000+(((-1.0)*r22*x14013)));
evalcond[5]=(((gconst16*r01*x14009))+((r02*x14010))+(((-1.0)*cj1*cj2*x14004))+((cj0*x14000))+(((-1.0)*r00*x13996*x14007))+((r00*x14003))+((r01*x13998)));
evalcond[6]=((((-1.0)*r10*x13996*x14007))+((gconst16*r11*x14009))+((r11*x13998))+((sj3*x14001))+((r12*x14010))+(((-1.0)*cj1*cj2*x14005))+((sj0*x14000)));
evalcond[7]=((((-1.0)*r01*x14003*x14007))+(((-1.0)*r02*x14013))+(((-1.0)*x14002*x14004))+(((-1.0)*x14004*x14006))+((r01*x13996))+((cj3*gconst16*r00))+((r00*x13995*x13998)));
evalcond[8]=(((r10*x13995*x13998))+(((-1.0)*x14005*x14006))+((r11*x13996))+(((-1.0)*x14002*x14005))+(((-1.0)*r12*x14013))+((cj3*x14001))+(((-1.0)*r11*x14003*x14007)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14014=((1.0)*gconst17);
CheckValue<IkReal> x14015=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r10))+(((-1.0)*r11*x14014)))),-1);
if(!x14015.valid){
continue;
}
CheckValue<IkReal> x14016 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x14014))+((gconst16*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14016.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14015.value)))+(x14016.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14017=IKsin(j4);
IkReal x14018=IKcos(j4);
IkReal x14019=(cj3*gconst17);
IkReal x14020=(gconst16*r21);
IkReal x14021=(gconst17*sj3);
IkReal x14022=(gconst16*r20);
IkReal x14023=(sj1*sj2);
IkReal x14024=(gconst16*r10);
IkReal x14025=(cj2*sj1);
IkReal x14026=(gconst16*sj3);
IkReal x14027=((1.0)*cj0);
IkReal x14028=((1.0)*sj0);
IkReal x14029=(cj1*sj2);
IkReal x14030=((1.0)*x14018);
IkReal x14031=(gconst16*x14017);
IkReal x14032=(cj3*x14018);
IkReal x14033=(cj3*x14017);
IkReal x14034=((1.0)*cj1*cj2);
IkReal x14035=((1.0)*gconst17*x14017);
IkReal x14036=((1.0)*sj3*x14017);
evalcond[0]=((((-1.0)*r20*x14035))+((x14017*x14020))+(((-1.0)*r22*x14030)));
evalcond[1]=(((r11*x14031))+cj0+(((-1.0)*r12*x14030))+(((-1.0)*r10*x14035)));
evalcond[2]=(((r01*x14031))+(((-1.0)*r00*x14035))+(((-1.0)*r02*x14030))+(((-1.0)*x14028)));
evalcond[3]=(((r22*x14033))+((sj3*x14022))+(((-1.0)*r20*x14019*x14030))+((r21*x14021))+((x14020*x14032))+x14025+x14029);
evalcond[4]=(((r21*x14019))+((cj3*x14022))+(((-1.0)*x14034))+(((-1.0)*sj3*x14020*x14030))+(((-1.0)*r22*x14036))+((r20*x14018*x14021))+x14023);
evalcond[5]=(((r01*x14021))+((r00*x14026))+(((-1.0)*r00*x14019*x14030))+((gconst16*r01*x14032))+(((-1.0)*cj1*cj2*x14027))+((r02*x14033))+((cj0*x14023)));
evalcond[6]=(((r11*x14021))+((sj3*x14024))+((sj0*x14023))+(((-1.0)*r10*x14019*x14030))+((gconst16*r11*x14032))+(((-1.0)*cj1*cj2*x14028))+((r12*x14033)));
evalcond[7]=((((-1.0)*x14025*x14027))+(((-1.0)*r02*x14036))+((r00*x14018*x14021))+(((-1.0)*r01*x14026*x14030))+((r01*x14019))+((cj3*gconst16*r00))+(((-1.0)*x14027*x14029)));
evalcond[8]=(((r11*x14019))+((cj3*x14024))+(((-1.0)*r12*x14036))+(((-1.0)*x14028*x14029))+(((-1.0)*x14025*x14028))+(((-1.0)*r11*x14026*x14030))+((r10*x14018*x14021)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14037=((1.0)*gconst17);
CheckValue<IkReal> x14038 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x14037))+((cj0*gconst16*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14038.valid){
continue;
}
CheckValue<IkReal> x14039=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r00))+(((-1.0)*r01*x14037)))),-1);
if(!x14039.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14038.value)+(((1.5707963267949)*(x14039.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14040=IKsin(j4);
IkReal x14041=IKcos(j4);
IkReal x14042=(cj3*gconst17);
IkReal x14043=(gconst16*r21);
IkReal x14044=(gconst17*sj3);
IkReal x14045=(gconst16*r20);
IkReal x14046=(sj1*sj2);
IkReal x14047=(gconst16*r10);
IkReal x14048=(cj2*sj1);
IkReal x14049=(gconst16*sj3);
IkReal x14050=((1.0)*cj0);
IkReal x14051=((1.0)*sj0);
IkReal x14052=(cj1*sj2);
IkReal x14053=((1.0)*x14041);
IkReal x14054=(gconst16*x14040);
IkReal x14055=(cj3*x14041);
IkReal x14056=(cj3*x14040);
IkReal x14057=((1.0)*cj1*cj2);
IkReal x14058=((1.0)*gconst17*x14040);
IkReal x14059=((1.0)*sj3*x14040);
evalcond[0]=((((-1.0)*r20*x14058))+(((-1.0)*r22*x14053))+((x14040*x14043)));
evalcond[1]=((((-1.0)*r12*x14053))+cj0+((r11*x14054))+(((-1.0)*r10*x14058)));
evalcond[2]=((((-1.0)*x14051))+(((-1.0)*r02*x14053))+(((-1.0)*r00*x14058))+((r01*x14054)));
evalcond[3]=(((x14043*x14055))+((sj3*x14045))+((r21*x14044))+((r22*x14056))+x14052+x14048+(((-1.0)*r20*x14042*x14053)));
evalcond[4]=((((-1.0)*x14057))+((cj3*x14045))+(((-1.0)*r22*x14059))+((r21*x14042))+((r20*x14041*x14044))+x14046+(((-1.0)*sj3*x14043*x14053)));
evalcond[5]=(((r00*x14049))+((cj0*x14046))+((r01*x14044))+((gconst16*r01*x14055))+((r02*x14056))+(((-1.0)*r00*x14042*x14053))+(((-1.0)*cj1*cj2*x14050)));
evalcond[6]=(((r11*x14044))+((sj3*x14047))+((r12*x14056))+((sj0*x14046))+(((-1.0)*r10*x14042*x14053))+((gconst16*r11*x14055))+(((-1.0)*cj1*cj2*x14051)));
evalcond[7]=(((r01*x14042))+((r00*x14041*x14044))+(((-1.0)*x14048*x14050))+(((-1.0)*x14050*x14052))+(((-1.0)*r02*x14059))+(((-1.0)*r01*x14049*x14053))+((cj3*gconst16*r00)));
evalcond[8]=(((r11*x14042))+(((-1.0)*r12*x14059))+(((-1.0)*x14048*x14051))+(((-1.0)*x14051*x14052))+((cj3*x14047))+(((-1.0)*r11*x14049*x14053))+((r10*x14041*x14044)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x14060=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x14060;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x14060);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x14061=((1.0)*cj5);
IkReal x14062=((((-1.0)*r10*sj5))+(((-1.0)*r11*x14061)));
j4eval[0]=x14062;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x14061)))))+(IKabs(r22)));
j4eval[2]=IKsign(x14062);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x14063=cj5*cj5;
IkReal x14064=(cj3*r01);
IkReal x14065=(cj5*sj5);
IkReal x14066=((1.0)*cj3);
IkReal x14067=((((-1.0)*r00*r20*x14063*x14066))+((r20*x14064*x14065))+(((-1.0)*r21*x14064))+((r21*x14063*x14064))+((cj3*r00*r21*x14065))+(((-1.0)*r02*r22*x14066)));
j4eval[0]=x14067;
j4eval[1]=IKsign(x14067);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x14068=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x14068;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x14068);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x14069=((1.0)*cj5);
IkReal x14070=((((-1.0)*r10*sj5))+(((-1.0)*r11*x14069)));
j4eval[0]=x14070;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x14069))))));
j4eval[2]=IKsign(x14070);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x14071=cj5*cj5;
IkReal x14072=r01*r01;
IkReal x14073=(r01*sj5);
IkReal x14074=(cj5*r00);
IkReal x14075=((((-1.0)*(r02*r02)))+(((2.0)*x14073*x14074))+(((-1.0)*x14072))+((x14071*x14072))+(((-1.0)*x14071*(r00*r00))));
j4eval[0]=x14075;
j4eval[1]=IKsign(x14075);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x14073))+x14074))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14076=cj5*cj5;
IkReal x14077=r01*r01;
IkReal x14078=(r01*sj5);
IkReal x14079=(cj5*r00);
CheckValue<IkReal> x14080=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((-1.0)*x14076*(r00*r00)))+(((2.0)*x14078*x14079))+(((-1.0)*x14077))+((x14076*x14077)))),-1);
if(!x14080.valid){
continue;
}
CheckValue<IkReal> x14081 = IKatan2WithCheck(IkReal(((((-1.0)*x14078))+x14079)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x14081.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14080.value)))+(x14081.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14082=IKsin(j4);
IkReal x14083=IKcos(j4);
IkReal x14084=(cj5*r10);
IkReal x14085=(r01*sj5);
IkReal x14086=((1.0)*cj2);
IkReal x14087=(cj5*r00);
IkReal x14088=(cj5*r20);
IkReal x14089=((1.0)*x14083);
IkReal x14090=((1.0)*x14082);
IkReal x14091=(sj5*x14082);
evalcond[0]=((((-1.0)*r22*x14089))+((r21*x14091))+(((-1.0)*x14088*x14090)));
evalcond[1]=((((-1.0)*r12*x14089))+(((-1.0)*x14084*x14090))+((r11*x14091)));
evalcond[2]=((((-1.0)*x14085*x14089))+(((-1.0)*r02*x14090))+((x14083*x14087)));
evalcond[3]=((-1.0)+((x14082*x14085))+(((-1.0)*r02*x14089))+(((-1.0)*x14087*x14090)));
evalcond[4]=((((-1.0)*r22*x14090))+(((-1.0)*r21*sj5*x14089))+((sj1*sj2))+((x14083*x14088))+(((-1.0)*cj1*x14086)));
evalcond[5]=((((-1.0)*sj1*x14086))+(((-1.0)*r12*x14090))+(((-1.0)*cj1*sj2))+(((-1.0)*r11*sj5*x14089))+((x14083*x14084)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14092=((1.0)*cj5);
CheckValue<IkReal> x14093 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x14092)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14093.valid){
continue;
}
CheckValue<IkReal> x14094=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x14092)))),-1);
if(!x14094.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14093.value)+(((1.5707963267949)*(x14094.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14095=IKsin(j4);
IkReal x14096=IKcos(j4);
IkReal x14097=(cj5*r10);
IkReal x14098=(r01*sj5);
IkReal x14099=((1.0)*cj2);
IkReal x14100=(cj5*r00);
IkReal x14101=(cj5*r20);
IkReal x14102=((1.0)*x14096);
IkReal x14103=((1.0)*x14095);
IkReal x14104=(sj5*x14095);
evalcond[0]=((((-1.0)*x14101*x14103))+(((-1.0)*r22*x14102))+((r21*x14104)));
evalcond[1]=((((-1.0)*x14097*x14103))+(((-1.0)*r12*x14102))+((r11*x14104)));
evalcond[2]=(((x14096*x14100))+(((-1.0)*r02*x14103))+(((-1.0)*x14098*x14102)));
evalcond[3]=((-1.0)+((x14095*x14098))+(((-1.0)*x14100*x14103))+(((-1.0)*r02*x14102)));
evalcond[4]=(((sj1*sj2))+((x14096*x14101))+(((-1.0)*cj1*x14099))+(((-1.0)*r22*x14103))+(((-1.0)*r21*sj5*x14102)));
evalcond[5]=(((x14096*x14097))+(((-1.0)*sj1*x14099))+(((-1.0)*r11*sj5*x14102))+(((-1.0)*r12*x14103))+(((-1.0)*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14105=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x14105.valid){
continue;
}
CheckValue<IkReal> x14106 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14106.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14105.value)))+(x14106.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14107=IKsin(j4);
IkReal x14108=IKcos(j4);
IkReal x14109=(cj5*r10);
IkReal x14110=(r01*sj5);
IkReal x14111=((1.0)*cj2);
IkReal x14112=(cj5*r00);
IkReal x14113=(cj5*r20);
IkReal x14114=((1.0)*x14108);
IkReal x14115=((1.0)*x14107);
IkReal x14116=(sj5*x14107);
evalcond[0]=((((-1.0)*r22*x14114))+((r21*x14116))+(((-1.0)*x14113*x14115)));
evalcond[1]=(((r11*x14116))+(((-1.0)*r12*x14114))+(((-1.0)*x14109*x14115)));
evalcond[2]=((((-1.0)*x14110*x14114))+((x14108*x14112))+(((-1.0)*r02*x14115)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x14114))+(((-1.0)*x14112*x14115))+((x14107*x14110)));
evalcond[4]=((((-1.0)*cj1*x14111))+((sj1*sj2))+((x14108*x14113))+(((-1.0)*r22*x14115))+(((-1.0)*r21*sj5*x14114)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*r12*x14115))+(((-1.0)*r11*sj5*x14114))+((x14108*x14109))+(((-1.0)*sj1*x14111)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x14117=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x14117;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x14117);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x14118=((1.0)*cj5);
IkReal x14119=((((-1.0)*r10*sj5))+(((-1.0)*r11*x14118)));
j4eval[0]=x14119;
j4eval[1]=((IKabs(((((-1.0)*r20*x14118))+((r21*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x14119);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x14120=cj5*cj5;
IkReal x14121=r01*r01;
IkReal x14122=(cj5*r00);
IkReal x14123=(r01*sj5);
IkReal x14124=((((-2.0)*x14122*x14123))+(((-1.0)*x14120*x14121))+x14121+((x14120*(r00*r00)))+(r02*r02));
j4eval[0]=x14124;
j4eval[1]=IKsign(x14124);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x14122))+x14123))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14125=cj5*cj5;
IkReal x14126=r01*r01;
IkReal x14127=(r01*sj5);
IkReal x14128=(cj5*r00);
CheckValue<IkReal> x14129 = IKatan2WithCheck(IkReal(((((-1.0)*x14128))+x14127)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x14129.valid){
continue;
}
CheckValue<IkReal> x14130=IKPowWithIntegerCheck(IKsign((((x14125*(r00*r00)))+(((-2.0)*x14127*x14128))+(((-1.0)*x14125*x14126))+x14126+(r02*r02))),-1);
if(!x14130.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14129.value)+(((1.5707963267949)*(x14130.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14131=IKcos(j4);
IkReal x14132=IKsin(j4);
IkReal x14133=(cj5*r00);
IkReal x14134=(cj5*r10);
IkReal x14135=(r21*sj5);
IkReal x14136=((1.0)*cj2);
IkReal x14137=(cj5*r20);
IkReal x14138=((1.0)*x14131);
IkReal x14139=((1.0)*x14132);
IkReal x14140=(sj5*x14132);
IkReal x14141=(sj5*x14131);
evalcond[0]=((((-1.0)*x14133*x14138))+((r02*x14132))+((r01*x14141)));
evalcond[1]=(((x14132*x14135))+(((-1.0)*x14137*x14139))+(((-1.0)*r22*x14138)));
evalcond[2]=((((-1.0)*x14134*x14139))+(((-1.0)*r12*x14138))+((r11*x14140)));
evalcond[3]=((-1.0)+(((-1.0)*x14133*x14139))+(((-1.0)*r02*x14138))+((r01*x14140)));
evalcond[4]=((((-1.0)*cj1*x14136))+((sj1*sj2))+((r22*x14132))+(((-1.0)*x14137*x14138))+((x14131*x14135)));
evalcond[5]=((((-1.0)*sj1*x14136))+(((-1.0)*cj1*sj2))+(((-1.0)*x14134*x14138))+((r12*x14132))+((r11*x14141)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14142=((1.0)*cj5);
CheckValue<IkReal> x14143 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x14142)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14143.valid){
continue;
}
CheckValue<IkReal> x14144=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x14142)))),-1);
if(!x14144.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14143.value)+(((1.5707963267949)*(x14144.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14145=IKcos(j4);
IkReal x14146=IKsin(j4);
IkReal x14147=(cj5*r00);
IkReal x14148=(cj5*r10);
IkReal x14149=(r21*sj5);
IkReal x14150=((1.0)*cj2);
IkReal x14151=(cj5*r20);
IkReal x14152=((1.0)*x14145);
IkReal x14153=((1.0)*x14146);
IkReal x14154=(sj5*x14146);
IkReal x14155=(sj5*x14145);
evalcond[0]=(((r02*x14146))+(((-1.0)*x14147*x14152))+((r01*x14155)));
evalcond[1]=((((-1.0)*x14151*x14153))+(((-1.0)*r22*x14152))+((x14146*x14149)));
evalcond[2]=((((-1.0)*x14148*x14153))+((r11*x14154))+(((-1.0)*r12*x14152)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x14152))+(((-1.0)*x14147*x14153))+((r01*x14154)));
evalcond[4]=((((-1.0)*x14151*x14152))+((sj1*sj2))+(((-1.0)*cj1*x14150))+((r22*x14146))+((x14145*x14149)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*x14148*x14152))+((r11*x14155))+((r12*x14146))+(((-1.0)*sj1*x14150)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14156=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x14156.valid){
continue;
}
CheckValue<IkReal> x14157 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14157.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14156.value)))+(x14157.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14158=IKcos(j4);
IkReal x14159=IKsin(j4);
IkReal x14160=(cj5*r00);
IkReal x14161=(cj5*r10);
IkReal x14162=(r21*sj5);
IkReal x14163=((1.0)*cj2);
IkReal x14164=(cj5*r20);
IkReal x14165=((1.0)*x14158);
IkReal x14166=((1.0)*x14159);
IkReal x14167=(sj5*x14159);
IkReal x14168=(sj5*x14158);
evalcond[0]=(((r02*x14159))+((r01*x14168))+(((-1.0)*x14160*x14165)));
evalcond[1]=(((x14159*x14162))+(((-1.0)*x14164*x14166))+(((-1.0)*r22*x14165)));
evalcond[2]=((((-1.0)*r12*x14165))+((r11*x14167))+(((-1.0)*x14161*x14166)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x14165))+((r01*x14167))+(((-1.0)*x14160*x14166)));
evalcond[4]=((((-1.0)*x14164*x14165))+((x14158*x14162))+((sj1*sj2))+((r22*x14159))+(((-1.0)*cj1*x14163)));
evalcond[5]=((((-1.0)*cj1*sj2))+((r11*x14168))+((r12*x14159))+(((-1.0)*sj1*x14163))+(((-1.0)*x14161*x14165)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14170 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x14170)==0){
continue;
}
IkReal x14169=pow(x14170,-0.5);
CheckValue<IkReal> x14171 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14171.valid){
continue;
}
IkReal gconst48=((-1.0)*(x14171.value));
IkReal gconst49=((-1.0)*r21*x14169);
IkReal gconst50=(r20*x14169);
CheckValue<IkReal> x14172 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14172.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x14172.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x14175 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14175.valid){
continue;
}
IkReal x14173=((-1.0)*(x14175.value));
IkReal x14174=x14169;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst49;
cj5=gconst50;
j5=x14173;
IkReal gconst48=x14173;
IkReal gconst49=((-1.0)*r21*x14174);
IkReal gconst50=(r20*x14174);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x14178 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14178.valid){
continue;
}
IkReal x14176=((-1.0)*(x14178.value));
IkReal x14177=x14169;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst49;
cj5=gconst50;
j5=x14176;
IkReal gconst48=x14176;
IkReal gconst49=((-1.0)*r21*x14177);
IkReal gconst50=(r20*x14177);
CheckValue<IkReal> x14186=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x14186.valid){
continue;
}
IkReal x14179=x14186.value;
IkReal x14180=(sj3*x14179);
IkReal x14181=(r11*x14180);
IkReal x14182=(r00*x14180);
IkReal x14183=(r01*x14180);
IkReal x14184=(r10*x14180);
IkReal x14185=(r20*r21*x14180);
j4eval[0]=IKsign((((r02*r12*sj3))+((r01*x14181*(r21*r21)))+((r00*r20*r21*x14181))+((r10*x14182*(r20*r20)))+((r10*r20*r21*x14183))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14187=gconst49*gconst49;
IkReal x14188=gconst50*gconst50;
IkReal x14189=((1.0)*cj3);
IkReal x14190=(gconst50*r01);
IkReal x14191=(gconst49*r10);
IkReal x14192=(r12*sj3);
IkReal x14193=(gconst49*r00);
IkReal x14194=(r00*sj3);
IkReal x14195=(r11*x14187);
IkReal x14196=(r10*x14188);
CheckValue<IkReal> x14197=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r12*x14189))+((cj3*gconst50*r11*x14193))+((cj3*x14190*x14191))+(((-1.0)*r01*x14189*x14195))+(((-1.0)*r00*x14189*x14196)))),-1);
if(!x14197.valid){
continue;
}
CheckValue<IkReal> x14198 = IKatan2WithCheck(IkReal((((x14190*x14192))+((x14192*x14193)))),IkReal((((x14194*x14195))+(((-1.0)*r01*sj3*x14196))+((gconst49*r11*sj3*x14190))+(((-1.0)*gconst50*x14191*x14194)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14198.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14197.value)))+(x14198.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14199=IKsin(j4);
IkReal x14200=IKcos(j4);
IkReal x14201=(sj1*sj2);
IkReal x14202=(gconst50*r20);
IkReal x14203=(gconst50*sj3);
IkReal x14204=(cj3*r01);
IkReal x14205=(gconst50*r10);
IkReal x14206=(gconst49*sj3);
IkReal x14207=((1.0)*cj2);
IkReal x14208=(cj1*sj2);
IkReal x14209=(cj3*r11);
IkReal x14210=(gconst50*r00);
IkReal x14211=(cj3*r21);
IkReal x14212=(cj3*gconst49);
IkReal x14213=(cj1*x14207);
IkReal x14214=((1.0)*x14200);
IkReal x14215=((1.0)*x14199);
IkReal x14216=(gconst49*x14199);
IkReal x14217=(gconst49*x14200);
IkReal x14218=(cj3*x14199);
evalcond[0]=((((-1.0)*r22*x14214))+((r21*x14216))+(((-1.0)*x14202*x14215)));
evalcond[1]=((((-1.0)*r12*x14214))+((r11*x14216))+(((-1.0)*x14205*x14215)));
evalcond[2]=((-1.0)+(((-1.0)*x14210*x14215))+(((-1.0)*r02*x14214))+((r01*x14216)));
evalcond[3]=((((-1.0)*cj3*x14210*x14214))+((x14204*x14217))+((r00*x14206))+((r01*x14203))+((r02*x14218)));
evalcond[4]=(((gconst50*x14204))+(((-1.0)*r02*sj3*x14215))+((r00*x14200*x14203))+(((-1.0)*r01*x14206*x14214))+((r00*x14212)));
evalcond[5]=(((cj2*sj1))+((r22*x14218))+(((-1.0)*cj3*x14202*x14214))+((r20*x14206))+((r21*x14203))+((x14211*x14217))+x14208);
evalcond[6]=(((r12*x14218))+((x14209*x14217))+((r10*x14206))+(((-1.0)*cj3*x14205*x14214))+(((-1.0)*x14213))+((r11*x14203))+x14201);
evalcond[7]=(((gconst50*x14211))+((sj3*x14200*x14202))+(((-1.0)*r22*sj3*x14215))+(((-1.0)*r21*x14206*x14214))+(((-1.0)*x14213))+((r20*x14212))+x14201);
evalcond[8]=(((gconst50*x14209))+(((-1.0)*sj1*x14207))+((r10*x14212))+((r10*x14200*x14203))+(((-1.0)*x14208))+(((-1.0)*r11*x14206*x14214))+(((-1.0)*r12*sj3*x14215)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14219=gconst49*gconst49;
IkReal x14220=gconst50*gconst50;
IkReal x14221=(cj3*r12);
IkReal x14222=(gconst49*r00);
IkReal x14223=(r01*r11);
IkReal x14224=(r00*r11);
IkReal x14225=(cj3*gconst50);
IkReal x14226=((1.0)*r01*r10);
IkReal x14227=(gconst49*gconst50*sj3);
CheckValue<IkReal> x14228 = IKatan2WithCheck(IkReal((((gconst50*r01*x14221))+((x14221*x14222)))),IkReal((((cj3*x14219*x14224))+(((-1.0)*r10*x14222*x14225))+((gconst49*x14223*x14225))+(((-1.0)*cj3*x14220*x14226)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14228.valid){
continue;
}
CheckValue<IkReal> x14229=IKPowWithIntegerCheck(IKsign(((((-1.0)*x14226*x14227))+((r02*r12*sj3))+((sj3*x14219*x14223))+(((-1.0)*gconst50*r11*sj3*x14222))+((r00*r10*sj3*x14220)))),-1);
if(!x14229.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14228.value)+(((1.5707963267949)*(x14229.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14230=IKsin(j4);
IkReal x14231=IKcos(j4);
IkReal x14232=(sj1*sj2);
IkReal x14233=(gconst50*r20);
IkReal x14234=(gconst50*sj3);
IkReal x14235=(cj3*r01);
IkReal x14236=(gconst50*r10);
IkReal x14237=(gconst49*sj3);
IkReal x14238=((1.0)*cj2);
IkReal x14239=(cj1*sj2);
IkReal x14240=(cj3*r11);
IkReal x14241=(gconst50*r00);
IkReal x14242=(cj3*r21);
IkReal x14243=(cj3*gconst49);
IkReal x14244=(cj1*x14238);
IkReal x14245=((1.0)*x14231);
IkReal x14246=((1.0)*x14230);
IkReal x14247=(gconst49*x14230);
IkReal x14248=(gconst49*x14231);
IkReal x14249=(cj3*x14230);
evalcond[0]=(((r21*x14247))+(((-1.0)*r22*x14245))+(((-1.0)*x14233*x14246)));
evalcond[1]=((((-1.0)*x14236*x14246))+((r11*x14247))+(((-1.0)*r12*x14245)));
evalcond[2]=((-1.0)+((r01*x14247))+(((-1.0)*r02*x14245))+(((-1.0)*x14241*x14246)));
evalcond[3]=(((x14235*x14248))+((r02*x14249))+((r01*x14234))+((r00*x14237))+(((-1.0)*cj3*x14241*x14245)));
evalcond[4]=((((-1.0)*r02*sj3*x14246))+((r00*x14231*x14234))+((r00*x14243))+((gconst50*x14235))+(((-1.0)*r01*x14237*x14245)));
evalcond[5]=(((cj2*sj1))+((r20*x14237))+((r21*x14234))+(((-1.0)*cj3*x14233*x14245))+((x14242*x14248))+x14239+((r22*x14249)));
evalcond[6]=((((-1.0)*x14244))+((r10*x14237))+((r12*x14249))+((x14240*x14248))+(((-1.0)*cj3*x14236*x14245))+x14232+((r11*x14234)));
evalcond[7]=((((-1.0)*r22*sj3*x14246))+(((-1.0)*x14244))+((r20*x14243))+((sj3*x14231*x14233))+((gconst50*x14242))+(((-1.0)*r21*x14237*x14245))+x14232);
evalcond[8]=((((-1.0)*r11*x14237*x14245))+(((-1.0)*sj1*x14238))+((r10*x14243))+((gconst50*x14240))+(((-1.0)*x14239))+((r10*x14231*x14234))+(((-1.0)*r12*sj3*x14246)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14250=((1.0)*gconst50);
CheckValue<IkReal> x14251=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst49*r10))+(((-1.0)*r11*x14250)))),-1);
if(!x14251.valid){
continue;
}
CheckValue<IkReal> x14252 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst49*r21))+(((-1.0)*r20*x14250)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14252.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14251.value)))+(x14252.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14253=IKsin(j4);
IkReal x14254=IKcos(j4);
IkReal x14255=(sj1*sj2);
IkReal x14256=(gconst50*r20);
IkReal x14257=(gconst50*sj3);
IkReal x14258=(cj3*r01);
IkReal x14259=(gconst50*r10);
IkReal x14260=(gconst49*sj3);
IkReal x14261=((1.0)*cj2);
IkReal x14262=(cj1*sj2);
IkReal x14263=(cj3*r11);
IkReal x14264=(gconst50*r00);
IkReal x14265=(cj3*r21);
IkReal x14266=(cj3*gconst49);
IkReal x14267=(cj1*x14261);
IkReal x14268=((1.0)*x14254);
IkReal x14269=((1.0)*x14253);
IkReal x14270=(gconst49*x14253);
IkReal x14271=(gconst49*x14254);
IkReal x14272=(cj3*x14253);
evalcond[0]=(((r21*x14270))+(((-1.0)*r22*x14268))+(((-1.0)*x14256*x14269)));
evalcond[1]=(((r11*x14270))+(((-1.0)*x14259*x14269))+(((-1.0)*r12*x14268)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x14268))+((r01*x14270))+(((-1.0)*x14264*x14269)));
evalcond[3]=(((r00*x14260))+((r02*x14272))+(((-1.0)*cj3*x14264*x14268))+((x14258*x14271))+((r01*x14257)));
evalcond[4]=(((r00*x14266))+(((-1.0)*r02*sj3*x14269))+(((-1.0)*r01*x14260*x14268))+((gconst50*x14258))+((r00*x14254*x14257)));
evalcond[5]=(((cj2*sj1))+((r21*x14257))+((r20*x14260))+((x14265*x14271))+((r22*x14272))+(((-1.0)*cj3*x14256*x14268))+x14262);
evalcond[6]=((((-1.0)*x14267))+(((-1.0)*cj3*x14259*x14268))+((r11*x14257))+((r12*x14272))+((x14263*x14271))+((r10*x14260))+x14255);
evalcond[7]=(((sj3*x14254*x14256))+(((-1.0)*r22*sj3*x14269))+(((-1.0)*x14267))+((r20*x14266))+(((-1.0)*r21*x14260*x14268))+((gconst50*x14265))+x14255);
evalcond[8]=((((-1.0)*r12*sj3*x14269))+(((-1.0)*x14262))+(((-1.0)*sj1*x14261))+((r10*x14254*x14257))+(((-1.0)*r11*x14260*x14268))+((r10*x14266))+((gconst50*x14263)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14274 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x14274)==0){
continue;
}
IkReal x14273=pow(x14274,-0.5);
CheckValue<IkReal> x14275 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14275.valid){
continue;
}
IkReal gconst51=((3.14159265358979)+(((-1.0)*(x14275.value))));
IkReal gconst52=((1.0)*r21*x14273);
IkReal gconst53=((-1.0)*r20*x14273);
CheckValue<IkReal> x14276 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14276.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x14276.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x14279 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14279.valid){
continue;
}
IkReal x14277=((1.0)*(x14279.value));
IkReal x14278=x14273;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst52;
cj5=gconst53;
j5=((3.14159265)+(((-1.0)*x14277)));
IkReal gconst51=((3.14159265358979)+(((-1.0)*x14277)));
IkReal gconst52=((1.0)*r21*x14278);
IkReal gconst53=((-1.0)*r20*x14278);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x14282 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14282.valid){
continue;
}
IkReal x14280=((1.0)*(x14282.value));
IkReal x14281=x14273;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst52;
cj5=gconst53;
j5=((3.14159265)+(((-1.0)*x14280)));
IkReal gconst51=((3.14159265358979)+(((-1.0)*x14280)));
IkReal gconst52=((1.0)*r21*x14281);
IkReal gconst53=((-1.0)*r20*x14281);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x14285 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14285.valid){
continue;
}
IkReal x14283=((1.0)*(x14285.value));
IkReal x14284=x14273;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst52;
cj5=gconst53;
j5=((3.14159265)+(((-1.0)*x14283)));
IkReal gconst51=((3.14159265358979)+(((-1.0)*x14283)));
IkReal gconst52=((1.0)*r21*x14284);
IkReal gconst53=((-1.0)*r20*x14284);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14286=gconst52*gconst52;
IkReal x14287=gconst53*gconst53;
IkReal x14288=(gconst53*r01);
IkReal x14289=(cj3*r20);
IkReal x14290=(r22*sj3);
IkReal x14291=((1.0)*cj3);
IkReal x14292=(gconst52*sj3);
IkReal x14293=((1.0)*r00);
IkReal x14294=(gconst52*r00);
IkReal x14295=(r21*x14286);
CheckValue<IkReal> x14296 = IKatan2WithCheck(IkReal((((x14290*x14294))+((x14288*x14290)))),IkReal((((r00*sj3*x14295))+(((-1.0)*r01*r20*sj3*x14287))+(((-1.0)*gconst53*r20*x14292*x14293))+((r21*x14288*x14292)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14296.valid){
continue;
}
CheckValue<IkReal> x14297=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r22*x14291))+((gconst52*x14288*x14289))+(((-1.0)*x14287*x14289*x14293))+((cj3*gconst53*r21*x14294))+(((-1.0)*r01*x14291*x14295)))),-1);
if(!x14297.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14296.value)+(((1.5707963267949)*(x14297.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14298=IKsin(j4);
IkReal x14299=IKcos(j4);
IkReal x14300=(sj1*sj2);
IkReal x14301=((1.0)*cj1);
IkReal x14302=(cj3*gconst52);
IkReal x14303=(gconst53*sj3);
IkReal x14304=(cj3*gconst53);
IkReal x14305=(cj2*sj1);
IkReal x14306=(gconst52*sj3);
IkReal x14307=(cj2*x14301);
IkReal x14308=((1.0)*x14299);
IkReal x14309=((1.0)*x14298);
IkReal x14310=(gconst52*x14298);
IkReal x14311=(cj3*x14298);
evalcond[0]=((((-1.0)*r22*x14308))+((r21*x14310))+(((-1.0)*gconst53*r20*x14309)));
evalcond[1]=(((r11*x14310))+(((-1.0)*r12*x14308))+(((-1.0)*gconst53*r10*x14309)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x14308))+(((-1.0)*gconst53*r00*x14309))+((r01*x14310)));
evalcond[3]=(((r02*x14311))+(((-1.0)*r00*x14304*x14308))+((r01*x14299*x14302))+((r01*x14303))+((r00*x14306)));
evalcond[4]=((((-1.0)*r02*sj3*x14309))+((r01*x14304))+((r00*x14302))+(((-1.0)*r01*x14306*x14308))+((r00*x14299*x14303)));
evalcond[5]=(((r20*x14306))+((r21*x14299*x14302))+((cj1*sj2))+(((-1.0)*r20*x14304*x14308))+x14305+((r21*x14303))+((r22*x14311)));
evalcond[6]=(((r11*x14299*x14302))+((r11*x14303))+(((-1.0)*r10*x14304*x14308))+((r10*x14306))+x14300+((r12*x14311))+(((-1.0)*x14307)));
evalcond[7]=(((r20*x14302))+(((-1.0)*r22*sj3*x14309))+((r20*x14299*x14303))+(((-1.0)*r21*x14306*x14308))+x14300+((r21*x14304))+(((-1.0)*x14307)));
evalcond[8]=((((-1.0)*sj2*x14301))+((r11*x14304))+((r10*x14299*x14303))+(((-1.0)*r11*x14306*x14308))+(((-1.0)*x14305))+((r10*x14302))+(((-1.0)*r12*sj3*x14309)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14312=((1.0)*gconst53);
CheckValue<IkReal> x14313=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst52*r10))+(((-1.0)*r11*x14312)))),-1);
if(!x14313.valid){
continue;
}
CheckValue<IkReal> x14314 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst52*r21))+(((-1.0)*r20*x14312)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14314.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14313.value)))+(x14314.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14315=IKsin(j4);
IkReal x14316=IKcos(j4);
IkReal x14317=(sj1*sj2);
IkReal x14318=((1.0)*cj1);
IkReal x14319=(cj3*gconst52);
IkReal x14320=(gconst53*sj3);
IkReal x14321=(cj3*gconst53);
IkReal x14322=(cj2*sj1);
IkReal x14323=(gconst52*sj3);
IkReal x14324=(cj2*x14318);
IkReal x14325=((1.0)*x14316);
IkReal x14326=((1.0)*x14315);
IkReal x14327=(gconst52*x14315);
IkReal x14328=(cj3*x14315);
evalcond[0]=(((r21*x14327))+(((-1.0)*r22*x14325))+(((-1.0)*gconst53*r20*x14326)));
evalcond[1]=((((-1.0)*gconst53*r10*x14326))+((r11*x14327))+(((-1.0)*r12*x14325)));
evalcond[2]=((-1.0)+(((-1.0)*gconst53*r00*x14326))+((r01*x14327))+(((-1.0)*r02*x14325)));
evalcond[3]=(((r00*x14323))+((r01*x14320))+((r02*x14328))+(((-1.0)*r00*x14321*x14325))+((r01*x14316*x14319)));
evalcond[4]=((((-1.0)*r01*x14323*x14325))+((r00*x14316*x14320))+((r01*x14321))+(((-1.0)*r02*sj3*x14326))+((r00*x14319)));
evalcond[5]=(((cj1*sj2))+((r21*x14316*x14319))+(((-1.0)*r20*x14321*x14325))+((r21*x14320))+((r20*x14323))+x14322+((r22*x14328)));
evalcond[6]=((((-1.0)*r10*x14321*x14325))+((r10*x14323))+((r11*x14320))+((r11*x14316*x14319))+(((-1.0)*x14324))+x14317+((r12*x14328)));
evalcond[7]=((((-1.0)*r22*sj3*x14326))+(((-1.0)*r21*x14323*x14325))+((r20*x14319))+((r21*x14321))+((r20*x14316*x14320))+(((-1.0)*x14324))+x14317);
evalcond[8]=((((-1.0)*r11*x14323*x14325))+(((-1.0)*sj2*x14318))+((r11*x14321))+((r10*x14316*x14320))+(((-1.0)*r12*sj3*x14326))+(((-1.0)*x14322))+((r10*x14319)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14329 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*gconst53*r10))+((gconst52*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14329.valid){
continue;
}
CheckValue<IkReal> x14330=IKPowWithIntegerCheck(IKsign((((gconst53*r21))+((gconst52*r20)))),-1);
if(!x14330.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14329.value)+(((1.5707963267949)*(x14330.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14331=IKsin(j4);
IkReal x14332=IKcos(j4);
IkReal x14333=(sj1*sj2);
IkReal x14334=((1.0)*cj1);
IkReal x14335=(cj3*gconst52);
IkReal x14336=(gconst53*sj3);
IkReal x14337=(cj3*gconst53);
IkReal x14338=(cj2*sj1);
IkReal x14339=(gconst52*sj3);
IkReal x14340=(cj2*x14334);
IkReal x14341=((1.0)*x14332);
IkReal x14342=((1.0)*x14331);
IkReal x14343=(gconst52*x14331);
IkReal x14344=(cj3*x14331);
evalcond[0]=((((-1.0)*gconst53*r20*x14342))+((r21*x14343))+(((-1.0)*r22*x14341)));
evalcond[1]=((((-1.0)*r12*x14341))+(((-1.0)*gconst53*r10*x14342))+((r11*x14343)));
evalcond[2]=((-1.0)+((r01*x14343))+(((-1.0)*gconst53*r00*x14342))+(((-1.0)*r02*x14341)));
evalcond[3]=(((r00*x14339))+((r01*x14336))+((r02*x14344))+(((-1.0)*r00*x14337*x14341))+((r01*x14332*x14335)));
evalcond[4]=((((-1.0)*r01*x14339*x14341))+(((-1.0)*r02*sj3*x14342))+((r00*x14335))+((r01*x14337))+((r00*x14332*x14336)));
evalcond[5]=(((r20*x14339))+((cj1*sj2))+((r21*x14332*x14335))+((r22*x14344))+x14338+(((-1.0)*r20*x14337*x14341))+((r21*x14336)));
evalcond[6]=(((r11*x14332*x14335))+((r11*x14336))+(((-1.0)*r10*x14337*x14341))+((r12*x14344))+((r10*x14339))+(((-1.0)*x14340))+x14333);
evalcond[7]=(((r20*x14335))+(((-1.0)*r21*x14339*x14341))+(((-1.0)*x14340))+((r20*x14332*x14336))+x14333+((r21*x14337))+(((-1.0)*r22*sj3*x14342)));
evalcond[8]=((((-1.0)*sj2*x14334))+((r11*x14337))+(((-1.0)*x14338))+(((-1.0)*r12*sj3*x14342))+((r10*x14332*x14336))+((r10*x14335))+(((-1.0)*r11*x14339*x14341)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x14345=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x14345);
rxp1_0=(pz*r11);
rxp1_1=(r01*x14345);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x14346=(r01*sj5);
IkReal x14347=((1.0)*cj5*r00);
j4eval[0]=((((-1.0)*x14347))+x14346);
j4eval[1]=(((cj3*x14346))+(((-1.0)*cj3*x14347)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x14348=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x14348);
rxp1_0=(pz*r11);
rxp1_1=(r01*x14348);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x14349=(cj5*r00);
IkReal x14350=(r01*sj5);
j4eval[0]=((((-1.0)*x14349))+x14350);
j4eval[1]=((((-1.0)*sj3*x14350))+((sj3*x14349)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x14351=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x14351);
rxp1_0=(pz*r11);
rxp1_1=(r01*x14351);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=cj3;
j4eval[1]=r22;
j4eval[2]=(((cj3*r01*sj5))+(((-1.0)*cj3*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14352=((1.0)*r00);
CheckValue<IkReal> x14353=IKPowWithIntegerCheck(cj3,-1);
if(!x14353.valid){
continue;
}
CheckValue<IkReal> x14354=IKPowWithIntegerCheck(r22,-1);
if(!x14354.valid){
continue;
}
CheckValue<IkReal> x14355=IKPowWithIntegerCheck((((cj3*r01*sj5))+(((-1.0)*cj3*cj5*x14352))),-1);
if(!x14355.valid){
continue;
}
if( IKabs(((x14353.value)*(x14354.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14355.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x14352)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14353.value)*(x14354.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))))+IKsqr(((x14355.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x14352))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x14353.value)*(x14354.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))), ((x14355.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x14352))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14356=IKsin(j4);
IkReal x14357=IKcos(j4);
IkReal x14358=(sj1*sj2);
IkReal x14359=(cj5*sj3);
IkReal x14360=(r11*sj5);
IkReal x14361=(cj3*cj5);
IkReal x14362=((1.0)*cj1);
IkReal x14363=(cj3*sj5);
IkReal x14364=(sj3*sj5);
IkReal x14365=(cj2*sj1);
IkReal x14366=(r01*sj5);
IkReal x14367=((1.0)*sj3);
IkReal x14368=(cj2*x14362);
IkReal x14369=(r10*x14357);
IkReal x14370=(r22*x14356);
IkReal x14371=(cj3*x14357);
IkReal x14372=((1.0)*cj5*x14356);
evalcond[0]=((-1.0)*r22*x14357);
evalcond[1]=(((cj1*sj2))+((cj3*x14370))+x14365);
evalcond[2]=(((x14356*x14360))+(((-1.0)*r10*x14372)));
evalcond[3]=((-1.0)+((x14356*x14366))+(((-1.0)*r00*x14372)));
evalcond[4]=((((-1.0)*x14368))+(((-1.0)*x14367*x14370))+x14358);
evalcond[5]=((((-1.0)*r00*x14357*x14361))+((r01*x14359))+((r01*x14357*x14363))+((r00*x14364)));
evalcond[6]=((((-1.0)*r01*x14357*x14364))+((r01*x14361))+((r00*x14357*x14359))+((r00*x14363)));
evalcond[7]=(((r10*x14364))+((r11*x14359))+(((-1.0)*x14368))+(((-1.0)*x14361*x14369))+x14358+((x14360*x14371)));
evalcond[8]=(((r10*x14363))+((r11*x14361))+(((-1.0)*sj2*x14362))+(((-1.0)*x14357*x14360*x14367))+(((-1.0)*x14365))+((x14359*x14369)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14373=((1.0)*cj3);
IkReal x14374=(cj5*r00);
IkReal x14375=(r01*sj5);
CheckValue<IkReal> x14376=IKPowWithIntegerCheck(((((-1.0)*x14374))+x14375),-1);
if(!x14376.valid){
continue;
}
CheckValue<IkReal> x14377=IKPowWithIntegerCheck(((((-1.0)*sj3*x14375))+((sj3*x14374))),-1);
if(!x14377.valid){
continue;
}
if( IKabs(x14376.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14377.value)*(((((-1.0)*r00*sj5*x14373))+(((-1.0)*cj5*r01*x14373)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x14376.value)+IKsqr(((x14377.value)*(((((-1.0)*r00*sj5*x14373))+(((-1.0)*cj5*r01*x14373))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x14376.value, ((x14377.value)*(((((-1.0)*r00*sj5*x14373))+(((-1.0)*cj5*r01*x14373))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14378=IKsin(j4);
IkReal x14379=IKcos(j4);
IkReal x14380=(sj1*sj2);
IkReal x14381=(cj5*sj3);
IkReal x14382=(r11*sj5);
IkReal x14383=(cj3*cj5);
IkReal x14384=((1.0)*cj1);
IkReal x14385=(cj3*sj5);
IkReal x14386=(sj3*sj5);
IkReal x14387=(cj2*sj1);
IkReal x14388=(r01*sj5);
IkReal x14389=((1.0)*sj3);
IkReal x14390=(cj2*x14384);
IkReal x14391=(r10*x14379);
IkReal x14392=(r22*x14378);
IkReal x14393=(cj3*x14379);
IkReal x14394=((1.0)*cj5*x14378);
evalcond[0]=((-1.0)*r22*x14379);
evalcond[1]=(((cj1*sj2))+((cj3*x14392))+x14387);
evalcond[2]=(((x14378*x14382))+(((-1.0)*r10*x14394)));
evalcond[3]=((-1.0)+((x14378*x14388))+(((-1.0)*r00*x14394)));
evalcond[4]=((((-1.0)*x14389*x14392))+x14380+(((-1.0)*x14390)));
evalcond[5]=((((-1.0)*r00*x14379*x14383))+((r00*x14386))+((r01*x14381))+((r01*x14379*x14385)));
evalcond[6]=(((r00*x14385))+((r01*x14383))+(((-1.0)*r01*x14379*x14386))+((r00*x14379*x14381)));
evalcond[7]=(((r10*x14386))+((r11*x14381))+((x14382*x14393))+x14380+(((-1.0)*x14383*x14391))+(((-1.0)*x14390)));
evalcond[8]=((((-1.0)*x14379*x14382*x14389))+(((-1.0)*x14387))+((r10*x14385))+((r11*x14383))+(((-1.0)*sj2*x14384))+((x14381*x14391)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14395=((1.0)*sj3);
IkReal x14396=(r01*sj5);
IkReal x14397=((1.0)*cj5*r00);
CheckValue<IkReal> x14398=IKPowWithIntegerCheck((x14396+(((-1.0)*x14397))),-1);
if(!x14398.valid){
continue;
}
CheckValue<IkReal> x14399=IKPowWithIntegerCheck((((cj3*x14396))+(((-1.0)*cj3*x14397))),-1);
if(!x14399.valid){
continue;
}
if( IKabs(x14398.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14399.value)*(((((-1.0)*r00*sj5*x14395))+(((-1.0)*cj5*r01*x14395)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x14398.value)+IKsqr(((x14399.value)*(((((-1.0)*r00*sj5*x14395))+(((-1.0)*cj5*r01*x14395))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x14398.value, ((x14399.value)*(((((-1.0)*r00*sj5*x14395))+(((-1.0)*cj5*r01*x14395))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14400=IKsin(j4);
IkReal x14401=IKcos(j4);
IkReal x14402=(sj1*sj2);
IkReal x14403=(cj5*sj3);
IkReal x14404=(r11*sj5);
IkReal x14405=(cj3*cj5);
IkReal x14406=((1.0)*cj1);
IkReal x14407=(cj3*sj5);
IkReal x14408=(sj3*sj5);
IkReal x14409=(cj2*sj1);
IkReal x14410=(r01*sj5);
IkReal x14411=((1.0)*sj3);
IkReal x14412=(cj2*x14406);
IkReal x14413=(r10*x14401);
IkReal x14414=(r22*x14400);
IkReal x14415=(cj3*x14401);
IkReal x14416=((1.0)*cj5*x14400);
evalcond[0]=((-1.0)*r22*x14401);
evalcond[1]=(((cj1*sj2))+((cj3*x14414))+x14409);
evalcond[2]=((((-1.0)*r10*x14416))+((x14400*x14404)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x14416))+((x14400*x14410)));
evalcond[4]=((((-1.0)*x14412))+x14402+(((-1.0)*x14411*x14414)));
evalcond[5]=(((r01*x14403))+((r00*x14408))+((r01*x14401*x14407))+(((-1.0)*r00*x14401*x14405)));
evalcond[6]=(((r00*x14401*x14403))+((r01*x14405))+((r00*x14407))+(((-1.0)*r01*x14401*x14408)));
evalcond[7]=(((x14404*x14415))+((r10*x14408))+(((-1.0)*x14412))+((r11*x14403))+x14402+(((-1.0)*x14405*x14413)));
evalcond[8]=(((r10*x14407))+(((-1.0)*x14409))+(((-1.0)*x14401*x14404*x14411))+((r11*x14405))+((x14403*x14413))+(((-1.0)*sj2*x14406)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14417=cj5*cj5;
IkReal x14418=(cj3*r20);
IkReal x14419=(r21*sj3);
IkReal x14420=((1.0)*cj3);
IkReal x14421=(r01*r21);
IkReal x14422=(r01*sj3);
IkReal x14423=(r00*sj5);
IkReal x14424=(cj5*r01*sj5);
IkReal x14425=((1.0)*x14417);
CheckValue<IkReal> x14426 = IKatan2WithCheck(IkReal((((cj5*r22*x14422))+((r22*sj3*x14423)))),IkReal(((((-1.0)*cj5*r20*sj3*x14423))+(((-1.0)*r00*x14419*x14425))+((r00*x14419))+((x14419*x14424))+(((-1.0)*r20*x14422*x14425)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14426.valid){
continue;
}
CheckValue<IkReal> x14427=IKPowWithIntegerCheck(IKsign((((cj3*cj5*r21*x14423))+(((-1.0)*x14420*x14421))+((x14418*x14424))+((cj3*x14417*x14421))+(((-1.0)*r00*x14418*x14425))+(((-1.0)*r02*r22*x14420)))),-1);
if(!x14427.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14426.value)+(((1.5707963267949)*(x14427.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14428=IKsin(j4);
IkReal x14429=IKcos(j4);
IkReal x14430=(sj1*sj2);
IkReal x14431=(r11*sj5);
IkReal x14432=(cj5*r10);
IkReal x14433=(cj5*r01);
IkReal x14434=(cj5*r00);
IkReal x14435=((1.0)*cj1);
IkReal x14436=(cj3*sj5);
IkReal x14437=(r21*sj5);
IkReal x14438=(cj5*sj3);
IkReal x14439=(sj3*sj5);
IkReal x14440=(cj2*sj1);
IkReal x14441=(r01*sj5);
IkReal x14442=(cj3*cj5);
IkReal x14443=(cj5*r20);
IkReal x14444=(cj2*x14435);
IkReal x14445=((1.0)*x14429);
IkReal x14446=((1.0)*x14428);
IkReal x14447=(cj3*x14429);
IkReal x14448=(sj3*x14429);
IkReal x14449=(cj3*x14428);
evalcond[0]=(((x14428*x14437))+(((-1.0)*r22*x14445))+(((-1.0)*x14443*x14446)));
evalcond[1]=(((x14428*x14431))+(((-1.0)*r12*x14445))+(((-1.0)*x14432*x14446)));
evalcond[2]=((-1.0)+(((-1.0)*x14434*x14446))+((x14428*x14441))+(((-1.0)*r02*x14445)));
evalcond[3]=((((-1.0)*cj3*x14434*x14445))+((r00*x14439))+((sj3*x14433))+((r02*x14449))+((r01*x14429*x14436)));
evalcond[4]=(((r00*x14436))+((x14434*x14448))+((cj3*x14433))+(((-1.0)*r01*x14439*x14445))+(((-1.0)*r02*sj3*x14446)));
evalcond[5]=(((r21*x14438))+((r20*x14439))+((cj1*sj2))+((r21*x14429*x14436))+x14440+((r22*x14449))+(((-1.0)*r20*x14442*x14445)));
evalcond[6]=(((x14431*x14447))+(((-1.0)*cj3*x14432*x14445))+(((-1.0)*x14444))+((r11*x14438))+((r12*x14449))+((r10*x14439))+x14430);
evalcond[7]=((((-1.0)*x14444))+(((-1.0)*sj3*x14437*x14445))+((r20*x14436))+(((-1.0)*r22*sj3*x14446))+x14430+((r21*x14442))+((r20*x14429*x14438)));
evalcond[8]=(((x14432*x14448))+(((-1.0)*sj2*x14435))+((r11*x14442))+((r10*x14436))+(((-1.0)*r12*sj3*x14446))+(((-1.0)*x14440))+(((-1.0)*sj3*x14431*x14445)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14450=((1.0)*cj5);
CheckValue<IkReal> x14451 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x14450)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14451.valid){
continue;
}
CheckValue<IkReal> x14452=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x14450))+(((-1.0)*r10*sj5)))),-1);
if(!x14452.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14451.value)+(((1.5707963267949)*(x14452.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14453=IKsin(j4);
IkReal x14454=IKcos(j4);
IkReal x14455=(sj1*sj2);
IkReal x14456=(r11*sj5);
IkReal x14457=(cj5*r10);
IkReal x14458=(cj5*r01);
IkReal x14459=(cj5*r00);
IkReal x14460=((1.0)*cj1);
IkReal x14461=(cj3*sj5);
IkReal x14462=(r21*sj5);
IkReal x14463=(cj5*sj3);
IkReal x14464=(sj3*sj5);
IkReal x14465=(cj2*sj1);
IkReal x14466=(r01*sj5);
IkReal x14467=(cj3*cj5);
IkReal x14468=(cj5*r20);
IkReal x14469=(cj2*x14460);
IkReal x14470=((1.0)*x14454);
IkReal x14471=((1.0)*x14453);
IkReal x14472=(cj3*x14454);
IkReal x14473=(sj3*x14454);
IkReal x14474=(cj3*x14453);
evalcond[0]=((((-1.0)*x14468*x14471))+(((-1.0)*r22*x14470))+((x14453*x14462)));
evalcond[1]=((((-1.0)*x14457*x14471))+(((-1.0)*r12*x14470))+((x14453*x14456)));
evalcond[2]=((-1.0)+(((-1.0)*x14459*x14471))+(((-1.0)*r02*x14470))+((x14453*x14466)));
evalcond[3]=((((-1.0)*cj3*x14459*x14470))+((r01*x14454*x14461))+((r00*x14464))+((r02*x14474))+((sj3*x14458)));
evalcond[4]=(((x14459*x14473))+((r00*x14461))+(((-1.0)*r02*sj3*x14471))+(((-1.0)*r01*x14464*x14470))+((cj3*x14458)));
evalcond[5]=(((r21*x14454*x14461))+((r21*x14463))+(((-1.0)*r20*x14467*x14470))+((cj1*sj2))+((r22*x14474))+x14465+((r20*x14464)));
evalcond[6]=(((x14456*x14472))+((r10*x14464))+((r11*x14463))+x14455+(((-1.0)*x14469))+((r12*x14474))+(((-1.0)*cj3*x14457*x14470)));
evalcond[7]=(((r20*x14454*x14463))+((r21*x14467))+(((-1.0)*r22*sj3*x14471))+(((-1.0)*sj3*x14462*x14470))+x14455+(((-1.0)*x14469))+((r20*x14461)));
evalcond[8]=(((x14457*x14473))+(((-1.0)*sj2*x14460))+((r10*x14461))+(((-1.0)*r12*sj3*x14471))+(((-1.0)*x14465))+((r11*x14467))+(((-1.0)*sj3*x14456*x14470)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14475=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x14475.valid){
continue;
}
CheckValue<IkReal> x14476 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14476.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14475.value)))+(x14476.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14477=IKsin(j4);
IkReal x14478=IKcos(j4);
IkReal x14479=(sj1*sj2);
IkReal x14480=(r11*sj5);
IkReal x14481=(cj5*r10);
IkReal x14482=(cj5*r01);
IkReal x14483=(cj5*r00);
IkReal x14484=((1.0)*cj1);
IkReal x14485=(cj3*sj5);
IkReal x14486=(r21*sj5);
IkReal x14487=(cj5*sj3);
IkReal x14488=(sj3*sj5);
IkReal x14489=(cj2*sj1);
IkReal x14490=(r01*sj5);
IkReal x14491=(cj3*cj5);
IkReal x14492=(cj5*r20);
IkReal x14493=(cj2*x14484);
IkReal x14494=((1.0)*x14478);
IkReal x14495=((1.0)*x14477);
IkReal x14496=(cj3*x14478);
IkReal x14497=(sj3*x14478);
IkReal x14498=(cj3*x14477);
evalcond[0]=((((-1.0)*r22*x14494))+((x14477*x14486))+(((-1.0)*x14492*x14495)));
evalcond[1]=((((-1.0)*x14481*x14495))+(((-1.0)*r12*x14494))+((x14477*x14480)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x14494))+(((-1.0)*x14483*x14495))+((x14477*x14490)));
evalcond[3]=(((r02*x14498))+((r01*x14478*x14485))+((r00*x14488))+(((-1.0)*cj3*x14483*x14494))+((sj3*x14482)));
evalcond[4]=(((cj3*x14482))+(((-1.0)*r02*sj3*x14495))+((r00*x14485))+(((-1.0)*r01*x14488*x14494))+((x14483*x14497)));
evalcond[5]=(((r21*x14487))+((cj1*sj2))+((r22*x14498))+x14489+(((-1.0)*r20*x14491*x14494))+((r20*x14488))+((r21*x14478*x14485)));
evalcond[6]=(((r10*x14488))+((r12*x14498))+(((-1.0)*cj3*x14481*x14494))+((x14480*x14496))+((r11*x14487))+(((-1.0)*x14493))+x14479);
evalcond[7]=(((r21*x14491))+(((-1.0)*x14493))+((r20*x14478*x14487))+x14479+(((-1.0)*sj3*x14486*x14494))+((r20*x14485))+(((-1.0)*r22*sj3*x14495)));
evalcond[8]=(((r10*x14485))+((r11*x14491))+(((-1.0)*x14489))+((x14481*x14497))+(((-1.0)*sj3*x14480*x14494))+(((-1.0)*sj2*x14484))+(((-1.0)*r12*sj3*x14495)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x14499=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x14499;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x14499);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x14500=((1.0)*cj5);
IkReal x14501=((((-1.0)*r21*x14500))+(((-1.0)*r20*sj5)));
j4eval[0]=x14501;
j4eval[1]=((IKabs((((r11*sj5))+(((-1.0)*r10*x14500)))))+(IKabs(r12)));
j4eval[2]=IKsign(x14501);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x14502=cj5*cj5;
IkReal x14503=(cj3*r01);
IkReal x14504=(cj5*sj5);
IkReal x14505=((1.0)*cj3);
IkReal x14506=((((-1.0)*r21*x14503))+((r21*x14502*x14503))+((r20*x14503*x14504))+((cj3*r00*r21*x14504))+(((-1.0)*r02*r22*x14505))+(((-1.0)*r00*r20*x14502*x14505)));
j4eval[0]=x14506;
j4eval[1]=IKsign(x14506);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x14507=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x14507;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x14507);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x14508=((1.0)*cj5);
IkReal x14509=((((-1.0)*r21*x14508))+(((-1.0)*r20*sj5)));
j4eval[0]=x14509;
j4eval[1]=((IKabs((((r11*sj5))+(((-1.0)*r10*x14508)))))+(IKabs(r12)));
j4eval[2]=IKsign(x14509);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x14510=cj5*cj5;
IkReal x14511=r01*r01;
IkReal x14512=(cj5*r00);
IkReal x14513=(r01*sj5);
IkReal x14514=((((-1.0)*x14510*x14511))+(((-2.0)*x14512*x14513))+x14511+((x14510*(r00*r00)))+(r02*r02));
j4eval[0]=x14514;
j4eval[1]=((IKabs(r02))+(IKabs((x14512+(((-1.0)*x14513))))));
j4eval[2]=IKsign(x14514);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14515=cj5*cj5;
IkReal x14516=r01*r01;
IkReal x14517=(r01*sj5);
IkReal x14518=(cj5*r00);
CheckValue<IkReal> x14519 = IKatan2WithCheck(IkReal((x14518+(((-1.0)*x14517)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x14519.valid){
continue;
}
CheckValue<IkReal> x14520=IKPowWithIntegerCheck(IKsign(((((-1.0)*x14515*x14516))+x14516+((x14515*(r00*r00)))+(((-2.0)*x14517*x14518))+(r02*r02))),-1);
if(!x14520.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14519.value)+(((1.5707963267949)*(x14520.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14521=IKsin(j4);
IkReal x14522=IKcos(j4);
IkReal x14523=(cj5*r10);
IkReal x14524=(r01*sj5);
IkReal x14525=(cj5*r00);
IkReal x14526=(cj5*r20);
IkReal x14527=((1.0)*x14522);
IkReal x14528=((1.0)*x14521);
IkReal x14529=(sj5*x14521);
evalcond[0]=((((-1.0)*r22*x14527))+(((-1.0)*x14526*x14528))+((r21*x14529)));
evalcond[1]=((((-1.0)*x14523*x14528))+((r11*x14529))+(((-1.0)*r12*x14527)));
evalcond[2]=(((x14522*x14525))+(((-1.0)*r02*x14528))+(((-1.0)*x14524*x14527)));
evalcond[3]=((1.0)+((x14521*x14524))+(((-1.0)*x14525*x14528))+(((-1.0)*r02*x14527)));
evalcond[4]=((((-1.0)*r11*sj5*x14527))+((cj2*sj1))+((cj1*sj2))+((x14522*x14523))+(((-1.0)*r12*x14528)));
evalcond[5]=((((-1.0)*r22*x14528))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x14522*x14526))+(((-1.0)*r21*sj5*x14527)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14530=((1.0)*cj5);
CheckValue<IkReal> x14531=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x14530))+(((-1.0)*r20*sj5)))),-1);
if(!x14531.valid){
continue;
}
CheckValue<IkReal> x14532 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x14530))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14532.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14531.value)))+(x14532.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14533=IKsin(j4);
IkReal x14534=IKcos(j4);
IkReal x14535=(cj5*r10);
IkReal x14536=(r01*sj5);
IkReal x14537=(cj5*r00);
IkReal x14538=(cj5*r20);
IkReal x14539=((1.0)*x14534);
IkReal x14540=((1.0)*x14533);
IkReal x14541=(sj5*x14533);
evalcond[0]=((((-1.0)*r22*x14539))+((r21*x14541))+(((-1.0)*x14538*x14540)));
evalcond[1]=((((-1.0)*x14535*x14540))+(((-1.0)*r12*x14539))+((r11*x14541)));
evalcond[2]=(((x14534*x14537))+(((-1.0)*r02*x14540))+(((-1.0)*x14536*x14539)));
evalcond[3]=((1.0)+(((-1.0)*r02*x14539))+((x14533*x14536))+(((-1.0)*x14537*x14540)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r12*x14540))+((cj1*sj2))+((x14534*x14535))+(((-1.0)*r11*sj5*x14539)));
evalcond[5]=((((-1.0)*r21*sj5*x14539))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x14534*x14538))+(((-1.0)*r22*x14540)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14542 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14542.valid){
continue;
}
CheckValue<IkReal> x14543=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x14543.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14542.value)+(((1.5707963267949)*(x14543.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14544=IKsin(j4);
IkReal x14545=IKcos(j4);
IkReal x14546=(cj5*r10);
IkReal x14547=(r01*sj5);
IkReal x14548=(cj5*r00);
IkReal x14549=(cj5*r20);
IkReal x14550=((1.0)*x14545);
IkReal x14551=((1.0)*x14544);
IkReal x14552=(sj5*x14544);
evalcond[0]=((((-1.0)*r22*x14550))+(((-1.0)*x14549*x14551))+((r21*x14552)));
evalcond[1]=((((-1.0)*x14546*x14551))+(((-1.0)*r12*x14550))+((r11*x14552)));
evalcond[2]=((((-1.0)*r02*x14551))+((x14545*x14548))+(((-1.0)*x14547*x14550)));
evalcond[3]=((1.0)+(((-1.0)*r02*x14550))+(((-1.0)*x14548*x14551))+((x14544*x14547)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r11*sj5*x14550))+((x14545*x14546))+(((-1.0)*r12*x14551)));
evalcond[5]=((((-1.0)*r22*x14551))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x14550))+((x14545*x14549)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x14553=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x14553;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x14553);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x14554=((1.0)*cj5);
IkReal x14555=((((-1.0)*r21*x14554))+(((-1.0)*r20*sj5)));
j4eval[0]=x14555;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x14554))))));
j4eval[2]=IKsign(x14555);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x14556=cj5*cj5;
IkReal x14557=r01*r01;
IkReal x14558=(r01*sj5);
IkReal x14559=(cj5*r00);
IkReal x14560=((((2.0)*x14558*x14559))+(((-1.0)*(r02*r02)))+(((-1.0)*x14556*(r00*r00)))+((x14556*x14557))+(((-1.0)*x14557)));
j4eval[0]=x14560;
j4eval[1]=IKsign(x14560);
j4eval[2]=((IKabs(r02))+(IKabs((x14558+(((-1.0)*x14559))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14561=cj5*cj5;
IkReal x14562=r01*r01;
IkReal x14563=(r01*sj5);
IkReal x14564=(cj5*r00);
CheckValue<IkReal> x14565=IKPowWithIntegerCheck(IKsign((((x14561*x14562))+(((-1.0)*x14561*(r00*r00)))+(((-1.0)*(r02*r02)))+(((-1.0)*x14562))+(((2.0)*x14563*x14564)))),-1);
if(!x14565.valid){
continue;
}
CheckValue<IkReal> x14566 = IKatan2WithCheck(IkReal((x14563+(((-1.0)*x14564)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x14566.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14565.value)))+(x14566.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14567=IKcos(j4);
IkReal x14568=IKsin(j4);
IkReal x14569=(cj5*r00);
IkReal x14570=(cj5*r10);
IkReal x14571=(r21*sj5);
IkReal x14572=(cj5*r20);
IkReal x14573=((1.0)*x14567);
IkReal x14574=((1.0)*x14568);
IkReal x14575=(sj5*x14568);
IkReal x14576=(sj5*x14567);
evalcond[0]=((((-1.0)*x14569*x14573))+((r02*x14568))+((r01*x14576)));
evalcond[1]=((((-1.0)*r22*x14573))+((x14568*x14571))+(((-1.0)*x14572*x14574)));
evalcond[2]=((((-1.0)*x14570*x14574))+(((-1.0)*r12*x14573))+((r11*x14575)));
evalcond[3]=((1.0)+(((-1.0)*r02*x14573))+(((-1.0)*x14569*x14574))+((r01*x14575)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x14570*x14573))+((cj1*sj2))+((r11*x14576))+((r12*x14568)));
evalcond[5]=(((x14567*x14571))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x14572*x14573))+((r22*x14568)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14577=((1.0)*cj5);
CheckValue<IkReal> x14578 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x14577)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14578.valid){
continue;
}
CheckValue<IkReal> x14579=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x14577))+(((-1.0)*r20*sj5)))),-1);
if(!x14579.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14578.value)+(((1.5707963267949)*(x14579.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14580=IKcos(j4);
IkReal x14581=IKsin(j4);
IkReal x14582=(cj5*r00);
IkReal x14583=(cj5*r10);
IkReal x14584=(r21*sj5);
IkReal x14585=(cj5*r20);
IkReal x14586=((1.0)*x14580);
IkReal x14587=((1.0)*x14581);
IkReal x14588=(sj5*x14581);
IkReal x14589=(sj5*x14580);
evalcond[0]=(((r02*x14581))+((r01*x14589))+(((-1.0)*x14582*x14586)));
evalcond[1]=(((x14581*x14584))+(((-1.0)*x14585*x14587))+(((-1.0)*r22*x14586)));
evalcond[2]=((((-1.0)*x14583*x14587))+(((-1.0)*r12*x14586))+((r11*x14588)));
evalcond[3]=((1.0)+(((-1.0)*r02*x14586))+((r01*x14588))+(((-1.0)*x14582*x14587)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x14583*x14586))+((cj1*sj2))+((r11*x14589))+((r12*x14581)));
evalcond[5]=(((x14580*x14584))+((r22*x14581))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x14585*x14586)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14590 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14590.valid){
continue;
}
CheckValue<IkReal> x14591=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x14591.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14590.value)+(((1.5707963267949)*(x14591.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14592=IKcos(j4);
IkReal x14593=IKsin(j4);
IkReal x14594=(cj5*r00);
IkReal x14595=(cj5*r10);
IkReal x14596=(r21*sj5);
IkReal x14597=(cj5*r20);
IkReal x14598=((1.0)*x14592);
IkReal x14599=((1.0)*x14593);
IkReal x14600=(sj5*x14593);
IkReal x14601=(sj5*x14592);
evalcond[0]=((((-1.0)*x14594*x14598))+((r01*x14601))+((r02*x14593)));
evalcond[1]=((((-1.0)*x14597*x14599))+((x14593*x14596))+(((-1.0)*r22*x14598)));
evalcond[2]=((((-1.0)*x14595*x14599))+(((-1.0)*r12*x14598))+((r11*x14600)));
evalcond[3]=((1.0)+(((-1.0)*r02*x14598))+(((-1.0)*x14594*x14599))+((r01*x14600)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x14595*x14598))+((cj1*sj2))+((r11*x14601))+((r12*x14593)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x14593))+(((-1.0)*x14597*x14598))+((x14592*x14596)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14603 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x14603)==0){
continue;
}
IkReal x14602=pow(x14603,-0.5);
CheckValue<IkReal> x14604 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x14604.valid){
continue;
}
IkReal gconst60=((-1.0)*(x14604.value));
IkReal gconst61=((-1.0)*r11*x14602);
IkReal gconst62=(r10*x14602);
CheckValue<IkReal> x14605 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x14605.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x14605.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x14608 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x14608.valid){
continue;
}
IkReal x14606=((-1.0)*(x14608.value));
IkReal x14607=x14602;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst61;
cj5=gconst62;
j5=x14606;
IkReal gconst60=x14606;
IkReal gconst61=((-1.0)*r11*x14607);
IkReal gconst62=(r10*x14607);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x14611 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x14611.valid){
continue;
}
IkReal x14609=((-1.0)*(x14611.value));
IkReal x14610=x14602;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst61;
cj5=gconst62;
j5=x14609;
IkReal gconst60=x14609;
IkReal gconst61=((-1.0)*r11*x14610);
IkReal gconst62=(r10*x14610);
CheckValue<IkReal> x14619=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r12*r12)))),-1);
if(!x14619.valid){
continue;
}
IkReal x14612=x14619.value;
IkReal x14613=(sj3*x14612);
IkReal x14614=(r20*x14613);
IkReal x14615=(r00*x14613);
IkReal x14616=(r01*x14613);
IkReal x14617=(r21*x14613);
IkReal x14618=(r10*r11*x14613);
j4eval[0]=IKsign((((r01*r10*r11*x14614))+((r10*r11*r21*x14615))+((r21*x14616*(r11*r11)))+((r00*x14614*(r10*r10)))+((r02*r22*sj3))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14620=gconst61*gconst61;
IkReal x14621=gconst62*gconst62;
IkReal x14622=(cj3*r01);
IkReal x14623=(r22*sj3);
IkReal x14624=(gconst61*r00);
IkReal x14625=((1.0)*cj3);
IkReal x14626=(gconst62*r01);
IkReal x14627=((1.0)*sj3);
IkReal x14628=(gconst61*gconst62*r20);
IkReal x14629=(r21*x14620);
IkReal x14630=(r20*x14621);
CheckValue<IkReal> x14631 = IKatan2WithCheck(IkReal((((x14623*x14624))+((x14623*x14626)))),IkReal((((gconst61*r21*sj3*x14626))+(((-1.0)*gconst62*r20*x14624*x14627))+((r00*sj3*x14629))+(((-1.0)*r01*x14627*x14630)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14631.valid){
continue;
}
CheckValue<IkReal> x14632=IKPowWithIntegerCheck(IKsign((((cj3*gconst62*r21*x14624))+((x14622*x14628))+(((-1.0)*r00*x14625*x14630))+(((-1.0)*x14622*x14629))+(((-1.0)*r02*r22*x14625)))),-1);
if(!x14632.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14631.value)+(((1.5707963267949)*(x14632.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14633=IKsin(j4);
IkReal x14634=IKcos(j4);
IkReal x14635=(cj2*sj1);
IkReal x14636=(cj1*sj2);
IkReal x14637=(gconst61*sj3);
IkReal x14638=(cj3*gconst61);
IkReal x14639=(cj3*gconst62);
IkReal x14640=(sj1*sj2);
IkReal x14641=(gconst62*sj3);
IkReal x14642=(cj1*cj2);
IkReal x14643=((1.0)*x14634);
IkReal x14644=((1.0)*x14633);
IkReal x14645=(gconst61*x14633);
IkReal x14646=(cj3*x14633);
IkReal x14647=(x14635+x14636);
evalcond[0]=((((-1.0)*r22*x14643))+(((-1.0)*gconst62*r20*x14644))+((r21*x14645)));
evalcond[1]=(((r11*x14645))+(((-1.0)*r12*x14643))+(((-1.0)*gconst62*r10*x14644)));
evalcond[2]=((1.0)+((r01*x14645))+(((-1.0)*gconst62*r00*x14644))+(((-1.0)*r02*x14643)));
evalcond[3]=((((-1.0)*r00*x14639*x14643))+((r01*x14641))+((r01*x14634*x14638))+((r00*x14637))+((r02*x14646)));
evalcond[4]=((((-1.0)*r02*sj3*x14644))+(((-1.0)*r01*x14637*x14643))+((r01*x14639))+((r00*x14638))+((r00*x14634*x14641)));
evalcond[5]=(((r21*x14634*x14638))+(((-1.0)*r20*x14639*x14643))+((r22*x14646))+((r20*x14637))+((r21*x14641))+x14647);
evalcond[6]=(((r11*x14641))+((r12*x14646))+(((-1.0)*x14640))+((r11*x14634*x14638))+(((-1.0)*r10*x14639*x14643))+((r10*x14637))+x14642);
evalcond[7]=(((r10*x14638))+(((-1.0)*r12*sj3*x14644))+((r10*x14634*x14641))+((r11*x14639))+x14647+(((-1.0)*r11*x14637*x14643)));
evalcond[8]=((((-1.0)*x14642))+((r20*x14638))+((r20*x14634*x14641))+x14640+(((-1.0)*r22*sj3*x14644))+((r21*x14639))+(((-1.0)*r21*x14637*x14643)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14648=gconst61*gconst61;
IkReal x14649=gconst62*gconst62;
IkReal x14650=(cj3*r22);
IkReal x14651=(gconst62*r01);
IkReal x14652=(gconst61*r00);
IkReal x14653=((1.0)*r20);
IkReal x14654=(cj3*r21);
IkReal x14655=(r21*sj3);
CheckValue<IkReal> x14656=IKPowWithIntegerCheck(IKsign((((r00*r20*sj3*x14649))+((r01*x14648*x14655))+(((-1.0)*gconst61*sj3*x14651*x14653))+((r02*r22*sj3))+(((-1.0)*gconst62*x14652*x14655)))),-1);
if(!x14656.valid){
continue;
}
CheckValue<IkReal> x14657 = IKatan2WithCheck(IkReal((((x14650*x14651))+((x14650*x14652)))),IkReal(((((-1.0)*cj3*gconst62*x14652*x14653))+((gconst61*x14651*x14654))+((r00*x14648*x14654))+(((-1.0)*cj3*r01*x14649*x14653)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14657.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14656.value)))+(x14657.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14658=IKsin(j4);
IkReal x14659=IKcos(j4);
IkReal x14660=(cj2*sj1);
IkReal x14661=(cj1*sj2);
IkReal x14662=(gconst61*sj3);
IkReal x14663=(cj3*gconst61);
IkReal x14664=(cj3*gconst62);
IkReal x14665=(sj1*sj2);
IkReal x14666=(gconst62*sj3);
IkReal x14667=(cj1*cj2);
IkReal x14668=((1.0)*x14659);
IkReal x14669=((1.0)*x14658);
IkReal x14670=(gconst61*x14658);
IkReal x14671=(cj3*x14658);
IkReal x14672=(x14660+x14661);
evalcond[0]=((((-1.0)*r22*x14668))+((r21*x14670))+(((-1.0)*gconst62*r20*x14669)));
evalcond[1]=((((-1.0)*r12*x14668))+(((-1.0)*gconst62*r10*x14669))+((r11*x14670)));
evalcond[2]=((1.0)+(((-1.0)*gconst62*r00*x14669))+((r01*x14670))+(((-1.0)*r02*x14668)));
evalcond[3]=(((r02*x14671))+((r01*x14659*x14663))+((r00*x14662))+((r01*x14666))+(((-1.0)*r00*x14664*x14668)));
evalcond[4]=((((-1.0)*r01*x14662*x14668))+((r00*x14663))+((r00*x14659*x14666))+((r01*x14664))+(((-1.0)*r02*sj3*x14669)));
evalcond[5]=(((r21*x14666))+x14672+((r22*x14671))+(((-1.0)*r20*x14664*x14668))+((r21*x14659*x14663))+((r20*x14662)));
evalcond[6]=(((r10*x14662))+(((-1.0)*x14665))+x14667+((r11*x14666))+((r12*x14671))+((r11*x14659*x14663))+(((-1.0)*r10*x14664*x14668)));
evalcond[7]=(((r10*x14659*x14666))+((r10*x14663))+(((-1.0)*r11*x14662*x14668))+(((-1.0)*r12*sj3*x14669))+x14672+((r11*x14664)));
evalcond[8]=(((r20*x14659*x14666))+(((-1.0)*r22*sj3*x14669))+((r21*x14664))+(((-1.0)*x14667))+x14665+(((-1.0)*r21*x14662*x14668))+((r20*x14663)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14673=((1.0)*gconst62);
CheckValue<IkReal> x14674=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst61*r20))+(((-1.0)*r21*x14673)))),-1);
if(!x14674.valid){
continue;
}
CheckValue<IkReal> x14675 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x14673))+((gconst61*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14675.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14674.value)))+(x14675.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14676=IKsin(j4);
IkReal x14677=IKcos(j4);
IkReal x14678=(cj2*sj1);
IkReal x14679=(cj1*sj2);
IkReal x14680=(gconst61*sj3);
IkReal x14681=(cj3*gconst61);
IkReal x14682=(cj3*gconst62);
IkReal x14683=(sj1*sj2);
IkReal x14684=(gconst62*sj3);
IkReal x14685=(cj1*cj2);
IkReal x14686=((1.0)*x14677);
IkReal x14687=((1.0)*x14676);
IkReal x14688=(gconst61*x14676);
IkReal x14689=(cj3*x14676);
IkReal x14690=(x14679+x14678);
evalcond[0]=((((-1.0)*r22*x14686))+(((-1.0)*gconst62*r20*x14687))+((r21*x14688)));
evalcond[1]=((((-1.0)*gconst62*r10*x14687))+((r11*x14688))+(((-1.0)*r12*x14686)));
evalcond[2]=((1.0)+((r01*x14688))+(((-1.0)*r02*x14686))+(((-1.0)*gconst62*r00*x14687)));
evalcond[3]=(((r00*x14680))+((r01*x14684))+((r02*x14689))+((r01*x14677*x14681))+(((-1.0)*r00*x14682*x14686)));
evalcond[4]=(((r00*x14681))+((r01*x14682))+(((-1.0)*r02*sj3*x14687))+((r00*x14677*x14684))+(((-1.0)*r01*x14680*x14686)));
evalcond[5]=(((r21*x14677*x14681))+((r20*x14680))+x14690+(((-1.0)*r20*x14682*x14686))+((r21*x14684))+((r22*x14689)));
evalcond[6]=(((r11*x14684))+((r11*x14677*x14681))+((r12*x14689))+x14685+(((-1.0)*r10*x14682*x14686))+((r10*x14680))+(((-1.0)*x14683)));
evalcond[7]=((((-1.0)*r12*sj3*x14687))+((r11*x14682))+(((-1.0)*r11*x14680*x14686))+x14690+((r10*x14677*x14684))+((r10*x14681)));
evalcond[8]=(((r20*x14677*x14684))+(((-1.0)*r21*x14680*x14686))+((r20*x14681))+(((-1.0)*r22*sj3*x14687))+x14683+((r21*x14682))+(((-1.0)*x14685)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14692 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x14692)==0){
continue;
}
IkReal x14691=pow(x14692,-0.5);
CheckValue<IkReal> x14693 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x14693.valid){
continue;
}
IkReal gconst63=((3.14159265358979)+(((-1.0)*(x14693.value))));
IkReal gconst64=((1.0)*r11*x14691);
IkReal gconst65=((-1.0)*r10*x14691);
CheckValue<IkReal> x14694 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x14694.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x14694.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x14697 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x14697.valid){
continue;
}
IkReal x14695=((1.0)*(x14697.value));
IkReal x14696=x14691;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst64;
cj5=gconst65;
j5=((3.14159265)+(((-1.0)*x14695)));
IkReal gconst63=((3.14159265358979)+(((-1.0)*x14695)));
IkReal gconst64=((1.0)*r11*x14696);
IkReal gconst65=((-1.0)*r10*x14696);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14698=gconst64*gconst64;
IkReal x14699=gconst65*gconst65;
IkReal x14700=(gconst65*r01);
IkReal x14701=(cj3*r22);
IkReal x14702=(gconst64*r00);
IkReal x14703=(cj3*r21);
IkReal x14704=((1.0)*gconst64*sj3);
IkReal x14705=((1.0)*cj3*r20);
CheckValue<IkReal> x14706=IKPowWithIntegerCheck(IKsign((((r01*r21*sj3*x14698))+((r00*r20*sj3*x14699))+(((-1.0)*gconst65*r21*sj3*x14702))+(((-1.0)*r20*x14700*x14704))+((r02*r22*sj3)))),-1);
if(!x14706.valid){
continue;
}
CheckValue<IkReal> x14707 = IKatan2WithCheck(IkReal((((x14701*x14702))+((x14700*x14701)))),IkReal((((gconst64*x14700*x14703))+(((-1.0)*gconst65*x14702*x14705))+((r00*x14698*x14703))+(((-1.0)*r01*x14699*x14705)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14707.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14706.value)))+(x14707.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14708=IKsin(j4);
IkReal x14709=IKcos(j4);
IkReal x14710=(cj2*sj1);
IkReal x14711=(cj1*sj2);
IkReal x14712=(cj3*gconst64);
IkReal x14713=(gconst65*r21);
IkReal x14714=(sj1*sj2);
IkReal x14715=(gconst65*sj3);
IkReal x14716=(gconst64*sj3);
IkReal x14717=(cj3*gconst65);
IkReal x14718=(cj1*cj2);
IkReal x14719=((1.0)*x14709);
IkReal x14720=((1.0)*x14708);
IkReal x14721=(cj3*x14708);
IkReal x14722=(gconst64*x14708);
IkReal x14723=(x14710+x14711);
evalcond[0]=(((r21*x14722))+(((-1.0)*r22*x14719))+(((-1.0)*gconst65*r20*x14720)));
evalcond[1]=(((r11*x14722))+(((-1.0)*r12*x14719))+(((-1.0)*gconst65*r10*x14720)));
evalcond[2]=((1.0)+((r01*x14722))+(((-1.0)*r02*x14719))+(((-1.0)*gconst65*r00*x14720)));
evalcond[3]=((((-1.0)*r00*x14717*x14719))+((r02*x14721))+((r01*x14709*x14712))+((r00*x14716))+((r01*x14715)));
evalcond[4]=(((r00*x14709*x14715))+(((-1.0)*r01*x14716*x14719))+(((-1.0)*r02*sj3*x14720))+((r00*x14712))+((r01*x14717)));
evalcond[5]=(((r20*x14716))+((sj3*x14713))+(((-1.0)*r20*x14717*x14719))+((r22*x14721))+x14723+((r21*x14709*x14712)));
evalcond[6]=(((r11*x14715))+((r10*x14716))+(((-1.0)*x14714))+x14718+((r11*x14709*x14712))+(((-1.0)*r10*x14717*x14719))+((r12*x14721)));
evalcond[7]=(((r11*x14717))+(((-1.0)*r12*sj3*x14720))+((r10*x14712))+x14723+(((-1.0)*r11*x14716*x14719))+((r10*x14709*x14715)));
evalcond[8]=(((r20*x14712))+((cj3*x14713))+(((-1.0)*r21*x14716*x14719))+(((-1.0)*r22*sj3*x14720))+(((-1.0)*x14718))+x14714+((r20*x14709*x14715)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14724=((1.0)*gconst65);
CheckValue<IkReal> x14725=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x14724))+(((-1.0)*gconst64*r20)))),-1);
if(!x14725.valid){
continue;
}
CheckValue<IkReal> x14726 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst64*r11))+(((-1.0)*r10*x14724)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14726.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14725.value)))+(x14726.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14727=IKsin(j4);
IkReal x14728=IKcos(j4);
IkReal x14729=(cj2*sj1);
IkReal x14730=(cj1*sj2);
IkReal x14731=(cj3*gconst64);
IkReal x14732=(gconst65*r21);
IkReal x14733=(sj1*sj2);
IkReal x14734=(gconst65*sj3);
IkReal x14735=(gconst64*sj3);
IkReal x14736=(cj3*gconst65);
IkReal x14737=(cj1*cj2);
IkReal x14738=((1.0)*x14728);
IkReal x14739=((1.0)*x14727);
IkReal x14740=(cj3*x14727);
IkReal x14741=(gconst64*x14727);
IkReal x14742=(x14729+x14730);
evalcond[0]=(((r21*x14741))+(((-1.0)*r22*x14738))+(((-1.0)*gconst65*r20*x14739)));
evalcond[1]=((((-1.0)*gconst65*r10*x14739))+(((-1.0)*r12*x14738))+((r11*x14741)));
evalcond[2]=((1.0)+((r01*x14741))+(((-1.0)*gconst65*r00*x14739))+(((-1.0)*r02*x14738)));
evalcond[3]=(((r01*x14734))+((r00*x14735))+((r01*x14728*x14731))+((r02*x14740))+(((-1.0)*r00*x14736*x14738)));
evalcond[4]=(((r01*x14736))+((r00*x14731))+((r00*x14728*x14734))+(((-1.0)*r02*sj3*x14739))+(((-1.0)*r01*x14735*x14738)));
evalcond[5]=(((r22*x14740))+((r20*x14735))+(((-1.0)*r20*x14736*x14738))+((r21*x14728*x14731))+((sj3*x14732))+x14742);
evalcond[6]=((((-1.0)*r10*x14736*x14738))+((r10*x14735))+(((-1.0)*x14733))+((r12*x14740))+((r11*x14728*x14731))+x14737+((r11*x14734)));
evalcond[7]=(((r10*x14731))+(((-1.0)*r11*x14735*x14738))+(((-1.0)*r12*sj3*x14739))+x14742+((r11*x14736))+((r10*x14728*x14734)));
evalcond[8]=((((-1.0)*x14737))+((r20*x14731))+(((-1.0)*r21*x14735*x14738))+(((-1.0)*r22*sj3*x14739))+((cj3*x14732))+x14733+((r20*x14728*x14734)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x14743=((-1.0)*py);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x14743);
rxp0_2=(py*r00);
rxp1_0=(r21*x14743);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal x14744=(r01*sj5);
IkReal x14745=((1.0)*cj5*r00);
j4eval[0]=((((-1.0)*x14745))+x14744);
j4eval[1]=((((-1.0)*cj3*x14745))+((cj3*x14744)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x14746=((-1.0)*py);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x14746);
rxp0_2=(py*r00);
rxp1_0=(r21*x14746);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal x14747=(cj5*r00);
IkReal x14748=(r01*sj5);
j4eval[0]=((((-1.0)*x14747))+x14748);
j4eval[1]=(((sj3*x14747))+(((-1.0)*sj3*x14748)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x14749=((-1.0)*py);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x14749);
rxp0_2=(py*r00);
rxp1_0=(r21*x14749);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=cj3;
j4eval[1]=r12;
j4eval[2]=(((cj3*r01*sj5))+(((-1.0)*cj3*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14750=((1.0)*r00);
CheckValue<IkReal> x14751=IKPowWithIntegerCheck(cj3,-1);
if(!x14751.valid){
continue;
}
CheckValue<IkReal> x14752=IKPowWithIntegerCheck(r12,-1);
if(!x14752.valid){
continue;
}
CheckValue<IkReal> x14753=IKPowWithIntegerCheck((((cj3*r01*sj5))+(((-1.0)*cj3*cj5*x14750))),-1);
if(!x14753.valid){
continue;
}
if( IKabs(((x14751.value)*(x14752.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14753.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x14750)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14751.value)*(x14752.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x14753.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x14750))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x14751.value)*(x14752.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x14753.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x14750))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14754=IKsin(j4);
IkReal x14755=IKcos(j4);
IkReal x14756=(cj2*sj1);
IkReal x14757=(cj1*sj2);
IkReal x14758=(sj1*sj2);
IkReal x14759=(cj5*sj3);
IkReal x14760=(cj3*cj5);
IkReal x14761=(r21*sj5);
IkReal x14762=(cj1*cj2);
IkReal x14763=(r00*sj5);
IkReal x14764=(r01*sj5);
IkReal x14765=(r20*sj5);
IkReal x14766=((1.0)*x14754);
IkReal x14767=(r20*x14755);
IkReal x14768=(r00*x14755);
IkReal x14769=(cj3*x14755);
IkReal x14770=(x14756+x14757);
IkReal x14771=((1.0)*sj3*x14755);
evalcond[0]=((-1.0)*r12*x14755);
evalcond[1]=(((x14754*x14761))+(((-1.0)*cj5*r20*x14766)));
evalcond[2]=(((cj3*r12*x14754))+x14762+(((-1.0)*x14758)));
evalcond[3]=((((-1.0)*r12*sj3*x14766))+x14770);
evalcond[4]=((1.0)+((x14754*x14764))+(((-1.0)*cj5*r00*x14766)));
evalcond[5]=(((x14764*x14769))+(((-1.0)*x14760*x14768))+((sj3*x14763))+((r01*x14759)));
evalcond[6]=(((r01*x14760))+((cj3*x14763))+(((-1.0)*x14764*x14771))+((x14759*x14768)));
evalcond[7]=(((x14761*x14769))+(((-1.0)*x14760*x14767))+x14770+((sj3*x14765))+((r21*x14759)));
evalcond[8]=((((-1.0)*x14762))+((cj3*x14765))+(((-1.0)*x14761*x14771))+((r21*x14760))+x14758+((x14759*x14767)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14772=((1.0)*r01);
IkReal x14773=(cj5*r00);
CheckValue<IkReal> x14774=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*x14773))),-1);
if(!x14774.valid){
continue;
}
CheckValue<IkReal> x14775=IKPowWithIntegerCheck((((sj3*x14773))+(((-1.0)*sj3*sj5*x14772))),-1);
if(!x14775.valid){
continue;
}
if( IKabs(((-1.0)*(x14774.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14775.value)*(((((-1.0)*cj3*cj5*x14772))+(((-1.0)*cj3*r00*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x14774.value)))+IKsqr(((x14775.value)*(((((-1.0)*cj3*cj5*x14772))+(((-1.0)*cj3*r00*sj5))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x14774.value)), ((x14775.value)*(((((-1.0)*cj3*cj5*x14772))+(((-1.0)*cj3*r00*sj5))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14776=IKsin(j4);
IkReal x14777=IKcos(j4);
IkReal x14778=(cj2*sj1);
IkReal x14779=(cj1*sj2);
IkReal x14780=(sj1*sj2);
IkReal x14781=(cj5*sj3);
IkReal x14782=(cj3*cj5);
IkReal x14783=(r21*sj5);
IkReal x14784=(cj1*cj2);
IkReal x14785=(r00*sj5);
IkReal x14786=(r01*sj5);
IkReal x14787=(r20*sj5);
IkReal x14788=((1.0)*x14776);
IkReal x14789=(r20*x14777);
IkReal x14790=(r00*x14777);
IkReal x14791=(cj3*x14777);
IkReal x14792=(x14778+x14779);
IkReal x14793=((1.0)*sj3*x14777);
evalcond[0]=((-1.0)*r12*x14777);
evalcond[1]=((((-1.0)*cj5*r20*x14788))+((x14776*x14783)));
evalcond[2]=(((cj3*r12*x14776))+(((-1.0)*x14780))+x14784);
evalcond[3]=((((-1.0)*r12*sj3*x14788))+x14792);
evalcond[4]=((1.0)+(((-1.0)*cj5*r00*x14788))+((x14776*x14786)));
evalcond[5]=(((r01*x14781))+(((-1.0)*x14782*x14790))+((x14786*x14791))+((sj3*x14785)));
evalcond[6]=(((r01*x14782))+(((-1.0)*x14786*x14793))+((cj3*x14785))+((x14781*x14790)));
evalcond[7]=(((x14783*x14791))+(((-1.0)*x14782*x14789))+((r21*x14781))+x14792+((sj3*x14787)));
evalcond[8]=((((-1.0)*x14784))+(((-1.0)*x14783*x14793))+((cj3*x14787))+((r21*x14782))+((x14781*x14789))+x14780);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14794=((1.0)*r00);
IkReal x14795=(r01*sj5);
CheckValue<IkReal> x14796=IKPowWithIntegerCheck((x14795+(((-1.0)*cj5*x14794))),-1);
if(!x14796.valid){
continue;
}
CheckValue<IkReal> x14797=IKPowWithIntegerCheck(((((-1.0)*cj3*cj5*x14794))+((cj3*x14795))),-1);
if(!x14797.valid){
continue;
}
if( IKabs(((-1.0)*(x14796.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14797.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x14794)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x14796.value)))+IKsqr(((x14797.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x14794))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x14796.value)), ((x14797.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x14794))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14798=IKsin(j4);
IkReal x14799=IKcos(j4);
IkReal x14800=(cj2*sj1);
IkReal x14801=(cj1*sj2);
IkReal x14802=(sj1*sj2);
IkReal x14803=(cj5*sj3);
IkReal x14804=(cj3*cj5);
IkReal x14805=(r21*sj5);
IkReal x14806=(cj1*cj2);
IkReal x14807=(r00*sj5);
IkReal x14808=(r01*sj5);
IkReal x14809=(r20*sj5);
IkReal x14810=((1.0)*x14798);
IkReal x14811=(r20*x14799);
IkReal x14812=(r00*x14799);
IkReal x14813=(cj3*x14799);
IkReal x14814=(x14800+x14801);
IkReal x14815=((1.0)*sj3*x14799);
evalcond[0]=((-1.0)*r12*x14799);
evalcond[1]=(((x14798*x14805))+(((-1.0)*cj5*r20*x14810)));
evalcond[2]=(((cj3*r12*x14798))+x14806+(((-1.0)*x14802)));
evalcond[3]=(x14814+(((-1.0)*r12*sj3*x14810)));
evalcond[4]=((1.0)+(((-1.0)*cj5*r00*x14810))+((x14798*x14808)));
evalcond[5]=(((sj3*x14807))+((x14808*x14813))+(((-1.0)*x14804*x14812))+((r01*x14803)));
evalcond[6]=(((cj3*x14807))+((r01*x14804))+(((-1.0)*x14808*x14815))+((x14803*x14812)));
evalcond[7]=(((sj3*x14809))+((r21*x14803))+x14814+(((-1.0)*x14804*x14811))+((x14805*x14813)));
evalcond[8]=(((cj3*x14809))+((r21*x14804))+x14802+(((-1.0)*x14806))+(((-1.0)*x14805*x14815))+((x14803*x14811)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14816=cj5*cj5;
IkReal x14817=(cj3*r20);
IkReal x14818=(r21*sj3);
IkReal x14819=((1.0)*cj3);
IkReal x14820=(r01*r21);
IkReal x14821=(r01*sj3);
IkReal x14822=(r00*sj5);
IkReal x14823=(cj5*r01*sj5);
IkReal x14824=((1.0)*x14816);
CheckValue<IkReal> x14825 = IKatan2WithCheck(IkReal((((cj5*r22*x14821))+((r22*sj3*x14822)))),IkReal((((r00*x14818))+((x14818*x14823))+(((-1.0)*r20*x14821*x14824))+(((-1.0)*cj5*r20*sj3*x14822))+(((-1.0)*r00*x14818*x14824)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14825.valid){
continue;
}
CheckValue<IkReal> x14826=IKPowWithIntegerCheck(IKsign(((((-1.0)*x14819*x14820))+((cj3*x14816*x14820))+((x14817*x14823))+((cj3*cj5*r21*x14822))+(((-1.0)*r00*x14817*x14824))+(((-1.0)*r02*r22*x14819)))),-1);
if(!x14826.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14825.value)+(((1.5707963267949)*(x14826.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14827=IKsin(j4);
IkReal x14828=IKcos(j4);
IkReal x14829=(cj2*sj1);
IkReal x14830=(cj1*sj2);
IkReal x14831=(r11*sj5);
IkReal x14832=(cj5*r10);
IkReal x14833=(sj1*sj2);
IkReal x14834=(cj5*r01);
IkReal x14835=(cj5*r00);
IkReal x14836=(cj3*sj5);
IkReal x14837=(r21*sj5);
IkReal x14838=(cj1*cj2);
IkReal x14839=(cj5*sj3);
IkReal x14840=(sj3*sj5);
IkReal x14841=(r01*sj5);
IkReal x14842=(cj3*cj5);
IkReal x14843=(cj5*r20);
IkReal x14844=((1.0)*x14828);
IkReal x14845=((1.0)*x14827);
IkReal x14846=(cj3*x14828);
IkReal x14847=(sj3*x14828);
IkReal x14848=(cj3*x14827);
IkReal x14849=(x14829+x14830);
evalcond[0]=((((-1.0)*x14843*x14845))+((x14827*x14837))+(((-1.0)*r22*x14844)));
evalcond[1]=((((-1.0)*x14832*x14845))+((x14827*x14831))+(((-1.0)*r12*x14844)));
evalcond[2]=((1.0)+(((-1.0)*x14835*x14845))+(((-1.0)*r02*x14844))+((x14827*x14841)));
evalcond[3]=(((r02*x14848))+((r01*x14828*x14836))+(((-1.0)*cj3*x14835*x14844))+((r00*x14840))+((sj3*x14834)));
evalcond[4]=((((-1.0)*r02*sj3*x14845))+((cj3*x14834))+(((-1.0)*r01*x14840*x14844))+((r00*x14836))+((x14835*x14847)));
evalcond[5]=(((r20*x14840))+x14849+(((-1.0)*r20*x14842*x14844))+((r21*x14839))+((r21*x14828*x14836))+((r22*x14848)));
evalcond[6]=((((-1.0)*x14833))+x14838+((x14831*x14846))+((r11*x14839))+((r12*x14848))+((r10*x14840))+(((-1.0)*cj3*x14832*x14844)));
evalcond[7]=(((x14832*x14847))+x14849+(((-1.0)*sj3*x14831*x14844))+((r11*x14842))+((r10*x14836))+(((-1.0)*r12*sj3*x14845)));
evalcond[8]=((((-1.0)*x14838))+x14833+((r20*x14828*x14839))+((r20*x14836))+(((-1.0)*sj3*x14837*x14844))+((r21*x14842))+(((-1.0)*r22*sj3*x14845)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14850=((1.0)*cj5);
CheckValue<IkReal> x14851=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x14850))+(((-1.0)*r20*sj5)))),-1);
if(!x14851.valid){
continue;
}
CheckValue<IkReal> x14852 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x14850))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14852.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14851.value)))+(x14852.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14853=IKsin(j4);
IkReal x14854=IKcos(j4);
IkReal x14855=(cj2*sj1);
IkReal x14856=(cj1*sj2);
IkReal x14857=(r11*sj5);
IkReal x14858=(cj5*r10);
IkReal x14859=(sj1*sj2);
IkReal x14860=(cj5*r01);
IkReal x14861=(cj5*r00);
IkReal x14862=(cj3*sj5);
IkReal x14863=(r21*sj5);
IkReal x14864=(cj1*cj2);
IkReal x14865=(cj5*sj3);
IkReal x14866=(sj3*sj5);
IkReal x14867=(r01*sj5);
IkReal x14868=(cj3*cj5);
IkReal x14869=(cj5*r20);
IkReal x14870=((1.0)*x14854);
IkReal x14871=((1.0)*x14853);
IkReal x14872=(cj3*x14854);
IkReal x14873=(sj3*x14854);
IkReal x14874=(cj3*x14853);
IkReal x14875=(x14855+x14856);
evalcond[0]=((((-1.0)*x14869*x14871))+(((-1.0)*r22*x14870))+((x14853*x14863)));
evalcond[1]=((((-1.0)*x14858*x14871))+((x14853*x14857))+(((-1.0)*r12*x14870)));
evalcond[2]=((1.0)+(((-1.0)*r02*x14870))+((x14853*x14867))+(((-1.0)*x14861*x14871)));
evalcond[3]=(((r01*x14854*x14862))+((sj3*x14860))+((r00*x14866))+(((-1.0)*cj3*x14861*x14870))+((r02*x14874)));
evalcond[4]=((((-1.0)*r01*x14866*x14870))+((x14861*x14873))+((r00*x14862))+(((-1.0)*r02*sj3*x14871))+((cj3*x14860)));
evalcond[5]=(((r22*x14874))+((r20*x14866))+((r21*x14854*x14862))+x14875+(((-1.0)*r20*x14868*x14870))+((r21*x14865)));
evalcond[6]=(((x14857*x14872))+((r12*x14874))+x14864+((r10*x14866))+(((-1.0)*cj3*x14858*x14870))+((r11*x14865))+(((-1.0)*x14859)));
evalcond[7]=(x14875+(((-1.0)*r12*sj3*x14871))+(((-1.0)*sj3*x14857*x14870))+((x14858*x14873))+((r10*x14862))+((r11*x14868)));
evalcond[8]=(((r20*x14854*x14865))+((r20*x14862))+(((-1.0)*r22*sj3*x14871))+x14859+((r21*x14868))+(((-1.0)*x14864))+(((-1.0)*sj3*x14863*x14870)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14876 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14876.valid){
continue;
}
CheckValue<IkReal> x14877=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x14877.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14876.value)+(((1.5707963267949)*(x14877.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14878=IKsin(j4);
IkReal x14879=IKcos(j4);
IkReal x14880=(cj2*sj1);
IkReal x14881=(cj1*sj2);
IkReal x14882=(r11*sj5);
IkReal x14883=(cj5*r10);
IkReal x14884=(sj1*sj2);
IkReal x14885=(cj5*r01);
IkReal x14886=(cj5*r00);
IkReal x14887=(cj3*sj5);
IkReal x14888=(r21*sj5);
IkReal x14889=(cj1*cj2);
IkReal x14890=(cj5*sj3);
IkReal x14891=(sj3*sj5);
IkReal x14892=(r01*sj5);
IkReal x14893=(cj3*cj5);
IkReal x14894=(cj5*r20);
IkReal x14895=((1.0)*x14879);
IkReal x14896=((1.0)*x14878);
IkReal x14897=(cj3*x14879);
IkReal x14898=(sj3*x14879);
IkReal x14899=(cj3*x14878);
IkReal x14900=(x14880+x14881);
evalcond[0]=((((-1.0)*r22*x14895))+((x14878*x14888))+(((-1.0)*x14894*x14896)));
evalcond[1]=(((x14878*x14882))+(((-1.0)*x14883*x14896))+(((-1.0)*r12*x14895)));
evalcond[2]=((1.0)+((x14878*x14892))+(((-1.0)*r02*x14895))+(((-1.0)*x14886*x14896)));
evalcond[3]=(((r02*x14899))+((r01*x14879*x14887))+((r00*x14891))+((sj3*x14885))+(((-1.0)*cj3*x14886*x14895)));
evalcond[4]=(((x14886*x14898))+((r00*x14887))+((cj3*x14885))+(((-1.0)*r02*sj3*x14896))+(((-1.0)*r01*x14891*x14895)));
evalcond[5]=(((r21*x14879*x14887))+x14900+((r21*x14890))+((r22*x14899))+(((-1.0)*r20*x14893*x14895))+((r20*x14891)));
evalcond[6]=(((r10*x14891))+((r12*x14899))+((r11*x14890))+x14889+(((-1.0)*cj3*x14883*x14895))+((x14882*x14897))+(((-1.0)*x14884)));
evalcond[7]=(((r10*x14887))+(((-1.0)*r12*sj3*x14896))+x14900+((r11*x14893))+(((-1.0)*sj3*x14882*x14895))+((x14883*x14898)));
evalcond[8]=(x14884+((r21*x14893))+((r20*x14887))+((r20*x14879*x14890))+(((-1.0)*x14889))+(((-1.0)*sj3*x14888*x14895))+(((-1.0)*r22*sj3*x14896)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x14901=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x14901);
rxp1_1=(px*r21);
rxp1_2=(r11*x14901);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x14902=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x14902);
rxp1_1=(px*r21);
rxp1_2=(r11*x14902);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x14903=((1.0)*cj5);
j4eval[0]=((((-1.0)*r10*x14903))+((r11*sj5)));
j4eval[1]=(((cj3*r21*sj5))+(((-1.0)*cj3*r20*x14903)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x14904=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x14904);
rxp1_1=(px*r21);
rxp1_2=(r11*x14904);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x14905=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x14905);
rxp1_1=(px*r21);
rxp1_2=(r11*x14905);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x14906=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x14906);
rxp1_1=(px*r21);
rxp1_2=(r11*x14906);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x14907=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x14907);
rxp1_1=(px*r21);
rxp1_2=(r11*x14907);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x14910=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x14910.valid){
continue;
}
IkReal x14908=x14910.value;
IkReal x14909=(sj0*x14908);
cj4array[0]=(((cj1*sj2*x14909))+((cj2*sj1*x14909)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x14911=IKsin(j4);
IkReal x14912=IKcos(j4);
IkReal x14913=(cj5*r20);
IkReal x14914=(r21*sj5);
IkReal x14915=((1.0)*x14911);
IkReal x14916=((1.0)*x14912);
evalcond[0]=((-1.0)*r02*x14911);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x14916)));
evalcond[2]=(((x14911*x14914))+(((-1.0)*x14913*x14915)));
evalcond[3]=(((r11*sj5*x14911))+(((-1.0)*cj5*r10*x14915)));
evalcond[4]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x14914*x14916))+((x14912*x14913)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x14918=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x14918.valid){
continue;
}
IkReal x14917=x14918.value;
cj4array[0]=((((-1.0)*sj1*sj2*x14917))+((cj1*cj2*x14917)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x14919=IKsin(j4);
IkReal x14920=IKcos(j4);
IkReal x14921=(r11*sj5);
IkReal x14922=((1.0)*sj0);
IkReal x14923=((1.0)*x14920);
IkReal x14924=((1.0)*cj5*x14919);
evalcond[0]=((-1.0)*r02*x14919);
evalcond[1]=((((-1.0)*x14922))+(((-1.0)*r02*x14923)));
evalcond[2]=((((-1.0)*r20*x14924))+((r21*sj5*x14919)));
evalcond[3]=((((-1.0)*r10*x14924))+((x14919*x14921)));
evalcond[4]=(((cj5*r10*x14920))+(((-1.0)*cj2*sj1*x14922))+(((-1.0)*x14921*x14923))+(((-1.0)*cj1*sj2*x14922)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x14925=IKPowWithIntegerCheck(r02,-1);
if(!x14925.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x14925.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x14926=IKsin(j4);
IkReal x14927=IKcos(j4);
IkReal x14928=((1.0)*sj0);
IkReal x14929=(cj5*x14927);
IkReal x14930=(sj5*x14926);
IkReal x14931=((1.0)*sj5*x14927);
IkReal x14932=((1.0)*cj5*x14926);
evalcond[0]=((-1.0)*r02*x14926);
evalcond[1]=((((-1.0)*r20*x14932))+((r21*x14930)));
evalcond[2]=((((-1.0)*r10*x14932))+((r11*x14930)));
evalcond[3]=((((-1.0)*r21*x14931))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x14929)));
evalcond[4]=(((r10*x14929))+(((-1.0)*r11*x14931))+(((-1.0)*cj2*sj1*x14928))+(((-1.0)*cj1*sj2*x14928)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x14933=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x14933);
rxp1_1=(px*r21);
rxp1_2=(r11*x14933);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x14934=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x14934);
rxp1_1=(px*r21);
rxp1_2=(r11*x14934);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x14935=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x14935);
rxp1_1=(px*r21);
rxp1_2=(r11*x14935);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x14938=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x14938.valid){
continue;
}
IkReal x14936=x14938.value;
IkReal x14937=(sj0*x14936);
cj4array[0]=(((cj2*sj1*x14937))+((cj1*sj2*x14937)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x14939=IKsin(j4);
IkReal x14940=IKcos(j4);
IkReal x14941=(r21*sj5);
IkReal x14942=((1.0)*cj5*r20);
evalcond[0]=(r02*x14939);
evalcond[1]=((((-1.0)*r02*x14940))+(((-1.0)*sj0)));
evalcond[2]=((((-1.0)*x14939*x14942))+((x14939*x14941)));
evalcond[3]=((((-1.0)*cj5*r10*x14939))+((r11*sj5*x14939)));
evalcond[4]=((((-1.0)*x14940*x14942))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x14940*x14941)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x14944=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x14944.valid){
continue;
}
IkReal x14943=x14944.value;
cj4array[0]=((((-1.0)*sj1*sj2*x14943))+((cj1*cj2*x14943)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x14945=IKsin(j4);
IkReal x14946=IKcos(j4);
IkReal x14947=((1.0)*sj0);
IkReal x14948=((1.0)*cj5);
IkReal x14949=(sj5*x14945);
evalcond[0]=(r02*x14945);
evalcond[1]=((((-1.0)*r02*x14946))+(((-1.0)*x14947)));
evalcond[2]=(((r21*x14949))+(((-1.0)*r20*x14945*x14948)));
evalcond[3]=((((-1.0)*r10*x14945*x14948))+((r11*x14949)));
evalcond[4]=((((-1.0)*cj2*sj1*x14947))+(((-1.0)*r10*x14946*x14948))+(((-1.0)*cj1*sj2*x14947))+((r11*sj5*x14946)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x14950=IKPowWithIntegerCheck(r02,-1);
if(!x14950.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x14950.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x14951=IKsin(j4);
IkReal x14952=IKcos(j4);
IkReal x14953=((1.0)*cj1);
IkReal x14954=(r21*sj5);
IkReal x14955=((1.0)*cj5);
IkReal x14956=(r11*sj5);
evalcond[0]=(r02*x14951);
evalcond[1]=((((-1.0)*r20*x14951*x14955))+((x14951*x14954)));
evalcond[2]=(((x14951*x14956))+(((-1.0)*r10*x14951*x14955)));
evalcond[3]=((((-1.0)*r20*x14952*x14955))+((sj1*sj2))+((x14952*x14954))+(((-1.0)*cj2*x14953)));
evalcond[4]=((((-1.0)*r10*x14952*x14955))+(((-1.0)*sj0*sj2*x14953))+(((-1.0)*cj2*sj0*sj1))+((x14952*x14956)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
CheckValue<IkReal> x14957 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x14957.valid){
continue;
}
IkReal gconst66=((-1.0)*(x14957.value));
IkReal gconst67=r10;
IkReal gconst68=r11;
CheckValue<IkReal> x14958 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x14958.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x14958.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x14959=((-1.0)*r10);
CheckValue<IkReal> x14961 = IKatan2WithCheck(IkReal(x14959),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x14961.valid){
continue;
}
IkReal x14960=((-1.0)*(x14961.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x14959);
rxp1_1=(px*r21);
rxp1_2=((-1.0)*px*r11);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst67;
cj5=gconst68;
j5=x14960;
IkReal gconst66=x14960;
IkReal gconst67=r10;
IkReal gconst68=r11;
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x14962=((-1.0)*r10);
CheckValue<IkReal> x14964 = IKatan2WithCheck(IkReal(x14962),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x14964.valid){
continue;
}
IkReal x14963=((-1.0)*(x14964.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x14962);
rxp1_1=(px*r21);
rxp1_2=((-1.0)*px*r11);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst67;
cj5=gconst68;
j5=x14963;
IkReal gconst66=x14963;
IkReal gconst67=r10;
IkReal gconst68=r11;
j4eval[0]=r02;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x14965=((-1.0)*r10);
CheckValue<IkReal> x14967 = IKatan2WithCheck(IkReal(x14965),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x14967.valid){
continue;
}
IkReal x14966=((-1.0)*(x14967.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x14965);
rxp1_1=(px*r21);
rxp1_2=((-1.0)*px*r11);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst67;
cj5=gconst68;
j5=x14966;
IkReal gconst66=x14966;
IkReal gconst67=r10;
IkReal gconst68=r11;
j4eval[0]=cj3;
j4eval[1]=r02;
j4eval[2]=((((-1.0)*r10*r21*sj3))+((r11*r20*sj3)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14968=((1.0)*gconst67);
IkReal x14969=(cj1*cj2);
IkReal x14970=((1.0)*sj1*sj2);
CheckValue<IkReal> x14971=IKPowWithIntegerCheck(cj3,-1);
if(!x14971.valid){
continue;
}
CheckValue<IkReal> x14972=IKPowWithIntegerCheck(r02,-1);
if(!x14972.valid){
continue;
}
CheckValue<IkReal> x14973=IKPowWithIntegerCheck(((((-1.0)*r21*sj3*x14968))+((gconst68*r20*sj3))),-1);
if(!x14973.valid){
continue;
}
if( IKabs(((x14971.value)*(x14972.value)*(((((-1.0)*cj0*x14970))+((cj0*x14969)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14973.value)*((x14969+(((-1.0)*cj3*r20*x14968))+(((-1.0)*x14970))+(((-1.0)*cj3*gconst68*r21)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14971.value)*(x14972.value)*(((((-1.0)*cj0*x14970))+((cj0*x14969))))))+IKsqr(((x14973.value)*((x14969+(((-1.0)*cj3*r20*x14968))+(((-1.0)*x14970))+(((-1.0)*cj3*gconst68*r21))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x14971.value)*(x14972.value)*(((((-1.0)*cj0*x14970))+((cj0*x14969))))), ((x14973.value)*((x14969+(((-1.0)*cj3*r20*x14968))+(((-1.0)*x14970))+(((-1.0)*cj3*gconst68*r21))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14974=IKsin(j4);
IkReal x14975=IKcos(j4);
IkReal x14976=(sj1*sj2);
IkReal x14977=(gconst68*sj3);
IkReal x14978=(gconst67*r11);
IkReal x14979=(gconst67*sj3);
IkReal x14980=((1.0)*gconst68);
IkReal x14981=(cj2*sj1);
IkReal x14982=((1.0)*cj0);
IkReal x14983=((1.0)*sj0);
IkReal x14984=(cj3*gconst67);
IkReal x14985=(cj3*gconst68);
IkReal x14986=(cj1*sj2);
IkReal x14987=(gconst67*r21);
IkReal x14988=((1.0)*cj1*cj2);
IkReal x14989=(cj3*x14975);
IkReal x14990=((1.0)*x14975);
IkReal x14991=(r02*x14974);
evalcond[0]=((((-1.0)*x14983))+(((-1.0)*r02*x14990)));
evalcond[1]=((((-1.0)*r20*x14974*x14980))+((x14974*x14987)));
evalcond[2]=(((x14974*x14978))+cj0+(((-1.0)*r10*x14974*x14980)));
evalcond[3]=(((cj3*x14991))+((cj0*x14976))+(((-1.0)*cj1*cj2*x14982)));
evalcond[4]=((((-1.0)*x14981*x14982))+(((-1.0)*sj3*x14991))+(((-1.0)*x14982*x14986)));
evalcond[5]=(x14981+x14986+(((-1.0)*r20*x14980*x14989))+((r21*x14975*x14984))+((r20*x14979))+((r21*x14977)));
evalcond[6]=((((-1.0)*r21*x14979*x14990))+((r20*x14984))+x14976+((r21*x14985))+((r20*x14975*x14977))+(((-1.0)*x14988)));
evalcond[7]=(((r11*x14977))+((sj0*x14976))+(((-1.0)*r10*x14980*x14989))+((r10*x14979))+(((-1.0)*cj1*cj2*x14983))+((x14978*x14989)));
evalcond[8]=((((-1.0)*x14981*x14983))+((r10*x14984))+(((-1.0)*sj3*x14978*x14990))+((r11*x14985))+((r10*x14975*x14977))+(((-1.0)*x14983*x14986)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14994=IKPowWithIntegerCheck(r02,-1);
if(!x14994.valid){
continue;
}
IkReal x14992=x14994.value;
IkReal x14993=((1.0)*cj0);
CheckValue<IkReal> x14995=IKPowWithIntegerCheck(sj3,-1);
if(!x14995.valid){
continue;
}
if( IKabs((x14992*(x14995.value)*(((((-1.0)*cj1*sj2*x14993))+(((-1.0)*cj2*sj1*x14993)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x14992)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x14992*(x14995.value)*(((((-1.0)*cj1*sj2*x14993))+(((-1.0)*cj2*sj1*x14993))))))+IKsqr(((-1.0)*sj0*x14992))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x14992*(x14995.value)*(((((-1.0)*cj1*sj2*x14993))+(((-1.0)*cj2*sj1*x14993))))), ((-1.0)*sj0*x14992));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14996=IKsin(j4);
IkReal x14997=IKcos(j4);
IkReal x14998=(sj1*sj2);
IkReal x14999=(gconst68*sj3);
IkReal x15000=(gconst67*r11);
IkReal x15001=(gconst67*sj3);
IkReal x15002=((1.0)*gconst68);
IkReal x15003=(cj2*sj1);
IkReal x15004=((1.0)*cj0);
IkReal x15005=((1.0)*sj0);
IkReal x15006=(cj3*gconst67);
IkReal x15007=(cj3*gconst68);
IkReal x15008=(cj1*sj2);
IkReal x15009=(gconst67*r21);
IkReal x15010=((1.0)*cj1*cj2);
IkReal x15011=(cj3*x14997);
IkReal x15012=((1.0)*x14997);
IkReal x15013=(r02*x14996);
evalcond[0]=((((-1.0)*r02*x15012))+(((-1.0)*x15005)));
evalcond[1]=(((x14996*x15009))+(((-1.0)*r20*x14996*x15002)));
evalcond[2]=(((x14996*x15000))+cj0+(((-1.0)*r10*x14996*x15002)));
evalcond[3]=(((cj3*x15013))+((cj0*x14998))+(((-1.0)*cj1*cj2*x15004)));
evalcond[4]=((((-1.0)*x15003*x15004))+(((-1.0)*x15004*x15008))+(((-1.0)*sj3*x15013)));
evalcond[5]=(((r21*x14999))+((r20*x15001))+x15003+x15008+((r21*x14997*x15006))+(((-1.0)*r20*x15002*x15011)));
evalcond[6]=((((-1.0)*x15010))+x14998+((r20*x15006))+(((-1.0)*r21*x15001*x15012))+((r20*x14997*x14999))+((r21*x15007)));
evalcond[7]=((((-1.0)*r10*x15002*x15011))+((r10*x15001))+((r11*x14999))+((x15000*x15011))+(((-1.0)*cj1*cj2*x15005))+((sj0*x14998)));
evalcond[8]=((((-1.0)*x15003*x15005))+(((-1.0)*x15005*x15008))+(((-1.0)*sj3*x15000*x15012))+((r10*x15006))+((r11*x15007))+((r10*x14997*x14999)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15015=IKPowWithIntegerCheck(r02,-1);
if(!x15015.valid){
continue;
}
IkReal x15014=x15015.value;
CheckValue<IkReal> x15016=IKPowWithIntegerCheck(cj3,-1);
if(!x15016.valid){
continue;
}
if( IKabs((x15014*(x15016.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x15014)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x15014*(x15016.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x15014))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x15014*(x15016.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x15014));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15017=IKsin(j4);
IkReal x15018=IKcos(j4);
IkReal x15019=(sj1*sj2);
IkReal x15020=(gconst68*sj3);
IkReal x15021=(gconst67*r11);
IkReal x15022=(gconst67*sj3);
IkReal x15023=((1.0)*gconst68);
IkReal x15024=(cj2*sj1);
IkReal x15025=((1.0)*cj0);
IkReal x15026=((1.0)*sj0);
IkReal x15027=(cj3*gconst67);
IkReal x15028=(cj3*gconst68);
IkReal x15029=(cj1*sj2);
IkReal x15030=(gconst67*r21);
IkReal x15031=((1.0)*cj1*cj2);
IkReal x15032=(cj3*x15018);
IkReal x15033=((1.0)*x15018);
IkReal x15034=(r02*x15017);
evalcond[0]=((((-1.0)*r02*x15033))+(((-1.0)*x15026)));
evalcond[1]=((((-1.0)*r20*x15017*x15023))+((x15017*x15030)));
evalcond[2]=((((-1.0)*r10*x15017*x15023))+cj0+((x15017*x15021)));
evalcond[3]=((((-1.0)*cj1*cj2*x15025))+((cj3*x15034))+((cj0*x15019)));
evalcond[4]=((((-1.0)*x15024*x15025))+(((-1.0)*x15025*x15029))+(((-1.0)*sj3*x15034)));
evalcond[5]=(((r21*x15018*x15027))+((r21*x15020))+x15029+x15024+(((-1.0)*r20*x15023*x15032))+((r20*x15022)));
evalcond[6]=((((-1.0)*x15031))+(((-1.0)*r21*x15022*x15033))+((r21*x15028))+x15019+((r20*x15018*x15020))+((r20*x15027)));
evalcond[7]=((((-1.0)*r10*x15023*x15032))+((r10*x15022))+(((-1.0)*cj1*cj2*x15026))+((sj0*x15019))+((x15021*x15032))+((r11*x15020)));
evalcond[8]=((((-1.0)*x15024*x15026))+(((-1.0)*sj3*x15021*x15033))+(((-1.0)*x15026*x15029))+((r10*x15027))+((r10*x15018*x15020))+((r11*x15028)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x15035=((-1.0)*r10);
CheckValue<IkReal> x15036 = IKatan2WithCheck(IkReal(x15035),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15036.valid){
continue;
}
IkReal gconst69=((3.14159265358979)+(((-1.0)*(x15036.value))));
IkReal gconst70=x15035;
IkReal gconst71=((-1.0)*r11);
CheckValue<IkReal> x15037 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15037.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x15037.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x15038=((-1.0)*r10);
IkReal x15039=((-1.0)*r11);
CheckValue<IkReal> x15041 = IKatan2WithCheck(IkReal(x15038),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15041.valid){
continue;
}
IkReal x15040=((1.0)*(x15041.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15038);
rxp1_1=(px*r21);
rxp1_2=(px*x15039);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst70;
cj5=gconst71;
j5=((3.14159265)+(((-1.0)*x15040)));
IkReal gconst69=((3.14159265358979)+(((-1.0)*x15040)));
IkReal gconst70=x15038;
IkReal gconst71=x15039;
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x15042=((-1.0)*r10);
IkReal x15043=((-1.0)*r11);
CheckValue<IkReal> x15045 = IKatan2WithCheck(IkReal(x15042),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15045.valid){
continue;
}
IkReal x15044=((1.0)*(x15045.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15042);
rxp1_1=(px*r21);
rxp1_2=(px*x15043);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst70;
cj5=gconst71;
j5=((3.14159265)+(((-1.0)*x15044)));
IkReal gconst69=((3.14159265358979)+(((-1.0)*x15044)));
IkReal gconst70=x15042;
IkReal gconst71=x15043;
j4eval[0]=r02;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x15046=((-1.0)*r10);
IkReal x15047=((-1.0)*r11);
CheckValue<IkReal> x15049 = IKatan2WithCheck(IkReal(x15046),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15049.valid){
continue;
}
IkReal x15048=((1.0)*(x15049.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15046);
rxp1_1=(px*r21);
rxp1_2=(px*x15047);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst70;
cj5=gconst71;
j5=((3.14159265)+(((-1.0)*x15048)));
IkReal gconst69=((3.14159265358979)+(((-1.0)*x15048)));
IkReal gconst70=x15046;
IkReal gconst71=x15047;
IkReal x15050=((1.0)*sj3);
j4eval[0]=cj3;
j4eval[1]=r02;
j4eval[2]=((((-1.0)*r11*r20*x15050))+((r10*r21*x15050)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15051=((1.0)*r21);
IkReal x15052=(cj1*cj2);
IkReal x15053=((1.0)*sj1*sj2);
CheckValue<IkReal> x15054=IKPowWithIntegerCheck(cj3,-1);
if(!x15054.valid){
continue;
}
CheckValue<IkReal> x15055=IKPowWithIntegerCheck(r02,-1);
if(!x15055.valid){
continue;
}
CheckValue<IkReal> x15056=IKPowWithIntegerCheck(((((-1.0)*gconst70*sj3*x15051))+((gconst71*r20*sj3))),-1);
if(!x15056.valid){
continue;
}
if( IKabs(((x15054.value)*(x15055.value)*(((((-1.0)*cj0*x15053))+((cj0*x15052)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15056.value)*((x15052+(((-1.0)*x15053))+(((-1.0)*cj3*gconst71*x15051))+(((-1.0)*cj3*gconst70*r20)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x15054.value)*(x15055.value)*(((((-1.0)*cj0*x15053))+((cj0*x15052))))))+IKsqr(((x15056.value)*((x15052+(((-1.0)*x15053))+(((-1.0)*cj3*gconst71*x15051))+(((-1.0)*cj3*gconst70*r20))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x15054.value)*(x15055.value)*(((((-1.0)*cj0*x15053))+((cj0*x15052))))), ((x15056.value)*((x15052+(((-1.0)*x15053))+(((-1.0)*cj3*gconst71*x15051))+(((-1.0)*cj3*gconst70*r20))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15057=IKsin(j4);
IkReal x15058=IKcos(j4);
IkReal x15059=(cj3*gconst70);
IkReal x15060=(sj1*sj2);
IkReal x15061=((1.0)*gconst71);
IkReal x15062=(gconst71*sj3);
IkReal x15063=(cj2*sj1);
IkReal x15064=((1.0)*sj0);
IkReal x15065=(gconst70*r11);
IkReal x15066=(gconst70*sj3);
IkReal x15067=((1.0)*cj0);
IkReal x15068=(cj3*gconst71);
IkReal x15069=(cj1*sj2);
IkReal x15070=((1.0)*cj1*cj2);
IkReal x15071=(r21*x15058);
IkReal x15072=(r10*x15058);
IkReal x15073=((1.0)*x15058);
IkReal x15074=(r02*x15057);
IkReal x15075=(r20*x15058);
evalcond[0]=((((-1.0)*r02*x15073))+(((-1.0)*x15064)));
evalcond[1]=(((gconst70*r21*x15057))+(((-1.0)*r20*x15057*x15061)));
evalcond[2]=(cj0+(((-1.0)*r10*x15057*x15061))+((x15057*x15065)));
evalcond[3]=(((cj3*x15074))+(((-1.0)*cj1*cj2*x15067))+((cj0*x15060)));
evalcond[4]=((((-1.0)*x15063*x15067))+(((-1.0)*sj3*x15074))+(((-1.0)*x15067*x15069)));
evalcond[5]=(((r21*x15062))+((r20*x15066))+((x15059*x15071))+x15063+x15069+(((-1.0)*cj3*x15061*x15075)));
evalcond[6]=(((r20*x15059))+(((-1.0)*x15070))+((r21*x15068))+(((-1.0)*x15066*x15071))+((x15062*x15075))+x15060);
evalcond[7]=(((r11*x15062))+((r10*x15066))+((r11*x15058*x15059))+(((-1.0)*cj3*x15061*x15072))+(((-1.0)*cj1*cj2*x15064))+((sj0*x15060)));
evalcond[8]=((((-1.0)*x15063*x15064))+(((-1.0)*x15064*x15069))+((x15062*x15072))+((r10*x15059))+((r11*x15068))+(((-1.0)*sj3*x15065*x15073)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15078=IKPowWithIntegerCheck(r02,-1);
if(!x15078.valid){
continue;
}
IkReal x15076=x15078.value;
IkReal x15077=((1.0)*cj0);
CheckValue<IkReal> x15079=IKPowWithIntegerCheck(sj3,-1);
if(!x15079.valid){
continue;
}
if( IKabs((x15076*(x15079.value)*(((((-1.0)*cj1*sj2*x15077))+(((-1.0)*cj2*sj1*x15077)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x15076)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x15076*(x15079.value)*(((((-1.0)*cj1*sj2*x15077))+(((-1.0)*cj2*sj1*x15077))))))+IKsqr(((-1.0)*sj0*x15076))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x15076*(x15079.value)*(((((-1.0)*cj1*sj2*x15077))+(((-1.0)*cj2*sj1*x15077))))), ((-1.0)*sj0*x15076));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15080=IKsin(j4);
IkReal x15081=IKcos(j4);
IkReal x15082=(cj3*gconst70);
IkReal x15083=(sj1*sj2);
IkReal x15084=((1.0)*gconst71);
IkReal x15085=(gconst71*sj3);
IkReal x15086=(cj2*sj1);
IkReal x15087=((1.0)*sj0);
IkReal x15088=(gconst70*r11);
IkReal x15089=(gconst70*sj3);
IkReal x15090=((1.0)*cj0);
IkReal x15091=(cj3*gconst71);
IkReal x15092=(cj1*sj2);
IkReal x15093=((1.0)*cj1*cj2);
IkReal x15094=(r21*x15081);
IkReal x15095=(r10*x15081);
IkReal x15096=((1.0)*x15081);
IkReal x15097=(r02*x15080);
IkReal x15098=(r20*x15081);
evalcond[0]=((((-1.0)*x15087))+(((-1.0)*r02*x15096)));
evalcond[1]=((((-1.0)*r20*x15080*x15084))+((gconst70*r21*x15080)));
evalcond[2]=(cj0+(((-1.0)*r10*x15080*x15084))+((x15080*x15088)));
evalcond[3]=(((cj0*x15083))+((cj3*x15097))+(((-1.0)*cj1*cj2*x15090)));
evalcond[4]=((((-1.0)*x15086*x15090))+(((-1.0)*sj3*x15097))+(((-1.0)*x15090*x15092)));
evalcond[5]=(x15092+x15086+((r21*x15085))+((r20*x15089))+(((-1.0)*cj3*x15084*x15098))+((x15082*x15094)));
evalcond[6]=(((r21*x15091))+x15083+((x15085*x15098))+(((-1.0)*x15089*x15094))+((r20*x15082))+(((-1.0)*x15093)));
evalcond[7]=(((r11*x15081*x15082))+(((-1.0)*cj1*cj2*x15087))+((sj0*x15083))+(((-1.0)*cj3*x15084*x15095))+((r11*x15085))+((r10*x15089)));
evalcond[8]=((((-1.0)*x15086*x15087))+((x15085*x15095))+((r11*x15091))+(((-1.0)*x15087*x15092))+(((-1.0)*sj3*x15088*x15096))+((r10*x15082)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15100=IKPowWithIntegerCheck(r02,-1);
if(!x15100.valid){
continue;
}
IkReal x15099=x15100.value;
CheckValue<IkReal> x15101=IKPowWithIntegerCheck(cj3,-1);
if(!x15101.valid){
continue;
}
if( IKabs((x15099*(x15101.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x15099)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x15099*(x15101.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x15099))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x15099*(x15101.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x15099));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15102=IKsin(j4);
IkReal x15103=IKcos(j4);
IkReal x15104=(cj3*gconst70);
IkReal x15105=(sj1*sj2);
IkReal x15106=((1.0)*gconst71);
IkReal x15107=(gconst71*sj3);
IkReal x15108=(cj2*sj1);
IkReal x15109=((1.0)*sj0);
IkReal x15110=(gconst70*r11);
IkReal x15111=(gconst70*sj3);
IkReal x15112=((1.0)*cj0);
IkReal x15113=(cj3*gconst71);
IkReal x15114=(cj1*sj2);
IkReal x15115=((1.0)*cj1*cj2);
IkReal x15116=(r21*x15103);
IkReal x15117=(r10*x15103);
IkReal x15118=((1.0)*x15103);
IkReal x15119=(r02*x15102);
IkReal x15120=(r20*x15103);
evalcond[0]=((((-1.0)*r02*x15118))+(((-1.0)*x15109)));
evalcond[1]=((((-1.0)*r20*x15102*x15106))+((gconst70*r21*x15102)));
evalcond[2]=(cj0+(((-1.0)*r10*x15102*x15106))+((x15102*x15110)));
evalcond[3]=((((-1.0)*cj1*cj2*x15112))+((cj0*x15105))+((cj3*x15119)));
evalcond[4]=((((-1.0)*sj3*x15119))+(((-1.0)*x15112*x15114))+(((-1.0)*x15108*x15112)));
evalcond[5]=((((-1.0)*cj3*x15106*x15120))+((r20*x15111))+((r21*x15107))+((x15104*x15116))+x15108+x15114);
evalcond[6]=((((-1.0)*x15111*x15116))+(((-1.0)*x15115))+x15105+((r20*x15104))+((x15107*x15120))+((r21*x15113)));
evalcond[7]=(((r10*x15111))+(((-1.0)*cj1*cj2*x15109))+((r11*x15103*x15104))+(((-1.0)*cj3*x15106*x15117))+((sj0*x15105))+((r11*x15107)));
evalcond[8]=((((-1.0)*sj3*x15110*x15118))+((r11*x15113))+((r10*x15104))+(((-1.0)*x15109*x15114))+((x15107*x15117))+(((-1.0)*x15108*x15109)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15122=IKPowWithIntegerCheck(r02,-1);
if(!x15122.valid){
continue;
}
IkReal x15121=x15122.value;
CheckValue<IkReal> x15123=IKPowWithIntegerCheck(cj3,-1);
if(!x15123.valid){
continue;
}
if( IKabs((x15121*(x15123.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x15121)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x15121*(x15123.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x15121))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x15121*(x15123.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x15121));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15124=IKsin(j4);
IkReal x15125=IKcos(j4);
IkReal x15126=(cj5*r10);
IkReal x15127=(sj1*sj2);
IkReal x15128=(cj5*sj3);
IkReal x15129=(r11*sj5);
IkReal x15130=(cj3*cj5);
IkReal x15131=(cj3*sj5);
IkReal x15132=(r21*sj5);
IkReal x15133=(cj2*sj1);
IkReal x15134=((1.0)*sj0);
IkReal x15135=((1.0)*cj0);
IkReal x15136=(sj3*sj5);
IkReal x15137=(cj1*sj2);
IkReal x15138=((1.0)*cj1*cj2);
IkReal x15139=((1.0)*x15124);
IkReal x15140=(r20*x15125);
IkReal x15141=(cj3*x15125);
IkReal x15142=(sj3*x15125);
evalcond[0]=((((-1.0)*x15134))+(((-1.0)*r02*x15125)));
evalcond[1]=(((x15124*x15132))+(((-1.0)*cj5*r20*x15139)));
evalcond[2]=(cj0+((x15124*x15129))+(((-1.0)*x15126*x15139)));
evalcond[3]=(((cj0*x15127))+(((-1.0)*cj1*cj2*x15135))+((cj3*r02*x15124)));
evalcond[4]=((((-1.0)*r02*sj3*x15139))+(((-1.0)*x15135*x15137))+(((-1.0)*x15133*x15135)));
evalcond[5]=(((r20*x15136))+((r21*x15128))+(((-1.0)*x15130*x15140))+((r21*x15125*x15131))+x15133+x15137);
evalcond[6]=(((r20*x15131))+((r21*x15130))+(((-1.0)*x15138))+x15127+(((-1.0)*x15132*x15142))+((x15128*x15140)));
evalcond[7]=((((-1.0)*x15126*x15141))+((sj0*x15127))+((r10*x15136))+(((-1.0)*cj1*cj2*x15134))+((x15129*x15141))+((r11*x15128)));
evalcond[8]=((((-1.0)*x15129*x15142))+((x15126*x15142))+(((-1.0)*x15134*x15137))+(((-1.0)*x15133*x15134))+((r10*x15131))+((r11*x15130)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15143=((1.0)*sj3);
IkReal x15144=((1.0)*cj5);
CheckValue<IkReal> x15145=IKPowWithIntegerCheck(((((-1.0)*r10*x15144))+((r11*sj5))),-1);
if(!x15145.valid){
continue;
}
CheckValue<IkReal> x15146=IKPowWithIntegerCheck((((cj3*r21*sj5))+(((-1.0)*cj3*r20*x15144))),-1);
if(!x15146.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x15145.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15146.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj5*r21*x15143))+(((-1.0)*cj1*sj2))+(((-1.0)*r20*sj5*x15143)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x15145.value)))+IKsqr(((x15146.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj5*r21*x15143))+(((-1.0)*cj1*sj2))+(((-1.0)*r20*sj5*x15143))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x15145.value)), ((x15146.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj5*r21*x15143))+(((-1.0)*cj1*sj2))+(((-1.0)*r20*sj5*x15143))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15147=IKsin(j4);
IkReal x15148=IKcos(j4);
IkReal x15149=(cj5*r10);
IkReal x15150=(sj1*sj2);
IkReal x15151=(cj5*sj3);
IkReal x15152=(r11*sj5);
IkReal x15153=(cj3*cj5);
IkReal x15154=(cj3*sj5);
IkReal x15155=(r21*sj5);
IkReal x15156=(cj2*sj1);
IkReal x15157=((1.0)*sj0);
IkReal x15158=((1.0)*cj0);
IkReal x15159=(sj3*sj5);
IkReal x15160=(cj1*sj2);
IkReal x15161=((1.0)*cj1*cj2);
IkReal x15162=((1.0)*x15147);
IkReal x15163=(r20*x15148);
IkReal x15164=(cj3*x15148);
IkReal x15165=(sj3*x15148);
evalcond[0]=((((-1.0)*x15157))+(((-1.0)*r02*x15148)));
evalcond[1]=((((-1.0)*cj5*r20*x15162))+((x15147*x15155)));
evalcond[2]=((((-1.0)*x15149*x15162))+cj0+((x15147*x15152)));
evalcond[3]=(((cj3*r02*x15147))+((cj0*x15150))+(((-1.0)*cj1*cj2*x15158)));
evalcond[4]=((((-1.0)*x15156*x15158))+(((-1.0)*x15158*x15160))+(((-1.0)*r02*sj3*x15162)));
evalcond[5]=((((-1.0)*x15153*x15163))+((r21*x15151))+x15160+x15156+((r21*x15148*x15154))+((r20*x15159)));
evalcond[6]=(((r21*x15153))+(((-1.0)*x15155*x15165))+(((-1.0)*x15161))+x15150+((x15151*x15163))+((r20*x15154)));
evalcond[7]=(((x15152*x15164))+((sj0*x15150))+(((-1.0)*x15149*x15164))+(((-1.0)*cj1*cj2*x15157))+((r10*x15159))+((r11*x15151)));
evalcond[8]=((((-1.0)*x15152*x15165))+(((-1.0)*x15156*x15157))+((x15149*x15165))+((r10*x15154))+(((-1.0)*x15157*x15160))+((r11*x15153)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15166=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x15166.valid){
continue;
}
CheckValue<IkReal> x15167=IKPowWithIntegerCheck(r02,-1);
if(!x15167.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x15166.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*(x15167.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x15166.value)))+IKsqr(((-1.0)*sj0*(x15167.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x15166.value)), ((-1.0)*sj0*(x15167.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15168=IKsin(j4);
IkReal x15169=IKcos(j4);
IkReal x15170=(cj5*r10);
IkReal x15171=(sj1*sj2);
IkReal x15172=(cj5*sj3);
IkReal x15173=(r11*sj5);
IkReal x15174=(cj3*cj5);
IkReal x15175=(cj3*sj5);
IkReal x15176=(r21*sj5);
IkReal x15177=(cj2*sj1);
IkReal x15178=((1.0)*sj0);
IkReal x15179=((1.0)*cj0);
IkReal x15180=(sj3*sj5);
IkReal x15181=(cj1*sj2);
IkReal x15182=((1.0)*cj1*cj2);
IkReal x15183=((1.0)*x15168);
IkReal x15184=(r20*x15169);
IkReal x15185=(cj3*x15169);
IkReal x15186=(sj3*x15169);
evalcond[0]=((((-1.0)*r02*x15169))+(((-1.0)*x15178)));
evalcond[1]=((((-1.0)*cj5*r20*x15183))+((x15168*x15176)));
evalcond[2]=(cj0+(((-1.0)*x15170*x15183))+((x15168*x15173)));
evalcond[3]=(((cj0*x15171))+((cj3*r02*x15168))+(((-1.0)*cj1*cj2*x15179)));
evalcond[4]=((((-1.0)*r02*sj3*x15183))+(((-1.0)*x15177*x15179))+(((-1.0)*x15179*x15181)));
evalcond[5]=(((r20*x15180))+((r21*x15169*x15175))+x15181+x15177+(((-1.0)*x15174*x15184))+((r21*x15172)));
evalcond[6]=(((r20*x15175))+((x15172*x15184))+(((-1.0)*x15182))+x15171+((r21*x15174))+(((-1.0)*x15176*x15186)));
evalcond[7]=(((sj0*x15171))+((r11*x15172))+((x15173*x15185))+(((-1.0)*x15170*x15185))+((r10*x15180))+(((-1.0)*cj1*cj2*x15178)));
evalcond[8]=(((r11*x15174))+((r10*x15175))+(((-1.0)*x15177*x15178))+((x15170*x15186))+(((-1.0)*x15173*x15186))+(((-1.0)*x15178*x15181)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15187=((1.0)*sj0);
IkReal x15188=((1.0)*cj0);
CheckValue<IkReal> x15189 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x15188))+(((-1.0)*r12*x15187)))),IkReal(((((-1.0)*r11*sj5*x15187))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x15188)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15189.valid){
continue;
}
CheckValue<IkReal> x15190=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x15190.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15189.value)+(((1.5707963267949)*(x15190.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15191=IKsin(j4);
IkReal x15192=IKcos(j4);
IkReal x15193=(r11*sj5);
IkReal x15194=(cj5*r10);
IkReal x15195=(sj1*sj2);
IkReal x15196=(cj5*sj3);
IkReal x15197=((1.0)*sj0);
IkReal x15198=(cj3*cj5);
IkReal x15199=(cj3*sj5);
IkReal x15200=(r21*sj5);
IkReal x15201=(cj2*sj1);
IkReal x15202=(sj3*sj5);
IkReal x15203=(r01*sj5);
IkReal x15204=((1.0)*cj0);
IkReal x15205=(cj1*sj2);
IkReal x15206=((1.0)*x15192);
IkReal x15207=((1.0)*x15191);
IkReal x15208=(cj3*x15192);
IkReal x15209=((1.0)*cj1*cj2);
IkReal x15210=(cj3*x15191);
evalcond[0]=((((-1.0)*cj5*r20*x15207))+(((-1.0)*r22*x15206))+((x15191*x15200)));
evalcond[1]=(cj0+(((-1.0)*r12*x15206))+(((-1.0)*x15194*x15207))+((x15191*x15193)));
evalcond[2]=(((x15191*x15203))+(((-1.0)*x15197))+(((-1.0)*cj5*r00*x15207))+(((-1.0)*r02*x15206)));
evalcond[3]=(((r20*x15202))+((r21*x15196))+(((-1.0)*r20*x15198*x15206))+x15205+x15201+((r22*x15210))+((r21*x15192*x15199)));
evalcond[4]=(((r21*x15198))+(((-1.0)*sj3*x15200*x15206))+x15195+(((-1.0)*x15209))+(((-1.0)*r22*sj3*x15207))+((r20*x15199))+((r20*x15192*x15196)));
evalcond[5]=((((-1.0)*r00*x15198*x15206))+((cj0*x15195))+((r01*x15192*x15199))+((r00*x15202))+((r02*x15210))+((r01*x15196))+(((-1.0)*cj1*cj2*x15204)));
evalcond[6]=(((r10*x15202))+(((-1.0)*cj1*cj2*x15197))+((r11*x15196))+((x15193*x15208))+((r12*x15210))+(((-1.0)*cj3*x15194*x15206))+((sj0*x15195)));
evalcond[7]=(((r00*x15199))+(((-1.0)*r01*x15202*x15206))+(((-1.0)*r02*sj3*x15207))+((r00*x15192*x15196))+(((-1.0)*x15204*x15205))+(((-1.0)*x15201*x15204))+((r01*x15198)));
evalcond[8]=(((sj3*x15192*x15194))+(((-1.0)*sj3*x15193*x15206))+((r11*x15198))+((r10*x15199))+(((-1.0)*x15197*x15205))+(((-1.0)*x15197*x15201))+(((-1.0)*r12*sj3*x15207)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15211=((1.0)*cj5);
CheckValue<IkReal> x15212=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x15211)))),-1);
if(!x15212.valid){
continue;
}
CheckValue<IkReal> x15213 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x15211))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15213.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15212.value)))+(x15213.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15214=IKsin(j4);
IkReal x15215=IKcos(j4);
IkReal x15216=(r11*sj5);
IkReal x15217=(cj5*r10);
IkReal x15218=(sj1*sj2);
IkReal x15219=(cj5*sj3);
IkReal x15220=((1.0)*sj0);
IkReal x15221=(cj3*cj5);
IkReal x15222=(cj3*sj5);
IkReal x15223=(r21*sj5);
IkReal x15224=(cj2*sj1);
IkReal x15225=(sj3*sj5);
IkReal x15226=(r01*sj5);
IkReal x15227=((1.0)*cj0);
IkReal x15228=(cj1*sj2);
IkReal x15229=((1.0)*x15215);
IkReal x15230=((1.0)*x15214);
IkReal x15231=(cj3*x15215);
IkReal x15232=((1.0)*cj1*cj2);
IkReal x15233=(cj3*x15214);
evalcond[0]=((((-1.0)*cj5*r20*x15230))+(((-1.0)*r22*x15229))+((x15214*x15223)));
evalcond[1]=((((-1.0)*r12*x15229))+(((-1.0)*x15217*x15230))+((x15214*x15216))+cj0);
evalcond[2]=((((-1.0)*cj5*r00*x15230))+(((-1.0)*r02*x15229))+((x15214*x15226))+(((-1.0)*x15220)));
evalcond[3]=((((-1.0)*r20*x15221*x15229))+x15224+x15228+((r20*x15225))+((r22*x15233))+((r21*x15219))+((r21*x15215*x15222)));
evalcond[4]=((((-1.0)*sj3*x15223*x15229))+(((-1.0)*x15232))+((r20*x15215*x15219))+x15218+((r20*x15222))+(((-1.0)*r22*sj3*x15230))+((r21*x15221)));
evalcond[5]=(((r02*x15233))+((r00*x15225))+(((-1.0)*r00*x15221*x15229))+((r01*x15219))+((cj0*x15218))+((r01*x15215*x15222))+(((-1.0)*cj1*cj2*x15227)));
evalcond[6]=(((r11*x15219))+((x15216*x15231))+((r10*x15225))+((r12*x15233))+((sj0*x15218))+(((-1.0)*cj3*x15217*x15229))+(((-1.0)*cj1*cj2*x15220)));
evalcond[7]=(((r00*x15222))+(((-1.0)*x15227*x15228))+(((-1.0)*r02*sj3*x15230))+((r00*x15215*x15219))+(((-1.0)*x15224*x15227))+(((-1.0)*r01*x15225*x15229))+((r01*x15221)));
evalcond[8]=((((-1.0)*x15220*x15224))+(((-1.0)*x15220*x15228))+(((-1.0)*r12*sj3*x15230))+((sj3*x15215*x15217))+((r10*x15222))+(((-1.0)*sj3*x15216*x15229))+((r11*x15221)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15234=((1.0)*cj5);
CheckValue<IkReal> x15235=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x15234))+(((-1.0)*r00*sj5)))),-1);
if(!x15235.valid){
continue;
}
CheckValue<IkReal> x15236 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x15234)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15236.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15235.value)))+(x15236.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15237=IKsin(j4);
IkReal x15238=IKcos(j4);
IkReal x15239=(r11*sj5);
IkReal x15240=(cj5*r10);
IkReal x15241=(sj1*sj2);
IkReal x15242=(cj5*sj3);
IkReal x15243=((1.0)*sj0);
IkReal x15244=(cj3*cj5);
IkReal x15245=(cj3*sj5);
IkReal x15246=(r21*sj5);
IkReal x15247=(cj2*sj1);
IkReal x15248=(sj3*sj5);
IkReal x15249=(r01*sj5);
IkReal x15250=((1.0)*cj0);
IkReal x15251=(cj1*sj2);
IkReal x15252=((1.0)*x15238);
IkReal x15253=((1.0)*x15237);
IkReal x15254=(cj3*x15238);
IkReal x15255=((1.0)*cj1*cj2);
IkReal x15256=(cj3*x15237);
evalcond[0]=(((x15237*x15246))+(((-1.0)*cj5*r20*x15253))+(((-1.0)*r22*x15252)));
evalcond[1]=(((x15237*x15239))+cj0+(((-1.0)*r12*x15252))+(((-1.0)*x15240*x15253)));
evalcond[2]=(((x15237*x15249))+(((-1.0)*x15243))+(((-1.0)*cj5*r00*x15253))+(((-1.0)*r02*x15252)));
evalcond[3]=(x15247+x15251+((r22*x15256))+((r21*x15242))+((r21*x15238*x15245))+((r20*x15248))+(((-1.0)*r20*x15244*x15252)));
evalcond[4]=((((-1.0)*x15255))+((r20*x15238*x15242))+x15241+((r21*x15244))+(((-1.0)*sj3*x15246*x15252))+(((-1.0)*r22*sj3*x15253))+((r20*x15245)));
evalcond[5]=(((r01*x15242))+((r00*x15248))+((cj0*x15241))+(((-1.0)*cj1*cj2*x15250))+((r01*x15238*x15245))+(((-1.0)*r00*x15244*x15252))+((r02*x15256)));
evalcond[6]=((((-1.0)*cj1*cj2*x15243))+(((-1.0)*cj3*x15240*x15252))+((r10*x15248))+((sj0*x15241))+((x15239*x15254))+((r11*x15242))+((r12*x15256)));
evalcond[7]=(((r01*x15244))+((r00*x15245))+((r00*x15238*x15242))+(((-1.0)*x15250*x15251))+(((-1.0)*r01*x15248*x15252))+(((-1.0)*x15247*x15250))+(((-1.0)*r02*sj3*x15253)));
evalcond[8]=((((-1.0)*x15243*x15251))+(((-1.0)*r12*sj3*x15253))+((sj3*x15238*x15240))+((r10*x15245))+(((-1.0)*sj3*x15239*x15252))+((r11*x15244))+(((-1.0)*x15243*x15247)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15257=cj5*cj5;
IkReal x15258=r21*r21;
IkReal x15259=r20*r20;
IkReal x15260=(r20*r21);
IkReal x15261=((1.0)*cj3);
IkReal x15262=((1.0)*cj5);
IkReal x15263=(cj1*sj2);
IkReal x15264=(cj5*sj5);
IkReal x15265=(sj3*sj5);
IkReal x15266=(cj2*sj1);
IkReal x15267=(r21*sj5);
CheckValue<IkReal> x15268 = IKatan2WithCheck(IkReal((((cj5*r21*r22*sj3))+((r20*r22*x15265))+((r22*x15266))+((r22*x15263)))),IkReal((((x15263*x15267))+((sj3*x15258*x15264))+((sj3*x15260))+(((-1.0)*r20*x15262*x15263))+(((-1.0)*r20*x15262*x15266))+(((-2.0)*sj3*x15257*x15260))+(((-1.0)*x15259*x15262*x15265))+((x15266*x15267)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15268.valid){
continue;
}
CheckValue<IkReal> x15269=IKPowWithIntegerCheck(IKsign(((((-1.0)*x15257*x15259*x15261))+((cj3*x15257*x15258))+(((-1.0)*x15261*(r22*r22)))+(((-1.0)*x15258*x15261))+(((2.0)*cj3*x15260*x15264)))),-1);
if(!x15269.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15268.value)+(((1.5707963267949)*(x15269.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x15270=IKsin(j4);
IkReal x15271=IKcos(j4);
IkReal x15272=(cj3*r21);
IkReal x15273=(r21*sj5);
IkReal x15274=(r20*sj5);
IkReal x15275=(cj5*r20);
IkReal x15276=((1.0)*x15271);
IkReal x15277=((1.0)*x15270);
evalcond[0]=(((x15270*x15273))+(((-1.0)*x15275*x15277))+(((-1.0)*r22*x15276)));
evalcond[1]=(((cj2*sj1))+((cj5*r21*sj3))+((cj3*r22*x15270))+((cj1*sj2))+((sj5*x15271*x15272))+(((-1.0)*cj3*x15275*x15276))+((sj3*x15274)));
evalcond[2]=(((sj3*x15271*x15275))+((cj5*x15272))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*sj3*x15277))+(((-1.0)*sj3*x15273*x15276))+((cj3*x15274)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x15278=(cj5*sj4);
IkReal x15279=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+(((-1.0)*r00*x15278))+((r01*x15279)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x15278))+(((-1.0)*r11*x15279))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+(((-1.0)*r00*x15278))+((r01*x15279))))+IKsqr((((r10*x15278))+(((-1.0)*r11*x15279))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+(((-1.0)*r00*x15278))+((r01*x15279))), (((r10*x15278))+(((-1.0)*r11*x15279))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x15280=IKcos(j0);
IkReal x15281=IKsin(j0);
IkReal x15282=(r02*sj4);
IkReal x15283=((0.1)*sj5);
IkReal x15284=((0.392)*sj1);
IkReal x15285=(cj5*r11);
IkReal x15286=((1.0)*sj3);
IkReal x15287=(r12*sj4);
IkReal x15288=((1.0)*cj3);
IkReal x15289=((1.0)*cj1);
IkReal x15290=(r11*sj5);
IkReal x15291=(cj5*r01);
IkReal x15292=((0.392)*cj2);
IkReal x15293=(r00*sj5);
IkReal x15294=((1.0)*cj2);
IkReal x15295=(r10*sj5);
IkReal x15296=((1.0)*cj4);
IkReal x15297=(sj2*x15281);
IkReal x15298=(cj4*cj5*r00);
IkReal x15299=(sj1*x15280);
IkReal x15300=(sj2*x15280);
IkReal x15301=(cj4*cj5*r10);
IkReal x15302=(cj4*r01*sj5);
IkReal x15303=(cj1*x15280);
IkReal x15304=(cj1*x15281);
IkReal x15305=((1.0)*cj5*sj4);
IkReal x15306=(sj1*x15281);
evalcond[0]=(x15280+(((-1.0)*r10*x15305))+(((-1.0)*r12*x15296))+((sj4*x15290)));
evalcond[1]=((((-1.0)*r00*x15305))+((r01*sj4*sj5))+(((-1.0)*r02*x15296))+(((-1.0)*x15281)));
evalcond[2]=(((sj2*x15299))+((cj3*x15282))+((sj3*x15293))+((sj3*x15291))+(((-1.0)*cj2*x15280*x15289))+(((-1.0)*x15288*x15298))+((cj3*x15302)));
evalcond[3]=(((cj3*cj4*x15290))+((cj3*x15287))+((sj3*x15295))+((sj1*x15297))+(((-1.0)*x15288*x15301))+(((-1.0)*cj2*x15281*x15289))+((sj3*x15285)));
evalcond[4]=((((-1.0)*x15294*x15299))+((sj3*x15298))+(((-1.0)*x15282*x15286))+(((-1.0)*x15286*x15302))+(((-1.0)*x15289*x15300))+((cj3*x15291))+((cj3*x15293)));
evalcond[5]=(((sj3*x15301))+((cj3*x15285))+(((-1.0)*cj4*x15286*x15290))+(((-1.0)*x15289*x15297))+(((-1.0)*x15286*x15287))+(((-1.0)*x15294*x15306))+((cj3*x15295)));
evalcond[6]=((((-0.1)*x15291))+((x15292*x15303))+(((0.425)*x15303))+(((-1.0)*px))+(((-0.134)*x15281))+(((-1.0)*r00*x15283))+(((1.4e-7)*x15299))+(((-1.0)*x15284*x15300)));
evalcond[7]=((((-1.0)*r10*x15283))+((x15292*x15304))+(((0.425)*x15304))+(((0.134)*x15280))+(((-1.0)*py))+(((-0.1)*x15285))+(((1.4e-7)*x15306))+(((-1.0)*x15284*x15297)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15307=cj5*cj5;
IkReal x15308=r21*r21;
IkReal x15309=r20*r20;
IkReal x15310=(r20*r21);
IkReal x15311=(sj1*sj2);
IkReal x15312=(r21*sj5);
IkReal x15313=(cj1*cj2);
IkReal x15314=(cj5*r20);
IkReal x15315=(cj5*sj5);
IkReal x15316=(cj3*r22);
IkReal x15317=(sj3*x15308);
CheckValue<IkReal> x15318=IKPowWithIntegerCheck(IKsign((((sj3*(r22*r22)))+(((-1.0)*x15307*x15317))+x15317+((sj3*x15307*x15309))+(((-2.0)*sj3*x15310*x15315)))),-1);
if(!x15318.valid){
continue;
}
CheckValue<IkReal> x15319 = IKatan2WithCheck(IkReal((((r20*sj5*x15316))+((r22*x15311))+((cj5*r21*x15316))+(((-1.0)*r22*x15313)))),IkReal((((cj3*x15308*x15315))+(((-1.0)*x15312*x15313))+((x15313*x15314))+(((-2.0)*cj3*x15307*x15310))+(((-1.0)*x15311*x15314))+(((-1.0)*cj3*x15309*x15315))+((x15311*x15312))+((cj3*x15310)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15319.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15318.value)))+(x15319.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x15320=IKsin(j4);
IkReal x15321=IKcos(j4);
IkReal x15322=(cj3*r21);
IkReal x15323=(r21*sj5);
IkReal x15324=(r20*sj5);
IkReal x15325=(cj5*r20);
IkReal x15326=((1.0)*x15321);
IkReal x15327=((1.0)*x15320);
evalcond[0]=(((x15320*x15323))+(((-1.0)*x15325*x15327))+(((-1.0)*r22*x15326)));
evalcond[1]=(((cj2*sj1))+((cj5*r21*sj3))+((cj1*sj2))+(((-1.0)*cj3*x15325*x15326))+((cj3*r22*x15320))+((sj5*x15321*x15322))+((sj3*x15324)));
evalcond[2]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((cj5*x15322))+((sj3*x15321*x15325))+(((-1.0)*r22*sj3*x15327))+((cj3*x15324))+(((-1.0)*sj3*x15323*x15326)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x15328=(cj5*sj4);
IkReal x15329=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+(((-1.0)*r00*x15328))+((r01*x15329)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x15329))+((r10*x15328))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+(((-1.0)*r00*x15328))+((r01*x15329))))+IKsqr(((((-1.0)*r11*x15329))+((r10*x15328))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+(((-1.0)*r00*x15328))+((r01*x15329))), ((((-1.0)*r11*x15329))+((r10*x15328))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x15330=IKcos(j0);
IkReal x15331=IKsin(j0);
IkReal x15332=(r02*sj4);
IkReal x15333=((0.1)*sj5);
IkReal x15334=((0.392)*sj1);
IkReal x15335=(cj5*r11);
IkReal x15336=((1.0)*sj3);
IkReal x15337=(r12*sj4);
IkReal x15338=((1.0)*cj3);
IkReal x15339=((1.0)*cj1);
IkReal x15340=(r11*sj5);
IkReal x15341=(cj5*r01);
IkReal x15342=((0.392)*cj2);
IkReal x15343=(r00*sj5);
IkReal x15344=((1.0)*cj2);
IkReal x15345=(r10*sj5);
IkReal x15346=((1.0)*cj4);
IkReal x15347=(sj2*x15331);
IkReal x15348=(cj4*cj5*r00);
IkReal x15349=(sj1*x15330);
IkReal x15350=(sj2*x15330);
IkReal x15351=(cj4*cj5*r10);
IkReal x15352=(cj4*r01*sj5);
IkReal x15353=(cj1*x15330);
IkReal x15354=(cj1*x15331);
IkReal x15355=((1.0)*cj5*sj4);
IkReal x15356=(sj1*x15331);
evalcond[0]=((((-1.0)*r10*x15355))+(((-1.0)*r12*x15346))+((sj4*x15340))+x15330);
evalcond[1]=((((-1.0)*x15331))+((r01*sj4*sj5))+(((-1.0)*r02*x15346))+(((-1.0)*r00*x15355)));
evalcond[2]=((((-1.0)*cj2*x15330*x15339))+((cj3*x15332))+((cj3*x15352))+(((-1.0)*x15338*x15348))+((sj3*x15341))+((sj3*x15343))+((sj2*x15349)));
evalcond[3]=(((cj3*x15337))+((sj1*x15347))+((sj3*x15335))+(((-1.0)*x15338*x15351))+((cj3*cj4*x15340))+((sj3*x15345))+(((-1.0)*cj2*x15331*x15339)));
evalcond[4]=(((cj3*x15343))+((cj3*x15341))+(((-1.0)*x15332*x15336))+(((-1.0)*x15339*x15350))+(((-1.0)*x15336*x15352))+((sj3*x15348))+(((-1.0)*x15344*x15349)));
evalcond[5]=((((-1.0)*x15344*x15356))+((cj3*x15335))+((cj3*x15345))+(((-1.0)*cj4*x15336*x15340))+(((-1.0)*x15339*x15347))+((sj3*x15351))+(((-1.0)*x15336*x15337)));
evalcond[6]=(((x15342*x15353))+(((-0.1)*x15341))+(((-1.0)*px))+(((-1.0)*r00*x15333))+(((-0.134)*x15331))+(((0.425)*x15353))+(((-1.0)*x15334*x15350))+(((1.4e-7)*x15349)));
evalcond[7]=((((-0.1)*x15335))+(((1.4e-7)*x15356))+(((0.134)*x15330))+((x15342*x15354))+(((-1.0)*py))+(((0.425)*x15354))+(((-1.0)*r10*x15333))+(((-1.0)*x15334*x15347)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}
}
}
// [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1), (3, 0), (3, 1)] (original are [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1)])
static inline bool checkconsistency8(const IkReal* Breal)
{
    IkReal norm = 0.1;
    for(int i = 0; i < 7; ++i) {
        norm += IKabs(Breal[i]);
    }
    // HACK should be 1e-5*norm
    IkReal tol = 1e-2*norm; // have to increase the threshold since many computations are involved
    return IKabs(Breal[0]*Breal[1]-Breal[2]) < tol && IKabs(Breal[1]*Breal[1]-Breal[3]) < tol && IKabs(Breal[0]*Breal[3]-Breal[4]) < tol && IKabs(Breal[1]*Breal[3]-Breal[5]) < tol && IKabs(Breal[0]*Breal[5]-Breal[6]) < tol;
}
template<int D>
static inline bool matrixinverse(IkReal* A)
{
    int n = D;
    int info;
    IkReal IKFAST_ALIGNED16(work[D*D*(D-1)]);
    int ipiv[D];
    dgetrf_(&n, &n, A, &n, &ipiv[0], &info);
    if( info != 0 ) {
        return false;
    }
    int worksize=D*D*(D-1);
    dgetri_(&n, A, &n, &ipiv[0], &work[0], &worksize, &info);
    return info==0;
}

/// \brief Solve the det Ax^2+Bx+C = 0 problem using the Manocha and Canny method (1994)
///
/// matcoeffs is of length 54*3, for 3 matrices
static inline void solvedialyticpoly8qep(const IkReal* matcoeffs, IkReal* rawroots, int& numroots)
{
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    IkReal IKFAST_ALIGNED16(M[16*16]) = {0};
    IkReal IKFAST_ALIGNED16(A[8*8]);
    IkReal IKFAST_ALIGNED16(work[16*16*15]);
    int ipiv[8];
    int info, coeffindex;
    const int worksize=16*16*15;
    const int matrixdim = 8;
    const int matrixdim2 = 16;
    numroots = 0;
    // first setup M = [0 I; -C -B] and A
    coeffindex = 0;
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = matcoeffs[coeffindex++];
        }
        for(int k = 0; k < 2; ++k) {
            A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
        }
    }
    const IkReal lfpossibilities[4][4] = {{1,-1,1,1},{1,0,-2,1},{1,1,2,0},{1,-1,4,1}};
    int lfindex = -1;
    bool bsingular = true;
    do {
        dgetrf_(&matrixdim,&matrixdim,A,&matrixdim,&ipiv[0],&info);
        if( info == 0 ) {
            bsingular = false;
            for(int j = 0; j < matrixdim; ++j) {
                if( IKabs(A[j*matrixdim+j]) < 100*tol ) {
                    bsingular = true;
                    break;
                }
            }
            if( !bsingular ) {
                break;
            }
        }
        if( lfindex == 3 ) {
            break;
        }
        // transform by the linear functional
        lfindex++;
        const IkReal* lf = lfpossibilities[lfindex];
        // have to reinitialize A
        coeffindex = 0;
        for(int j = 0; j < 4; ++j) {
            for(int k = 0; k < 6; ++k) {
                IkReal a = matcoeffs[coeffindex+48], b = matcoeffs[coeffindex+24], c = matcoeffs[coeffindex];
                A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = lf[0]*lf[0]*a+lf[0]*lf[2]*b+lf[2]*lf[2]*c;
                M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -(lf[1]*lf[1]*a + lf[1]*lf[3]*b + lf[3]*lf[3]*c);
                M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -(2*lf[0]*lf[1]*a + (lf[0]*lf[3]+lf[1]*lf[2])*b + 2*lf[2]*lf[3]*c);
                coeffindex++;
            }
            for(int k = 0; k < 2; ++k) {
                A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
            }
        }
    } while(lfindex<4);

    if( bsingular ) {
        return;
    }
    dgetrs_("No transpose", &matrixdim, &matrixdim2, A, &matrixdim, &ipiv[0], &M[matrixdim], &matrixdim2, &info);
    if( info != 0 ) {
        return;
    }

    // set identity in upper corner
    for(int j = 0; j < matrixdim; ++j) {
        M[matrixdim*2*matrixdim+j+matrixdim*2*j] = 1;
    }
    IkReal IKFAST_ALIGNED16(wr[16]);
    IkReal IKFAST_ALIGNED16(wi[16]);
    IkReal IKFAST_ALIGNED16(vr[16*16]);
    int one=1;
    dgeev_("N", "V", &matrixdim2, M, &matrixdim2, wr, wi,NULL, &one, vr, &matrixdim2, work, &worksize, &info);
    if( info != 0 ) {
        return;
    }
    IkReal Breal[matrixdim-1];
    for(int i = 0; i < matrixdim2; ++i) {
        // HACK should be tol*100
        if( IKabs(wi[i]) < 5e-5 ) {
            IkReal* ev = vr+matrixdim2*i;
            if( IKabs(wr[i]) > 1 ) {
                ev += matrixdim;
            }
            // consistency has to be checked!!
            if( IKabs(ev[0]) < tol ) {
                continue;
            }
            IkReal iconst = 1/ev[0];
            for(int j = 1; j < matrixdim; ++j) {
                Breal[j-1] = ev[j]*iconst;
            }
            if( checkconsistency8(Breal) ) {
                if( lfindex >= 0 ) {
                    const IkReal* lf = lfpossibilities[lfindex];
                    rawroots[numroots++] = (wr[i]*lf[0]+lf[1])/(wr[i]*lf[2]+lf[3]);
                }
                else {
                    rawroots[numroots++] = wr[i];
                }
                bool bsmall0=IKabs(ev[0]) > IKabs(ev[2]);
                bool bsmall1=IKabs(ev[0]) > IKabs(ev[1]);
                if( bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[2]/ev[0];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[3]/ev[1];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( !bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[6]/ev[4];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
                else if( !bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[7]/ev[5];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
            }
        }
    }
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - /home/simon/git/webots_ikfast_generator/import/UR5e.urdf (2395f09a19e1d3f3fbc4334ce231ed81)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000049"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
